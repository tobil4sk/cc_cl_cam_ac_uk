// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=unknown, use-js-string=true, version=6.0.1+6.0.1
//# 6 ".export.eobjs/jsoo/export.bc.runtime.js"
(function
  (Object){
   typeof globalThis !== "object"
   &&
    (this
      ? get()
      : (Object.defineProperty
         (Object.prototype, "_T_", {configurable: true, get: get}),
        _T_));
   function get(){
    var global = this || self;
    global.globalThis = global;
    delete Object.prototype._T_;
   }
  }
  (Object));
(function(globalThis){
   "use strict";
   function caml_sub_uint8_array_to_jsbytes(a, i, len){
    var f = String.fromCharCode;
    if(i === 0 && len <= 4096 && len === a.length) return f.apply(null, a);
    var s = "";
    for(; 0 < len; i += 1024, len -= 1024)
     s += f.apply(null, a.subarray(i, i + Math.min(len, 1024)));
    return s;
   }
   function caml_string_of_uint8_array(a){
    return caml_sub_uint8_array_to_jsbytes(a, 0, a.length);
   }
   function caml_ba_get_1(ba, i0){return ba.get(ba.offset(i0));}
   function BigStringReader(bs, i){this.s = bs; this.i = i;}
   BigStringReader.prototype =
    {read8u: function(){return caml_ba_get_1(this.s, this.i++);},
     read8s: function(){return caml_ba_get_1(this.s, this.i++) << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return caml_ba_get_1(s, i) << 8 | caml_ba_get_1(s, i + 1);
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return caml_ba_get_1(s, i) << 24 >> 16 | caml_ba_get_1(s, i + 1);
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (caml_ba_get_1(s, i) << 24 | caml_ba_get_1(s, i + 1) << 16
             | caml_ba_get_1(s, i + 2) << 8
             | caml_ba_get_1(s, i + 3))
             >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return caml_ba_get_1(s, i) << 24 | caml_ba_get_1(s, i + 1) << 16
             | caml_ba_get_1(s, i + 2) << 8
             | caml_ba_get_1(s, i + 3);
     },
     readstr:
     function(len){
      var i = this.i, offset = this.offset(i);
      this.i = i + len;
      return caml_string_of_uint8_array
              (this.s.data.subarray(offset, offset + len));
     },
     readuint8array:
     function(len){
      var i = this.i, offset = this.offset(i);
      this.i = i + len;
      return this.s.data.subarray(offset, offset + len);
     }};
   function caml_str_repeat(n, s){
    if(n === 0) return "";
    if(s.repeat) return s.repeat(n);
    var r = "", l = 0;
    for(;;){
     if(n & 1) r += s;
     n >>= 1;
     if(n === 0) return r;
     s += s;
     l++;
     if(l === 9) s.slice(0, 1);
    }
   }
   function caml_convert_string_to_bytes(s){
    if(s.t === 2)
     s.c += caml_str_repeat(s.l - s.c.length, "\0");
    else
     s.c = caml_sub_uint8_array_to_jsbytes(s.c, 0, s.c.length);
    s.t = 0;
   }
   function jsoo_is_ascii(s){
    if(s.length < 24){
     for(var i = 0; i < s.length; i++) if(s.charCodeAt(i) > 127) return false;
     return true;
    }
    else
     return ! /[^\x00-\x7f]/.test(s);
   }
   function caml_utf16_of_utf8(s){
    for(var b = "", t = "", c, c1, c2, v, i = 0, l = s.length; i < l; i++){
     c1 = s.charCodeAt(i);
     if(c1 < 0x80){
      for(var j = i + 1; j < l && (c1 = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.slice(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j === l) break;
      i = j;
     }
     v = 1;
     if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) === 128){
      c = c2 + (c1 << 6);
      if(c1 < 0xe0){
       v = c - 0x3080;
       if(v < 0x80) v = 1;
      }
      else{
       v = 2;
       if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) === 128){
        c = c2 + (c << 6);
        if(c1 < 0xf0){
         v = c - 0xe2080;
         if(v < 0x800 || v >= 0xd7ff && v < 0xe000) v = 2;
        }
        else{
         v = 3;
         if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) === 128 && c1 < 0xf5){
          v = c2 - 0x3c82080 + (c << 6);
          if(v < 0x10000 || v > 0x10ffff) v = 3;
         }
        }
       }
      }
     }
     if(v < 4){
      i -= v;
      t += "\ufffd";
     }
     else if(v > 0xffff)
      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3ff));
     else
      t += String.fromCharCode(v);
     if(t.length > 1024){t.slice(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function MlBytes(tag, contents, length){
    this.t = tag;
    this.c = contents;
    this.l = length;
   }
   MlBytes.prototype.toString =
    function(){
     switch(this.t){
       case 9:
       case 8:
        return this.c;
       case 4:
       case 2:
        caml_convert_string_to_bytes(this);
       case 0:
        if(jsoo_is_ascii(this.c)) this.t = 9; else this.t = 8; return this.c;
     }
    };
   MlBytes.prototype.toUtf16 =
    function(){
     var r = this.toString();
     if(this.t === 9) return r;
     return caml_utf16_of_utf8(r);
    };
   MlBytes.prototype.slice =
    function(){
     var content = this.t === 4 ? this.c.slice() : this.c;
     return new MlBytes(this.t, content, this.l);
    };
   function MlChanid(id){this.id = id;}
   var jsoo_static_env = {};
   function jsoo_sys_getenv(n){
    if(jsoo_static_env[n]) return jsoo_static_env[n];
    var process = globalThis.process;
    if(process && process.env && process.env[n] !== undefined)
     return process.env[n];
    if(globalThis.jsoo_env && typeof globalThis.jsoo_env[n] === "string")
     return globalThis.jsoo_env[n];
   }
   var caml_record_backtrace_env_flag = 0;
   (function(){
      var r = jsoo_sys_getenv("OCAMLRUNPARAM");
      if(r !== undefined){
       var l = r.split(",");
       for(var i = 0; i < l.length; i++)
        if(l[i] === "b"){
         caml_record_backtrace_env_flag = 1;
         break;
        }
        else if(l[i].startsWith("b="))
         caml_record_backtrace_env_flag = + l[i].slice(2);
        else
         continue;
      }
     }
     ());
   var
    caml_record_backtrace_runtime_flag = caml_record_backtrace_env_flag,
    caml_global_data = [0];
   function caml_exn_with_js_backtrace(exn, force){
    if(! exn.js_error || force || exn[0] === 248)
     exn.js_error = new globalThis.Error("Js exception containing backtrace");
    return exn;
   }
   function caml_maybe_attach_backtrace(exn, force){
    return caml_record_backtrace_env_flag
            && caml_record_backtrace_runtime_flag
            ? caml_exn_with_js_backtrace(exn, force)
            : exn;
   }
   function caml_raise_with_arg(tag, arg){
    throw caml_maybe_attach_backtrace([0, tag, arg]);
   }
   function caml_utf8_of_utf16(s){
    for(var b = "", t = b, c, d, i = 0, l = s.length; i < l; i++){
     c = s.charCodeAt(i);
     if(c < 0x80){
      for(var j = i + 1; j < l && (c = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.slice(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j === l) break;
      i = j;
     }
     if(c < 0x800){
      t += String.fromCharCode(0xc0 | c >> 6);
      t += String.fromCharCode(0x80 | c & 0x3f);
     }
     else if(c < 0xd800 || c >= 0xdfff)
      t +=
       String.fromCharCode
        (0xe0 | c >> 12, 0x80 | c >> 6 & 0x3f, 0x80 | c & 0x3f);
     else if
      (c >= 0xdbff || i + 1 === l || (d = s.charCodeAt(i + 1)) < 0xdc00
       || d > 0xdfff)
      t += "\xef\xbf\xbd";
     else{
      i++;
      c = (c << 10) + d - 0x35fdc00;
      t +=
       String.fromCharCode
        (0xf0 | c >> 18,
         0x80 | c >> 12 & 0x3f,
         0x80 | c >> 6 & 0x3f,
         0x80 | c & 0x3f);
     }
     if(t.length > 1024){t.slice(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function caml_string_of_jsbytes(x){return x;}
   function caml_string_of_jsstring(s){
    return jsoo_is_ascii(s)
            ? caml_string_of_jsbytes(s)
            : caml_string_of_jsbytes(caml_utf8_of_utf16(s));
   }
   function caml_raise_sys_error(msg){
    caml_raise_with_arg
     (caml_global_data.Sys_error, caml_string_of_jsstring(msg));
   }
   function caml_raise_with_args(tag, args){
    throw caml_maybe_attach_backtrace([0, tag].concat(args));
   }
   var
    unix_error =
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
   function make_unix_err_args(code, syscall, path, errno){
    var variant = unix_error.indexOf(code);
    if(variant < 0){if(errno == null) errno = - 9999; variant = [0, - errno];}
    var
     args =
       [variant,
        caml_string_of_jsstring(syscall || ""),
        caml_string_of_jsstring(path || "")];
    return args;
   }
   var caml_named_values = {};
   function caml_named_value(nm){return caml_named_values[nm];}
   function caml_raise_system_error(raise_unix, code, cmd, msg, path){
    var unix_error = caml_named_value("Unix.Unix_error");
    if(raise_unix && unix_error)
     caml_raise_with_args(unix_error, make_unix_err_args(code, cmd, path));
    else{
     var msg = code + ": " + msg + ", " + cmd;
     if(path !== undefined) msg += " '" + path + "'";
     caml_raise_sys_error(msg);
    }
   }
   function caml_is_ml_bytes(s){return s instanceof MlBytes;}
   function caml_is_ml_string(s){
    return typeof s === "string" && ! /[^\x00-\xff]/.test(s);
   }
   function caml_bytes_of_array(a){
    if(! (a instanceof Uint8Array)) a = new Uint8Array(a);
    return new MlBytes(4, a, a.length);
   }
   function caml_bytes_of_jsbytes(s){return new MlBytes(0, s, s.length);}
   function caml_jsbytes_of_string(x){return x;}
   function caml_bytes_of_string(s){
    return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));
   }
   function caml_raise_no_such_file(name, raise_unix){
    caml_raise_system_error
     (raise_unix, "ENOENT", "no such file or directory", name);
   }
   function caml_convert_bytes_to_array(s){
    var a = new Uint8Array(s.l), b = s.c, l = b.length, i = 0;
    for(; i < l; i++) a[i] = b.charCodeAt(i);
    for(l = s.l; i < l; i++) a[i] = 0;
    s.c = a;
    s.t = 4;
    return a;
   }
   function caml_uint8_array_of_bytes(s){
    if(s.t !== 4) caml_convert_bytes_to_array(s);
    return s.c;
   }
   function caml_bytes_of_uint8_array(a){return new MlBytes(4, a, a.length);}
   function caml_raise_with_string(tag, msg){
    caml_raise_with_arg(tag, caml_string_of_jsbytes(msg));
   }
   function caml_invalid_argument(msg){
    caml_raise_with_string(caml_global_data.Invalid_argument, msg);
   }
   function caml_create_bytes(len){
    if(len < 0) caml_invalid_argument("Bytes.create");
    return new MlBytes(len ? 2 : 9, "", len);
   }
   function caml_ml_bytes_length(s){return s.l;}
   function caml_blit_bytes(s1, i1, s2, i2, len){
    if(len === 0) return 0;
    if(i2 === 0 && (len >= s2.l || s2.t === 2 && len >= s2.c.length)){
     s2.c =
      s1.t === 4
       ? caml_sub_uint8_array_to_jsbytes(s1.c, i1, len)
       : i1 === 0 && s1.c.length === len ? s1.c : s1.c.slice(i1, i1 + len);
     s2.t = s2.c.length === s2.l ? 0 : 2;
    }
    else if(s2.t === 2 && i2 === s2.c.length){
     s2.c +=
      s1.t === 4
       ? caml_sub_uint8_array_to_jsbytes(s1.c, i1, len)
       : i1 === 0 && s1.c.length === len ? s1.c : s1.c.slice(i1, i1 + len);
     s2.t = s2.c.length === s2.l ? 0 : 2;
    }
    else{
     if(s2.t !== 4) caml_convert_bytes_to_array(s2);
     var c1 = s1.c, c2 = s2.c;
     if(s1.t === 4)
      if(i2 <= i1)
       for(var i = 0; i < len; i++) c2[i2 + i] = c1[i1 + i];
      else
       for(var i = len - 1; i >= 0; i--) c2[i2 + i] = c1[i1 + i];
     else{
      var l = Math.min(len, c1.length - i1);
      for(var i = 0; i < l; i++) c2[i2 + i] = c1.charCodeAt(i1 + i);
      for(; i < len; i++) c2[i2 + i] = 0;
     }
    }
    return 0;
   }
   function MlFile(){}
   function MlFakeFile(content){this.data = content;}
   MlFakeFile.prototype = new MlFile();
   MlFakeFile.prototype.constructor = MlFakeFile;
   MlFakeFile.prototype.truncate =
    function(len){
     var old = this.data;
     this.data = caml_create_bytes(len | 0);
     caml_blit_bytes(old, 0, this.data, 0, len);
    };
   MlFakeFile.prototype.length =
    function(){return caml_ml_bytes_length(this.data);};
   MlFakeFile.prototype.write =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen){
      var new_str = caml_create_bytes(offset + len), old_data = this.data;
      this.data = new_str;
      caml_blit_bytes(old_data, 0, this.data, 0, clen);
     }
     caml_blit_bytes
      (caml_bytes_of_uint8_array(buf), pos, this.data, offset, len);
     return len;
    };
   MlFakeFile.prototype.read =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen) len = clen - offset;
     if(len){
      var data = caml_create_bytes(len | 0);
      caml_blit_bytes(this.data, offset, data, 0, len);
      buf.set(caml_uint8_array_of_bytes(data), pos);
     }
     return len;
    };
   function MlFakeFd(name, file, flags){
    this.file = file;
    this.name = name;
    this.flags = flags;
    this.offset = 0;
    this.seeked = false;
   }
   MlFakeFd.prototype.err_closed =
    function(cmd, raise_unix){
     caml_raise_system_error(raise_unix, "EBADF", cmd, "bad file descriptor");
    };
   MlFakeFd.prototype.length =
    function(){
     if(this.file) return this.file.length();
     this.err_closed("length");
    };
   MlFakeFd.prototype.truncate =
    function(len, raise_unix){
     if(this.file){
      if(! (this.flags.wronly || this.flags.rdwr))
       caml_raise_system_error
        (raise_unix, "EINVAL", "truncate", "invalid argument");
      return this.file.truncate(len);
     }
     this.err_closed("truncate", raise_unix);
    };
   MlFakeFd.prototype.write =
    function(buf, pos, len, raise_unix){
     if(this.file && (this.flags.wronly || this.flags.rdwr)){
      var offset = this.offset;
      this.offset += len;
      return this.file.write(offset, buf, pos, len);
     }
     this.err_closed("write", raise_unix);
    };
   MlFakeFd.prototype.read =
    function(buf, pos, len, raise_unix){
     if(this.file && ! this.flags.wronly){
      var offset = this.offset;
      this.offset += len;
      return this.file.read(offset, buf, pos, len);
     }
     this.err_closed("read", raise_unix);
    };
   MlFakeFd.prototype.seek =
    function(offset, whence, raise_unix){
     switch(whence){
       case 0: break;
       case 1:
        offset += this.offset; break;
       case 2:
        offset += this.length(); break;
     }
     if(offset < 0)
      caml_raise_system_error
       (raise_unix, "EINVAL", "lseek", "invalid argument");
     this.offset = offset;
     this.seeked = true;
    };
   MlFakeFd.prototype.close =
    function(){
     if(! this.file) this.err_closed("close");
     this.file = undefined;
    };
   MlFakeFd.prototype.check_stream_semantics =
    function(cmd){if(! this.file) return this.err_closed(cmd, 1);};
   function MlFakeDevice(root, f){
    this.content = {};
    this.root = root;
    this.lookupFun = f;
   }
   MlFakeDevice.prototype.nm = function(name){return this.root + name;};
   MlFakeDevice.prototype.create_dir_if_needed =
    function(name){
     var comp = name.split("/"), res = "";
     for(var i = 0; i < comp.length - 1; i++){
      res += comp[i] + "/";
      if(this.content[res]) continue;
      this.content[res] = Symbol("directory");
     }
    };
   MlFakeDevice.prototype.slash =
    function(name){return /\/$/.test(name) ? name : name + "/";};
   MlFakeDevice.prototype.lookup =
    function(name){
     if(! this.content[name] && this.lookupFun){
      var
       res =
         this.lookupFun
          (caml_string_of_jsstring(this.root), caml_string_of_jsstring(name));
      if(res !== 0){
       this.create_dir_if_needed(name);
       this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]));
      }
     }
    };
   MlFakeDevice.prototype.exists =
    function(name, do_not_lookup){
     if(name === "") return 1;
     var name_slash = this.slash(name);
     if(this.content[name_slash]) return 1;
     if(! do_not_lookup) this.lookup(name);
     return this.content[name] ? 1 : 0;
    };
   MlFakeDevice.prototype.isFile =
    function(name){return this.exists(name) && ! this.is_dir(name) ? 1 : 0;};
   MlFakeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     if(this.exists(name))
      caml_raise_system_error
       (raise_unix, "EEXIST", "mkdir", "file already exists", this.nm(name));
     var parent = /^(.*)\/[^/]+/.exec(name);
     parent = parent && parent[1] || "";
     if(! this.exists(parent))
      caml_raise_system_error
       (raise_unix,
        "ENOENT",
        "mkdir",
        "no such file or directory",
        this.nm(name));
     if(! this.is_dir(parent))
      caml_raise_system_error
       (raise_unix, "ENOTDIR", "mkdir", "not a directory", this.nm(name));
     this.create_dir_if_needed(this.slash(name));
    };
   MlFakeDevice.prototype.rmdir =
    function(name, raise_unix){
     var
      name_slash = name === "" ? "" : this.slash(name),
      r = new RegExp("^" + name_slash + "([^/]+)");
     if(! this.exists(name))
      caml_raise_system_error
       (raise_unix,
        "ENOENT",
        "rmdir",
        "no such file or directory",
        this.nm(name));
     if(! this.is_dir(name))
      caml_raise_system_error
       (raise_unix, "ENOTDIR", "rmdir", "not a directory", this.nm(name));
     for(var n in this.content)
      if(n.match(r))
       caml_raise_system_error
        (raise_unix,
         "ENOTEMPTY",
         "rmdir",
         "directory not empty",
         this.nm(name));
     delete this.content[name_slash];
    };
   MlFakeDevice.prototype.readdir =
    function(name){
     var name_slash = name === "" ? "" : this.slash(name);
     if(! this.exists(name))
      caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name)) caml_raise_sys_error(name + ": Not a directory");
     var r = new RegExp("^" + name_slash + "([^/]+)"), seen = {}, a = [];
     for(var n in this.content){
      var m = n.match(r);
      if(m && ! seen[m[1]]){seen[m[1]] = true; a.push(m[1]);}
     }
     return a;
    };
   MlFakeDevice.prototype.opendir =
    function(name, raise_unix){
     var a = this.readdir(name), c = false, i = 0;
     return {readSync:
             function(){
              if(c)
               caml_raise_system_error
                (raise_unix, "EBADF", "readdir", "bad file descriptor");
              if(i === a.length) return null;
              var entry = a[i];
              i++;
              return {name: entry};
             },
             closeSync:
             function(){
              if(c)
               caml_raise_system_error
                (raise_unix, "EBADF", "readdir", "bad file descriptor");
              c = true;
              a = [];
             }};
    };
   MlFakeDevice.prototype.is_dir =
    function(name){
     if(name === "") return true;
     var name_slash = this.slash(name);
     return this.content[name_slash] ? 1 : 0;
    };
   MlFakeDevice.prototype.unlink =
    function(name, raise_unix){
     if(! this.exists(name, true))
      caml_raise_system_error
       (raise_unix, "ENOENT", "unlink", "no such file or directory", name);
     delete this.content[name];
     return 0;
    };
   MlFakeDevice.prototype.open =
    function(name, f, _perms, raise_unix){
     var file;
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_system_error
        (raise_unix,
         "EISDIR",
         "open",
         "illegal operation on a directory",
         this.nm(name));
      if(f.create && f.excl)
       caml_raise_system_error
        (raise_unix, "EEXIST", "open", "file already exists", this.nm(name));
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name), raise_unix);
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.truncate =
    function(name, len, raise_unix){
     var file;
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_system_error
        (raise_unix,
         "EISDIR",
         "open",
         "illegal operation on a directory",
         this.nm(name));
      file = this.content[name];
      file.truncate(len);
     }
     else
      caml_raise_no_such_file(this.nm(name), raise_unix);
    };
   MlFakeDevice.prototype.register =
    function(name, content){
     var file;
     if(this.content[name])
      caml_raise_sys_error(this.nm(name) + " : file already exists");
     if(caml_is_ml_bytes(content)) file = new MlFakeFile(content);
     if(caml_is_ml_string(content))
      file = new MlFakeFile(caml_bytes_of_string(content));
     else if(Array.isArray(content))
      file = new MlFakeFile(caml_bytes_of_array(content));
     else if(typeof content === "string")
      file = new MlFakeFile(caml_bytes_of_jsbytes(content));
     else if(content.toString){
      var
       bytes =
         caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
      file = new MlFakeFile(bytes);
     }
     if(file){
      this.create_dir_if_needed(name);
      this.content[name] = file;
     }
     else
      caml_raise_sys_error
       (this.nm(name) + " : registering file with invalid content type");
    };
   MlFakeDevice.prototype.constructor = MlFakeDevice;
   function MlFakeFd_out(fd, flags){
    MlFakeFile.call(this, caml_create_bytes(0));
    this.log = function(s){return 0;};
    if(fd === 1 && typeof console.log === "function")
     this.log = console.log;
    else if(fd === 2 && typeof console.error === "function")
     this.log = console.error;
    else if(typeof console.log === "function") this.log = console.log;
    this.flags = flags;
   }
   MlFakeFd_out.prototype.length = function(){return 0;};
   MlFakeFd_out.prototype.truncate =
    function(len, raise_unix){
     caml_raise_system_error
      (raise_unix, "EINVAL", "ftruncate", "invalid argument");
    };
   MlFakeFd_out.prototype.write =
    function(buf, pos, len, raise_unix){
     var written = len;
     if(this.log){
      if
       (len > 0 && pos >= 0 && pos + len <= buf.length
        && buf[pos + len - 1] === 10)
       len--;
      var src = caml_create_bytes(len);
      caml_blit_bytes(caml_bytes_of_uint8_array(buf), pos, src, 0, len);
      this.log(src.toUtf16());
      return written;
     }
     caml_raise_system_error
      (raise_unix, "EBADF", "write", "bad file descriptor");
    };
   MlFakeFd_out.prototype.read =
    function(buf, pos, len, raise_unix){
     caml_raise_system_error
      (raise_unix, "EBADF", "read", "bad file descriptor");
    };
   MlFakeFd_out.prototype.seek =
    function(len, whence, raise_unix){
     caml_raise_system_error(raise_unix, "ESPIPE", "lseek", "illegal seek");
    };
   MlFakeFd_out.prototype.close = function(){this.log = undefined;};
   MlFakeFd_out.prototype.check_stream_semantics = function(cmd){};
   var caml_int64_offset = Math.pow(2, - 24);
   function caml_raise_constant(tag){throw tag;}
   function caml_raise_zero_divide(){
    caml_raise_constant(caml_global_data.Division_by_zero);
   }
   function MlInt64(lo, mi, hi){
    this.lo = lo & 0xffffff;
    this.mi = mi & 0xffffff;
    this.hi = hi & 0xffff;
   }
   MlInt64.prototype.caml_custom = "_j";
   MlInt64.prototype.copy =
    function(){return new MlInt64(this.lo, this.mi, this.hi);};
   MlInt64.prototype.ucompare =
    function(x){
     if(this.hi > x.hi) return 1;
     if(this.hi < x.hi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.compare =
    function(x){
     var hi = this.hi << 16, xhi = x.hi << 16;
     if(hi > xhi) return 1;
     if(hi < xhi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.neg =
    function(){
     var
      lo = - this.lo,
      mi = - this.mi + (lo >> 24),
      hi = - this.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.add =
    function(x){
     var
      lo = this.lo + x.lo,
      mi = this.mi + x.mi + (lo >> 24),
      hi = this.hi + x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.sub =
    function(x){
     var
      lo = this.lo - x.lo,
      mi = this.mi - x.mi + (lo >> 24),
      hi = this.hi - x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.mul =
    function(x){
     var
      lo = this.lo * x.lo,
      mi = (lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
      hi =
        (mi * caml_int64_offset | 0) + this.hi * x.lo + this.mi * x.mi
        + this.lo * x.hi;
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.isZero =
    function(){return (this.lo | this.mi | this.hi) === 0;};
   MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0;};
   MlInt64.prototype.and =
    function(x){
     return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);
    };
   MlInt64.prototype.or =
    function(x){
     return new MlInt64(this.lo | x.lo, this.mi | x.mi, this.hi | x.hi);
    };
   MlInt64.prototype.xor =
    function(x){
     return new MlInt64(this.lo ^ x.lo, this.mi ^ x.mi, this.hi ^ x.hi);
    };
   MlInt64.prototype.shift_left =
    function(s){
     s = s & 63;
     if(s === 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo << s,
               this.mi << s | this.lo >> 24 - s,
               this.hi << s | this.mi >> 24 - s);
     if(s < 48)
      return new
              MlInt64
              (0, this.lo << s - 24, this.mi << s - 24 | this.lo >> 48 - s);
     return new MlInt64(0, 0, this.lo << s - 48);
    };
   MlInt64.prototype.shift_right_unsigned =
    function(s){
     s = s & 63;
     if(s === 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | this.hi << 24 - s,
               this.hi >> s);
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s, this.hi >> s - 24, 0);
     return new MlInt64(this.hi >> s - 48, 0, 0);
    };
   MlInt64.prototype.shift_right =
    function(s){
     s = s & 63;
     if(s === 0) return this;
     var h = this.hi << 16 >> 16;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | h << 24 - s,
               this.hi << 16 >> s >>> 16);
     var sign = this.hi << 16 >> 31;
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s,
               this.hi << 16 >> s - 24 >> 16,
               sign & 0xffff);
     return new MlInt64(this.hi << 16 >> s - 32, sign, sign);
    };
   MlInt64.prototype.lsl1 =
    function(){
     this.hi = this.hi << 1 | this.mi >> 23;
     this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
     this.lo = this.lo << 1 & 0xffffff;
    };
   MlInt64.prototype.lsr1 =
    function(){
     this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
     this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
     this.hi = this.hi >>> 1;
    };
   MlInt64.prototype.udivmod =
    function(x){
     var
      offset = 0,
      modulus = this.copy(),
      divisor = x.copy(),
      quotient = new MlInt64(0, 0, 0);
     while(modulus.ucompare(divisor) > 0){offset++; divisor.lsl1();}
     while(offset >= 0){
      offset--;
      quotient.lsl1();
      if(modulus.ucompare(divisor) >= 0){
       quotient.lo++;
       modulus = modulus.sub(divisor);
      }
      divisor.lsr1();
     }
     return {quotient: quotient, modulus: modulus};
    };
   MlInt64.prototype.div =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi ^ y.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var q = x.udivmod(y).quotient;
     if(sign & 0x8000) q = q.neg();
     return q;
    };
   MlInt64.prototype.mod =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var r = x.udivmod(y).modulus;
     if(sign & 0x8000) r = r.neg();
     return r;
    };
   MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24;};
   MlInt64.prototype.toFloat =
    function(){
     return (this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)
            + this.lo;
    };
   MlInt64.prototype.toArray =
    function(){
     return [this.hi >> 8,
             this.hi & 0xff,
             this.mi >> 16,
             this.mi >> 8 & 0xff,
             this.mi & 0xff,
             this.lo >> 16,
             this.lo >> 8 & 0xff,
             this.lo & 0xff];
    };
   MlInt64.prototype.lo32 =
    function(){return this.lo | (this.mi & 0xff) << 24;};
   MlInt64.prototype.hi32 =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16;};
   function MlMutex(){this.locked = false;}
   function MlNat(x){
    this.data = new Int32Array(x);
    this.length = this.data.length + 2;
   }
   MlNat.prototype.caml_custom = "_nat";
   function caml_raise_nodejs_error(err, raise_unix, cmd){
    var unix_error = caml_named_value("Unix.Unix_error");
    if(raise_unix && unix_error){
     var
      args =
        make_unix_err_args(err.code, cmd || err.syscall, err.path, err.errno);
     caml_raise_with_args(unix_error, args);
    }
    else
     caml_raise_sys_error(err.toString());
   }
   function caml_int64_of_float(x){
    if(x < 0) x = Math.ceil(x);
    return new
            MlInt64
            (x & 0xffffff,
             Math.floor(x * caml_int64_offset) & 0xffffff,
             Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff);
   }
   function fs_node_stats_from_js(js_stats, large){
    var file_kind;
    if(js_stats.isFile())
     file_kind = 0;
    else if(js_stats.isDirectory())
     file_kind = 1;
    else if(js_stats.isCharacterDevice())
     file_kind = 2;
    else if(js_stats.isBlockDevice())
     file_kind = 3;
    else if(js_stats.isSymbolicLink())
     file_kind = 4;
    else if(js_stats.isFIFO())
     file_kind = 5;
    else if(js_stats.isSocket()) file_kind = 6;
    return [0,
            js_stats.dev,
            js_stats.ino | 0,
            file_kind,
            js_stats.mode,
            js_stats.nlink,
            js_stats.uid,
            js_stats.gid,
            js_stats.rdev,
            large ? caml_int64_of_float(js_stats.size) : js_stats.size | 0,
            js_stats.atimeMs / 1000,
            js_stats.mtimeMs / 1000,
            js_stats.ctimeMs / 1000];
   }
   function caml_ml_string_length(s){return s.length;}
   function caml_string_unsafe_get(s, i){return s.charCodeAt(i);}
   function caml_uint8_array_of_string(s){
    var l = caml_ml_string_length(s), a = new Uint8Array(l), i = 0;
    for(; i < l; i++) a[i] = caml_string_unsafe_get(s, i);
    return a;
   }
   function caml_bytes_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_bytes_unsafe_set(s, i, c){
    c &= 0xff;
    if(s.t !== 4){
     if(i === s.c.length){
      s.c += String.fromCharCode(c);
      if(i + 1 === s.l) s.t = 0;
      return 0;
     }
     caml_convert_bytes_to_array(s);
    }
    s.c[i] = c;
    return 0;
   }
   function caml_bytes_set(s, i, c){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_set(s, i, c);
   }
   function MlNodeFd(fd, flags){
    this.fs = require("node:fs");
    this.fd = fd;
    this.flags = flags;
    var stats = this.fs.fstatSync(fd);
    flags.noSeek =
     stats.isCharacterDevice() || stats.isFIFO() || stats.isSocket();
    this.offset = this.flags.append ? stats.size : 0;
    this.seeked = false;
   }
   MlNodeFd.prototype = new MlFile();
   MlNodeFd.prototype.constructor = MlNodeFd;
   MlNodeFd.prototype.truncate =
    function(len, raise_unix){
     try{
      this.fs.ftruncateSync(this.fd, len | 0);
      if(this.offset > len) this.offset = len;
     }
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   MlNodeFd.prototype.length =
    function(){
     try{return this.fs.fstatSync(this.fd).size;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.write =
    function(buf, buf_offset, len, raise_unix){
     try{
      if(this.flags.noSeek || ! this.seeked)
       var written = this.fs.writeSync(this.fd, buf, buf_offset, len);
      else
       var
        written =
          this.fs.writeSync(this.fd, buf, buf_offset, len, this.offset);
      this.offset += written;
     }
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
     return written;
    };
   MlNodeFd.prototype.read =
    function(a, buf_offset, len, raise_unix){
     try{
      if(this.flags.noSeek || ! this.seeked)
       var read = this.fs.readSync(this.fd, a, buf_offset, len);
      else
       var read = this.fs.readSync(this.fd, a, buf_offset, len, this.offset);
      this.offset += read;
      return read;
     }
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   MlNodeFd.prototype.seek =
    function(offset, whence, raise_unix){
     if(this.flags.noSeek)
      caml_raise_system_error(raise_unix, "ESPIPE", "lseek", "illegal seek");
     switch(whence){
       case 0: break;
       case 1:
        offset += this.offset; break;
       case 2:
        offset += this.length(); break;
     }
     if(offset < 0)
      caml_raise_system_error
       (raise_unix, "EINVAL", "lseek", "invalid argument");
     this.offset = offset;
     this.seeked = true;
     return this.offset;
    };
   MlNodeFd.prototype.stat =
    function(large){
     try{
      var js_stats = this.fs.fstatSync(this.fd);
      return fs_node_stats_from_js(js_stats, large);
     }
     catch(err){caml_raise_nodejs_error(err, 1);}
    };
   MlNodeFd.prototype.close =
    function(raise_unix){
     try{this.fs.closeSync(this.fd); return 0;}
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   MlNodeFd.prototype.check_stream_semantics =
    function(cmd){
     try{var js_stats = this.fs.fstatSync(this.fd);}
     catch(err){caml_raise_nodejs_error(err, 1, cmd);}
     if
      (!
       (js_stats.isFile() || js_stats.isCharacterDevice() || js_stats.isFIFO()
       || js_stats.isSocket()))
      caml_raise_system_error(1, "EINVAL", cmd, "invalid argument");
    };
   function MlNodeDevice(root){
    this.fs = require("node:fs");
    this.root = root;
   }
   MlNodeDevice.prototype.nm = function(name){return this.root + name;};
   MlNodeDevice.prototype.exists =
    function(name){
     try{return this.fs.existsSync(this.nm(name)) ? 1 : 0;}
     catch(err){return 0;}
    };
   MlNodeDevice.prototype.isFile =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isFile() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     try{this.fs.mkdirSync(this.nm(name), {mode: mode}); return 0;}
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rmdir =
    function(name, raise_unix){
     try{this.fs.rmdirSync(this.nm(name)); return 0;}
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readdir =
    function(name, raise_unix){
     try{return this.fs.readdirSync(this.nm(name));}
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.is_dir =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isDirectory() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.unlink =
    function(name, raise_unix){
     try{this.fs.unlinkSync(this.nm(name)); return 0;}
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.utimes =
    function(name, atime, mtime, raise_unix){
     try{
      if(atime === 0 && mtime === 0){
       atime = new Date().getTime() / 1000;
       mtime = atime;
      }
      this.fs.utimesSync(this.nm(name), atime, mtime);
      return 0;
     }
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.truncate =
    function(name, len, raise_unix){
     try{this.fs.truncateSync(this.nm(name), len | 0); return 0;}
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.open =
    function(name, f, perms, raise_unix){
     var consts = require("node:constants"), res = 0;
     for(var key in f)
      switch(key){
        case "rdonly":
         res |= consts.O_RDONLY; break;
        case "wronly":
         res |= consts.O_WRONLY; break;
        case "rdwr":
         res |= consts.O_RDWR; break;
        case "append":
         res |= consts.O_APPEND; break;
        case "create":
         res |= consts.O_CREAT; break;
        case "truncate":
         res |= consts.O_TRUNC; break;
        case "excl":
         res |= consts.O_EXCL; break;
        case "binary":
         res |= consts.O_BINARY; break;
        case "text":
         res |= consts.O_TEXT; break;
        case "nonblock":
         res |= consts.O_NONBLOCK; break;
        case "noctty":
         res |= consts.O_NOCTTY; break;
        case "dsync":
         res |= consts.O_DSYNC; break;
        case "sync":
         res |= consts.O_SYNC; break;
      }
     try{
      var fd = this.fs.openSync(this.nm(name), res, perms);
      return new MlNodeFd(fd, f);
     }
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   if(globalThis.process?.platform === "win32")
    MlNodeDevice.prototype.rename =
     function(o, n, raise_unix){
      try{
       var
        target = this.nm(n),
        source = this.nm(o),
        target_stats,
        source_stats;
       if
        ((target_stats = this.fs.statSync(target, {throwIfNoEntry: false}))
         && (source_stats = this.fs.statSync(source, {throwIfNoEntry: false}))
         && source_stats.isDirectory())
        if(target_stats.isDirectory()){
         if(! target.startsWith(source))
          try{this.fs.rmdirSync(target);}catch{}
        }
        else{
         var
          err =
            new
             Error
             (`ENOTDIR: not a directory, rename '${source}' -> '${target}'`);
         throw Object.assign
                (err,
                 {errno: - 20,
                  code: "ENOTDIR",
                  syscall: "rename",
                  path: target});
        }
       this.fs.renameSync(this.nm(o), this.nm(n));
      }
      catch(err){caml_raise_nodejs_error(err, raise_unix);}
     };
   else
    MlNodeDevice.prototype.rename =
     function(o, n, raise_unix){
      try{this.fs.renameSync(this.nm(o), this.nm(n));}
      catch(err){caml_raise_nodejs_error(err, raise_unix);}
     };
   MlNodeDevice.prototype.stat =
    function(name, large, raise_unix){
     try{
      var js_stats = this.fs.statSync(this.nm(name));
      return fs_node_stats_from_js(js_stats, large);
     }
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.lstat =
    function(name, large, raise_unix){
     try{
      var js_stats = this.fs.lstatSync(this.nm(name));
      return fs_node_stats_from_js(js_stats, large);
     }
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.symlink =
    function(to_dir, target, path, raise_unix){
     try{
      this.fs.symlinkSync
       (target,
        this.nm(path),
        to_dir === 0 ? null : to_dir[1] ? "dir" : "file");
      return 0;
     }
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readlink =
    function(name, raise_unix){
     try{
      var link = this.fs.readlinkSync(this.nm(name), "utf8");
      return caml_string_of_jsstring(link);
     }
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.opendir =
    function(name, raise_unix){
     try{return this.fs.opendirSync(this.nm(name));}
     catch(err){caml_raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.constructor = MlNodeDevice;
   var MlObjectTable;
   if(typeof globalThis.Map === "undefined")
    MlObjectTable =
     function(){
       function NaiveLookup(objs){this.objs = objs;}
       NaiveLookup.prototype.get =
        function(v){
         for(var i = 0; i < this.objs.length; i++)
          if(this.objs[i] === v) return i;
        };
       NaiveLookup.prototype.set = function(){};
       return function(){
        this.objs = [];
        this.lookup = new NaiveLookup(this.objs);};
      }
      ();
   else
    MlObjectTable =
     function(){this.objs = []; this.lookup = new globalThis.Map();};
   MlObjectTable.prototype.store =
    function(v){this.lookup.set(v, this.objs.length); this.objs.push(v);};
   MlObjectTable.prototype.recall =
    function(v){
     var i = this.lookup.get(v);
     return i === undefined ? undefined : this.objs.length - i;
    };
   function MlStringReader(s, i){
    this.s = caml_jsbytes_of_string(s);
    this.i = i;
   }
   MlStringReader.prototype =
    {read8u: function(){return this.s.charCodeAt(this.i++);},
     read8s: function(){return this.s.charCodeAt(this.i++) << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s.charCodeAt(i) << 8 | s.charCodeAt(i + 1);
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s.charCodeAt(i) << 24 >> 16 | s.charCodeAt(i + 1);
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (s.charCodeAt(i) << 24 | s.charCodeAt(i + 1) << 16
             | s.charCodeAt(i + 2) << 8
             | s.charCodeAt(i + 3))
             >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return s.charCodeAt(i) << 24 | s.charCodeAt(i + 1) << 16
             | s.charCodeAt(i + 2) << 8
             | s.charCodeAt(i + 3);
     },
     readstr:
     function(len){
      var i = this.i;
      this.i = i + len;
      return caml_string_of_jsbytes(this.s.slice(i, i + len));
     },
     readuint8array:
     function(len){
      var b = new Uint8Array(len), s = this.s, i = this.i;
      for(var j = 0; j < len; j++) b[j] = s.charCodeAt(i + j);
      this.i = i + len;
      return b;
     }};
   var
    caml_packFloat16 =
      function(){
        const INVERSE_OF_EPSILON = 1 / Number.EPSILON;
        function roundTiesToEven(num){
         return num + INVERSE_OF_EPSILON - INVERSE_OF_EPSILON;
        }
        const
         FLOAT16_MIN_VALUE = 6.103515625e-5,
         FLOAT16_MAX_VALUE = 65504,
         FLOAT16_EPSILON = 0.0009765625,
         FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE = FLOAT16_EPSILON * FLOAT16_MIN_VALUE,
         FLOAT16_EPSILON_DEVIDED_BY_EPSILON =
           FLOAT16_EPSILON * INVERSE_OF_EPSILON;
        function roundToFloat16(num){
         const number = + num;
         if(! Number.isFinite(number) || number === 0) return number;
         const sign = number > 0 ? 1 : - 1, absolute = Math.abs(number);
         if(absolute < FLOAT16_MIN_VALUE)
          return sign
                 *
                  roundTiesToEven
                   (absolute / FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE)
                 * FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE;
         const
          temp = (1 + FLOAT16_EPSILON_DEVIDED_BY_EPSILON) * absolute,
          result = temp - (temp - absolute);
         if(result > FLOAT16_MAX_VALUE || Number.isNaN(result))
          return sign * Number.POSITIVE_INFINITY;
         return sign * result;
        }
        const
         baseTable = new Uint16Array(512),
         shiftTable = new Uint8Array(512);
        for(let i = 0; i < 256; ++i){
         const e = i - 127;
         if(e < - 24){
          baseTable[i] = 0x0000;
          baseTable[i | 0x100] = 0x8000;
          shiftTable[i] = 24;
          shiftTable[i | 0x100] = 24;
         }
         else if(e < - 14){
          baseTable[i] = 0x0400 >> - e - 14;
          baseTable[i | 0x100] = 0x0400 >> - e - 14 | 0x8000;
          shiftTable[i] = - e - 1;
          shiftTable[i | 0x100] = - e - 1;
         }
         else if(e <= 15){
          baseTable[i] = e + 15 << 10;
          baseTable[i | 0x100] = e + 15 << 10 | 0x8000;
          shiftTable[i] = 13;
          shiftTable[i | 0x100] = 13;
         }
         else if(e < 128){
          baseTable[i] = 0x7c00;
          baseTable[i | 0x100] = 0xfc00;
          shiftTable[i] = 24;
          shiftTable[i | 0x100] = 24;
         }
         else{
          baseTable[i] = 0x7c00;
          baseTable[i | 0x100] = 0xfc00;
          shiftTable[i] = 13;
          shiftTable[i | 0x100] = 13;
         }
        }
        const
         buffer = new ArrayBuffer(4),
         floatView = new Float32Array(buffer),
         uint32View = new Uint32Array(buffer);
        return function(num){
         floatView[0] = roundToFloat16(num);
         const f = uint32View[0], e = f >> 23 & 0x1ff;
         return baseTable[e] + ((f & 0x007fffff) >> shiftTable[e]);};
       }
       (),
    caml_unpackFloat16 =
      function(){
        var
         pow = Math.pow,
         EXP_MASK16 = 31,
         SIGNIFICAND_MASK16 = 1023,
         MIN_SUBNORMAL16 = pow(2, - 24),
         SIGNIFICAND_DENOM16 = 0.0009765625;
        return function(bytes){
         var
          sign = bytes >>> 15,
          exponent = bytes >>> 10 & EXP_MASK16,
          significand = bytes & SIGNIFICAND_MASK16;
         if(exponent === EXP_MASK16)
          return significand === 0
                  ? sign
                    === 0
                    ? Number.POSITIVE_INFINITY
                    : Number.NEGATIVE_INFINITY
                  : Number.NaN;
         if(exponent === 0)
          return significand
                 * (sign === 0 ? MIN_SUBNORMAL16 : - MIN_SUBNORMAL16);
         var
          r =
            pow(2, exponent - 15)
            *
             (sign === 0
               ? 1 + significand * SIGNIFICAND_DENOM16
               : - 1 - significand * SIGNIFICAND_DENOM16);
         return r;};
       }
       ();
   function caml_int64_create_lo_hi(lo, hi){
    return new
            MlInt64
            (lo & 0xffffff,
             lo >>> 24 & 0xff | (hi & 0xffff) << 8,
             hi >>> 16 & 0xffff);
   }
   function caml_int64_hi32(v){return v.hi32();}
   function caml_int64_lo32(v){return v.lo32();}
   function caml_array_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   var caml_ba_custom_name = "_bigarr02";
   function Ml_Bigarray(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
   Ml_Bigarray.prototype.offset =
    function(arg){
     var ofs = 0;
     if(typeof arg === "number") arg = [arg];
     if(! Array.isArray(arg))
      caml_invalid_argument("bigarray.js: invalid offset");
     if(this.dims.length !== arg.length)
      caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
     if(this.layout === 0)
      for(var i = 0; i < this.dims.length; i++){
       if(arg[i] < 0 || arg[i] >= this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + arg[i];
      }
     else
      for(var i = this.dims.length - 1; i >= 0; i--){
       if(arg[i] < 1 || arg[i] > this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + (arg[i] - 1);
      }
     return ofs;
    };
   Ml_Bigarray.prototype.get =
    function(ofs){
     switch(this.kind){
       case 7:
        var l = this.data[ofs * 2 + 0], h = this.data[ofs * 2 + 1];
        return caml_int64_create_lo_hi(l, h);
       case 10:
       case 11:
        var r = this.data[ofs * 2 + 0], i = this.data[ofs * 2 + 1];
        return [254, r, i];
       case 13:
        return caml_unpackFloat16(this.data[ofs]);
       default: return this.data[ofs];
     }
    };
   Ml_Bigarray.prototype.set =
    function(ofs, v){
     switch(this.kind){
       case 7:
        this.data[ofs * 2 + 0] = caml_int64_lo32(v);
        this.data[ofs * 2 + 1] = caml_int64_hi32(v);
        break;
       case 10:
       case 11:
        this.data[ofs * 2 + 0] = v[1]; this.data[ofs * 2 + 1] = v[2]; break;
       case 13:
        this.data[ofs] = caml_packFloat16(v); break;
       default: this.data[ofs] = v; break;
     }
     return 0;
    };
   Ml_Bigarray.prototype.fill =
    function(v){
     switch(this.kind){
       case 7:
        var a = caml_int64_lo32(v), b = caml_int64_hi32(v);
        if(a === b)
         this.data.fill(a);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 === 0 ? a : b;
        break;
       case 10:
       case 11:
        var im = v[1], re = v[2];
        if(im === re)
         this.data.fill(im);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 === 0 ? im : re;
        break;
       case 13:
        this.data.fill(caml_packFloat16(v)); break;
       default: this.data.fill(v); break;
     }
    };
   Ml_Bigarray.prototype.compare =
    function(b, total){
     if(this.layout !== b.layout || this.kind !== b.kind){
      var k1 = this.kind | this.layout << 8, k2 = b.kind | b.layout << 8;
      return k2 - k1;
     }
     if(this.dims.length !== b.dims.length)
      return b.dims.length - this.dims.length;
     for(var i = 0; i < this.dims.length; i++)
      if(this.dims[i] !== b.dims[i])
       return this.dims[i] < b.dims[i] ? - 1 : 1;
     switch(this.kind){
       case 0:
       case 1:
       case 10:
       case 11:
        var x, y;
        for(var i = 0; i < this.data.length; i++){
         x = this.data[i];
         y = b.data[i];
         if(x < y) return - 1;
         if(x > y) return 1;
         if(x !== y){
          if(! total) return Number.NaN;
          if(! Number.isNaN(x)) return 1;
          if(! Number.isNaN(y)) return - 1;
         }
        }
        break;
       case 7:
        for(var i = 0; i < this.data.length; i += 2){
         if(this.data[i + 1] < b.data[i + 1]) return - 1;
         if(this.data[i + 1] > b.data[i + 1]) return 1;
         if(this.data[i] >>> 0 < b.data[i] >>> 0) return - 1;
         if(this.data[i] >>> 0 > b.data[i] >>> 0) return 1;
        }
        break;
       case 13:
        for(var i = 0; i < this.data.length; i++){
         var
          aa = caml_unpackFloat16(this.data[i]),
          bb = caml_unpackFloat16(b.data[i]);
         if(aa < bb) return - 1;
         if(aa > bb) return 1;
        }
        break;
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 8:
       case 9:
       case 12:
        for(var i = 0; i < this.data.length; i++){
         if(this.data[i] < b.data[i]) return - 1;
         if(this.data[i] > b.data[i]) return 1;
        }
        break;
     }
     return 0;
    };
   function Ml_Bigarray_c_1_1(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
   Ml_Bigarray_c_1_1.prototype.offset =
    function(arg){
     if(typeof arg !== "number")
      if(Array.isArray(arg) && arg.length === 1)
       arg = arg[0];
      else
       caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
     if(arg < 0 || arg >= this.dims[0]) caml_array_bound_error();
     return arg;
    };
   Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs];};
   Ml_Bigarray_c_1_1.prototype.set =
    function(ofs, v){this.data[ofs] = v; return 0;};
   Ml_Bigarray_c_1_1.prototype.fill =
    function(v){this.data.fill(v); return 0;};
   function UInt8ArrayReader(s, i){this.s = s; this.i = i;}
   UInt8ArrayReader.prototype =
    {read8u: function(){return this.s[this.i++];},
     read8s: function(){return this.s[this.i++] << 24 >> 24;},
     read16u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s[i] << 8 | s[i + 1];
     },
     read16s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 2;
      return s[i] << 24 >> 16 | s[i + 1];
     },
     read32u:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return (s[i] << 24 | s[i + 1] << 16 | s[i + 2] << 8 | s[i + 3]) >>> 0;
     },
     read32s:
     function(){
      var s = this.s, i = this.i;
      this.i = i + 4;
      return s[i] << 24 | s[i + 1] << 16 | s[i + 2] << 8 | s[i + 3];
     },
     readstr:
     function(len){
      var i = this.i;
      this.i = i + len;
      return caml_string_of_uint8_array(this.s.subarray(i, i + len));
     },
     readuint8array:
     function(len){
      var i = this.i;
      this.i = i + len;
      return this.s.subarray(i, i + len);
     }};
   function incr_nat(nat, ofs, len, carry_in){
    var carry = carry_in;
    for(var i = 0; i < len; i++){
     var x = (nat.data[ofs + i] >>> 0) + carry;
     nat.data[ofs + i] = x | 0;
     if(x === x >>> 0){carry = 0; break;} else carry = 1;
    }
    return carry;
   }
   function add_nat(nat1, ofs1, len1, nat2, ofs2, len2, carry_in){
    var carry = carry_in;
    for(var i = 0; i < len2; i++){
     var
      x = (nat1.data[ofs1 + i] >>> 0) + (nat2.data[ofs2 + i] >>> 0) + carry;
     nat1.data[ofs1 + i] = x;
     if(x === x >>> 0) carry = 0; else carry = 1;
    }
    return incr_nat(nat1, ofs1 + len2, len1 - len2, carry);
   }
   function caml_ba_get_size(dims){
    var n_dims = dims.length, size = 1;
    for(var i = 0; i < n_dims; i++){
     if(dims[i] < 0)
      caml_invalid_argument("Bigarray.create: negative dimension");
     size = size * dims[i];
    }
    return size;
   }
   function caml_ba_get_size_per_element(kind){
    switch(kind){case 7:case 10:case 11: return 2;default: return 1;
    }
   }
   function caml_ba_create_unsafe(kind, layout, dims, data){
    var size_per_element = caml_ba_get_size_per_element(kind);
    if(caml_ba_get_size(dims) * size_per_element !== data.length)
     caml_invalid_argument("length doesn't match dims");
    if
     (layout === 0 && dims.length === 1 && size_per_element === 1
      && kind !== 13)
     return new Ml_Bigarray_c_1_1(kind, layout, dims, data);
    return new Ml_Bigarray(kind, layout, dims, data);
   }
   function bigstring_of_array_buffer(ab){
    var ta = new Uint8Array(ab);
    return caml_ba_create_unsafe(12, 0, [ta.length], ta);
   }
   function bigstring_of_typed_array(ba){
    var
     ta =
       new
        Uint8Array
        (ba.buffer, ba.byteOffset, ba.length * ba.BYTES_PER_ELEMENT);
    return caml_ba_create_unsafe(12, 0, [ta.length], ta);
   }
   function bigstring_to_array_buffer(bs){return bs.data.buffer;}
   function bigstring_to_typed_array(bs){return bs.data;}
   function blit_nat(nat1, ofs1, nat2, ofs2, len){
    for(var i = 0; i < len; i++) nat1.data[ofs1 + i] = nat2.data[ofs2 + i];
    return 0;
   }
   function caml_call_gen(f, args){
    var
     n = f.l >= 0 ? f.l : f.l = f.length,
     argsLen = args.length,
     d = n - argsLen;
    if(d === 0)
     return f(...args);
    else if(d < 0){
     var g = f(...args.slice(0, n));
     if(typeof g !== "function") return g;
     return caml_call_gen(g, args.slice(n));
    }
    else{
     switch(d){
       case 1:
        {
         var
          g =
            function(x){
             var nargs = new Array(argsLen + 1);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             return f(...nargs);
            };
         break;
        }
       case 2:
        {
         var
          g =
            function(x, y){
             var nargs = new Array(argsLen + 2);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             nargs[argsLen + 1] = y;
             return f(...nargs);
            };
         break;
        }
       default:
        var
         g =
           function(...extra_args){
            if(extra_args.length === 0) extra_args = [undefined];
            return caml_call_gen(f, args.concat(extra_args));
           };
     }
     g.l = d;
     return g;
    }
   }
   function caml_alloc_dummy_infix(){
    return function f(x){return caml_call_gen(f.fun, [x]);};
   }
   function caml_CamlinternalMod_init_mod(loc, shape){
    function undef_module(_x){
     caml_raise_with_arg(caml_global_data.Undefined_recursive_module, loc);
    }
    function loop(shape, struct, idx){
     if(typeof shape === "number")
      switch(shape){
        case 0:
         var dummy = caml_alloc_dummy_infix();
         dummy.fun = undef_module;
         struct[idx] = dummy;
         break;
        case 1:
         struct[idx] = [246, undef_module]; break;
        default: struct[idx] = [];
      }
     else
      switch(shape[0]){
        case 0:
         struct[idx] = [0];
         for(var i = 1; i < shape[1].length; i++)
          loop(shape[1][i], struct[idx], i);
         break;
        default: struct[idx] = shape[1];
      }
    }
    var res = [];
    loop(shape, res, 0);
    return res[0];
   }
   function caml_update_dummy(x, y){
    if(y.fun){x.fun = y.fun; return 0;}
    if(typeof y === "function"){x.fun = y; return 0;}
    var i = y.length;
    while(i--) x[i] = y[i];
    return 0;
   }
   function caml_CamlinternalMod_update_mod(shape, real, x){
    if(typeof shape === "number")
     caml_update_dummy(real, x);
    else
     switch(shape[0]){
       case 0:
        for(var i = 1; i < shape[1].length; i++)
         caml_CamlinternalMod_update_mod(shape[1][i], real[i], x[i]);
        break;
     }
    return 0;
   }
   var
    caml_MD5Transform =
      function(){
        function add(x, y){return x + y | 0;}
        function xx(q, a, b, x, s, t){
         a = add(add(a, q), add(x, t));
         return add(a << s | a >>> 32 - s, b);
        }
        function ff(a, b, c, d, x, s, t){
         return xx(b & c | ~ b & d, a, b, x, s, t);
        }
        function gg(a, b, c, d, x, s, t){
         return xx(b & d | c & ~ d, a, b, x, s, t);
        }
        function hh(a, b, c, d, x, s, t){return xx(b ^ c ^ d, a, b, x, s, t);}
        function ii(a, b, c, d, x, s, t){
         return xx(c ^ (b | ~ d), a, b, x, s, t);
        }
        return function(w, buffer){
         var a = w[0], b = w[1], c = w[2], d = w[3];
         a = ff(a, b, c, d, buffer[0], 7, 0xd76aa478);
         d = ff(d, a, b, c, buffer[1], 12, 0xe8c7b756);
         c = ff(c, d, a, b, buffer[2], 17, 0x242070db);
         b = ff(b, c, d, a, buffer[3], 22, 0xc1bdceee);
         a = ff(a, b, c, d, buffer[4], 7, 0xf57c0faf);
         d = ff(d, a, b, c, buffer[5], 12, 0x4787c62a);
         c = ff(c, d, a, b, buffer[6], 17, 0xa8304613);
         b = ff(b, c, d, a, buffer[7], 22, 0xfd469501);
         a = ff(a, b, c, d, buffer[8], 7, 0x698098d8);
         d = ff(d, a, b, c, buffer[9], 12, 0x8b44f7af);
         c = ff(c, d, a, b, buffer[10], 17, 0xffff5bb1);
         b = ff(b, c, d, a, buffer[11], 22, 0x895cd7be);
         a = ff(a, b, c, d, buffer[12], 7, 0x6b901122);
         d = ff(d, a, b, c, buffer[13], 12, 0xfd987193);
         c = ff(c, d, a, b, buffer[14], 17, 0xa679438e);
         b = ff(b, c, d, a, buffer[15], 22, 0x49b40821);
         a = gg(a, b, c, d, buffer[1], 5, 0xf61e2562);
         d = gg(d, a, b, c, buffer[6], 9, 0xc040b340);
         c = gg(c, d, a, b, buffer[11], 14, 0x265e5a51);
         b = gg(b, c, d, a, buffer[0], 20, 0xe9b6c7aa);
         a = gg(a, b, c, d, buffer[5], 5, 0xd62f105d);
         d = gg(d, a, b, c, buffer[10], 9, 0x02441453);
         c = gg(c, d, a, b, buffer[15], 14, 0xd8a1e681);
         b = gg(b, c, d, a, buffer[4], 20, 0xe7d3fbc8);
         a = gg(a, b, c, d, buffer[9], 5, 0x21e1cde6);
         d = gg(d, a, b, c, buffer[14], 9, 0xc33707d6);
         c = gg(c, d, a, b, buffer[3], 14, 0xf4d50d87);
         b = gg(b, c, d, a, buffer[8], 20, 0x455a14ed);
         a = gg(a, b, c, d, buffer[13], 5, 0xa9e3e905);
         d = gg(d, a, b, c, buffer[2], 9, 0xfcefa3f8);
         c = gg(c, d, a, b, buffer[7], 14, 0x676f02d9);
         b = gg(b, c, d, a, buffer[12], 20, 0x8d2a4c8a);
         a = hh(a, b, c, d, buffer[5], 4, 0xfffa3942);
         d = hh(d, a, b, c, buffer[8], 11, 0x8771f681);
         c = hh(c, d, a, b, buffer[11], 16, 0x6d9d6122);
         b = hh(b, c, d, a, buffer[14], 23, 0xfde5380c);
         a = hh(a, b, c, d, buffer[1], 4, 0xa4beea44);
         d = hh(d, a, b, c, buffer[4], 11, 0x4bdecfa9);
         c = hh(c, d, a, b, buffer[7], 16, 0xf6bb4b60);
         b = hh(b, c, d, a, buffer[10], 23, 0xbebfbc70);
         a = hh(a, b, c, d, buffer[13], 4, 0x289b7ec6);
         d = hh(d, a, b, c, buffer[0], 11, 0xeaa127fa);
         c = hh(c, d, a, b, buffer[3], 16, 0xd4ef3085);
         b = hh(b, c, d, a, buffer[6], 23, 0x04881d05);
         a = hh(a, b, c, d, buffer[9], 4, 0xd9d4d039);
         d = hh(d, a, b, c, buffer[12], 11, 0xe6db99e5);
         c = hh(c, d, a, b, buffer[15], 16, 0x1fa27cf8);
         b = hh(b, c, d, a, buffer[2], 23, 0xc4ac5665);
         a = ii(a, b, c, d, buffer[0], 6, 0xf4292244);
         d = ii(d, a, b, c, buffer[7], 10, 0x432aff97);
         c = ii(c, d, a, b, buffer[14], 15, 0xab9423a7);
         b = ii(b, c, d, a, buffer[5], 21, 0xfc93a039);
         a = ii(a, b, c, d, buffer[12], 6, 0x655b59c3);
         d = ii(d, a, b, c, buffer[3], 10, 0x8f0ccc92);
         c = ii(c, d, a, b, buffer[10], 15, 0xffeff47d);
         b = ii(b, c, d, a, buffer[1], 21, 0x85845dd1);
         a = ii(a, b, c, d, buffer[8], 6, 0x6fa87e4f);
         d = ii(d, a, b, c, buffer[15], 10, 0xfe2ce6e0);
         c = ii(c, d, a, b, buffer[6], 15, 0xa3014314);
         b = ii(b, c, d, a, buffer[13], 21, 0x4e0811a1);
         a = ii(a, b, c, d, buffer[4], 6, 0xf7537e82);
         d = ii(d, a, b, c, buffer[11], 10, 0xbd3af235);
         c = ii(c, d, a, b, buffer[2], 15, 0x2ad7d2bb);
         b = ii(b, c, d, a, buffer[9], 21, 0xeb86d391);
         w[0] = add(a, w[0]);
         w[1] = add(b, w[1]);
         w[2] = add(c, w[2]);
         w[3] = add(d, w[3]);};
       }
       ();
   function caml_MD5Final(ctx){
    var in_buf = ctx.len & 0x3f;
    ctx.b8[in_buf] = 0x80;
    in_buf++;
    if(in_buf > 56){
     for(var j = in_buf; j < 64; j++) ctx.b8[j] = 0;
     caml_MD5Transform(ctx.w, ctx.b32);
     for(var j = 0; j < 56; j++) ctx.b8[j] = 0;
    }
    else
     for(var j = in_buf; j < 56; j++) ctx.b8[j] = 0;
    ctx.b32[14] = ctx.len << 3;
    ctx.b32[15] = ctx.len >> 29 & 0x1fffffff;
    caml_MD5Transform(ctx.w, ctx.b32);
    var t = new Uint8Array(16);
    for(var i = 0; i < 4; i++)
     for(var j = 0; j < 4; j++) t[i * 4 + j] = ctx.w[i] >> 8 * j & 0xff;
    return t;
   }
   function caml_MD5Init(){
    var
     buffer = new ArrayBuffer(64),
     b32 = new Uint32Array(buffer),
     b8 = new Uint8Array(buffer);
    return {len: 0,
            w:
            new Uint32Array([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]),
            b32: b32,
            b8: b8};
   }
   function caml_MD5Update(ctx, input, input_len){
    var in_buf = ctx.len & 0x3f, input_pos = 0;
    ctx.len += input_len;
    if(in_buf){
     var missing = 64 - in_buf;
     if(input_len < missing){
      ctx.b8.set(input.subarray(0, input_len), in_buf);
      return;
     }
     ctx.b8.set(input.subarray(0, missing), in_buf);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= missing;
     input_pos += missing;
    }
    while(input_len >= 64){
     ctx.b8.set(input.subarray(input_pos, input_pos + 64), 0);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= 64;
     input_pos += 64;
    }
    if(input_len)
     ctx.b8.set(input.subarray(input_pos, input_pos + input_len), 0);
   }
   function caml_acosh_float(x){return Math.acosh(x);}
   var
    caml_argv =
      function(){
        var process = globalThis.process, main = "a.out", args = [];
        if(process && process.argv && process.argv.length > 1){
         var argv = process.argv;
         main = argv[1];
         args = argv.slice(2);
        }
        var p = caml_string_of_jsstring(main), args2 = [0, p];
        for(var i = 0; i < args.length; i++)
         args2.push(caml_string_of_jsstring(args[i]));
        return args2;
       }
       ();
   function caml_array_append(a1, a2){
    var l1 = a1.length, l2 = a2.length, l = l1 + l2 - 1, a = new Array(l);
    a[0] = 0;
    var i = 1, j = 1;
    for(; i < l1; i++) a[i] = a1[i];
    for(; i < l; i++, j++) a[i] = a2[j];
    return a;
   }
   function caml_array_blit(a1, i1, a2, i2, len){
    if(i2 <= i1)
     for(var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];
    else
     for(var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];
    return 0;
   }
   function caml_array_concat(l){
    var a = [0];
    while(l !== 0){
     var b = l[1];
     for(var i = 1; i < b.length; i++) a.push(b[i]);
     l = l[2];
    }
    return a;
   }
   function caml_array_fill(array, ofs, len, v){
    for(var i = 0; i < len; i++) array[ofs + i + 1] = v;
    return 0;
   }
   function caml_array_get(array, index){
    if(index < 0 || index >= array.length - 1) caml_array_bound_error();
    return array[index + 1];
   }
   function caml_array_make(len, init){
    if(len >>> 0 >= (0x7fffffff / 4 | 0)) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 0;
    for(var i = 1; i < len; i++) b[i] = init;
    return b;
   }
   function caml_array_of_bytes(x){return caml_uint8_array_of_bytes(x);}
   function caml_array_of_string(x){return caml_uint8_array_of_string(x);}
   function caml_array_set(array, index, newval){
    if(index < 0 || index >= array.length - 1) caml_array_bound_error();
    array[index + 1] = newval;
    return 0;
   }
   function caml_array_sub(a, i, len){
    var a2 = new Array(len + 1);
    a2[0] = 0;
    for(var i2 = 1, i1 = i + 1; i2 <= len; i2++, i1++) a2[i2] = a[i1];
    return a2;
   }
   function caml_asinh_float(x){return Math.asinh(x);}
   function caml_atanh_float(x){return Math.atanh(x);}
   function caml_ba_blit(src, dst){
    if(dst.dims.length !== src.dims.length)
     caml_invalid_argument("Bigarray.blit: dimension mismatch");
    for(var i = 0; i < dst.dims.length; i++)
     if(dst.dims[i] !== src.dims[i])
      caml_invalid_argument("Bigarray.blit: dimension mismatch");
    dst.data.set(src.data);
    return 0;
   }
   function caml_ba_change_layout(ba, layout){
    if(ba.layout === layout) return ba;
    var new_dims = [];
    for(var i = 0; i < ba.dims.length; i++)
     new_dims[i] = ba.dims[ba.dims.length - i - 1];
    return caml_ba_create_unsafe(ba.kind, layout, new_dims, ba.data);
   }
   function caml_ba_compare(a, b, total){return a.compare(b, total);}
   function caml_ba_create_buffer(kind, size){
    var view;
    switch(kind){
      case 0:
       view = Float32Array; break;
      case 1:
       view = Float64Array; break;
      case 2:
       view = Int8Array; break;
      case 3:
       view = Uint8Array; break;
      case 4:
       view = Int16Array; break;
      case 5:
       view = Uint16Array; break;
      case 6:
       view = Int32Array; break;
      case 7:
       view = Int32Array; break;
      case 8:
       view = Int32Array; break;
      case 9:
       view = Int32Array; break;
      case 10:
       view = Float32Array; break;
      case 11:
       view = Float64Array; break;
      case 12:
       view = Uint8Array; break;
      case 13:
       view = Uint16Array; break;
    }
    if(! view) caml_invalid_argument("Bigarray.create: unsupported kind");
    var data = new view(size * caml_ba_get_size_per_element(kind));
    return data;
   }
   function caml_js_from_array(a){return a.slice(1);}
   function caml_ba_create(kind, layout, dims_ml){
    var
     dims = caml_js_from_array(dims_ml),
     data = caml_ba_create_buffer(kind, caml_ba_get_size(dims));
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_create_from(data1, data2, jstyp, kind, layout, dims){
    if(data2 || caml_ba_get_size_per_element(kind) === 2)
     caml_invalid_argument
      ("caml_ba_create_from: use return caml_ba_create_unsafe");
    return caml_ba_create_unsafe(kind, layout, dims, data1);
   }
   function caml_int32_float_of_bits(x){
    var int32a = new Int32Array(1);
    int32a[0] = x;
    var float32a = new Float32Array(int32a.buffer);
    return float32a[0];
   }
   function caml_int64_of_bytes(a){
    return new
            MlInt64
            (a[7] << 0 | a[6] << 8 | a[5] << 16,
             a[4] << 0 | a[3] << 8 | a[2] << 16,
             a[1] << 0 | a[0] << 8);
   }
   function caml_int64_float_of_bits(x){
    var lo = x.lo, mi = x.mi, hi = x.hi, exp = (hi & 0x7fff) >> 4;
    if(exp === 2047)
     return (lo | mi | hi & 0xf) === 0
             ? hi
               & 0x8000
               ? Number.NEGATIVE_INFINITY
               : Number.POSITIVE_INFINITY
             : Number.NaN;
    var k = Math.pow(2, - 24), res = (lo * k + mi) * k + (hi & 0xf);
    if(exp > 0){
     res += 16;
     res *= Math.pow(2, exp - 1027);
    }
    else
     res *= Math.pow(2, - 1026);
    if(hi & 0x8000) res = - res;
    return res;
   }
   function caml_failwith(msg){
    if(! caml_global_data.Failure)
     caml_global_data.Failure = [248, caml_string_of_jsbytes("Failure"), - 3];
    caml_raise_with_string(caml_global_data.Failure, msg);
   }
   function caml_ba_deserialize(reader, sz, name){
    var num_dims = reader.read32s();
    if(num_dims < 0 || num_dims > 16)
     caml_failwith("input_value: wrong number of bigarray dimensions");
    var
     tag = reader.read32s(),
     kind = tag & 0xff,
     layout = tag >> 8 & 1,
     dims = [];
    if(name === "_bigarr02")
     for(var i = 0; i < num_dims; i++){
      var size_dim = reader.read16u();
      if(size_dim === 0xffff){
       var size_dim_hi = reader.read32u(), size_dim_lo = reader.read32u();
       if(size_dim_hi !== 0)
        caml_failwith("input_value: bigarray dimension overflow in 32bit");
       size_dim = size_dim_lo;
      }
      dims.push(size_dim);
     }
    else
     for(var i = 0; i < num_dims; i++) dims.push(reader.read32u());
    var
     size = caml_ba_get_size(dims),
     data = caml_ba_create_buffer(kind, size),
     ba = caml_ba_create_unsafe(kind, layout, dims, data);
    switch(kind){
      case 2:
       for(var i = 0; i < size; i++) data[i] = reader.read8s(); break;
      case 3:
      case 12:
       for(var i = 0; i < size; i++) data[i] = reader.read8u(); break;
      case 4:
       for(var i = 0; i < size; i++) data[i] = reader.read16s(); break;
      case 5:
       for(var i = 0; i < size; i++) data[i] = reader.read16u(); break;
      case 6:
       for(var i = 0; i < size; i++) data[i] = reader.read32s(); break;
      case 8:
      case 9:
       var sixty = reader.read8u();
       if(sixty)
        caml_failwith
         ("input_value: cannot read bigarray with 64-bit OCaml ints");
       for(var i = 0; i < size; i++) data[i] = reader.read32s();
       break;
      case 7:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var int64 = caml_int64_of_bytes(t);
        ba.set(i, int64);
       }
       break;
      case 1:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, f);
       }
       break;
      case 13:
       for(var i = 0; i < size; i++) data[i] = reader.read16u(); break;
      case 0:
       for(var i = 0; i < size; i++){
        var f = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, f);
       }
       break;
      case 10:
       for(var i = 0; i < size; i++){
        var
         re = caml_int32_float_of_bits(reader.read32s()),
         im = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, [254, re, im]);
       }
       break;
      case 11:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, [254, re, im]);
       }
       break;
    }
    sz[0] = (4 + num_dims) * 4;
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_dim(ba, i){
    if(i < 0 || i >= ba.dims.length) caml_invalid_argument("Bigarray.dim");
    return ba.dims[i];
   }
   function caml_ba_dim_1(ba){return caml_ba_dim(ba, 0);}
   function caml_ba_dim_2(ba){return caml_ba_dim(ba, 1);}
   function caml_ba_dim_3(ba){return caml_ba_dim(ba, 2);}
   function caml_ba_fill(ba, v){ba.fill(v); return 0;}
   function caml_ba_kind_of_typed_array(ta){
    var kind;
    if(ta instanceof Float32Array)
     kind = 0;
    else if(ta instanceof Float64Array)
     kind = 1;
    else if(ta instanceof Int8Array)
     kind = 2;
    else if(ta instanceof Uint8Array)
     kind = 3;
    else if(ta instanceof Uint8ClampedArray)
     kind = 3;
    else if(ta instanceof Int16Array)
     kind = 4;
    else if(ta instanceof Uint16Array)
     kind = 5;
    else if(ta instanceof Int32Array)
     kind = 6;
    else if(ta instanceof Uint32Array)
     kind = 6;
    else
     caml_invalid_argument("caml_ba_kind_of_typed_array: unsupported kind");
    return kind;
   }
   function caml_ba_from_typed_array(ta){
    var
     kind = caml_ba_kind_of_typed_array(ta),
     ta =
       ta instanceof Uint32Array
        ? new Int32Array(ta.buffer, ta.byteOffset, ta.length)
        : ta;
    return caml_ba_create_unsafe(kind, 0, [ta.length], ta);
   }
   function caml_ba_get_2(ba, i0, i1){return ba.get(ba.offset([i0, i1]));}
   function caml_ba_get_3(ba, i0, i1, i2){
    return ba.get(ba.offset([i0, i1, i2]));
   }
   function caml_ba_get_generic(ba, i){
    var ofs = ba.offset(caml_js_from_array(i));
    return ba.get(ofs);
   }
   function caml_mul(a, b){return Math.imul(a, b);}
   function caml_hash_mix_int(h, d){
    d = caml_mul(d, 0xcc9e2d51 | 0);
    d = d << 15 | d >>> 32 - 15;
    d = caml_mul(d, 0x1b873593);
    h ^= d;
    h = h << 13 | h >>> 32 - 13;
    return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0;
   }
   function caml_hash_mix_float16(hash, d){
    if((d & 0x7c00) === 0x7c00 && (d & 0x03ff) !== 0)
     d = 0x7c01;
    else if(d === 0x8000) d = 0;
    return caml_hash_mix_int(hash, d);
   }
   var log2_ok = Math.log2 && Math.log2(1.1235582092889474e307) === 1020;
   function jsoo_floor_log2(x){
    if(log2_ok) return Math.floor(Math.log2(x));
    var i = 0;
    if(x === 0) return Number.NEGATIVE_INFINITY;
    if(x >= 1) while(x >= 2){x /= 2; i++;} else while(x < 1){x *= 2; i--;}
    return i;
   }
   function caml_int64_create_lo_mi_hi(lo, mi, hi){return new MlInt64(lo, mi, hi);
   }
   function caml_int64_bits_of_float(x){
    if(! Number.isFinite(x)){
     if(Number.isNaN(x)) return caml_int64_create_lo_mi_hi(1, 0, 0x7ff0);
     return x > 0
             ? caml_int64_create_lo_mi_hi(0, 0, 0x7ff0)
             : caml_int64_create_lo_mi_hi(0, 0, 0xfff0);
    }
    var
     sign =
       x === 0 && 1 / x === Number.NEGATIVE_INFINITY
        ? 0x8000
        : x >= 0 ? 0 : 0x8000;
    if(sign) x = - x;
    var exp = jsoo_floor_log2(x) + 1023;
    if(exp <= 0){
     exp = 0;
     x /= Math.pow(2, - 1026);
    }
    else{
     x /= Math.pow(2, exp - 1027);
     if(x < 16){x *= 2; exp -= 1;}
     if(exp === 0) x /= 2;
    }
    var k = Math.pow(2, 24), r3 = x | 0;
    x = (x - r3) * k;
    var r2 = x | 0;
    x = (x - r2) * k;
    var r1 = x | 0;
    r3 = r3 & 0xf | sign | exp << 4;
    return caml_int64_create_lo_mi_hi(r1, r2, r3);
   }
   function caml_hash_mix_int64(h, v){
    h = caml_hash_mix_int(h, caml_int64_lo32(v));
    h = caml_hash_mix_int(h, caml_int64_hi32(v));
    return h;
   }
   function caml_hash_mix_float(h, v0){
    return caml_hash_mix_int64(h, caml_int64_bits_of_float(v0));
   }
   function caml_ba_hash(ba){
    var num_elts = caml_ba_get_size(ba.dims), h = 0;
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       if(num_elts > 256) num_elts = 256;
       var w = 0, i = 0;
       for(i = 0; i + 4 <= ba.data.length; i += 4){
        w =
         ba.data[i + 0] | ba.data[i + 1] << 8 | ba.data[i + 2] << 16
         | ba.data[i + 3] << 24;
        h = caml_hash_mix_int(h, w);
       }
       w = 0;
       switch(num_elts & 3){
         case 3:
          w = ba.data[i + 2] << 16;
         case 2:
          w |= ba.data[i + 1] << 8;
         case 1:
          w |= ba.data[i + 0]; h = caml_hash_mix_int(h, w);
       }
       break;
      case 4:
      case 5:
       if(num_elts > 128) num_elts = 128;
       var w = 0, i = 0;
       for(i = 0; i + 2 <= ba.data.length; i += 2){
        w = ba.data[i + 0] | ba.data[i + 1] << 16;
        h = caml_hash_mix_int(h, w);
       }
       if((num_elts & 1) !== 0) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 6:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 8:
      case 9:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 7:
       if(num_elts > 32) num_elts = 32;
       num_elts *= 2;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 10:
       num_elts *= 2;
      case 0:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
      case 11:
       num_elts *= 2;
      case 1:
       if(num_elts > 32) num_elts = 32;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
      case 13:
       if(num_elts > 128) num_elts = 128;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float16(h, ba.data[i]);
       break;
    }
    return h;
   }
   function caml_ba_init(){return 0;}
   function caml_ba_kind(ba){return ba.kind;}
   function caml_ba_layout(ba){return ba.layout;}
   function caml_ba_map_file(vfd, kind, layout, shared, dims, pos){caml_failwith("caml_ba_map_file not implemented");
   }
   function caml_ba_map_file_bytecode(argv, argn){
    return caml_ba_map_file
            (argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);
   }
   function caml_ba_num_dims(ba){return ba.dims.length;}
   function caml_ba_reshape(ba, vind){
    vind = caml_js_from_array(vind);
    var new_dim = [], num_dims = vind.length;
    if(num_dims < 0 || num_dims > 16)
     caml_invalid_argument("Bigarray.reshape: bad number of dimensions");
    var num_elts = 1;
    for(var i = 0; i < num_dims; i++){
     new_dim[i] = vind[i];
     if(new_dim[i] < 0)
      caml_invalid_argument("Bigarray.reshape: negative dimension");
     num_elts = num_elts * new_dim[i];
    }
    var size = caml_ba_get_size(ba.dims);
    if(num_elts !== size)
     caml_invalid_argument("Bigarray.reshape: size mismatch");
    return caml_ba_create_unsafe(ba.kind, ba.layout, new_dim, ba.data);
   }
   function caml_int32_bits_of_float(x){
    var float32a = new Float32Array(1);
    float32a[0] = x;
    var int32a = new Int32Array(float32a.buffer);
    return int32a[0] | 0;
   }
   function caml_int64_to_bytes(x){return x.toArray();}
   function caml_ba_serialize(writer, ba, sz){
    writer.write(32, ba.dims.length);
    writer.write(32, ba.kind | ba.layout << 8);
    if(ba.caml_custom === "_bigarr02")
     for(var i = 0; i < ba.dims.length; i++)
      if(ba.dims[i] < 0xffff)
       writer.write(16, ba.dims[i]);
      else{
       writer.write(16, 0xffff);
       writer.write(32, 0);
       writer.write(32, ba.dims[i]);
      }
    else
     for(var i = 0; i < ba.dims.length; i++) writer.write(32, ba.dims[i]);
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       for(var i = 0; i < ba.data.length; i++) writer.write(8, ba.data[i]);
       break;
      case 4:
      case 5:
       for(var i = 0; i < ba.data.length; i++) writer.write(16, ba.data[i]);
       break;
      case 6:
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 8:
      case 9:
       writer.write(8, 0);
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 7:
       for(var i = 0; i < ba.data.length / 2; i++){
        var b = caml_int64_to_bytes(ba.get(i));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 1:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 13:
       for(var i = 0; i < ba.data.length; i++) writer.write(16, ba.data[i]);
       break;
      case 0:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int32_bits_of_float(ba.get(i));
        writer.write(32, b);
       }
       break;
      case 10:
       for(var i = 0; i < ba.data.length / 2; i++){
        var j = ba.get(i);
        writer.write(32, caml_int32_bits_of_float(j[1]));
        writer.write(32, caml_int32_bits_of_float(j[2]));
       }
       break;
      case 11:
       for(var i = 0; i < ba.data.length / 2; i++){
        var
         complex = ba.get(i),
         b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
    }
    sz[0] = (4 + ba.dims.length) * 4;
    sz[1] = (4 + ba.dims.length) * 8;
   }
   function caml_ba_set_1(ba, i0, v){ba.set(ba.offset(i0), v); return 0;}
   function caml_ba_set_2(ba, i0, i1, v){
    ba.set(ba.offset([i0, i1]), v);
    return 0;
   }
   function caml_ba_set_3(ba, i0, i1, i2, v){
    ba.set(ba.offset([i0, i1, i2]), v);
    return 0;
   }
   function caml_ba_set_generic(ba, i, v){
    ba.set(ba.offset(caml_js_from_array(i)), v);
    return 0;
   }
   function caml_ba_slice(ba, vind){
    vind = caml_js_from_array(vind);
    var num_inds = vind.length, index = [], sub_dims = [], ofs;
    if(num_inds > ba.dims.length)
     caml_invalid_argument("Bigarray.slice: too many indices");
    if(ba.layout === 0){
     for(var i = 0; i < num_inds; i++) index[i] = vind[i];
     for(; i < ba.dims.length; i++) index[i] = 0;
     sub_dims = ba.dims.slice(num_inds);
    }
    else{
     for(var i = 0; i < num_inds; i++)
      index[ba.dims.length - num_inds + i] = vind[i];
     for(var i = 0; i < ba.dims.length - num_inds; i++) index[i] = 1;
     sub_dims = ba.dims.slice(0, ba.dims.length - num_inds);
    }
    ofs = ba.offset(index);
    var
     size = caml_ba_get_size(sub_dims),
     size_per_element = caml_ba_get_size_per_element(ba.kind),
     new_data =
       ba.data.subarray
        (ofs * size_per_element, (ofs + size) * size_per_element);
    return caml_ba_create_unsafe(ba.kind, ba.layout, sub_dims, new_data);
   }
   function caml_ba_sub(ba, ofs, len){
    var changed_dim, mul = 1;
    if(ba.layout === 0){
     for(var i = 1; i < ba.dims.length; i++) mul = mul * ba.dims[i];
     changed_dim = 0;
    }
    else{
     for(var i = 0; i < ba.dims.length - 1; i++) mul = mul * ba.dims[i];
     changed_dim = ba.dims.length - 1;
     ofs = ofs - 1;
    }
    if(ofs < 0 || len < 0 || ofs + len > ba.dims[changed_dim])
     caml_invalid_argument("Bigarray.sub: bad sub-array");
    var new_dims = [];
    for(var i = 0; i < ba.dims.length; i++) new_dims[i] = ba.dims[i];
    new_dims[changed_dim] = len;
    mul *= caml_ba_get_size_per_element(ba.kind);
    var new_data = ba.data.subarray(ofs * mul, (ofs + len) * mul);
    return caml_ba_create_unsafe(ba.kind, ba.layout, new_dims, new_data);
   }
   function caml_ba_to_typed_array(ba){return ba.data;}
   function caml_ba_uint8_get16(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 1 >= ba.data.length) caml_array_bound_error();
    var b1 = ba.get(ofs), b2 = ba.get(ofs + 1);
    return b1 | b2 << 8;
   }
   function caml_ba_uint8_get32(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 3 >= ba.data.length) caml_array_bound_error();
    var
     b1 = ba.get(ofs + 0),
     b2 = ba.get(ofs + 1),
     b3 = ba.get(ofs + 2),
     b4 = ba.get(ofs + 3);
    return b1 << 0 | b2 << 8 | b3 << 16 | b4 << 24;
   }
   function caml_ba_uint8_get64(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 7 >= ba.data.length) caml_array_bound_error();
    var
     b1 = ba.get(ofs + 0),
     b2 = ba.get(ofs + 1),
     b3 = ba.get(ofs + 2),
     b4 = ba.get(ofs + 3),
     b5 = ba.get(ofs + 4),
     b6 = ba.get(ofs + 5),
     b7 = ba.get(ofs + 6),
     b8 = ba.get(ofs + 7);
    return caml_int64_of_bytes([b8, b7, b6, b5, b4, b3, b2, b1]);
   }
   function caml_ba_uint8_set16(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 1 >= ba.data.length) caml_array_bound_error();
    ba.set(ofs + 0, v & 0xff);
    ba.set(ofs + 1, v >>> 8 & 0xff);
    return 0;
   }
   function caml_ba_uint8_set32(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 3 >= ba.data.length) caml_array_bound_error();
    ba.set(ofs + 0, v & 0xff);
    ba.set(ofs + 1, v >>> 8 & 0xff);
    ba.set(ofs + 2, v >>> 16 & 0xff);
    ba.set(ofs + 3, v >>> 24 & 0xff);
    return 0;
   }
   function caml_ba_uint8_set64(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 7 >= ba.data.length) caml_array_bound_error();
    var v = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) ba.set(ofs + i, v[7 - i]);
    return 0;
   }
   function caml_backtrace_status(_unit){
    return caml_record_backtrace_runtime_flag ? 1 : 0;
   }
   function caml_bigstring_blit_ba_to_ba(ba1, pos1, ba2, pos2, len){
    if(12 !== ba1.kind)
     caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
    if(12 !== ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
    if(len === 0) return 0;
    var ofs1 = ba1.offset(pos1), ofs2 = ba2.offset(pos2);
    if(ofs1 + len > ba1.data.length) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = ba1.data.subarray(ofs1, ofs1 + len);
    ba2.data.set(slice, pos2);
    return 0;
   }
   function caml_bigstring_blit_ba_to_bytes(ba1, pos1, bytes2, pos2, len){
    if(12 !== ba1.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len === 0) return 0;
    var ofs1 = ba1.offset(pos1);
    if(ofs1 + len > ba1.data.length) caml_array_bound_error();
    if(pos2 + len > caml_ml_bytes_length(bytes2)) caml_array_bound_error();
    var slice = ba1.data.subarray(ofs1, ofs1 + len);
    caml_blit_bytes(caml_bytes_of_uint8_array(slice), 0, bytes2, pos2, len);
    return 0;
   }
   function caml_bigstring_blit_bytes_to_ba(str1, pos1, ba2, pos2, len){
    if(12 !== ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len === 0) return 0;
    var ofs2 = ba2.offset(pos2);
    if(pos1 + len > caml_ml_bytes_length(str1)) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = caml_uint8_array_of_bytes(str1).subarray(pos1, pos1 + len);
    ba2.data.set(slice, ofs2);
    return 0;
   }
   function caml_bigstring_blit_string_to_ba(str1, pos1, ba2, pos2, len){
    if(12 !== ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len === 0) return 0;
    var ofs2 = ba2.offset(pos2);
    if(pos1 + len > caml_ml_string_length(str1)) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = caml_uint8_array_of_string(str1).subarray(pos1, pos1 + len);
    ba2.data.set(slice, ofs2);
    return 0;
   }
   function caml_bigstring_memcmp(s1, pos1, s2, pos2, len){
    for(var i = 0; i < len; i++){
     var a = caml_ba_get_1(s1, pos1 + i), b = caml_ba_get_1(s2, pos2 + i);
     if(a < b) return - 1;
     if(a > b) return 1;
    }
    return 0;
   }
   function caml_blit_string(a, b, c, d, e){
    caml_blit_bytes(caml_bytes_of_string(a), b, c, d, e);
    return 0;
   }
   function caml_bswap16(x){return (x & 0x00ff) << 8 | (x & 0xff00) >> 8;}
   function caml_jsstring_of_string(s){
    if(jsoo_is_ascii(s)) return s;
    return caml_utf16_of_utf8(s);
   }
   function caml_build_symbols(symb){
    var r = {}, max = - 1;
    if(symb)
     for(var i = 1; i < symb.length; i++){
      var idx = symb[i][2];
      max = Math.max(max, idx);
      r[caml_jsstring_of_string(symb[i][1])] = idx;
     }
    r.next_idx = max + 1;
    return r;
   }
   function caml_bytes_compare(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? - 1 : s1.c > s2.c ? 1 : 0;
   }
   function caml_bytes_equal(s1, s2){
    if(s1 === s2) return 1;
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c === s2.c ? 1 : 0;
   }
   function caml_bytes_unsafe_get(s, i){
    switch(s.t & 6){
      case 0:
       return s.c.charCodeAt(i);
      case 2:
       if(i >= s.c.length) return 0; return s.c.charCodeAt(i);
      case 4:
       return s.c[i];
    }
   }
   function caml_bytes_get(s, i){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_get(s, i);
   }
   function caml_bytes_get16(s, i){
    if(i >>> 0 >= s.l - 1) caml_bytes_bound_error();
    var
     b1 = caml_bytes_unsafe_get(s, i),
     b2 = caml_bytes_unsafe_get(s, i + 1);
    return b2 << 8 | b1;
   }
   function caml_bytes_get32(s, i){
    if(i >>> 0 >= s.l - 3) caml_bytes_bound_error();
    var
     b1 = caml_bytes_unsafe_get(s, i),
     b2 = caml_bytes_unsafe_get(s, i + 1),
     b3 = caml_bytes_unsafe_get(s, i + 2),
     b4 = caml_bytes_unsafe_get(s, i + 3);
    return b4 << 24 | b3 << 16 | b2 << 8 | b1;
   }
   function caml_bytes_get64(s, i){
    if(i >>> 0 >= s.l - 7) caml_bytes_bound_error();
    var a = new Array(8);
    for(var j = 0; j < 8; j++) a[7 - j] = caml_bytes_unsafe_get(s, i + j);
    return caml_int64_of_bytes(a);
   }
   function caml_bytes_lessequal(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c <= s2.c ? 1 : 0;
   }
   function caml_bytes_greaterequal(s1, s2){return caml_bytes_lessequal(s2, s1);
   }
   function caml_bytes_lessthan(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? 1 : 0;
   }
   function caml_bytes_greaterthan(s1, s2){return caml_bytes_lessthan(s2, s1);
   }
   function caml_bytes_notequal(s1, s2){return 1 - caml_bytes_equal(s1, s2);}
   function caml_bytes_of_utf16_jsstring(s){
    var tag = 9;
    if(! jsoo_is_ascii(s)) tag = 8, s = caml_utf8_of_utf16(s);
    return new MlBytes(tag, s, s.length);
   }
   function caml_bytes_set16(s, i, i16){
    if(i >>> 0 >= s.l - 1) caml_bytes_bound_error();
    var b2 = 0xff & i16 >> 8, b1 = 0xff & i16;
    caml_bytes_unsafe_set(s, i + 0, b1);
    caml_bytes_unsafe_set(s, i + 1, b2);
    return 0;
   }
   function caml_bytes_set32(s, i, i32){
    if(i >>> 0 >= s.l - 3) caml_bytes_bound_error();
    var
     b4 = 0xff & i32 >> 24,
     b3 = 0xff & i32 >> 16,
     b2 = 0xff & i32 >> 8,
     b1 = 0xff & i32;
    caml_bytes_unsafe_set(s, i + 0, b1);
    caml_bytes_unsafe_set(s, i + 1, b2);
    caml_bytes_unsafe_set(s, i + 2, b3);
    caml_bytes_unsafe_set(s, i + 3, b4);
    return 0;
   }
   function caml_bytes_set64(s, i, i64){
    if(i >>> 0 >= s.l - 7) caml_bytes_bound_error();
    var a = caml_int64_to_bytes(i64);
    for(var j = 0; j < 8; j++) caml_bytes_unsafe_set(s, i + 7 - j, a[j]);
    return 0;
   }
   var caml_callback = caml_call_gen;
   function caml_cbrt_float(x){return Math.cbrt(x);}
   function caml_ml_channels_state(){
    this.map = new globalThis.WeakMap();
    this.opened = new globalThis.Set();
   }
   caml_ml_channels_state.prototype.close =
    function(chanid){this.opened.delete(chanid);};
   caml_ml_channels_state.prototype.get =
    function(chanid){return this.map.get(chanid);};
   caml_ml_channels_state.prototype.set =
    function(chanid, val){
     if(val.opened) this.opened.add(chanid);
     return this.map.set(chanid, val);
    };
   caml_ml_channels_state.prototype.all =
    function(){return this.opened.values();};
   var caml_ml_channels = new caml_ml_channels_state();
   function caml_ml_channel_get(id){return caml_ml_channels.get(id);}
   function caml_channel_descriptor(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.fd;
   }
   function caml_check_bound(array, index){
    if(index >>> 0 >= array.length - 1) caml_array_bound_error();
    return array;
   }
   function caml_classify_float(x){
    if(Number.isFinite(x)){
     if(Math.abs(x) >= 2.2250738585072014e-308) return 0;
     if(x !== 0) return 1;
     return 2;
    }
    return Number.isNaN(x) ? 4 : 3;
   }
   function caml_is_continuation_tag(t){return 0;}
   function caml_int32_unmarshal(reader, size){size[0] = 4; return reader.read32s();
   }
   function caml_nativeint_unmarshal(reader, size){
    switch(reader.read8u()){
      case 1:
       size[0] = 4; return reader.read32s();
      case 2:
       caml_failwith("input_value: native integer value too large"); break;
      default: caml_failwith("input_value: ill-formed native integer");
    }
   }
   function caml_int64_unmarshal(reader, size){
    var t = new Array(8);
    for(var j = 0; j < 8; j++) t[j] = reader.read8u();
    size[0] = 8;
    return caml_int64_of_bytes(t);
   }
   function caml_int64_marshal(writer, v, sizes){
    var b = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) writer.write(8, b[i]);
    sizes[0] = 8;
    sizes[1] = 8;
   }
   function caml_int64_compare(x, y, total){return x.compare(y);}
   function caml_int64_hash(v){return v.lo32() ^ v.hi32();}
   var
    caml_custom_ops =
      {_j:
       {deserialize: caml_int64_unmarshal,
        serialize: caml_int64_marshal,
        fixed_length: 8,
        compare: caml_int64_compare,
        hash: caml_int64_hash},
       _i: {deserialize: caml_int32_unmarshal, fixed_length: 4},
       _n: {deserialize: caml_nativeint_unmarshal, fixed_length: 4},
       _bigarray:
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarray");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash},
       _bigarr02:
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarr02");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash}};
   function caml_compare_val_get_custom(a){
    return caml_custom_ops[a.caml_custom]
           && caml_custom_ops[a.caml_custom].compare;
   }
   function caml_compare_val_number_custom(num, custom, swap, total){
    var comp = caml_compare_val_get_custom(custom);
    if(comp){
     var x = swap > 0 ? comp(custom, num, total) : comp(num, custom, total);
     if(total && Number.isNaN(x)) return swap;
     if(Number.isNaN(+ x)) return + x;
     if((x | 0) !== 0) return x | 0;
    }
    return swap;
   }
   function caml_compare_val_tag(a){
    if(typeof a === "number")
     return 1000;
    else if(caml_is_ml_bytes(a))
     return 252;
    else if(caml_is_ml_string(a))
     return 1252;
    else if(Array.isArray(a) && a[0] === a[0] >>> 0 && a[0] <= 255){var tag = a[0] | 0; return tag === 254 ? 0 : tag;}
    else if(a instanceof String)
     return 12520;
    else if(typeof a === "string")
     return 12520;
    else if(a instanceof Number)
     return 1000;
    else if(a && a.caml_custom)
     return 1255;
    else if(a && a.compare)
     return 1256;
    else if(typeof a === "function")
     return 1247;
    else if(typeof a === "symbol") return 1251;
    return 1001;
   }
   function caml_int_compare(a, b){
    if(a < b) return - 1;
    if(a === b) return 0;
    return 1;
   }
   function caml_string_compare(s1, s2){
    return s1 < s2 ? - 1 : s1 > s2 ? 1 : 0;
   }
   function caml_compare_val(a, b, total){
    var stack = [];
    for(;;){
     if(! (total && a === b)){
      var tag_a = caml_compare_val_tag(a);
      if(tag_a === 250){a = a[1]; continue;}
      var tag_b = caml_compare_val_tag(b);
      if(tag_b === 250){b = b[1]; continue;}
      if(tag_a !== tag_b){
       if(tag_a === 1000){
        if(tag_b === 1255)
         return caml_compare_val_number_custom(a, b, - 1, total);
        return - 1;
       }
       if(tag_b === 1000){
        if(tag_a === 1255)
         return caml_compare_val_number_custom(b, a, 1, total);
        return 1;
       }
       return tag_a < tag_b ? - 1 : 1;
      }
      switch(tag_a){
        case 247:
         caml_invalid_argument("compare: functional value"); break;
        case 248:
         var x = caml_int_compare(a[2], b[2]) | 0;
         if(x !== 0) return x;
         break;
        case 249:
         caml_invalid_argument("compare: functional value"); break;
        case 250:
         caml_invalid_argument("equal: got Forward_tag, should not happen");
         break;
        case 251:
         caml_invalid_argument("equal: abstract value"); break;
        case 252:
         if(a !== b){
          var x = caml_bytes_compare(a, b) | 0;
          if(x !== 0) return x;
         }
         break;
        case 253:
         caml_invalid_argument("equal: got Double_tag, should not happen");
         break;
        case 254:
         caml_invalid_argument
          ("equal: got Double_array_tag, should not happen");
         break;
        case 255:
         caml_invalid_argument("equal: got Custom_tag, should not happen");
         break;
        case 1247:
         caml_invalid_argument("compare: functional value"); break;
        case 1255:
         var comp = caml_compare_val_get_custom(a);
         if(comp !== caml_compare_val_get_custom(b))
          return a.caml_custom < b.caml_custom ? - 1 : 1;
         if(! comp) caml_invalid_argument("compare: abstract value");
         var x = comp(a, b, total);
         if(Number.isNaN(x)) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x !== 0) return x | 0;
         break;
        case 1256:
         var x = a.compare(b, total);
         if(Number.isNaN(x)) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x !== 0) return x | 0;
         break;
        case 1000:
         a = + a;
         b = + b;
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a !== b){
          if(! total) return Number.NaN;
          if(! Number.isNaN(a)) return 1;
          if(! Number.isNaN(b)) return - 1;
         }
         break;
        case 1001:
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a !== b) return total ? 1 : Number.NaN;
         break;
        case 1251:
         if(a !== b) return total ? 1 : Number.NaN; break;
        case 1252:
         var a = caml_jsbytes_of_string(a), b = caml_jsbytes_of_string(b);
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 12520:
         var a = a.toString(), b = b.toString();
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        default:
         if(caml_is_continuation_tag(tag_a)){
          caml_invalid_argument("compare: continuation value");
          break;
         }
         if(a.length !== b.length) return a.length < b.length ? - 1 : 1;
         if(a.length > 1) stack.push(a, b, 1);
         break;
      }
     }
     if(stack.length === 0) return 0;
     var i = stack.pop();
     b = stack.pop();
     a = stack.pop();
     if(i + 1 < a.length) stack.push(a, b, i + 1);
     a = a[i];
     b = b[i];
    }
   }
   function caml_compare(a, b){return caml_compare_val(a, b, true);}
   function caml_convert_raw_backtrace(){return [0];}
   function caml_convert_raw_backtrace_slot(){
    caml_failwith("caml_convert_raw_backtrace_slot");
   }
   function caml_copysign_float(x, y){
    if(y === 0) y = 1 / y;
    x = Math.abs(x);
    return y < 0 ? - x : x;
   }
   function caml_cosh_float(x){return Math.cosh(x);}
   function fs_node_supported(){
    return typeof globalThis.process !== "undefined"
           && typeof globalThis.process.versions !== "undefined"
           && typeof globalThis.process.versions.node !== "undefined";
   }
   function make_path_is_absolute(){
    function posix(path){
     if(path.charAt(0) === "/") return ["", path.slice(1)];
     return;
    }
    function win32(path){
     var
      splitDeviceRe =
        /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
      result = splitDeviceRe.exec(path),
      device = result[1] || "",
      isUnc = device.length > 0 && device.charAt(1) !== ":";
     if(result[2] || isUnc){
      var root = result[1] || "", sep = result[2] || "";
      return [root, path.slice(root.length + sep.length)];
     }
     return;
    }
    return fs_node_supported() && globalThis.process
            && globalThis.process.platform
            ? globalThis.process.platform === "win32" ? win32 : posix
            : posix;
   }
   var path_is_absolute = make_path_is_absolute();
   function caml_trailing_slash(name){
    return name.slice(- 1) !== "/" ? name + "/" : name;
   }
   if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
    var caml_current_dir = globalThis.process.cwd().replace(/\\/g, "/");
   else
    var caml_current_dir = "/static";
   caml_current_dir = caml_trailing_slash(caml_current_dir);
   function caml_make_path(name){
    name = caml_jsstring_of_string(name);
    if(! path_is_absolute(name)) name = caml_current_dir + name;
    var
     comp0 = path_is_absolute(name),
     comp = comp0[1].split(/[/\\]/),
     ncomp = [];
    for(var i = 0; i < comp.length; i++)
     switch(comp[i]){
       case "..":
        if(ncomp.length > 1) ncomp.pop(); break;
       case ".": break;
       case "": break;
       default: ncomp.push(comp[i]); break;
     }
    ncomp.unshift(comp0[0]);
    ncomp.orig = name;
    return ncomp;
   }
   function caml_get_root(path){
    var x = path_is_absolute(path);
    if(! x) return;
    return x[0] + "/";
   }
   var
    caml_root =
      caml_get_root(caml_current_dir)
      || caml_failwith("unable to compute caml_root"),
    jsoo_mount_point = [];
   if(fs_node_supported())
    jsoo_mount_point.push
     ({path: caml_root, device: new MlNodeDevice(caml_root)});
   else
    jsoo_mount_point.push
     ({path: caml_root, device: new MlFakeDevice(caml_root)});
   jsoo_mount_point.push
    ({path: "/static/", device: new MlFakeDevice("/static/")});
   function resolve_fs_device(name){
    var
     path = caml_make_path(name),
     name = path.join("/"),
     name_slash = caml_trailing_slash(name),
     res;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var m = jsoo_mount_point[i];
     if
      (name_slash.search(m.path) === 0
       && (! res || res.path.length < m.path.length))
      res =
       {path: m.path,
        device: m.device,
        rest: name.slice(m.path.length, name.length)};
    }
    if(! res && fs_node_supported()){
     var root = caml_get_root(name);
     if(root && root.match(/^[a-zA-Z]:\/$/)){
      var m = {path: root, device: new MlNodeDevice(root)};
      jsoo_mount_point.push(m);
      res =
       {path: m.path,
        device: m.device,
        rest: name.slice(m.path.length, name.length)};
     }
    }
    if(res) return res;
    caml_raise_sys_error("no device found for " + name_slash);
   }
   function caml_create_file(name, content){
    var root = resolve_fs_device(name);
    if(! root.device.register) caml_failwith("cannot register file");
    root.device.register(root.rest, content);
    return 0;
   }
   function caml_create_string(len){caml_invalid_argument("String.create");}
   function caml_custom_identifier(o){
    return caml_string_of_jsstring(o.caml_custom);
   }
   var caml_decompress_input = null;
   function caml_div(x, y){
    if(y === 0) caml_raise_zero_divide();
    return x / y | 0;
   }
   var
    caml_ephe_none = {caml_ephe_none: 0},
    caml_ephe_data_offset = 2,
    caml_ephe_key_offset = 3;
   function caml_ephe_get_data(x){
    var data = x[caml_ephe_data_offset];
    if(data === caml_ephe_none) return 0;
    for(var i = caml_ephe_key_offset; i < x.length; i++){
     var k = x[i];
     if(globalThis.WeakRef && k instanceof globalThis.WeakRef){
      var d = k.deref();
      if(d === undefined){
       x[i] = caml_ephe_none;
       x[caml_ephe_data_offset] = caml_ephe_none;
       return 0;
      }
      if(globalThis.WeakMap){
       data = data.get(k);
       if(data === undefined){
        x[caml_ephe_data_offset] = caml_ephe_none;
        return 0;
       }
      }
     }
    }
    return [0, data];
   }
   function caml_ephe_unset_data(x){
    x[caml_ephe_data_offset] = caml_ephe_none;
    return 0;
   }
   function caml_ephe_set_data(x, data){
    for(var i = x.length - 1; i >= caml_ephe_key_offset; i--){
     var k = x[i];
     if(globalThis.WeakRef && k instanceof globalThis.WeakRef){
      var d = k.deref();
      if(d === undefined){x[i] = caml_ephe_none; continue;}
      if(globalThis.WeakMap) data = new globalThis.WeakMap().set(k, data);
     }
    }
    x[caml_ephe_data_offset] = data;
    return 0;
   }
   function caml_ephe_set_data_opt(x, data_opt){
    if(data_opt === 0)
     caml_ephe_unset_data(x);
    else
     caml_ephe_set_data(x, data_opt[1]);
    return 0;
   }
   function caml_ephe_blit_data(src, dst){
    var old = caml_ephe_get_data(src);
    caml_ephe_set_data_opt(dst, old);
    return 0;
   }
   function caml_ephe_blit_key(a1, i1, a2, i2, len){
    var old = caml_ephe_get_data(a1);
    caml_array_blit
     (a1,
      caml_ephe_key_offset + i1 - 1,
      a2,
      caml_ephe_key_offset + i2 - 1,
      len);
    caml_ephe_set_data_opt(a2, old);
    return 0;
   }
   function caml_ephe_check_data(x){
    var data = caml_ephe_get_data(x);
    return data === 0 ? 0 : 1;
   }
   function caml_ephe_check_key(x, i){
    var weak = x[caml_ephe_key_offset + i];
    if(weak === caml_ephe_none) return 0;
    if(globalThis.WeakRef && weak instanceof globalThis.WeakRef){
     weak = weak.deref();
     if(weak === undefined){
      x[caml_ephe_key_offset + i] = caml_ephe_none;
      x[caml_ephe_data_offset] = caml_ephe_none;
      return 0;
     }
    }
    return 1;
   }
   function caml_weak_create(n){
    var alen = caml_ephe_key_offset + n, x = new Array(alen);
    x[0] = 251;
    x[1] = "caml_ephe_list_head";
    for(var i = 2; i < alen; i++) x[i] = caml_ephe_none;
    return x;
   }
   function caml_ephe_create(n){return caml_weak_create(n);}
   function caml_obj_dup(x){
    var l = x.length, a = new Array(l);
    for(var i = 0; i < l; i++) a[i] = x[i];
    return a;
   }
   function caml_ephe_get_data_copy(x){
    var r = caml_ephe_get_data(x);
    if(r === 0) return 0;
    var z = r[1];
    if(Array.isArray(z)) return [0, caml_obj_dup(z)];
    return r;
   }
   function caml_ephe_get_key(x, i){
    var weak = x[caml_ephe_key_offset + i];
    if(weak === caml_ephe_none) return 0;
    if(globalThis.WeakRef && weak instanceof globalThis.WeakRef){
     weak = weak.deref();
     if(weak === undefined){
      x[caml_ephe_key_offset + i] = caml_ephe_none;
      x[caml_ephe_data_offset] = caml_ephe_none;
      return 0;
     }
    }
    return [0, weak];
   }
   function caml_ephe_get_key_copy(x, i){
    var y = caml_ephe_get_key(x, i);
    if(y === 0) return y;
    var z = y[1];
    if(Array.isArray(z)) return [0, caml_obj_dup(z)];
    return y;
   }
   function caml_ephe_set_key(x, i, v){
    var old = caml_ephe_get_data(x);
    if(globalThis.WeakRef && v instanceof Object)
     v = new globalThis.WeakRef(v);
    x[caml_ephe_key_offset + i] = v;
    caml_ephe_set_data_opt(x, old);
    return 0;
   }
   function caml_ephe_unset_key(x, i){
    var old = caml_ephe_get_data(x);
    x[caml_ephe_key_offset + i] = caml_ephe_none;
    caml_ephe_set_data_opt(x, old);
    return 0;
   }
   function caml_equal(x, y){return + (caml_compare_val(x, y, false) === 0);}
   function caml_erf_float(x){
    var
     a1 = 0.254829592,
     a2 = - 0.284496736,
     a3 = 1.421413741,
     a4 = - 1.453152027,
     a5 = 1.061405429,
     p = 0.3275911,
     sign = 1;
    if(x < 0) sign = - 1;
    x = Math.abs(x);
    var
     t = 1.0 / (1.0 + p * x),
     y =
       1.0
       -
        ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t
        * Math.exp(- (x * x));
    return sign * y;
   }
   function caml_erfc_float(x){return 1 - caml_erf_float(x);}
   function caml_eventlog_pause(unit){return 0;}
   function caml_eventlog_resume(unit){return 0;}
   var caml_executable_name = caml_argv[1];
   function caml_exp2_float(x){return Math.pow(2, x);}
   function caml_expm1_float(x){return Math.expm1(x);}
   function caml_is_special_exception(exn){
    switch(exn[2]){case - 8:case - 11:case - 12: return 1;default: return 0;
    }
   }
   function caml_format_exception(exn){
    var r = "";
    if(exn[0] === 0){
     r += exn[1][1];
     if
      (exn.length === 3 && exn[2][0] === 0
       && caml_is_special_exception(exn[1]))
      var bucket = exn[2], start = 1;
     else
      var start = 2, bucket = exn;
     r += "(";
     for(var i = start; i < bucket.length; i++){
      if(i > start) r += ", ";
      var v = bucket[i];
      if(typeof v === "number")
       r += v.toString();
      else if(v instanceof MlBytes)
       r += '"' + v.toString() + '"';
      else if(typeof v === "string")
       r += '"' + v.toString() + '"';
      else
       r += "_";
     }
     r += ")";
    }
    else if(exn[0] === 248) r += exn[1];
    return r;
   }
   function caml_fatal_uncaught_exception(err){
    if(Array.isArray(err) && (err[0] === 0 || err[0] === 248)){
     var handler = caml_named_value("Printexc.handle_uncaught_exception");
     if(handler)
      caml_callback(handler, [err, false]);
     else{
      var
       msg = caml_format_exception(err),
       at_exit = caml_named_value("Pervasives.do_at_exit");
      if(at_exit) caml_callback(at_exit, [0]);
      console.error("Fatal error: exception " + msg);
      if(err.js_error) throw err.js_error;
     }
    }
    else
     throw err;
   }
   function caml_fill_bytes(s, i, l, c){
    if(l > 0)
     if(i === 0 && (l >= s.l || s.t === 2 && l >= s.c.length))
      if(c === 0){
       s.c = "";
       s.t = 2;
      }
      else{
       s.c = caml_str_repeat(l, String.fromCharCode(c));
       s.t = l === s.l ? 0 : 2;
      }
     else{
      if(s.t !== 4) caml_convert_bytes_to_array(s);
      for(l += i; i < l; i++) s.c[i] = c;
     }
    return 0;
   }
   function caml_final_register(){return 0;}
   var all_finalizers = new globalThis.Set();
   function caml_final_register_called_without_value(cb, a){
    if(globalThis.FinalizationRegistry && a instanceof Object){
     var
      x =
        new
         globalThis.FinalizationRegistry
         (function(x){all_finalizers.delete(x); cb(0); return;});
     x.register(a, x);
     all_finalizers.add(x);
    }
    return 0;
   }
   function caml_final_release(){return 0;}
   function caml_finish_formatting(f, rawbuffer){
    if(f.uppercase) rawbuffer = rawbuffer.toUpperCase();
    var len = rawbuffer.length;
    if(f.signedconv && (f.sign < 0 || f.signstyle !== "-")) len++;
    if(f.alternate){if(f.base === 8) len += 1; if(f.base === 16) len += 2;}
    var buffer = "";
    if(f.justify === "+" && f.filler === " ")
     for(var i = len; i < f.width; i++) buffer += " ";
    if(f.signedconv)
     if(f.sign < 0)
      buffer += "-";
     else if(f.signstyle !== "-") buffer += f.signstyle;
    if(f.alternate && f.base === 8) buffer += "0";
    if(f.alternate && f.base === 16) buffer += f.uppercase ? "0X" : "0x";
    if(f.justify === "+" && f.filler === "0")
     for(var i = len; i < f.width; i++) buffer += "0";
    buffer += rawbuffer;
    if(f.justify === "-") for(var i = len; i < f.width; i++) buffer += " ";
    return caml_string_of_jsbytes(buffer);
   }
   function caml_float_compare(x, y){
    if(x === y) return 0;
    if(x < y) return - 1;
    if(x > y) return 1;
    if(! Number.isNaN(x)) return 1;
    if(! Number.isNaN(y)) return - 1;
    return 0;
   }
   function caml_float_of_bytes(a){
    return caml_int64_float_of_bits(caml_int64_of_bytes(a));
   }
   function caml_float_of_string(s){
    var res, r_float = /^ *[-+]?(?:\d*\.?\d+|\d+\.?\d*)(?:[eE][-+]?\d+)?$/;
    s = caml_jsbytes_of_string(s);
    res = + s;
    if(! Number.isNaN(res) && r_float.test(s)) return res;
    s = s.replace(/_/g, "");
    res = + s;
    if(! Number.isNaN(res) && r_float.test(s) || /^[+-]?nan$/i.test(s))
     return res;
    var
     m = /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?$/i.exec(s);
    if(m){
     var
      m3 = m[3].replace(/0+$/, ""),
      mantissa = Number.parseInt(m[1] + m[2] + m3, 16),
      exponent = (+ m[5] || 0) - 4 * m3.length;
     res = mantissa * Math.pow(2, exponent);
     return res;
    }
    if(/^\+?inf(inity)?$/i.test(s)) return Number.POSITIVE_INFINITY;
    if(/^-inf(inity)?$/i.test(s)) return Number.NEGATIVE_INFINITY;
    caml_failwith("float_of_string");
   }
   function caml_floatarray_blit(a1, i1, a2, i2, len){return caml_array_blit(a1, i1, a2, i2, len);
   }
   function caml_floatarray_create(len){
    if(len >>> 0 >= (0x7fffffff / 8 | 0)) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 254;
    for(var i = 1; i < len; i++) b[i] = 0;
    return b;
   }
   function caml_fma_float(x, y, z){
    var
     SPLIT = Math.pow(2, 27) + 1,
     MIN_VALUE = Math.pow(2, - 1022),
     EPSILON = Math.pow(2, - 52),
     C = 416,
     A = Math.pow(2, + C),
     B = Math.pow(2, - C);
    function multiply(a, b){
     var
      at = SPLIT * a,
      ahi = at - (at - a),
      alo = a - ahi,
      bt = SPLIT * b,
      bhi = bt - (bt - b),
      blo = b - bhi,
      p = a * b,
      e = ahi * bhi - p + ahi * blo + alo * bhi + alo * blo;
     return {p: p, e: e};
    }
    function add(a, b){
     var s = a + b, v = s - a, e = a - (s - v) + (b - v);
     return {s: s, e: e};
    }
    function adjust(x, y){
     return x !== 0 && y !== 0 && SPLIT * x - (SPLIT * x - x) === x
             ? x * (1 + (x < 0 ? - 1 : + 1) * (y < 0 ? - 1 : + 1) * EPSILON)
             : x;
    }
    if(x === 0 || y === 0 || ! Number.isFinite(x) || ! Number.isFinite(y))
     return x * y + z;
    if(z === 0) return x * y;
    if(! Number.isFinite(z)) return z;
    var scale = 1;
    while(Math.abs(x) > A){scale *= A; x *= B;}
    while(Math.abs(y) > A){scale *= A; y *= B;}
    if(scale === 1 / 0) return x * y * scale;
    while(Math.abs(x) < B){scale *= B; x *= A;}
    while(Math.abs(y) < B){scale *= B; y *= A;}
    if(scale === 0) return z;
    var xs = x, ys = y, zs = z / scale;
    if(Math.abs(zs) > Math.abs(xs * ys) * 4 / EPSILON) return z;
    if(Math.abs(zs) < Math.abs(xs * ys) * EPSILON / 4 * EPSILON / 4)
     zs = (z < 0 ? - 1 : + 1) * MIN_VALUE;
    var
     xy = multiply(xs, ys),
     s = add(xy.p, zs),
     u = add(xy.e, s.e),
     i = add(s.s, u.s),
     f = i.s + adjust(i.e, u.e);
    if(f === 0) return f;
    var fs = f * scale;
    if(Math.abs(fs) > MIN_VALUE) return fs;
    return fs + adjust(f - fs / scale, i.e) * scale;
   }
   function caml_parse_format(fmt){
    fmt = caml_jsbytes_of_string(fmt);
    var len = fmt.length;
    if(len > 31) caml_invalid_argument("format_int: format too long");
    var
     f =
       {justify: "+",
        signstyle: "-",
        filler: " ",
        alternate: false,
        base: 0,
        signedconv: false,
        width: 0,
        uppercase: false,
        sign: 1,
        prec: - 1,
        conv: "f"};
    for(var i = 0; i < len; i++){
     var c = fmt.charAt(i);
     switch(c){
       case "-":
        f.justify = "-"; break;
       case "+":
       case " ":
        f.signstyle = c; break;
       case "0":
        f.filler = "0"; break;
       case "#":
        f.alternate = true; break;
       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
        f.width = 0;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.width = f.width * 10 + c; i++;}
        i--;
        break;
       case ".":
        f.prec = 0;
        i++;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.prec = f.prec * 10 + c; i++;}
        i--;
        break;
       case "d":
       case "i":
        f.signedconv = true; f.base = 10; break;
       case "u":
        f.base = 10; break;
       case "x":
        f.base = 16; break;
       case "X":
        f.base = 16; f.uppercase = true; break;
       case "o":
        f.base = 8; break;
       case "e":
       case "f":
       case "g":
        f.signedconv = true; f.conv = c; break;
       case "E":
       case "F":
       case "G":
        f.signedconv = true;
        f.uppercase = true;
        f.conv = c.toLowerCase();
        break;
     }
    }
    return f;
   }
   function caml_format_float(fmt, x){
    function toFixed(x, dp){
     if(Math.abs(x) < 1.0)
      return x.toFixed(dp);
     else{
      var e = Number.parseInt(x.toString().split("+")[1]);
      if(e > 20){
       e -= 20;
       x /= Math.pow(10, e);
       x += new Array(e + 1).join("0");
       if(dp > 0) x = x + "." + new Array(dp + 1).join("0");
       return x;
      }
      else
       return x.toFixed(dp);
     }
    }
    var s, f = caml_parse_format(fmt), prec = f.prec < 0 ? 6 : f.prec;
    if(x < 0 || x === 0 && 1 / x === Number.NEGATIVE_INFINITY){f.sign = - 1; x = - x;}
    if(Number.isNaN(x)){
     s = "nan";
     f.filler = " ";
    }
    else if(! Number.isFinite(x)){s = "inf"; f.filler = " ";}
    else
     switch(f.conv){
       case "e":
        var s = x.toExponential(prec), i = s.length;
        if(s.charAt(i - 3) === "e")
         s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
        break;
       case "f":
        s = toFixed(x, prec); break;
       case "g":
        prec = prec ? prec : 1;
        s = x.toExponential(prec - 1);
        var j = s.indexOf("e"), exp = + s.slice(j + 1);
        if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec){
         var i = j - 1;
         while(s.charAt(i) === "0") i--;
         if(s.charAt(i) === ".") i--;
         s = s.slice(0, i + 1) + s.slice(j);
         i = s.length;
         if(s.charAt(i - 3) === "e")
          s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
         break;
        }
        else{
         var p = prec;
         if(exp < 0){
          p -= exp + 1;
          s = x.toFixed(p);
         }
         else
          while(s = x.toFixed(p), s.length > prec + 1) p--;
         if(p){
          var i = s.length - 1;
          while(s.charAt(i) === "0") i--;
          if(s.charAt(i) === ".") i--;
          s = s.slice(0, i + 1);
         }
        }
        break;
     }
    return caml_finish_formatting(f, s);
   }
   function caml_format_int(fmt, i){
    if(caml_jsbytes_of_string(fmt) === "%d")
     return caml_string_of_jsbytes("" + i);
    var f = caml_parse_format(fmt);
    if(i < 0) if(f.signedconv){f.sign = - 1; i = - i;} else i >>>= 0;
    var s = i.toString(f.base);
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - s.length;
     if(n > 0) s = caml_str_repeat(n, "0") + s;
    }
    return caml_finish_formatting(f, s);
   }
   var caml_oo_last_id = 0;
   function caml_fresh_oo_id(){return caml_oo_last_id++;}
   function caml_frexp_float(x){
    if(x === 0 || ! Number.isFinite(x)) return [0, x, 0];
    var neg = x < 0;
    if(neg) x = - x;
    var exp = Math.max(- 1023, jsoo_floor_log2(x) + 1);
    x *= Math.pow(2, - exp);
    while(x < 0.5){x *= 2; exp--;}
    while(x >= 1){x *= 0.5; exp++;}
    if(neg) x = - x;
    return [0, x, exp];
   }
   function jsoo_create_file(name, content){
    var
     name = caml_string_of_jsstring(name),
     content = caml_string_of_jsbytes(content);
    return caml_create_file(name, content);
   }
   function caml_fs_init(){
    var tmp = globalThis.jsoo_fs_tmp;
    if(tmp)
     for(var i = 0; i < tmp.length; i++)
      jsoo_create_file(tmp[i].name, tmp[i].content);
    globalThis.jsoo_create_file = jsoo_create_file;
    globalThis.jsoo_fs_tmp = [];
    return 0;
   }
   function caml_gc_compaction(){return 0;}
   function caml_gc_counters(){return [254, 0, 0, 0];}
   function caml_gc_full_major(unit){
    if(typeof globalThis.gc === "function") globalThis.gc();
    return 0;
   }
   function caml_gc_get(){return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];}
   function caml_gc_huge_fallback_count(unit){return 0;}
   function caml_gc_major(unit){
    if(typeof globalThis.gc === "function") globalThis.gc();
    return 0;
   }
   function caml_gc_major_slice(work){return 0;}
   function caml_gc_minor(unit){
    if(typeof globalThis.gc === "function") globalThis.gc(true);
    return 0;
   }
   function caml_gc_minor_words(unit){return 0;}
   function caml_gc_quick_stat(){
    return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
   }
   function caml_gc_set(_control){return 0;}
   function caml_gc_stat(){return caml_gc_quick_stat();}
   function caml_get_current_callstack(){return [0];}
   function caml_get_exception_backtrace(){return 0;}
   function caml_get_exception_raw_backtrace(){return [0];}
   function caml_get_global_data(){return caml_global_data;}
   function caml_get_major_bucket(n){return 0;}
   function caml_get_major_credit(n){return 0;}
   function caml_get_minor_free(unit){return 0;}
   var caml_method_cache = [];
   function caml_get_public_method(obj, tag, cacheid){
    var meths = obj[1], ofs = caml_method_cache[cacheid];
    if(ofs === undefined)
     for(var i = caml_method_cache.length; i < cacheid; i++)
      caml_method_cache[i] = 0;
    else if(meths[ofs] === tag) return meths[ofs - 1];
    var li = 3, hi = meths[1] * 2 + 1, mi;
    while(li < hi){
     mi = li + hi >> 1 | 1;
     if(tag < meths[mi + 1]) hi = mi - 2; else li = mi;
    }
    caml_method_cache[cacheid] = li + 1;
    return tag === meths[li + 1] ? meths[li] : 0;
   }
   function caml_gr_arc_aux(ctx, cx, cy, ry, rx, a1, a2){
    while(a1 > a2) a2 += 360;
    a1 /= 180;
    a2 /= 180;
    var
     rot = 0,
     xPos,
     yPos,
     xPos_prev,
     yPos_prev,
     space = 2,
     num = (a2 - a1) * Math.PI * ((rx + ry) / 2) / space | 0,
     delta = (a2 - a1) * Math.PI / num,
     i = a1 * Math.PI;
    for(var j = 0; j <= num; j++){
     xPos =
      cx - rx * Math.sin(i) * Math.sin(rot * Math.PI)
      + ry * Math.cos(i) * Math.cos(rot * Math.PI);
     xPos = xPos.toFixed(2);
     yPos =
      cy + ry * Math.cos(i) * Math.sin(rot * Math.PI)
      + rx * Math.sin(i) * Math.cos(rot * Math.PI);
     yPos = yPos.toFixed(2);
     if(j === 0)
      ctx.moveTo(xPos, yPos);
     else if(xPos_prev !== xPos || yPos_prev !== yPos) ctx.lineTo(xPos, yPos);
     xPos_prev = xPos;
     yPos_prev = yPos;
     i -= delta;
    }
    return 0;
   }
   var caml_gr_state;
   function caml_gr_state_get(){
    if(caml_gr_state) return caml_gr_state;
    throw caml_maybe_attach_backtrace
           ([0,
             caml_named_value("Graphics.Graphic_failure"),
             caml_string_of_jsbytes("Not initialized")]);
   }
   function caml_gr_blit_image(im, x, y){
    var
     s = caml_gr_state_get(),
     im2 =
       s.context.getImageData
        (x, s.height - im.height - y, im.width, im.height);
    for(var i = 0; i < im2.data.length; i += 4){
     im.data[i] = im2.data[i];
     im.data[i + 1] = im2.data[i + 1];
     im.data[i + 2] = im2.data[i + 2];
     im.data[i + 3] = im2.data[i + 3];
    }
    return 0;
   }
   function caml_gr_clear_graph(){
    var s = caml_gr_state_get();
    s.canvas.width = s.width;
    s.canvas.height = s.height;
    return 0;
   }
   function caml_gr_close_graph(){
    var s = caml_gr_state_get();
    s.canvas.width = 0;
    s.canvas.height = 0;
    return 0;
   }
   function caml_gr_close_subwindow(a){
    caml_failwith("caml_gr_close_subwindow not Implemented");
   }
   function caml_gr_create_image(x, y){
    var s = caml_gr_state_get();
    return s.context.createImageData(x, y);
   }
   function caml_gr_current_x(){var s = caml_gr_state_get(); return s.x;}
   function caml_gr_current_y(){var s = caml_gr_state_get(); return s.y;}
   function caml_gr_display_mode(){
    caml_failwith("caml_gr_display_mode not Implemented");
   }
   function caml_gr_doc_of_state(state){
    if(state.canvas.ownerDocument) return state.canvas.ownerDocument;
   }
   function caml_gr_draw_arc(x, y, rx, ry, a1, a2){
    var s = caml_gr_state_get();
    s.context.beginPath();
    caml_gr_arc_aux(s.context, x, s.height - y, rx, ry, a1, a2);
    s.context.stroke();
    return 0;
   }
   function caml_gr_draw_str(str){
    var s = caml_gr_state_get(), m = s.context.measureText(str), dx = m.width;
    s.context.fillText(str, s.x, s.height - s.y);
    s.x += dx | 0;
    return 0;
   }
   function caml_gr_draw_char(c){
    caml_gr_draw_str(String.fromCharCode(c));
    return 0;
   }
   function caml_gr_draw_image(im, x, y){
    var s = caml_gr_state_get();
    if(! im.image){
     var canvas = document.createElement("canvas");
     canvas.width = s.width;
     canvas.height = s.height;
     canvas.getContext("2d").putImageData(im, 0, 0);
     var image = new globalThis.Image();
     image.onload =
      function(){
       s.context.drawImage(image, x, s.height - im.height - y);
       im.image = image;
      };
     image.src = canvas.toDataURL("image/png");
    }
    else
     s.context.drawImage(im.image, x, s.height - im.height - y);
    return 0;
   }
   function caml_gr_draw_rect(x, y, w, h){
    var s = caml_gr_state_get();
    s.context.strokeRect(x, s.height - y, w, - h);
    return 0;
   }
   function caml_gr_draw_string(str){
    caml_gr_draw_str(caml_jsstring_of_string(str));
    return 0;
   }
   function caml_gr_dump_image(im){
    var data = [0];
    for(var i = 0; i < im.height; i++){
     data[i + 1] = [0];
     for(var j = 0; j < im.width; j++){
      var
       o = i * (im.width * 4) + j * 4,
       r = im.data[o + 0],
       g = im.data[o + 1],
       b = im.data[o + 2];
      data[i + 1][j + 1] = (r << 16) + (g << 8) + b;
     }
    }
    return data;
   }
   function caml_gr_fill_arc(x, y, rx, ry, a1, a2){
    var s = caml_gr_state_get();
    s.context.beginPath();
    caml_gr_arc_aux(s.context, x, s.height - y, rx, ry, a1, a2);
    s.context.fill();
    return 0;
   }
   function caml_gr_fill_poly(ar){
    var s = caml_gr_state_get();
    s.context.beginPath();
    s.context.moveTo(ar[1][1], s.height - ar[1][2]);
    for(var i = 2; i < ar.length; i++)
     s.context.lineTo(ar[i][1], s.height - ar[i][2]);
    s.context.lineTo(ar[1][1], s.height - ar[1][2]);
    s.context.fill();
    return 0;
   }
   function caml_gr_fill_rect(x, y, w, h){
    var s = caml_gr_state_get();
    s.context.fillRect(x, s.height - y, w, - h);
    return 0;
   }
   function caml_gr_lineto(x, y){
    var s = caml_gr_state_get();
    s.context.beginPath();
    s.context.moveTo(s.x, s.height - s.y);
    s.context.lineTo(x, s.height - y);
    s.context.stroke();
    s.x = x;
    s.y = y;
    return 0;
   }
   function caml_gr_make_image(arr){
    var
     s = caml_gr_state_get(),
     h = arr.length - 1,
     w = arr[1].length - 1,
     im = s.context.createImageData(w, h);
    for(var i = 0; i < h; i++)
     for(var j = 0; j < w; j++){
      var c = arr[i + 1][j + 1], o = i * (w * 4) + j * 4;
      if(c === - 1){
       im.data[o + 0] = 0;
       im.data[o + 1] = 0;
       im.data[o + 2] = 0;
       im.data[o + 3] = 0;
      }
      else{
       im.data[o + 0] = c >> 16 & 0xff;
       im.data[o + 1] = c >> 8 & 0xff;
       im.data[o + 2] = c >> 0 & 0xff;
       im.data[o + 3] = 0xff;
      }
     }
    return im;
   }
   function caml_gr_moveto(x, y){
    var s = caml_gr_state_get();
    s.x = x;
    s.y = y;
    return 0;
   }
   function caml_gr_set_window_title(name){
    var s = caml_gr_state_get();
    s.title = name;
    var jsname = caml_jsstring_of_string(name);
    if(s.set_title) s.set_title(jsname);
    return 0;
   }
   function caml_gr_set_line_width(w){
    var s = caml_gr_state_get();
    s.line_width = w;
    s.context.lineWidth = w;
    return 0;
   }
   function caml_gr_set_text_size(size){
    var s = caml_gr_state_get();
    s.text_size = size;
    s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
    return 0;
   }
   function caml_gr_set_font(f){
    var s = caml_gr_state_get();
    s.font = f;
    s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
    return 0;
   }
   function caml_gr_set_color(color){
    var s = caml_gr_state_get();
    function convert(number){
     var str = "" + number.toString(16);
     while(str.length < 2) str = "0" + str;
     return str;
    }
    var r = color >> 16 & 0xff, g = color >> 8 & 0xff, b = color >> 0 & 0xff;
    s.color = color;
    var c_str = "#" + convert(r) + convert(g) + convert(b);
    s.context.fillStyle = c_str;
    s.context.strokeStyle = c_str;
    return 0;
   }
   function caml_gr_resize_window(w, h){
    var s = caml_gr_state_get();
    s.width = w;
    s.height = h;
    s.canvas.width = w;
    s.canvas.height = h;
    return 0;
   }
   function caml_gr_state_init(){
    caml_gr_moveto(caml_gr_state.x, caml_gr_state.y);
    caml_gr_resize_window(caml_gr_state.width, caml_gr_state.height);
    caml_gr_set_line_width(caml_gr_state.line_width);
    caml_gr_set_text_size(caml_gr_state.text_size);
    caml_gr_set_font(caml_gr_state.font);
    caml_gr_set_color(caml_gr_state.color);
    caml_gr_set_window_title(caml_gr_state.title);
    caml_gr_state.context.textBaseline = "bottom";
   }
   function caml_gr_state_set(ctx){
    caml_gr_state = ctx;
    caml_gr_state_init();
    return 0;
   }
   function caml_gr_state_create(canvas, w, h){
    var context = canvas.getContext("2d");
    return {context: context,
            canvas: canvas,
            x: 0,
            y: 0,
            width: w,
            height: h,
            line_width: 1,
            font: caml_string_of_jsbytes("fixed"),
            text_size: 26,
            color: 0x000000,
            title: caml_string_of_jsbytes("")};
   }
   function caml_gr_open_graph(info){
    var info = caml_jsstring_of_string(info);
    function get(name){
     var res = info.match("(^|,) *" + name + " *= *([a-zA-Z0-9_]+) *(,|$)");
     if(res) return res[2];
    }
    var specs = [];
    if(! (info === "")) specs.push(info);
    var target = get("target");
    if(! target) target = "";
    var status = get("status");
    if(! status) specs.push("status=1");
    var w = get("width");
    w = w ? Number.parseInt(w) : 200;
    specs.push("width=" + w);
    var h = get("height");
    h = h ? Number.parseInt(h) : 200;
    specs.push("height=" + h);
    var win = globalThis.open("about:blank", target, specs.join(","));
    if(! win) caml_failwith("Graphics.open_graph: cannot open the window");
    var doc = win.document, canvas = doc.createElement("canvas");
    canvas.width = w;
    canvas.height = h;
    var ctx = caml_gr_state_create(canvas, w, h);
    ctx.set_title = function(title){doc.title = title;};
    caml_gr_state_set(ctx);
    var body = doc.body;
    body.style.margin = "0px";
    body.appendChild(canvas);
    return 0;
   }
   function caml_gr_open_subwindow(a, b, c, d){
    caml_failwith("caml_gr_open_subwindow not Implemented");
   }
   function caml_gr_plot(x, y){
    var
     s = caml_gr_state_get(),
     im = s.context.createImageData(1, 1),
     d = im.data,
     color = s.color;
    d[0] = color >> 16 & 0xff;
    d[1] = color >> 8 & 0xff, d[2] = color >> 0 & 0xff;
    d[3] = 0xff;
    s.x = x;
    s.y = y;
    s.context.putImageData(im, x, s.height - y);
    return 0;
   }
   function caml_gr_point_color(x, y){
    var
     s = caml_gr_state_get(),
     im = s.context.getImageData(x, s.height - y, 1, 1),
     d = im.data;
    return (d[0] << 16) + (d[1] << 8) + d[2];
   }
   function caml_gr_remember_mode(){
    caml_failwith("caml_gr_remember_mode not Implemented");
   }
   function caml_gr_sigio_handler(){return 0;}
   function caml_gr_sigio_signal(){return 0;}
   function caml_gr_size_x(){var s = caml_gr_state_get(); return s.width;}
   function caml_gr_size_y(){var s = caml_gr_state_get(); return s.height;}
   function caml_gr_synchronize(){
    caml_failwith("caml_gr_synchronize not Implemented");
   }
   function caml_gr_text_size(txt){
    var
     s = caml_gr_state_get(),
     w = s.context.measureText(caml_jsstring_of_string(txt)).width;
    return [0, w, s.text_size];
   }
   function caml_gr_wait_event(_evl){
    caml_failwith
     ("caml_gr_wait_event not Implemented: use Graphics_js instead");
   }
   function caml_gr_window_id(a){
    caml_failwith("caml_gr_window_id not Implemented");
   }
   function caml_greaterequal(x, y){
    return + (caml_compare_val(x, y, false) >= 0);
   }
   function caml_greaterthan(x, y){
    return + (caml_compare_val(x, y, false) > 0);
   }
   function caml_hash_mix_jsbytes(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w =
      s.charCodeAt(i) | s.charCodeAt(i + 1) << 8 | s.charCodeAt(i + 2) << 16
      | s.charCodeAt(i + 3) << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s.charCodeAt(i + 2) << 16;
      case 2:
       w |= s.charCodeAt(i + 1) << 8;
      case 1:
       w |= s.charCodeAt(i); h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_hash_mix_string(h, v){
    return caml_hash_mix_jsbytes(h, caml_jsbytes_of_string(v));
   }
   function caml_hash_mix_bytes_arr(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s[i + 2] << 16;
      case 2:
       w |= s[i + 1] << 8;
      case 1:
       w |= s[i]; h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_ml_bytes_content(s){
    switch(s.t & 6){
      case 2:
       caml_convert_string_to_bytes(s); return s.c;
      default: return s.c;
    }
   }
   function caml_hash_mix_bytes(h, v){
    var content = caml_ml_bytes_content(v);
    return typeof content === "string"
            ? caml_hash_mix_jsbytes(h, content)
            : caml_hash_mix_bytes_arr(h, content);
   }
   function caml_hash_mix_final(h){
    h ^= h >>> 16;
    h = caml_mul(h, 0x85ebca6b | 0);
    h ^= h >>> 13;
    h = caml_mul(h, 0xc2b2ae35 | 0);
    h ^= h >>> 16;
    return h;
   }
   function caml_hash(count, limit, seed, obj){
    var queue, rd, wr, sz, num, h, v, i, len;
    sz = limit;
    if(sz < 0 || sz > 256) sz = 256;
    num = count;
    h = seed;
    queue = [obj];
    rd = 0;
    wr = 1;
    while(rd < wr && num > 0){
     v = queue[rd++];
     if(v && v.caml_custom){
      if
       (caml_custom_ops[v.caml_custom] && caml_custom_ops[v.caml_custom].hash){
       var hh = caml_custom_ops[v.caml_custom].hash(v);
       h = caml_hash_mix_int(h, hh);
       num--;
      }
     }
     else if(Array.isArray(v) && v[0] === (v[0] | 0))
      switch(v[0]){
        case 248:
         h = caml_hash_mix_int(h, v[2]); num--; break;
        case 250:
         queue[--rd] = v[1]; break;
        default:
         if(caml_is_continuation_tag(v[0])) break;
         var tag = v.length - 1 << 10 | v[0];
         h = caml_hash_mix_int(h, tag);
         for(i = 1, len = v.length; i < len; i++){if(wr >= sz) break; queue[wr++] = v[i];
         }
         break;
      }
     else if(caml_is_ml_bytes(v)){
      h = caml_hash_mix_bytes(h, v);
      num--;
     }
     else if(caml_is_ml_string(v)){
      h = caml_hash_mix_string(h, v);
      num--;
     }
     else if(typeof v === "string"){
      h = caml_hash_mix_jsbytes(h, v);
      num--;
     }
     else if(v === (v | 0)){
      h = caml_hash_mix_int(h, v + v + 1);
      num--;
     }
     else if(typeof v === "number"){h = caml_hash_mix_float(h, v); num--;}
    }
    h = caml_hash_mix_final(h);
    return h & 0x3fffffff;
   }
   function caml_hash_mix_bigstring(h, bs){
    return caml_hash_mix_bytes_arr(h, bs.data);
   }
   function num_digits_nat(nat, ofs, len){
    for(var i = len - 1; i >= 0; i--)
     if(nat.data[ofs + i] !== 0) return i + 1;
    return 1;
   }
   function caml_hash_nat(x){
    var len = num_digits_nat(x, 0, x.data.length), h = 0;
    for(var i = 0; i < len; i++) h = caml_hash_mix_int(h, x.data[i]);
    return h;
   }
   function caml_hexstring_of_float(x, prec, style){
    if(! Number.isFinite(x)){
     if(Number.isNaN(x)) return caml_string_of_jsstring("nan");
     return caml_string_of_jsstring(x > 0 ? "infinity" : "-infinity");
    }
    var
     sign = x === 0 && 1 / x === Number.NEGATIVE_INFINITY ? 1 : x >= 0 ? 0 : 1;
    if(sign) x = - x;
    var exp = 0;
    if(x === 0)
     ;
    else if(x < 1)
     while(x < 1 && exp > - 1022){x *= 2; exp--;}
    else
     while(x >= 2){x /= 2; exp++;}
    var exp_sign = exp < 0 ? "" : "+", sign_str = "";
    if(sign)
     sign_str = "-";
    else
     switch(style){
       case 43:
        sign_str = "+"; break;
       case 32:
        sign_str = " "; break;
       default: break;
     }
    if(prec >= 0 && prec < 13){
     var cst = Math.pow(2, prec * 4);
     x = Math.round(x * cst) / cst;
    }
    var x_str = x.toString(16);
    if(prec >= 0){
     var idx = x_str.indexOf(".");
     if(idx < 0)
      x_str += "." + caml_str_repeat(prec, "0");
     else{
      var size = idx + 1 + prec;
      if(x_str.length < size)
       x_str += caml_str_repeat(size - x_str.length, "0");
      else
       x_str = x_str.slice(0, size);
     }
    }
    return caml_string_of_jsstring
            (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10));
   }
   function caml_hypot_float(x, y){return Math.hypot(x, y);}
   var caml_marshal_header_size = 20;
   function caml_refill(chan){
    if(chan.refill != null){
     var str = chan.refill(), str_a = caml_uint8_array_of_string(str);
     if(str_a.length === 0)
      chan.refill = null;
     else{
      if(chan.buffer.length < chan.buffer_max + str_a.length){
       var b = new Uint8Array(chan.buffer_max + str_a.length);
       b.set(chan.buffer);
       chan.buffer = b;
      }
      chan.buffer.set(str_a, chan.buffer_max);
      chan.offset += str_a.length;
      chan.buffer_max += str_a.length;
     }
    }
    else{
     if(chan.fd === - 1) caml_raise_sys_error("Bad file descriptor");
     var
      nread =
        chan.file.read
         (chan.buffer, chan.buffer_max, chan.buffer.length - chan.buffer_max);
     chan.offset += nread;
     chan.buffer_max += nread;
    }
   }
   function caml_raise_end_of_file(){
    caml_raise_constant(caml_global_data.End_of_file);
   }
   function caml_marshal_data_size(s, ofs){
    var r = new UInt8ArrayReader(caml_uint8_array_of_bytes(s), ofs);
    function readvlq(overflow){
     var c = r.read8u(), n = c & 0x7f;
     while((c & 0x80) !== 0){
      c = r.read8u();
      var n7 = n << 7;
      if(n !== n7 >> 7) overflow[0] = true;
      n = n7 | c & 0x7f;
     }
     return n;
    }
    switch(r.read32u()){
      case 0x8495a6be:
       var header_len = 20, data_len = r.read32u(); break;
      case 0x8495a6bd:
       var
        header_len = r.read8u() & 0x3f,
        overflow = [false],
        data_len = readvlq(overflow);
       if(overflow[0])
        caml_failwith
         ("Marshal.data_size: object too large to be read back on this platform");
       break;
      case 0x8495a6bf:
       caml_failwith
        ("Marshal.data_size: object too large to be read back on a 32-bit platform");
       break;
      default: caml_failwith("Marshal.data_size: bad object"); break;
    }
    return header_len - caml_marshal_header_size + data_len;
   }
   function caml_set_oo_id(b){b[2] = caml_oo_last_id++; return b;}
   function caml_input_value_from_reader(reader, ofs){
    function readvlq(overflow){
     var c = reader.read8u(), n = c & 0x7f;
     while((c & 0x80) !== 0){
      c = reader.read8u();
      var n7 = n << 7;
      if(n !== n7 >> 7) overflow[0] = true;
      n = n7 | c & 0x7f;
     }
     return n;
    }
    var magic = reader.read32u();
    switch(magic){
      case 0x8495a6be:
       var
        header_len = 20,
        compressed = 0,
        data_len = reader.read32u(),
        uncompressed_data_len = data_len,
        num_objects = reader.read32u(),
        _size_32 = reader.read32u(),
        _size_64 = reader.read32u();
       break;
      case 0x8495a6bd:
       var
        header_len = reader.read8u() & 0x3f,
        compressed = 1,
        overflow = [false],
        data_len = readvlq(overflow),
        uncompressed_data_len = readvlq(overflow),
        num_objects = readvlq(overflow),
        _size_32 = readvlq(overflow),
        _size_64 = readvlq(overflow);
       if(overflow[0])
        caml_failwith
         ("caml_input_value_from_reader: object too large to be read back on this platform");
       break;
      case 0x8495a6bf:
       caml_failwith
        ("caml_input_value_from_reader: object too large to be read back on a 32-bit platform");
       break;
      default:
       caml_failwith("caml_input_value_from_reader: bad object"); break;
    }
    var
     stack = [],
     objects = [],
     intern_obj_table = num_objects > 0 ? [] : null,
     obj_counter = 0;
    function intern_rec(reader){
     var code = reader.read8u();
     if(code >= 0x40)
      if(code >= 0x80){
       var tag = code & 0xf, size = code >> 4 & 0x7, v = [tag];
       if(size === 0) return v;
       if(intern_obj_table) intern_obj_table[obj_counter++] = v;
       if(tag === 248) objects.push(v);
       stack.push(v, size);
       return v;
      }
      else
       return code & 0x3f;
     else if(code >= 0x20){
      var len = code & 0x1f, v = reader.readstr(len);
      if(intern_obj_table) intern_obj_table[obj_counter++] = v;
      return v;
     }
     else
      switch(code){
        case 0x00:
         return reader.read8s();
        case 0x01:
         return reader.read16s();
        case 0x02:
         return reader.read32s();
        case 0x03:
         caml_failwith("input_value: integer too large"); break;
        case 0x04:
         var offset = reader.read8u();
         if(compressed === 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x05:
         var offset = reader.read16u();
         if(compressed === 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x06:
         var offset = reader.read32u();
         if(compressed === 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x08:
         var
          header = reader.read32u(),
          tag = header & 0xff,
          size = header >> 10,
          v = [tag];
         if(size === 0) return v;
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         if(tag === 248) objects.push(v);
         stack.push(v, size);
         return v;
        case 0x13:
         caml_failwith("input_value: data block too large"); break;
        case 0x09:
         var len = reader.read8u(), v = reader.readstr(len);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0a:
         var len = reader.read32u(), v = reader.readstr(len);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0c:
         var t = new Array(8);
         for(var i = 0; i < 8; i++) t[7 - i] = reader.read8u();
         var v = caml_float_of_bytes(t);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0b:
         var t = new Array(8);
         for(var i = 0; i < 8; i++) t[i] = reader.read8u();
         var v = caml_float_of_bytes(t);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0e:
         var len = reader.read8u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[7 - j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x0d:
         var len = reader.read8u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x07:
         var len = reader.read32u(), v = new Array(len + 1);
         v[0] = 254;
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         var t = new Array(8);
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[7 - j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x0f:
         var len = reader.read32u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x10:
        case 0x11:
         caml_failwith("input_value: code pointer"); break;
        case 0x12:
        case 0x18:
        case 0x19:
         var c, s = "";
         while((c = reader.read8u()) !== 0) s += String.fromCharCode(c);
         var ops = caml_custom_ops[s], expected_size;
         if(! ops)
          caml_failwith("input_value: unknown custom block identifier");
         switch(code){
           case 0x12: break;
           case 0x19:
            if(! ops.fixed_length)
             caml_failwith("input_value: expected a fixed-size custom block");
            expected_size = ops.fixed_length;
            break;
           case 0x18:
            expected_size = reader.read32u();
            reader.read32s();
            reader.read32s();
            break;
         }
         var
          old_pos = reader.i,
          size = [0],
          v = ops.deserialize(reader, size);
         if(expected_size !== undefined)
          if(expected_size !== size[0])
           caml_failwith
            ("input_value: incorrect length of serialized custom block");
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        default: caml_failwith("input_value: ill-formed message");
      }
    }
    if(compressed)
     if(caml_decompress_input)
      var
       data = reader.readuint8array(data_len),
       res = new Uint8Array(uncompressed_data_len),
       res = caml_decompress_input(data, res),
       reader = new UInt8ArrayReader(res, 0);
     else
      caml_failwith("input_value: compressed object, cannot decompress");
    var res = intern_rec(reader);
    while(stack.length > 0){
     var size = stack.pop(), v = stack.pop(), d = v.length;
     if(d < size) stack.push(v, size);
     v[d] = intern_rec(reader);
    }
    while(objects.length > 0){
     var x = objects.pop();
     if(x[2] >= 0) caml_set_oo_id(x);
    }
    return res;
   }
   function caml_string_of_bytes(s){
    s.t & 6 && caml_convert_string_to_bytes(s);
    return caml_string_of_jsbytes(s.c);
   }
   function caml_input_value_from_bytes(s, ofs){
    var
     reader =
       new
        MlStringReader
        (caml_string_of_bytes(s), typeof ofs === "number" ? ofs : ofs[0]);
    return caml_input_value_from_reader(reader, ofs);
   }
   function caml_input_value(chanid){
    var
     chan = caml_ml_channel_get(chanid),
     header = new Uint8Array(caml_marshal_header_size);
    function block(buffer, offset, n){
     var r = 0;
     while(r < n){
      if(chan.buffer_curr >= chan.buffer_max){
       chan.buffer_curr = 0;
       chan.buffer_max = 0;
       caml_refill(chan);
      }
      if(chan.buffer_curr >= chan.buffer_max) break;
      buffer[offset + r] = chan.buffer[chan.buffer_curr];
      chan.buffer_curr++;
      r++;
     }
     return r;
    }
    var r = block(header, 0, caml_marshal_header_size);
    if(r === 0)
     caml_raise_end_of_file();
    else if(r < caml_marshal_header_size)
     caml_failwith("input_value: truncated object");
    var
     len = caml_marshal_data_size(caml_bytes_of_uint8_array(header), 0),
     buf = new Uint8Array(len + caml_marshal_header_size);
    buf.set(header, 0);
    var r = block(buf, caml_marshal_header_size, len);
    if(r < len)
     caml_failwith("input_value: truncated object " + r + "  " + len);
    var res = caml_input_value_from_bytes(caml_bytes_of_uint8_array(buf), 0);
    return res;
   }
   function caml_install_signal_handler(){return 0;}
   function caml_int32_bswap(x){
    return (x & 0x000000ff) << 24 | (x & 0x0000ff00) << 8
           | (x & 0x00ff0000) >>> 8
           | (x & 0xff000000) >>> 24;
   }
   function caml_int64_add(x, y){return x.add(y);}
   function caml_int64_and(x, y){return x.and(y);}
   function caml_int64_bswap(x){
    var y = caml_int64_to_bytes(x);
    return caml_int64_of_bytes
            ([y[7], y[6], y[5], y[4], y[3], y[2], y[1], y[0]]);
   }
   function caml_int64_div(x, y){return x.div(y);}
   function caml_int64_is_zero(x){return + x.isZero();}
   function caml_int64_of_int32(x){
    return new MlInt64(x & 0xffffff, x >> 24 & 0xffffff, x >> 31 & 0xffff);
   }
   function caml_int64_to_int32(x){return x.toInt();}
   function caml_int64_is_negative(x){return + x.isNeg();}
   function caml_int64_neg(x){return x.neg();}
   function caml_int64_format(fmt, x){
    var f = caml_parse_format(fmt);
    if(f.signedconv && caml_int64_is_negative(x)){f.sign = - 1; x = caml_int64_neg(x);}
    var
     buffer = "",
     wbase = caml_int64_of_int32(f.base),
     cvtbl = "0123456789abcdef";
    do{
     var p = x.udivmod(wbase);
     x = p.quotient;
     buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;
    }
    while
     (! caml_int64_is_zero(x));
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - buffer.length;
     if(n > 0) buffer = caml_str_repeat(n, "0") + buffer;
    }
    return caml_finish_formatting(f, buffer);
   }
   function caml_int64_mod(x, y){return x.mod(y);}
   function caml_int64_mul(x, y){return x.mul(y);}
   function caml_int64_ult(x, y){return x.ucompare(y) < 0;}
   function caml_parse_sign_and_base(s){
    var
     i = 0,
     len = caml_ml_string_length(s),
     base = 10,
     sign = 1,
     signedness = 1;
    if(len > 0)
     switch(caml_string_unsafe_get(s, i)){
       case 45:
        i++; sign = - 1; break;
       case 43:
        i++; sign = 1; break;
     }
    if(i + 1 < len && caml_string_unsafe_get(s, i) === 48)
     switch(caml_string_unsafe_get(s, i + 1)){
       case 120:
       case 88:
        signedness = 0; base = 16; i += 2; break;
       case 111:
       case 79:
        signedness = 0; base = 8; i += 2; break;
       case 98:
       case 66:
        signedness = 0; base = 2; i += 2; break;
       case 117:
       case 85:
        signedness = 0; i += 2; break;
     }
    return [i, sign, base, signedness];
   }
   function caml_parse_digit(c){
    if(c >= 48 && c <= 57) return c - 48;
    if(c >= 65 && c <= 90) return c - 55;
    if(c >= 97 && c <= 122) return c - 87;
    return - 1;
   }
   function caml_int64_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     signedness = r[3],
     base64 = caml_int64_of_int32(base),
     threshold =
       new MlInt64(0xffffff, 0xfffffff, 0xffff).udivmod(base64).quotient,
     c = caml_string_unsafe_get(s, i),
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = caml_int64_of_int32(d);
    for(;;){
     i++;
     c = caml_string_unsafe_get(s, i);
     if(c === 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     if(caml_int64_ult(threshold, res)) caml_failwith("int_of_string");
     d = caml_int64_of_int32(d);
     res = caml_int64_add(caml_int64_mul(base64, res), d);
     if(caml_int64_ult(res, d)) caml_failwith("int_of_string");
    }
    if(i !== caml_ml_string_length(s)) caml_failwith("int_of_string");
    if(signedness && caml_int64_ult(new MlInt64(0, 0, 0x8000), res))
     caml_failwith("int_of_string");
    if(sign < 0) res = caml_int64_neg(res);
    return res;
   }
   function caml_int64_or(x, y){return x.or(y);}
   function caml_int64_shift_left(x, s){return x.shift_left(s);}
   function caml_int64_shift_right(x, s){return x.shift_right(s);}
   function caml_int64_shift_right_unsigned(x, s){return x.shift_right_unsigned(s);
   }
   function caml_int64_sub(x, y){return x.sub(y);}
   function caml_int64_to_float(x){return x.toFloat();}
   function caml_int64_xor(x, y){return x.xor(y);}
   function caml_int_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     signedness = r[3],
     len = caml_ml_string_length(s),
     threshold = - 1 >>> 0,
     c = i < len ? caml_string_unsafe_get(s, i) : 0,
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = d;
    for(i++; i < len; i++){
     c = caml_string_unsafe_get(s, i);
     if(c === 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     res = base * res + d;
     if(res > threshold) caml_failwith("int_of_string");
    }
    if(i !== len) caml_failwith("int_of_string");
    res = sign * res;
    if(signedness && (res | 0) !== res) caml_failwith("int_of_string");
    return res | 0;
   }
   function caml_is_js(){return 1;}
   function caml_is_printable(c){return + (c > 31 && c < 127);}
   function caml_js_call(f, o, args){
    return f.apply(o, caml_js_from_array(args));
   }
   function caml_js_delete(o, f){delete o[f]; return 0;}
   function caml_js_equals(x, y){return + (x == y);}
   function caml_js_error_of_exception(exn){
    if(exn.js_error) return exn.js_error;
    return null;
   }
   function caml_js_error_option_of_exception(exn){
    if(exn.js_error) return [0, exn.js_error];
    return 0;
   }
   function caml_js_eval_string(s){return eval(caml_jsstring_of_string(s));}
   function caml_js_expr(s){
    console.error("caml_js_expr: fallback to runtime evaluation\n");
    return eval(caml_jsstring_of_string(s));
   }
   function caml_js_from_bool(x){return ! ! x;}
   function caml_js_from_float(x){return x;}
   function caml_js_from_string(s){return caml_jsstring_of_string(s);}
   function caml_js_fun_call(f, a){
    switch(a.length){
      case 1:
       return f();
      case 2:
       return f(a[1]);
      case 3:
       return f(a[1], a[2]);
      case 4:
       return f(a[1], a[2], a[3]);
      case 5:
       return f(a[1], a[2], a[3], a[4]);
      case 6:
       return f(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return f(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return f(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    return f.apply(null, caml_js_from_array(a));
   }
   function caml_js_function_arity(f){return f.l >= 0 ? f.l : f.l = f.length;}
   function caml_js_get(o, f){return o[f];}
   function caml_js_get_console(){
    var
     c = console,
     m =
       ["log",
        "debug",
        "info",
        "warn",
        "error",
        "assert",
        "dir",
        "dirxml",
        "trace",
        "group",
        "groupCollapsed",
        "groupEnd",
        "time",
        "timeEnd"];
    function f(){}
    for(var i = 0; i < m.length; i++) if(! c[m[i]]) c[m[i]] = f;
    return c;
   }
   function caml_js_html_entities(s){
    var entity = /^&#?[0-9a-zA-Z]+;$/;
    if(s.match(entity)){
     var str, temp = document.createElement("p");
     temp.innerHTML = s;
     str = temp.textContent || temp.innerText;
     temp = null;
     return str;
    }
    else
     return null;
   }
   var caml_js_regexps = {amp: /&/g, lt: /</g, quot: /"/g, all: /[&<"]/};
   function caml_js_html_escape(s){
    if(! caml_js_regexps.all.test(s)) return s;
    return s.replace(caml_js_regexps.amp, "&amp;").replace
             (caml_js_regexps.lt, "&lt;").replace
            (caml_js_regexps.quot, "&quot;");
   }
   function caml_js_instanceof(o, c){return o instanceof c ? 1 : 0;}
   function caml_js_meth_call(o, f, args){
    return o[caml_jsstring_of_string(f)].apply(o, caml_js_from_array(args));
   }
   function caml_js_new(c, a){
    switch(a.length){
      case 1:
       return new c();
      case 2:
       return new c(a[1]);
      case 3:
       return new c(a[1], a[2]);
      case 4:
       return new c(a[1], a[2], a[3]);
      case 5:
       return new c(a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    function F(){return c.apply(this, caml_js_from_array(a));}
    F.prototype = c.prototype;
    return new F();
   }
   function caml_js_object(a){
    var o = {};
    for(var i = 1; i < a.length; i++){
     var p = a[i];
     o[caml_jsstring_of_string(p[1])] = p[2];
    }
    return o;
   }
   function caml_js_pure_expr(f){return caml_callback(f, [0]);}
   function caml_js_set(o, f, v){o[f] = v; return 0;}
   function caml_js_strict_equals(x, y){return + (x === y);}
   function caml_js_to_array(a){
    var len = a.length, b = new Array(len + 1);
    b[0] = 0;
    for(var i = 0; i < len; i++) b[i + 1] = a[i];
    return b;
   }
   function caml_js_to_bool(x){return + x;}
   function caml_js_to_byte_string(s){return caml_string_of_jsbytes(s);}
   function caml_js_to_float(x){return x;}
   function caml_js_to_int32(x){return x | 0;}
   function caml_js_to_string(s){return caml_string_of_jsstring(s);}
   function caml_js_typeof(o){return typeof o;}
   function caml_js_var(x){
    var x = caml_jsstring_of_string(x);
    if(! x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))
     console.error
      ('caml_js_var: "' + x
       + '" is not a valid JavaScript variable. continuing ..');
    return eval(x);
   }
   function caml_js_wrap_callback(f){
    return function(...args){
     if(args.length === 0) args = [undefined];
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_js_wrap_callback_arguments(f){
    return function(...args){return caml_callback(f, [args]);};
   }
   function caml_js_wrap_callback_strict(arity, f){
    return function(...args){
     args.length = arity;
     return caml_callback(f, args);};
   }
   function caml_js_wrap_callback_unsafe(f){
    return function(...args){
     var len = caml_js_function_arity(f);
     args.length = len;
     return caml_callback(f, args);};
   }
   function caml_js_wrap_meth_callback(f){
    return function(...args){
     args.unshift(this);
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_js_wrap_meth_callback_arguments(f){
    return function(...args){return caml_callback(f, [this, args]);};
   }
   function caml_js_wrap_meth_callback_strict(arity, f){
    return function(...args){
     args.length = arity;
     args.unshift(this);
     return caml_callback(f, args);};
   }
   function caml_js_wrap_meth_callback_unsafe(f){
    return function(...args){
     var len = caml_js_function_arity(f);
     args.unshift(this);
     args.length = len;
     return caml_callback(f, args);};
   }
   function caml_jsoo_flags_effects(unit){return "disabled";}
   function caml_jsoo_flags_use_js_string(unit){return 1;}
   function caml_lazy_make_forward(v){return [250, v];}
   function caml_ldexp_float(x, exp){
    exp |= 0;
    if(exp > 1023){
     exp -= 1023;
     x *= Math.pow(2, 1023);
     if(exp > 1023){exp -= 1023; x *= Math.pow(2, 1023);}
    }
    if(exp < - 1023){exp += 1023; x *= Math.pow(2, - 1023);}
    x *= Math.pow(2, exp);
    return x;
   }
   function caml_lessequal(x, y){
    return + (caml_compare_val(x, y, false) <= 0);
   }
   function caml_lessthan(x, y){return + (caml_compare_val(x, y, false) < 0);}
   function caml_lex_array(s){
    s = caml_jsbytes_of_string(s);
    var l = s.length / 2, a = new Array(l);
    for(var i = 0; i < l; i++)
     a[i] = (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8) << 16 >> 16;
    return a;
   }
   function caml_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    var c, state = start_state, buffer = lexbuf[lex_buffer];
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0) return - base - 1;
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] === 0) return - state - 1; else c = 256;
     else{
      c = caml_bytes_unsafe_get(buffer, lexbuf[lex_curr_pos]);
      lexbuf[lex_curr_pos]++;
     }
     if(tbl.lex_check[base + c] === state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] === - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else if(c === 256) lexbuf[lex_eof_reached] = 0;
    }
   }
   function caml_list_mount_point(){
    var prev = 0;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var old = prev;
     prev = [0, caml_string_of_jsstring(jsoo_mount_point[i].path), old];
    }
    return prev;
   }
   function caml_list_of_js_array(a){
    var l = 0;
    for(var i = a.length - 1; i >= 0; i--){var e = a[i]; l = [0, e, l];}
    return l;
   }
   function caml_list_to_js_array(l){
    var a = [];
    for(; l !== 0; l = l[2]) a.push(l[1]);
    return a;
   }
   function caml_log10_float(x){return Math.log10(x);}
   function caml_log1p_float(x){return Math.log1p(x);}
   function caml_log2_float(x){return Math.log2(x);}
   function caml_make_float_vect(len){
    if(len >>> 0 >= (0x7fffffff / 8 | 0)) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 254;
    for(var i = 1; i < len; i++) b[i] = 0;
    return b;
   }
   function caml_make_vect(len, init){return caml_array_make(len, init);}
   var
    caml_marshal_constants =
      {PREFIX_SMALL_BLOCK: 0x80,
       PREFIX_SMALL_INT: 0x40,
       PREFIX_SMALL_STRING: 0x20,
       CODE_INT8: 0x00,
       CODE_INT16: 0x01,
       CODE_INT32: 0x02,
       CODE_INT64: 0x03,
       CODE_SHARED8: 0x04,
       CODE_SHARED16: 0x05,
       CODE_SHARED32: 0x06,
       CODE_BLOCK32: 0x08,
       CODE_BLOCK64: 0x13,
       CODE_STRING8: 0x09,
       CODE_STRING32: 0x0a,
       CODE_DOUBLE_BIG: 0x0b,
       CODE_DOUBLE_LITTLE: 0x0c,
       CODE_DOUBLE_ARRAY8_BIG: 0x0d,
       CODE_DOUBLE_ARRAY8_LITTLE: 0x0e,
       CODE_DOUBLE_ARRAY32_BIG: 0x0f,
       CODE_DOUBLE_ARRAY32_LITTLE: 0x07,
       CODE_CODEPOINTER: 0x10,
       CODE_INFIXPOINTER: 0x11,
       CODE_CUSTOM: 0x12,
       CODE_CUSTOM_LEN: 0x18,
       CODE_CUSTOM_FIXED: 0x19};
   function caml_maybe_print_stats(unit){return 0;}
   function caml_md5_bytes(s, ofs, len){
    var ctx = caml_MD5Init(), a = caml_uint8_array_of_bytes(s);
    caml_MD5Update(ctx, a.subarray(ofs, ofs + len), len);
    return caml_string_of_uint8_array(caml_MD5Final(ctx));
   }
   function caml_ml_input_block(chanid, ba, i, l){
    var
     chan = caml_ml_channel_get(chanid),
     n = l,
     avail = chan.buffer_max - chan.buffer_curr;
    if(l <= avail){
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + l), i);
     chan.buffer_curr += l;
    }
    else if(avail > 0){
     ba.set
      (chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + avail), i);
     chan.buffer_curr += avail;
     n = avail;
    }
    else{
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
     var avail = chan.buffer_max - chan.buffer_curr;
     if(n > avail) n = avail;
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + n), i);
     chan.buffer_curr += n;
    }
    return n | 0;
   }
   function caml_md5_chan(chanid, toread){
    var ctx = caml_MD5Init(), buffer = new Uint8Array(4096);
    if(toread < 0)
     while(true){
      var read = caml_ml_input_block(chanid, buffer, 0, buffer.length);
      if(read === 0) break;
      caml_MD5Update(ctx, buffer.subarray(0, read), read);
     }
    else
     while(toread > 0){
      var
       read =
         caml_ml_input_block
          (chanid, buffer, 0, toread > buffer.length ? buffer.length : toread);
      if(read === 0) caml_raise_end_of_file();
      caml_MD5Update(ctx, buffer.subarray(0, read), read);
      toread -= read;
     }
    return caml_string_of_uint8_array(caml_MD5Final(ctx));
   }
   function caml_md5_string(s, ofs, len){
    return caml_md5_bytes(caml_bytes_of_string(s), ofs, len);
   }
   function caml_memprof_start(rate, stack_size, tracker){return 0;}
   function caml_memprof_stop(unit){return 0;}
   function caml_ml_channel_redirect(captured, into){
    var
     to_restore = caml_ml_channel_get(captured),
     new_ = caml_ml_channel_get(into);
    caml_ml_channels.set(captured, new_);
    return to_restore;
   }
   function caml_ml_channel_restore(captured, to_restore){caml_ml_channels.set(captured, to_restore); return 0;
   }
   function caml_ml_channel_size(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.file.length() | 0;
   }
   function caml_ml_channel_size_64(chanid){
    var chan = caml_ml_channel_get(chanid);
    return caml_int64_of_float(chan.file.length());
   }
   var caml_sys_fds = new Array(3);
   function caml_sys_close(fd){
    var x = caml_sys_fds[fd];
    if(x){x.file.close(); delete caml_sys_fds[fd];}
    return 0;
   }
   function caml_ml_flush(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(! chan.opened) caml_raise_sys_error("Cannot flush a closed channel");
    if(! chan.buffer || chan.buffer_curr === 0) return 0;
    if(chan.output)
     chan.output
      (caml_sub_uint8_array_to_jsbytes(chan.buffer, 0, chan.buffer_curr));
    else
     for(var pos = 0; pos < chan.buffer_curr;)
      pos += chan.file.write(chan.buffer, pos, chan.buffer_curr - pos);
    chan.offset += chan.buffer_curr;
    chan.buffer_curr = 0;
    return 0;
   }
   function caml_ml_close_channel(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(chan.opened){
     chan.opened = false;
     caml_ml_channels.close(chanid);
     caml_sys_close(chan.fd);
     chan.fd = - 1;
     chan.buffer = new Uint8Array(0);
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
    }
    return 0;
   }
   function caml_ml_debug_info_status(){return 0;}
   var caml_runtime_warnings = 0;
   function caml_ml_enable_runtime_warnings(bool){caml_runtime_warnings = bool; return 0;
   }
   function caml_ml_input(chanid, b, i, l){
    var ba = caml_uint8_array_of_bytes(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_ml_input_char(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(chan.buffer_curr >= chan.buffer_max){
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
    }
    if(chan.buffer_curr >= chan.buffer_max) caml_raise_end_of_file();
    var res = chan.buffer[chan.buffer_curr];
    chan.buffer_curr++;
    return res;
   }
   function caml_ml_input_int(chanid){
    var chan = caml_ml_channel_get(chanid), res = 0;
    for(var i = 0; i < 4; i++)
     res = (res << 8) + caml_ml_input_char(chanid) | 0;
    return res | 0;
   }
   function caml_ml_input_scan_line(chanid){
    var chan = caml_ml_channel_get(chanid), p = chan.buffer_curr;
    do
     if(p >= chan.buffer_max){
      if(chan.buffer_curr > 0){
       chan.buffer.set(chan.buffer.subarray(chan.buffer_curr), 0);
       p -= chan.buffer_curr;
       chan.buffer_max -= chan.buffer_curr;
       chan.buffer_curr = 0;
      }
      if(chan.buffer_max >= chan.buffer.length) return - chan.buffer_max | 0;
      var prev_max = chan.buffer_max;
      caml_refill(chan);
      if(prev_max === chan.buffer_max) return - chan.buffer_max | 0;
     }
    while
     (chan.buffer[p++] !== 10);
    return p - chan.buffer_curr | 0;
   }
   function caml_ml_is_buffered(chanid){
    return caml_ml_channel_get(chanid).buffered ? 1 : 0;
   }
   function caml_ml_mutex_lock(t){
    if(t.locked)
     caml_failwith("Mutex.lock: mutex already locked. Cannot wait.");
    else
     t.locked = true;
    return 0;
   }
   function caml_ml_mutex_new(unit){return new MlMutex();}
   function caml_ml_mutex_try_lock(t){
    if(! t.locked){t.locked = true; return 1;}
    return 0;
   }
   function caml_ml_mutex_unlock(t){t.locked = false; return 0;}
   function caml_sys_open_for_node(fd, flags){
    if(flags.altname)
     try{
      var fs = require("node:fs"), fd2 = fs.openSync(flags.altname, "rs");
      return new MlNodeFd(fd2, flags);
     }
     catch(e){}
    return new MlNodeFd(fd, flags);
   }
   function caml_sys_open_internal(file, idx){
    var chanid;
    if(idx === undefined){
     idx = caml_sys_fds.length;
     chanid = new MlChanid(idx);
    }
    else if(caml_sys_fds[idx])
     chanid = caml_sys_fds[idx].chanid;
    else
     chanid = new MlChanid(idx);
    caml_sys_fds[idx] = {file: file, chanid: chanid};
    return idx | 0;
   }
   function caml_sys_open(name, flags, perms){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.rdonly = 1; break;
       case 1:
        f.wronly = 1; break;
       case 2:
        f.append = 1; f.writeonly = 1; break;
       case 3:
        f.create = 1; break;
       case 4:
        f.truncate = 1; break;
       case 5:
        f.excl = 1; break;
       case 6:
        f.binary = 1; break;
       case 7:
        f.text = 1; break;
       case 8:
        f.nonblock = 1; break;
     }
     flags = flags[2];
    }
    var
     root = resolve_fs_device(name),
     file = root.device.open(root.rest, f, perms);
    return caml_sys_open_internal(file, undefined);
   }
   (function(){
      var is_node = fs_node_supported();
      function file(fd, flags){
       return is_node
               ? caml_sys_open_for_node(fd, flags)
               : new MlFakeFd_out(fd, flags);
      }
      caml_sys_open_internal
       (file(0, {rdonly: 1, altname: "/dev/stdin", isCharacterDevice: true}),
        0);
      caml_sys_open_internal
       (file
         (1, {buffered: is_node ? 1 : 2, wronly: 1, isCharacterDevice: true}),
        1);
      caml_sys_open_internal
       (file
         (2, {buffered: is_node ? 1 : 2, wronly: 1, isCharacterDevice: true}),
        2);
     }
     ());
   function caml_ml_open_descriptor_in(fd){
    var fd_desc = caml_sys_fds[fd];
    if(fd_desc === undefined)
     caml_raise_sys_error("fd " + fd + " doesn't exist");
    var
     file = fd_desc.file,
     chanid = fd_desc.chanid,
     refill = null,
     channel =
       {file: file,
        offset: file.offset,
        fd: fd,
        opened: true,
        out: false,
        buffer_curr: 0,
        buffer_max: 0,
        buffer: new Uint8Array(65536),
        refill: refill};
    caml_ml_channels.set(chanid, channel);
    return chanid;
   }
   function caml_ml_open_descriptor_out(fd){
    var fd_desc = caml_sys_fds[fd];
    if(fd_desc === undefined)
     caml_raise_sys_error("fd " + fd + " doesn't exist");
    var
     file = fd_desc.file,
     chanid = fd_desc.chanid,
     buffered = file.flags.buffered !== undefined ? file.flags.buffered : 1,
     channel =
       {file: file,
        offset: file.offset,
        fd: fd,
        opened: true,
        out: true,
        buffer_curr: 0,
        buffer: new Uint8Array(65536),
        buffered: buffered};
    caml_ml_channels.set(chanid, channel);
    return chanid;
   }
   function caml_ml_out_channels_list(){
    var l = 0, keys = caml_ml_channels.all();
    for(var k of keys){
     var chan = caml_ml_channel_get(k);
     if(chan.opened && chan.out) l = [0, k, l];
    }
    return l;
   }
   function caml_ml_output_ta(chanid, buffer, offset, len){
    var chan = caml_ml_channel_get(chanid);
    if(! chan.opened)
     caml_raise_sys_error("Cannot output to a closed channel");
    buffer = buffer.subarray(offset, offset + len);
    if(chan.buffer_curr + buffer.length > chan.buffer.length){
     var b = new Uint8Array(chan.buffer_curr + buffer.length);
     b.set(chan.buffer);
     chan.buffer = b;
    }
    switch(chan.buffered){
      case 0:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       caml_ml_flush(chanid);
       break;
      case 1:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       break;
      case 2:
       var id = buffer.lastIndexOf(10);
       if(id < 0){
        chan.buffer.set(buffer, chan.buffer_curr);
        chan.buffer_curr += buffer.length;
        if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       }
       else{
        chan.buffer.set(buffer.subarray(0, id + 1), chan.buffer_curr);
        chan.buffer_curr += id + 1;
        caml_ml_flush(chanid);
        chan.buffer.set(buffer.subarray(id + 1), chan.buffer_curr);
        chan.buffer_curr += buffer.length - id - 1;
       }
       break;
    }
    return 0;
   }
   function caml_ml_output_bytes(chanid, buffer, offset, len){
    var buffer = caml_uint8_array_of_bytes(buffer);
    return caml_ml_output_ta(chanid, buffer, offset, len);
   }
   function caml_ml_output(chanid, buffer, offset, len){
    return caml_ml_output_bytes
            (chanid, caml_bytes_of_string(buffer), offset, len);
   }
   function caml_ml_output_char(chanid, c){
    var s = caml_string_of_jsbytes(String.fromCharCode(c));
    caml_ml_output(chanid, s, 0, 1);
    return 0;
   }
   function caml_ml_output_int(chanid, i){
    var arr = [i >> 24 & 0xff, i >> 16 & 0xff, i >> 8 & 0xff, i & 0xff];
    caml_ml_output_ta(chanid, new Uint8Array(arr), 0, 4);
    return 0;
   }
   function caml_pos_in(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.offset - (chan.buffer_max - chan.buffer_curr);
   }
   function caml_ml_pos_in(chanid){return caml_pos_in(chanid) | 0;}
   function caml_ml_pos_in_64(chanid){
    return caml_int64_of_float(caml_pos_in(chanid));
   }
   function caml_pos_out(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.offset + chan.buffer_curr;
   }
   function caml_ml_pos_out(chanid){return caml_pos_out(chanid) | 0;}
   function caml_ml_pos_out_64(chanid){
    return caml_int64_of_float(caml_pos_out(chanid));
   }
   function caml_ml_runtime_warnings_enabled(_unit){return caml_runtime_warnings;
   }
   function caml_seek_in(chanid, pos){
    var chan = caml_ml_channel_get(chanid);
    if(chan.refill != null) caml_raise_sys_error("Illegal seek");
    if
     (pos >= chan.offset - chan.buffer_max && pos <= chan.offset
      && chan.file.flags.binary)
     chan.buffer_curr = chan.buffer_max - (chan.offset - pos);
    else{
     chan.file.seek(pos, 0);
     chan.offset = pos;
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
    }
    return 0;
   }
   function caml_ml_seek_in(chanid, pos){return caml_seek_in(chanid, pos);}
   function caml_ml_seek_in_64(chanid, pos){
    var pos = caml_int64_to_float(pos);
    return caml_seek_in(chanid, pos);
   }
   function caml_seek_out(chanid, pos){
    caml_ml_flush(chanid);
    var chan = caml_ml_channel_get(chanid);
    chan.file.seek(pos, 0);
    chan.offset = pos;
    return 0;
   }
   function caml_ml_seek_out(chanid, pos){return caml_seek_out(chanid, pos);}
   function caml_ml_seek_out_64(chanid, pos){
    var pos = caml_int64_to_float(pos);
    return caml_seek_out(chanid, pos);
   }
   function caml_ml_set_binary_mode(chanid, mode){
    var chan = caml_ml_channel_get(chanid);
    chan.file.flags.text = ! mode;
    chan.file.flags.binary = mode;
    return 0;
   }
   function caml_ml_set_buffered(chanid, v){
    caml_ml_channel_get(chanid).buffered = v;
    if(! v) caml_ml_flush(chanid);
    return 0;
   }
   function caml_ml_set_channel_name(chanid, name){
    var chan = caml_ml_channel_get(chanid);
    chan.name = name;
    return 0;
   }
   function caml_ml_set_channel_output(chanid, f){
    var chan = caml_ml_channel_get(chanid);
    chan.output = function(s){f(s);};
    return 0;
   }
   function caml_ml_set_channel_refill(chanid, f){
    caml_ml_channel_get(chanid).refill = f;
    return 0;
   }
   function caml_mod(x, y){
    if(y === 0) caml_raise_zero_divide();
    return x % y;
   }
   function caml_modf_float(x){
    if(Number.isFinite(x)){
     var neg = 1 / x < 0;
     x = Math.abs(x);
     var i = Math.floor(x), f = x - i;
     if(neg){i = - i; f = - f;}
     return [0, f, i];
    }
    if(Number.isNaN(x)) return [0, Number.NaN, Number.NaN];
    return [0, 1 / x, x];
   }
   function caml_mount_autoload(name, f){
    var
     path = caml_make_path(name),
     name = caml_trailing_slash(path.join("/"));
    jsoo_mount_point.push({path: name, device: new MlFakeDevice(name, f)});
    return 0;
   }
   function caml_lex_run_mem(s, i, mem, curr_pos){
    for(;;){
     var dst = s.charCodeAt(i);
     i++;
     if(dst === 0xff) return;
     var src = s.charCodeAt(i);
     i++;
     if(src === 0xff)
      mem[dst + 1] = curr_pos;
     else
      mem[dst + 1] = mem[src + 1];
    }
   }
   function caml_lex_run_tag(s, i, mem){
    for(;;){
     var dst = s.charCodeAt(i);
     i++;
     if(dst === 0xff) return;
     var src = s.charCodeAt(i);
     i++;
     if(src === 0xff) mem[dst + 1] = - 1; else mem[dst + 1] = mem[src + 1];
    }
   }
   function caml_new_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_mem = 10,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5,
     lex_base_code = 6,
     lex_backtrk_code = 7,
     lex_default_code = 8,
     lex_trans_code = 9,
     lex_check_code = 10,
     lex_code = 11;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    if(! tbl.lex_default_code){
     tbl.lex_base_code = caml_lex_array(tbl[lex_base_code]);
     tbl.lex_backtrk_code = caml_lex_array(tbl[lex_backtrk_code]);
     tbl.lex_check_code = caml_lex_array(tbl[lex_check_code]);
     tbl.lex_trans_code = caml_lex_array(tbl[lex_trans_code]);
     tbl.lex_default_code = caml_lex_array(tbl[lex_default_code]);
    }
    if(tbl.lex_code == null)
     tbl.lex_code = caml_jsbytes_of_string(tbl[lex_code]);
    var c, state = start_state, buffer = lexbuf[lex_buffer];
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0){
      var pc_off = tbl.lex_base_code[state];
      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);
      return - base - 1;
     }
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      var pc_off = tbl.lex_backtrk_code[state];
      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] === 0) return - state - 1; else c = 256;
     else{
      c = caml_bytes_unsafe_get(buffer, lexbuf[lex_curr_pos]);
      lexbuf[lex_curr_pos]++;
     }
     var pstate = state;
     if(tbl.lex_check[base + c] === state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] === - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else{
      var base_code = tbl.lex_base_code[pstate], pc_off;
      if(tbl.lex_check_code[base_code + c] === pstate)
       pc_off = tbl.lex_trans_code[base_code + c];
      else
       pc_off = tbl.lex_default_code[pstate];
      if(pc_off > 0)
       caml_lex_run_mem
        (tbl.lex_code, pc_off, lexbuf[lex_mem], lexbuf[lex_curr_pos]);
      if(c === 256) lexbuf[lex_eof_reached] = 0;
     }
    }
   }
   function caml_new_string(s){return caml_string_of_jsbytes(s);}
   function caml_nextafter_float(x, y){
    if(Number.isNaN(x) || Number.isNaN(y)) return Number.NaN;
    if(x === y) return y;
    if(x === 0) return y < 0 ? - Math.pow(2, - 1074) : Math.pow(2, - 1074);
    var bits = caml_int64_bits_of_float(x), one = caml_int64_of_int32(1);
    if(x < y === x > 0)
     bits = caml_int64_add(bits, one);
    else
     bits = caml_int64_sub(bits, one);
    return caml_int64_float_of_bits(bits);
   }
   function caml_notequal(x, y){
    return + (caml_compare_val(x, y, false) !== 0);
   }
   function caml_obj_add_offset(v, offset){
    caml_failwith("Obj.add_offset is not supported");
   }
   function caml_obj_block(tag, size){
    var o = new Array(size + 1);
    o[0] = tag;
    for(var i = 1; i <= size; i++) o[i] = 0;
    return o;
   }
   function caml_obj_make_forward(b, v){b[0] = 250; b[1] = v; return 0;}
   function caml_obj_raw_field(o, i){return o[i + 1];}
   function caml_obj_reachable_words(o){return 0;}
   function caml_obj_set_raw_field(o, i, v){return o[i + 1] = v;}
   function caml_obj_set_tag(x, tag){x[0] = tag; return 0;}
   function caml_obj_tag(x){
    if(Array.isArray(x) && x[0] === x[0] >>> 0)
     return x[0];
    else if(caml_is_ml_bytes(x))
     return 252;
    else if(caml_is_ml_string(x))
     return 252;
    else if(x instanceof Function || typeof x === "function")
     return 247;
    else if(x && x.caml_custom) return 255; else return 1000;
   }
   function caml_obj_truncate(x, s){
    if(s <= 0 || s + 1 > x.length) caml_invalid_argument("Obj.truncate");
    if(x.length !== s + 1) x.length = s + 1;
    return 0;
   }
   function caml_obj_with_tag(tag, x){
    var l = x.length, a = new Array(l);
    a[0] = tag;
    for(var i = 1; i < l; i++) a[i] = x[i];
    return a;
   }
   function caml_ojs_new_arr(c, a){
    switch(a.length){
      case 0:
       return new c();
      case 1:
       return new c(a[0]);
      case 2:
       return new c(a[0], a[1]);
      case 3:
       return new c(a[0], a[1], a[2]);
      case 4:
       return new c(a[0], a[1], a[2], a[3]);
      case 5:
       return new c(a[0], a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[0], a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);
    }
    function F(){return c.apply(this, a);}
    F.prototype = c.prototype;
    return new F();
   }
   var
    caml_output_val =
      function(){
        function Writer(){this.chunk = [];}
        Writer.prototype =
         {chunk_idx: 20,
          block_len: 0,
          obj_counter: 0,
          size_32: 0,
          size_64: 0,
          write:
          function(size, value){
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[this.chunk_idx++] = value >> i & 0xff;
          },
          write_at:
          function(pos, size, value){
           var pos = pos;
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[pos++] = value >> i & 0xff;
          },
          write_code:
          function(size, code, value){
           this.chunk[this.chunk_idx++] = code;
           for(var i = size - 8; i >= 0; i -= 8)
            this.chunk[this.chunk_idx++] = value >> i & 0xff;
          },
          write_shared:
          function(offset){
           if(offset < 1 << 8)
            this.write_code(8, 0x04, offset);
           else if(offset < 1 << 16)
            this.write_code(16, 0x05, offset);
           else
            this.write_code(32, 0x06, offset);
          },
          pos: function(){return this.chunk_idx;},
          finalize:
          function(){
           this.block_len = this.chunk_idx - 20;
           this.chunk_idx = 0;
           this.write(32, 0x8495a6be);
           this.write(32, this.block_len);
           this.write(32, this.obj_counter);
           this.write(32, this.size_32);
           this.write(32, this.size_64);
           return this.chunk;
          }};
        return function(v, flags){
         flags = caml_list_to_js_array(flags);
         var
          no_sharing = flags.indexOf(0) !== - 1,
          closures = flags.indexOf(1) !== - 1;
         if(closures)
          console.warn
           ("in caml_output_val: flag Marshal.Closures is not supported.");
         var
          writer = new Writer(),
          stack = [],
          intern_obj_table = no_sharing ? null : new MlObjectTable();
         function memo(v){
          if(no_sharing) return false;
          var existing_offset = intern_obj_table.recall(v);
          if(existing_offset){
           writer.write_shared(existing_offset);
           return true;
          }
          else{intern_obj_table.store(v); return false;}
         }
         function extern_rec(v){
          if(v.caml_custom){
           if(memo(v)) return;
           var
            name = v.caml_custom,
            ops = caml_custom_ops[name],
            sz_32_64 = [0, 0];
           if(! ops.serialize)
            caml_invalid_argument("output_value: abstract value (Custom)");
           if(ops.fixed_length === undefined){
            writer.write(8, 0x18);
            for(var i = 0; i < name.length; i++)
             writer.write(8, name.charCodeAt(i));
            writer.write(8, 0);
            var header_pos = writer.pos();
            for(var i = 0; i < 12; i++) writer.write(8, 0);
            ops.serialize(writer, v, sz_32_64);
            writer.write_at(header_pos, 32, sz_32_64[0]);
            writer.write_at(header_pos + 4, 32, 0);
            writer.write_at(header_pos + 8, 32, sz_32_64[1]);
           }
           else{
            writer.write(8, 0x19);
            for(var i = 0; i < name.length; i++)
             writer.write(8, name.charCodeAt(i));
            writer.write(8, 0);
            var old_pos = writer.pos();
            ops.serialize(writer, v, sz_32_64);
            if(ops.fixed_length !== writer.pos() - old_pos)
             caml_failwith
              ("output_value: incorrect fixed sizes specified by " + name);
           }
           writer.size_32 += 2 + (sz_32_64[0] + 3 >> 2);
           writer.size_64 += 2 + (sz_32_64[1] + 7 >> 3);
          }
          else if(Array.isArray(v) && v[0] === (v[0] | 0)){
           if(v[0] === 251)
            caml_failwith("output_value: abstract value (Abstract)");
           if(caml_is_continuation_tag(v[0]))
            caml_invalid_argument("output_value: continuation value");
           if(v.length > 1 && memo(v)) return;
           if(v[0] < 16 && v.length - 1 < 8)
            writer.write(8, 0x80 + v[0] + (v.length - 1 << 4));
           else
            writer.write_code(32, 0x08, v.length - 1 << 10 | v[0]);
           writer.size_32 += v.length;
           writer.size_64 += v.length;
           if(v.length > 1) stack.push(v, 1);
          }
          else if(caml_is_ml_bytes(v)){
           if(! caml_is_ml_bytes(caml_string_of_jsbytes("")))
            caml_failwith
             ("output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]");
           if(memo(v)) return;
           var len = caml_ml_bytes_length(v);
           if(len < 0x20)
            writer.write(8, 0x20 + len);
           else if(len < 0x100)
            writer.write_code(8, 0x09, len);
           else
            writer.write_code(32, 0x0a, len);
           for(var i = 0; i < len; i++)
            writer.write(8, caml_bytes_unsafe_get(v, i));
           writer.size_32 += 1 + ((len + 4) / 4 | 0);
           writer.size_64 += 1 + ((len + 8) / 8 | 0);
          }
          else if(caml_is_ml_string(v)){
           if(memo(v)) return;
           var len = caml_ml_string_length(v);
           if(len < 0x20)
            writer.write(8, 0x20 + len);
           else if(len < 0x100)
            writer.write_code(8, 0x09, len);
           else
            writer.write_code(32, 0x0a, len);
           for(var i = 0; i < len; i++)
            writer.write(8, caml_string_unsafe_get(v, i));
           writer.size_32 += 1 + ((len + 4) / 4 | 0);
           writer.size_64 += 1 + ((len + 8) / 8 | 0);
          }
          else if(v !== (v | 0)){
           var type_of_v = typeof v;
           if(type_of_v !== "number")
            caml_failwith("output_value: abstract value (" + type_of_v + ")");
           if(memo(v)) return;
           var t = caml_int64_to_bytes(caml_int64_bits_of_float(v));
           writer.write(8, 0x0c);
           for(var i = 0; i < 8; i++) writer.write(8, t[7 - i]);
           writer.size_32 += 3;
           writer.size_64 += 2;
          }
          else if(v >= 0 && v < 0x40)
           writer.write(8, 0x40 + v);
          else if(v >= - (1 << 7) && v < 1 << 7)
           writer.write_code(8, 0x00, v);
          else if(v >= - (1 << 15) && v < 1 << 15)
           writer.write_code(16, 0x01, v);
          else
           writer.write_code(32, 0x02, v);
         }
         extern_rec(v);
         while(stack.length > 0){
          var i = stack.pop(), v = stack.pop();
          if(i + 1 < v.length) stack.push(v, i + 1);
          extern_rec(v[i]);
         }
         if(intern_obj_table)
          writer.obj_counter = intern_obj_table.objs.length;
         writer.finalize();
         return new Uint8Array(writer.chunk);};
       }
       ();
   function caml_output_value_to_string(v, flags){
    return caml_string_of_uint8_array(caml_output_val(v, flags));
   }
   function caml_output_value(chanid, v, flags){
    var s = caml_output_value_to_string(v, flags);
    caml_ml_output(chanid, s, 0, caml_ml_string_length(s));
    return 0;
   }
   function caml_output_value_to_buffer(s, ofs, len, v, flags){
    var t = caml_output_val(v, flags);
    if(t.length > len) caml_failwith("Marshal.to_buffer: buffer overflow");
    caml_blit_bytes(caml_bytes_of_uint8_array(t), 0, s, ofs, t.length);
    return 0;
   }
   function caml_output_value_to_bytes(v, flags){
    return caml_bytes_of_uint8_array(caml_output_val(v, flags));
   }
   var caml_parser_trace = 0;
   function caml_parse_engine(tables, env, cmd, arg){
    var
     ERRCODE = 256,
     loop = 6,
     testshift = 7,
     shift = 8,
     shift_recover = 9,
     reduce = 10,
     READ_TOKEN = 0,
     RAISE_PARSE_ERROR = 1,
     GROW_STACKS_1 = 2,
     GROW_STACKS_2 = 3,
     COMPUTE_SEMANTIC_ACTION = 4,
     CALL_ERROR_FUNCTION = 5,
     env_s_stack = 1,
     env_v_stack = 2,
     env_symb_start_stack = 3,
     env_symb_end_stack = 4,
     env_stacksize = 5,
     env_stackbase = 6,
     env_curr_char = 7,
     env_lval = 8,
     env_symb_start = 9,
     env_symb_end = 10,
     env_asp = 11,
     env_rule_len = 12,
     env_rule_number = 13,
     env_sp = 14,
     env_state = 15,
     env_errflag = 16,
     tbl_transl_const = 2,
     tbl_transl_block = 3,
     tbl_lhs = 4,
     tbl_len = 5,
     tbl_defred = 6,
     tbl_dgoto = 7,
     tbl_sindex = 8,
     tbl_rindex = 9,
     tbl_gindex = 10,
     tbl_tablesize = 11,
     tbl_table = 12,
     tbl_check = 13,
     tbl_names_const = 15,
     tbl_names_block = 16;
    function log(x){
     var s = caml_string_of_jsbytes(x + "\n");
     caml_ml_output(caml_sys_fds[2].chanid, s, 0, caml_ml_string_length(s));
    }
    function token_name(names, number){
     var str = caml_jsstring_of_string(names);
     if(str[0] === "\x00") return "<unknown token>";
     return str.split("\x00")[number];
    }
    function print_token(state, tok){
     var token, kind;
     if(Array.isArray(tok)){
      token = token_name(tables[tbl_names_block], tok[0]);
      if(typeof tok[1] === "number")
       kind = "" + tok[1];
      else if(typeof tok[1] === "string")
       kind = tok[1];
      else if(tok[1] instanceof MlBytes)
       kind = caml_jsbytes_of_string(tok[1]);
      else
       kind = "_";
      log("State " + state + ": read token " + token + "(" + kind + ")");
     }
     else{
      token = token_name(tables[tbl_names_const], tok);
      log("State " + state + ": read token " + token);
     }
    }
    if(! tables.dgoto){
     tables.defred = caml_lex_array(tables[tbl_defred]);
     tables.sindex = caml_lex_array(tables[tbl_sindex]);
     tables.check = caml_lex_array(tables[tbl_check]);
     tables.rindex = caml_lex_array(tables[tbl_rindex]);
     tables.table = caml_lex_array(tables[tbl_table]);
     tables.len = caml_lex_array(tables[tbl_len]);
     tables.lhs = caml_lex_array(tables[tbl_lhs]);
     tables.gindex = caml_lex_array(tables[tbl_gindex]);
     tables.dgoto = caml_lex_array(tables[tbl_dgoto]);
    }
    var
     res = 0,
     n,
     n1,
     n2,
     state1,
     sp = env[env_sp],
     state = env[env_state],
     errflag = env[env_errflag];
    the_loop:
    for(;;)
     switch(cmd){
       case 0:
        state = 0; errflag = 0;
       case 6:
        n = tables.defred[state];
        if(n !== 0){cmd = reduce; continue the_loop;}
        if(env[env_curr_char] >= 0){cmd = testshift; continue the_loop;}
        res = READ_TOKEN;
        break the_loop;
       case 1:
        if(Array.isArray(arg)){
         env[env_curr_char] = tables[tbl_transl_block][arg[0] + 1];
         env[env_lval] = arg[1];
        }
        else{
         env[env_curr_char] = tables[tbl_transl_const][arg + 1];
         env[env_lval] = 0;
        }
        if(caml_parser_trace) print_token(state, arg);
       case 7:
        n1 = tables.sindex[state];
        n2 = n1 + env[env_curr_char];
        if
         (n1 !== 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] === env[env_curr_char]){cmd = shift; continue the_loop;}
        n1 = tables.rindex[state];
        n2 = n1 + env[env_curr_char];
        if
         (n1 !== 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] === env[env_curr_char]){
         n = tables.table[n2];
         cmd = reduce;
         continue the_loop;
        }
        if(errflag <= 0){res = CALL_ERROR_FUNCTION; break the_loop;}
       case 5:
        if(errflag < 3){
         errflag = 3;
         for(;;){
          state1 = env[env_s_stack][sp + 1];
          n1 = tables.sindex[state1];
          n2 = n1 + ERRCODE;
          if
           (n1 !== 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
            && tables.check[n2] === ERRCODE){
           if(caml_parser_trace) log("Recovering in state " + state1);
           cmd = shift_recover;
           continue the_loop;
          }
          else{
           if(caml_parser_trace) log("Discarding state " + state1);
           if(sp <= env[env_stackbase]){
            if(caml_parser_trace) log("No more states to discard");
            return RAISE_PARSE_ERROR;
           }
           sp--;
          }
         }
        }
        else{
         if(env[env_curr_char] === 0) return RAISE_PARSE_ERROR;
         if(caml_parser_trace) log("Discarding last token read");
         env[env_curr_char] = - 1;
         cmd = loop;
         continue the_loop;
        }
       case 8:
        env[env_curr_char] = - 1; if(errflag > 0) errflag--;
       case 9:
        if(caml_parser_trace)
         log("State " + state + ": shift to state " + tables.table[n2]);
        state = tables.table[n2];
        sp++;
        if(sp >= env[env_stacksize]){res = GROW_STACKS_1; break the_loop;}
       case 2:
        env[env_s_stack][sp + 1] = state;
        env[env_v_stack][sp + 1] = env[env_lval];
        env[env_symb_start_stack][sp + 1] = env[env_symb_start];
        env[env_symb_end_stack][sp + 1] = env[env_symb_end];
        cmd = loop;
        continue the_loop;
       case 10:
        if(caml_parser_trace) log("State " + state + ": reduce by rule " + n);
        var m = tables.len[n];
        env[env_asp] = sp;
        env[env_rule_number] = n;
        env[env_rule_len] = m;
        sp = sp - m + 1;
        m = tables.lhs[n];
        state1 = env[env_s_stack][sp];
        n1 = tables.gindex[m];
        n2 = n1 + state1;
        if
         (n1 !== 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] === state1)
         state = tables.table[n2];
        else
         state = tables.dgoto[m];
        if(sp >= env[env_stacksize]){res = GROW_STACKS_2; break the_loop;}
       case 3:
        res = COMPUTE_SEMANTIC_ACTION; break the_loop;
       case 4:
        env[env_s_stack][sp + 1] = state;
        env[env_v_stack][sp + 1] = arg;
        var asp = env[env_asp];
        env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
        if(sp > asp)
         env[env_symb_start_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
        cmd = loop;
        continue the_loop;
       default: return RAISE_PARSE_ERROR;
     }
    env[env_sp] = sp;
    env[env_state] = state;
    env[env_errflag] = errflag;
    return res;
   }
   function caml_pure_js_expr(s){
    console.error("caml_pure_js_expr: fallback to runtime evaluation\n");
    return eval(caml_jsstring_of_string(s));
   }
   function caml_raise_not_found(){
    caml_raise_constant(caml_global_data.Not_found);
   }
   function caml_raw_backtrace_length(){return 0;}
   function caml_raw_backtrace_next_slot(){return 0;}
   function caml_raw_backtrace_slot(){
    caml_invalid_argument
     ("Printexc.get_raw_backtrace_slot: index out of bounds");
   }
   function caml_read_file_content(name){
    var
     name = typeof name === "string" ? caml_string_of_jsstring(name) : name,
     root = resolve_fs_device(name);
    if(root.device.exists(root.rest)){
     var
      file = root.device.open(root.rest, {rdonly: 1}),
      len = file.length(),
      buf = new Uint8Array(len);
     file.read(buf, 0, len);
     return caml_string_of_uint8_array(buf);
    }
    caml_raise_no_such_file(caml_jsstring_of_string(name));
   }
   function caml_record_backtrace(b){
    caml_record_backtrace_runtime_flag = b;
    return 0;
   }
   var jsoo_toplevel_reloc = undefined;
   function caml_register_global(n, v, name_opt){
    if(name_opt){
     var name = name_opt;
     if(jsoo_toplevel_reloc)
      n = caml_callback(jsoo_toplevel_reloc, [name]);
     else if(caml_global_data.symbols){
      if(! caml_global_data.symidx)
       caml_global_data.symidx = caml_build_symbols(caml_global_data.symbols);
      var nid = caml_global_data.symidx[name];
      if(nid >= 0)
       n = nid;
      else{
       var n = caml_global_data.symidx.next_idx++;
       caml_global_data.symidx[name] = n;
      }
     }
    }
    caml_global_data[n + 1] = v;
    if(name_opt) caml_global_data[name_opt] = v;
   }
   function caml_register_named_value(nm, v){
    caml_named_values[caml_jsbytes_of_string(nm)] = v;
    return 0;
   }
   function caml_restore_raw_backtrace(exn, bt){return 0;}
   function caml_round_float(x){
    if(x >= 0){
     var y = Math.floor(x);
     return x - y >= 0.5 ? y + 1 : y;
    }
    else{var y = Math.ceil(x); return y - x >= 0.5 ? y - 1 : y;}
   }
   function caml_runtime_parameters(_unit){return caml_string_of_jsbytes("");}
   function caml_runtime_variant(_unit){return caml_string_of_jsbytes("");}
   function caml_set_parser_trace(bool){
    var oldflag = caml_parser_trace;
    caml_parser_trace = bool;
    return oldflag;
   }
   function caml_set_static_env(k, v){jsoo_static_env[k] = v; return 0;}
   function caml_signbit_float(x){
    if(x === 0) x = 1 / x;
    return x < 0 ? 1 : 0;
   }
   function caml_sinh_float(x){return Math.sinh(x);}
   function caml_string_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_string_concat(a, b){return a + b;}
   function caml_string_equal(s1, s2){if(s1 === s2) return 1; return 0;}
   function caml_string_get(s, i){
    if(i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();
    return caml_string_unsafe_get(s, i);
   }
   function caml_string_get16(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 1) caml_string_bound_error();
    var
     b1 = caml_string_unsafe_get(s, i),
     b2 = caml_string_unsafe_get(s, i + 1);
    return b2 << 8 | b1;
   }
   function caml_string_get32(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 3) caml_string_bound_error();
    var
     b1 = caml_string_unsafe_get(s, i),
     b2 = caml_string_unsafe_get(s, i + 1),
     b3 = caml_string_unsafe_get(s, i + 2),
     b4 = caml_string_unsafe_get(s, i + 3);
    return b4 << 24 | b3 << 16 | b2 << 8 | b1;
   }
   function caml_string_get64(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 7) caml_string_bound_error();
    var a = new Array(8);
    for(var j = 0; j < 8; j++) a[7 - j] = caml_string_unsafe_get(s, i + j);
    return caml_int64_of_bytes(a);
   }
   function caml_string_lessequal(s1, s2){return s1 <= s2 ? 1 : 0;}
   function caml_string_greaterequal(s1, s2){return caml_string_lessequal(s2, s1);
   }
   function caml_string_lessthan(s1, s2){return s1 < s2 ? 1 : 0;}
   function caml_string_greaterthan(s1, s2){return caml_string_lessthan(s2, s1);
   }
   function caml_string_notequal(s1, s2){
    return 1 - caml_string_equal(s1, s2);
   }
   function caml_subarray_to_jsbytes(a, i, len){
    var f = String.fromCharCode;
    if(i === 0 && len <= 4096 && len === a.length) return f.apply(null, a);
    var s = "";
    for(; 0 < len; i += 1024, len -= 1024)
     s += f.apply(null, a.slice(i, i + Math.min(len, 1024)));
    return s;
   }
   function caml_string_of_array(a){
    return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a, 0, a.length));
   }
   function caml_string_set(s, i, c){caml_failwith("caml_string_set");}
   function caml_sys_argv(a){return caml_argv;}
   function caml_sys_chdir(dir){
    var root = resolve_fs_device(dir);
    if(root.device.is_dir(root.rest)){
     if(root.rest)
      caml_current_dir = caml_trailing_slash(root.path + root.rest);
     else
      caml_current_dir = root.path;
     return 0;
    }
    else if(root.device.exists(root.rest))
     caml_raise_sys_error
      ("ENOTDIR: not a directory, chdir '" + caml_jsstring_of_string(dir)
       + "'");
    else
     caml_raise_no_such_file(caml_jsstring_of_string(dir));
   }
   function caml_sys_const_backend_type(){
    return [0, caml_string_of_jsbytes("js_of_ocaml")];
   }
   function caml_sys_const_big_endian(){return 0;}
   function caml_sys_const_int_size(){return 32;}
   function caml_sys_const_max_wosize(){return 0x7fffffff / 4 | 0;}
   function caml_sys_const_naked_pointers_checked(_unit){return 0;}
   var
    os_type =
      globalThis.process && globalThis.process.platform
       && globalThis.process.platform === "win32"
       ? "Win32"
       : "Unix";
   function caml_sys_const_ostype_cygwin(){return os_type === "Cygwin" ? 1 : 0;
   }
   function caml_sys_const_ostype_unix(){return os_type === "Unix" ? 1 : 0;}
   function caml_sys_const_ostype_win32(){return os_type === "Win32" ? 1 : 0;}
   function caml_sys_const_word_size(){return 32;}
   function caml_sys_executable_name(a){return caml_executable_name;}
   function caml_sys_exit(code){
    if(globalThis.quit) globalThis.quit(code);
    if(globalThis.process && globalThis.process.exit)
     globalThis.process.exit(code);
    caml_invalid_argument("Function 'exit' not implemented");
   }
   function caml_sys_file_exists(name){
    var root = resolve_fs_device(name);
    return root.device.exists(root.rest);
   }
   function caml_sys_get_argv(a){return [0, caml_argv[1], caml_argv];}
   function caml_sys_get_config(){
    return [0, caml_string_of_jsbytes(os_type), 32, 0];
   }
   function caml_sys_getcwd(){
    return caml_string_of_jsstring(caml_current_dir);
   }
   function caml_sys_getenv(name){
    var r = jsoo_sys_getenv(caml_jsstring_of_string(name));
    if(r === undefined) caml_raise_not_found();
    return caml_string_of_jsstring(r);
   }
   function caml_sys_is_directory(name){
    var root = resolve_fs_device(name), a = root.device.is_dir(root.rest);
    return a ? 1 : 0;
   }
   function caml_sys_isatty(_chan){return 0;}
   function caml_sys_mkdir(name, perm){
    var root = resolve_fs_device(name);
    root.device.mkdir(root.rest, perm);
    return 0;
   }
   function caml_sys_modify_argv(arg){caml_argv = arg; return 0;}
   function caml_sys_random_seed(){
    if(globalThis.crypto)
     if(globalThis.crypto.getRandomValues){
      var a = globalThis.crypto.getRandomValues(new Int32Array(4));
      return [0, a[0], a[1], a[2], a[3]];
     }
     else if(globalThis.crypto.randomBytes){
      var a = new Int32Array(globalThis.crypto.randomBytes(16).buffer);
      return [0, a[0], a[1], a[2], a[3]];
     }
    var now = new Date().getTime(), x = now ^ 0xffffffff * Math.random();
    return [0, x];
   }
   function caml_sys_read_directory(name){
    var
     root = resolve_fs_device(name),
     a = root.device.readdir(root.rest),
     l = new Array(a.length + 1);
    l[0] = 0;
    for(var i = 0; i < a.length; i++)
     l[i + 1] = caml_string_of_jsstring(a[i]);
    return l;
   }
   function caml_sys_remove(name){
    var root = resolve_fs_device(name);
    return root.device.unlink(root.rest);
   }
   function caml_sys_rename(o, n){
    var o_root = resolve_fs_device(o), n_root = resolve_fs_device(n);
    if(o_root.device !== n_root.device)
     caml_failwith("caml_sys_rename: cannot move file between two filesystem");
    if(! o_root.device.rename)
     caml_failwith("caml_sys_rename: no implemented");
    o_root.device.rename(o_root.rest, n_root.rest);
   }
   function caml_sys_rmdir(name){
    var root = resolve_fs_device(name);
    root.device.rmdir(root.rest);
    return 0;
   }
   function caml_sys_system_command(cmd){
    var cmd = caml_jsstring_of_string(cmd);
    if(typeof require !== "undefined"){
     var child_process = require("node:child_process");
     if(child_process && child_process.execSync)
      try{child_process.execSync(cmd, {stdio: "inherit"}); return 0;}
      catch(e){return 1;}
    }
    else
     return 127;
   }
   var caml_initial_time = new Date().getTime() * 0.001;
   function caml_sys_time(){
    var now = new Date().getTime();
    return now * 0.001 - caml_initial_time;
   }
   function caml_sys_time_include_children(b){return caml_sys_time();}
   function caml_sys_unsafe_getenv(name){return caml_sys_getenv(name);}
   function caml_tanh_float(x){return Math.tanh(x);}
   function caml_to_js_string(s){return caml_jsstring_of_string(s);}
   function caml_trampoline(res){
    var c = 1;
    while(res && res.joo_tramp){
     res = res.joo_tramp.apply(null, res.joo_args);
     c++;
    }
    return res;
   }
   function caml_trampoline_return(f, args, direct){
    return {joo_tramp: f, joo_args: args, joo_direct: direct};
   }
   function caml_trunc_float(x){return Math.trunc(x);}
   function caml_unix_cleanup(){}
   function caml_unix_lookup_file(fd, cmd){
    var fd_desc = caml_sys_fds[fd];
    if(fd_desc === undefined) caml_raise_system_error(1, "EBADF", cmd);
    return fd_desc.file;
   }
   function caml_unix_close(fd){
    var file = caml_unix_lookup_file(fd, "close");
    file.close(1);
    return 0;
   }
   function caml_unix_closedir(dir_handle){
    try{dir_handle.pointer.closeSync();}
    catch(e){caml_raise_system_error(1, "EBADF", "closedir");}
   }
   function caml_unix_filedescr_of_fd(x){return x;}
   function caml_unix_findclose(dir_handle){return caml_unix_closedir(dir_handle);
   }
   function caml_unix_opendir(path){
    var root = resolve_fs_device(path);
    if(! root.device.opendir)
     caml_failwith("caml_unix_opendir: not implemented");
    var dir_handle = root.device.opendir(root.rest, true);
    return {pointer: dir_handle, path: path};
   }
   function caml_unix_readdir(dir_handle){
    var entry;
    try{entry = dir_handle.pointer.readSync();}
    catch(e){caml_raise_system_error(1, "EBADF", "readdir");}
    if(entry === null)
     caml_raise_end_of_file();
    else
     return caml_string_of_jsstring(entry.name);
   }
   function caml_unix_findfirst(path){
    var path_js = caml_jsstring_of_string(path);
    path_js = path_js.replace(/(^|[\\/])\*\.\*$/, "");
    path = caml_string_of_jsstring(path_js);
    var
     dir_handle = caml_unix_opendir(path),
     first_entry = caml_unix_readdir(dir_handle);
    return [0, first_entry, dir_handle];
   }
   function caml_unix_findnext(dir_handle){return caml_unix_readdir(dir_handle);
   }
   function caml_unix_fstat(fd){
    var file = caml_unix_lookup_file(fd, "fstat");
    if(! file.stat) caml_failwith("caml_unix_fstat: not implemented");
    return file.stat(false);
   }
   function caml_unix_fstat_64(fd){
    var file = caml_unix_lookup_file(fd, "fstat");
    if(! file.stat) caml_failwith("caml_unix_fstat64: not implemented");
    return file.stat(true);
   }
   function caml_unix_ftruncate(fd, len){
    var file = caml_unix_lookup_file(fd, "ftruncate");
    if(! file.truncate) caml_failwith("caml_unix_ftruncate: not implemented");
    file.truncate(len, 1);
    return 0;
   }
   function caml_unix_ftruncate_64(fd, len){
    var file = caml_unix_lookup_file(fd, "ftruncate");
    if(! file.truncate)
     caml_failwith("caml_unix_ftruncate_64: not implemented");
    file.truncate(caml_int64_to_float(len), 1);
    return 0;
   }
   function caml_unix_getpwuid(unit){caml_raise_not_found();}
   function caml_unix_gettimeofday(){return new Date().getTime() / 1000;}
   function caml_unix_getuid(unit){
    if(globalThis.process && globalThis.process.getuid)
     return globalThis.process.getuid();
    return 1;
   }
   function caml_unix_gmtime(t){
    var
     d = new Date(t * 1000),
     d_num = d.getTime(),
     januaryfirst = new Date(Date.UTC(d.getUTCFullYear(), 0, 1)).getTime(),
     doy = Math.floor((d_num - januaryfirst) / 86400000);
    return [0,
            d.getUTCSeconds(),
            d.getUTCMinutes(),
            d.getUTCHours(),
            d.getUTCDate(),
            d.getUTCMonth(),
            d.getUTCFullYear() - 1900,
            d.getUTCDay(),
            doy,
            false | 0];
   }
   function caml_unix_has_symlink(unit){return fs_node_supported() ? 1 : 0;}
   function caml_unix_inchannel_of_filedescr(fd){
    var file = caml_unix_lookup_file(fd, "out_channel_of_descr");
    file.check_stream_semantics("in_channel_of_descr");
    return caml_ml_open_descriptor_in(fd);
   }
   function caml_unix_inet_addr_of_string(){return 0;}
   function caml_unix_isatty(fd){
    if(fs_node_supported()){
     var tty = require("node:tty");
     return tty.isatty(caml_unix_lookup_file(fd).fd) ? 1 : 0;
    }
    else
     return 0;
   }
   function caml_unix_localtime(t){
    var
     d = new Date(t * 1000),
     d_num = d.getTime(),
     januaryfirst = new Date(d.getFullYear(), 0, 1).getTime(),
     doy = Math.floor((d_num - januaryfirst) / 86400000),
     jan = new Date(d.getFullYear(), 0, 1),
     jul = new Date(d.getFullYear(), 6, 1),
     stdTimezoneOffset =
       Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    return [0,
            d.getSeconds(),
            d.getMinutes(),
            d.getHours(),
            d.getDate(),
            d.getMonth(),
            d.getFullYear() - 1900,
            d.getDay(),
            doy,
            d.getTimezoneOffset() < stdTimezoneOffset | 0];
   }
   function caml_unix_lseek(fd, len, whence){
    var file = caml_unix_lookup_file(fd, "lseek");
    return file.seek(len, whence, 1);
   }
   function caml_unix_lseek_64(fd, len, whence){
    var file = caml_unix_lookup_file(fd, "lseek");
    return file.seek(caml_int64_to_float(len), whence, 1);
   }
   function caml_unix_lstat(name){
    var root = resolve_fs_device(name);
    if(! root.device.lstat) caml_failwith("caml_unix_lstat: not implemented");
    return root.device.lstat(root.rest, false, true);
   }
   function caml_unix_lstat_64(name){
    var root = resolve_fs_device(name);
    if(! root.device.lstat)
     caml_failwith("caml_unix_lstat_64: not implemented");
    return root.device.lstat(root.rest, true, true);
   }
   function caml_unix_mkdir(name, perm){
    var root = resolve_fs_device(name);
    if(! root.device.mkdir) caml_failwith("caml_unix_mkdir: not implemented");
    return root.device.mkdir(root.rest, perm, true);
   }
   function caml_unix_mktime(tm){
    var
     d = new Date(tm[6] + 1900, tm[5], tm[4], tm[3], tm[2], tm[1]).getTime(),
     t = Math.floor(d / 1000),
     tm2 = caml_unix_localtime(t);
    return [0, t, tm2];
   }
   function caml_unix_open(name, flags, perms){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.rdonly = 1; break;
       case 1:
        f.wronly = 1; break;
       case 2:
        f.rdwr = 1; break;
       case 3:
        f.nonblock = 1; break;
       case 4:
        f.append = 1; break;
       case 5:
        f.create = 1; break;
       case 6:
        f.truncate = 1; break;
       case 7:
        f.excl = 1; break;
       case 8:
        f.noctty = 1; break;
       case 9:
        f.dsync = 1; break;
       case 10:
        f.sync = 1; break;
     }
     flags = flags[2];
    }
    var
     root = resolve_fs_device(name),
     file = root.device.open(root.rest, f, perms, true),
     idx = caml_sys_fds.length,
     chanid = new MlChanid(idx);
    caml_sys_fds[idx] = {file: file, chanid: chanid};
    return idx | 0;
   }
   function caml_unix_outchannel_of_filedescr(fd){
    var file = caml_unix_lookup_file(fd, "out_channel_of_descr");
    file.check_stream_semantics("out_channel_of_descr");
    return caml_ml_open_descriptor_out(fd);
   }
   function caml_unix_read(fd, buf, pos, len){
    var file = caml_unix_lookup_file(fd, "read");
    return file.read(caml_uint8_array_of_bytes(buf), pos, len, 1);
   }
   function caml_unix_readlink(name){
    var root = resolve_fs_device(name);
    if(! root.device.readlink)
     caml_failwith("caml_unix_readlink: not implemented");
    return root.device.readlink(root.rest, true);
   }
   function caml_unix_rename(o, n){
    var o_root = resolve_fs_device(o), n_root = resolve_fs_device(n);
    if(o_root.device !== n_root.device)
     caml_raise_system_error(1, "EXDEV", "rename");
    if(! o_root.device.rename)
     caml_failwith("caml_sys_rename: no implemented");
    o_root.device.rename(o_root.rest, n_root.rest, true);
   }
   function caml_unix_rewinddir(dir_handle){
    caml_unix_closedir(dir_handle);
    var new_dir_handle = caml_unix_opendir(dir_handle.path);
    dir_handle.pointer = new_dir_handle.pointer;
    return 0;
   }
   function caml_unix_rmdir(name){
    var root = resolve_fs_device(name);
    if(! root.device.rmdir) caml_failwith("caml_unix_rmdir: not implemented");
    return root.device.rmdir(root.rest, true);
   }
   function caml_unix_startup(){}
   function caml_unix_stat(name){
    var root = resolve_fs_device(name);
    if(! root.device.stat) caml_failwith("caml_unix_stat: not implemented");
    return root.device.stat(root.rest, false, true);
   }
   function caml_unix_stat_64(name){
    var root = resolve_fs_device(name);
    if(! root.device.stat)
     caml_failwith("caml_unix_stat_64: not implemented");
    return root.device.stat(root.rest, true, true);
   }
   function caml_unix_symlink(to_dir, src, dst){
    var dst_root = resolve_fs_device(dst);
    if(! dst_root.device.symlink)
     caml_failwith("caml_unix_symlink: not implemented");
    return dst_root.device.symlink
            (to_dir, caml_jsstring_of_string(src), dst_root.rest, true);
   }
   function caml_unix_time(){return Math.floor(caml_unix_gettimeofday());}
   function caml_unix_truncate(name, len){
    var root = resolve_fs_device(name);
    if(! root.device.truncate)
     caml_failwith("caml_unix_truncate: not implemented");
    root.device.truncate(root.rest, len, true);
    return 0;
   }
   function caml_unix_truncate_64(name, len){
    var root = resolve_fs_device(name);
    if(! root.device.truncate)
     caml_failwith("caml_unix_truncate_64: not implemented");
    root.device.truncate(root.rest, caml_int64_to_float(len), true);
    return 0;
   }
   function caml_unix_unlink(name){
    var root = resolve_fs_device(name);
    if(! root.device.unlink)
     caml_failwith("caml_unix_unlink: not implemented");
    root.device.unlink(root.rest, true);
    return 0;
   }
   function caml_unix_utimes(name, atime, mtime){
    var root = resolve_fs_device(name);
    if(! root.device.utimes)
     caml_failwith("caml_unix_utimes: not implemented");
    root.device.utimes(root.rest, atime, mtime, true);
    return 0;
   }
   function caml_unix_write(fd, buf, pos, len){
    var
     file = caml_unix_lookup_file(fd, "write"),
     a = caml_uint8_array_of_bytes(buf),
     written = 0;
    while(len > 0){
     var n = file.write(a, pos, len, 1);
     written += n;
     pos += n;
     len -= n;
    }
    return written;
   }
   function caml_unmount(name){
    var
     path = caml_make_path(name),
     name = caml_trailing_slash(path.join("/")),
     idx = - 1;
    for(var i = 0; i < jsoo_mount_point.length; i++)
     if(jsoo_mount_point[i].path === name) idx = i;
    if(idx > - 1) jsoo_mount_point.splice(idx, 1);
    return 0;
   }
   function caml_weak_set(x, i, v){
    if(v === 0) caml_ephe_unset_key(x, i); else caml_ephe_set_key(x, i, v[1]);
    return 0;
   }
   function caml_wrap_exception(e){
    {
     if(Array.isArray(e)) return e;
     var exn;
     if
      (globalThis.RangeError && e instanceof globalThis.RangeError
       && e.message
       && e.message.match(/maximum call stack/i))
      exn = caml_global_data.Stack_overflow;
     else if
      (globalThis.InternalError && e instanceof globalThis.InternalError
       && e.message
       && e.message.match(/too much recursion/i))
      exn = caml_global_data.Stack_overflow;
     else if(e instanceof globalThis.Error && caml_named_value("jsError"))
      exn = [0, caml_named_value("jsError"), e];
     else
      exn = [0, caml_global_data.Failure, caml_string_of_jsstring(String(e))];
     if(e instanceof globalThis.Error) exn.js_error = e;
     return exn;
    }
   }
   function caml_xmlhttprequest_create(unit){
    if(typeof globalThis.XMLHttpRequest !== "undefined")
     try{return new globalThis.XMLHttpRequest();}catch(e){}
    caml_failwith("Cannot create a XMLHttpRequest");
   }
   function compare_digits_nat(nat1, ofs1, nat2, ofs2){
    if(nat1.data[ofs1] > nat2.data[ofs2]) return 1;
    if(nat1.data[ofs1] < nat2.data[ofs2]) return - 1;
    return 0;
   }
   function compare_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    var
     a = num_digits_nat(nat1, ofs1, len1),
     b = num_digits_nat(nat2, ofs2, len2);
    if(a > b) return 1;
    if(a < b) return - 1;
    for(var i = len1 - 1; i >= 0; i--){
     if(nat1.data[ofs1 + i] >>> 0 > nat2.data[ofs2 + i] >>> 0) return 1;
     if(nat1.data[ofs1 + i] >>> 0 < nat2.data[ofs2 + i] >>> 0) return - 1;
    }
    return 0;
   }
   function complement_nat(nat, ofs, len){
    for(var i = 0; i < len; i++)
     nat.data[ofs + i] = (- 1 >>> 0) - (nat.data[ofs + i] >>> 0);
   }
   function create_nat(size){
    var arr = new MlNat(size);
    for(var i = 0; i < size; i++) arr.data[i] = - 1;
    return arr;
   }
   function decr_nat(nat, ofs, len, carry_in){
    var borrow = carry_in === 1 ? 0 : 1;
    for(var i = 0; i < len; i++){
     var x = (nat.data[ofs + i] >>> 0) - borrow;
     nat.data[ofs + i] = x;
     if(x >= 0){borrow = 0; break;} else borrow = 1;
    }
    return borrow === 1 ? 0 : 1;
   }
   function deserialize_nat(reader, sz){
    var len = reader.read32s(), nat = new MlNat(len);
    for(var i = 0; i < len; i++) nat.data[i] = reader.read32s();
    sz[0] = len * 4;
    return nat;
   }
   function div_helper(a, b, c){
    var
     x = a * 65536 + (b >>> 16),
     y = Math.floor(x / c) * 65536,
     z = x % c * 65536,
     w = z + (b & 0x0000ffff);
    return [y + Math.floor(w / c), w % c];
   }
   function div_digit_nat(natq, ofsq, natr, ofsr, nat1, ofs1, len, nat2, ofs2){
    var rem = nat1.data[ofs1 + len - 1] >>> 0;
    for(var i = len - 2; i >= 0; i--){
     var
      x = div_helper(rem, nat1.data[ofs1 + i] >>> 0, nat2.data[ofs2] >>> 0);
     natq.data[ofsq + i] = x[0];
     rem = x[1];
    }
    natr.data[ofsr] = rem;
    return 0;
   }
   function num_leading_zero_bits_in_digit(nat, ofs){
    var a = nat.data[ofs], b = 0;
    if(a & 0xffff0000){b += 16; a >>>= 16;}
    if(a & 0xff00){b += 8; a >>>= 8;}
    if(a & 0xf0){b += 4; a >>>= 4;}
    if(a & 12){b += 2; a >>>= 2;}
    if(a & 2){b += 1; a >>>= 1;}
    if(a & 1) b += 1;
    return 32 - b;
   }
   function shift_left_nat(nat1, ofs1, len1, nat2, ofs2, nbits){
    if(nbits === 0){nat2.data[ofs2] = 0; return 0;}
    var wrap = 0;
    for(var i = 0; i < len1; i++){
     var a = nat1.data[ofs1 + i] >>> 0;
     nat1.data[ofs1 + i] = a << nbits | wrap;
     wrap = a >>> 32 - nbits;
    }
    nat2.data[ofs2] = wrap;
    return 0;
   }
   function shift_right_nat(nat1, ofs1, len1, nat2, ofs2, nbits){
    if(nbits === 0){nat2.data[ofs2] = 0; return 0;}
    var wrap = 0;
    for(var i = len1 - 1; i >= 0; i--){
     var a = nat1.data[ofs1 + i] >>> 0;
     nat1.data[ofs1 + i] = a >>> nbits | wrap;
     wrap = a << 32 - nbits;
    }
    nat2.data[ofs2] = wrap;
    return 0;
   }
   function set_to_zero_nat(nat, ofs, len){
    for(var i = 0; i < len; i++) nat.data[ofs + i] = 0;
    return 0;
   }
   function nat_of_array(l){return new MlNat(l);}
   function mult_digit_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat3, ofs3){
    var carry = 0, a = nat3.data[ofs3] >>> 0;
    for(var i = 0; i < len2; i++){
     var
      x1 =
        (nat1.data[ofs1 + i] >>> 0)
        + (nat2.data[ofs2 + i] >>> 0) * (a & 0x0000ffff)
        + carry,
      x2 = (nat2.data[ofs2 + i] >>> 0) * (a >>> 16);
     carry = Math.floor(x2 / 65536);
     var x3 = x1 + x2 % 65536 * 65536;
     nat1.data[ofs1 + i] = x3;
     carry += Math.floor(x3 / 4294967296);
    }
    return len2 < len1 && carry
            ? add_nat
              (nat1, ofs1 + len2, len1 - len2, nat_of_array([carry]), 0, 1, 0)
            : carry;
   }
   function sub_nat(nat1, ofs1, len1, nat2, ofs2, len2, carry_in){
    var borrow = carry_in === 1 ? 0 : 1;
    for(var i = 0; i < len2; i++){
     var
      x = (nat1.data[ofs1 + i] >>> 0) - (nat2.data[ofs2 + i] >>> 0) - borrow;
     nat1.data[ofs1 + i] = x;
     if(x >= 0) borrow = 0; else borrow = 1;
    }
    return decr_nat(nat1, ofs1 + len2, len1 - len2, borrow === 1 ? 0 : 1);
   }
   function div_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    if(len2 === 1){
     div_digit_nat(nat1, ofs1 + 1, nat1, ofs1, nat1, ofs1, len1, nat2, ofs2);
     return 0;
    }
    var s = num_leading_zero_bits_in_digit(nat2, ofs2 + len2 - 1);
    shift_left_nat(nat2, ofs2, len2, nat_of_array([0]), 0, s);
    shift_left_nat(nat1, ofs1, len1, nat_of_array([0]), 0, s);
    var d = (nat2.data[ofs2 + len2 - 1] >>> 0) + 1, a = create_nat(len2 + 1);
    for(var i = len1 - 1; i >= len2; i--){
     var
      quo =
        d === 4294967296
         ? nat1.data[ofs1 + i] >>> 0
         : div_helper
            (nat1.data[ofs1 + i] >>> 0, nat1.data[ofs1 + i - 1] >>> 0, d)
           [0];
     set_to_zero_nat(a, 0, len2 + 1);
     mult_digit_nat(a, 0, len2 + 1, nat2, ofs2, len2, nat_of_array([quo]), 0);
     sub_nat(nat1, ofs1 + i - len2, len2 + 1, a, 0, len2 + 1, 1);
     while
     (nat1.data[ofs1 + i] !== 0
      || compare_nat(nat1, ofs1 + i - len2, len2, nat2, ofs2, len2) >= 0){
      quo = quo + 1;
      sub_nat(nat1, ofs1 + i - len2, len2 + 1, nat2, ofs2, len2, 1);
     }
     nat1.data[ofs1 + i] = quo;
    }
    shift_right_nat(nat1, ofs1, len2, nat_of_array([0]), 0, s);
    shift_right_nat(nat2, ofs2, len2, nat_of_array([0]), 0, s);
    return 0;
   }
   function serialize_nat(writer, nat, sz){
    var len = nat.data.length;
    writer.write(32, len);
    for(var i = 0; i < len; i++) writer.write(32, nat.data[i]);
    sz[0] = len * 4;
    sz[1] = len * 8;
   }
   function initialize_nat(){
    caml_custom_ops._nat =
     {deserialize: deserialize_nat,
      serialize: serialize_nat,
      hash: caml_hash_nat};
   }
   function is_digit_int(nat, ofs){if(nat.data[ofs] >= 0) return 1; return 0;}
   function is_digit_normalized(nat, ofs){return 1;}
   function is_digit_odd(nat, ofs){if(nat.data[ofs] & 1) return 1; return 0;}
   function is_digit_zero(nat, ofs){
    if(nat.data[ofs] === 0) return 1;
    return 0;
   }
   function jsoo_create_file_extern(name, content){
    if(globalThis.jsoo_create_file)
     globalThis.jsoo_create_file(name, content);
    else{
     if(! globalThis.jsoo_fs_tmp) globalThis.jsoo_fs_tmp = [];
     globalThis.jsoo_fs_tmp.push({name: name, content: content});
    }
    return 0;
   }
   function land_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] &= nat2.data[ofs2]; return 0;
   }
   function length_nat(x){return x.data.length;}
   function lor_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] |= nat2.data[ofs2]; return 0;
   }
   function lxor_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] ^= nat2.data[ofs2]; return 0;
   }
   function mult_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat3, ofs3, len3){
    var carry = 0;
    for(var i = 0; i < len3; i++)
     carry +=
      mult_digit_nat
       (nat1, ofs1 + i, len1 - i, nat2, ofs2, len2, nat3, ofs3 + i);
    return carry;
   }
   function nth_digit_nat(nat, ofs){return nat.data[ofs];}
   function nth_digit_nat_native(nat, ofs){return nat.data[ofs];}
   var
    re_match =
      function(){
        var
         re_word_letters =
           [0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xff,
            0x03,
            0xfe,
            0xff,
            0xff,
            0x87,
            0xfe,
            0xff,
            0xff,
            0x07,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xff,
            0xff,
            0x7f,
            0xff,
            0xff,
            0xff,
            0x7f,
            0xff],
         opcodes =
           {CHAR: 0,
            CHARNORM: 1,
            STRING: 2,
            STRINGNORM: 3,
            CHARCLASS: 4,
            BOL: 5,
            EOL: 6,
            WORDBOUNDARY: 7,
            BEGGROUP: 8,
            ENDGROUP: 9,
            REFGROUP: 10,
            ACCEPT: 11,
            SIMPLEOPT: 12,
            SIMPLESTAR: 13,
            SIMPLEPLUS: 14,
            GOTO: 15,
            PUSHBACK: 16,
            SETMARK: 17,
            CHECKPROGRESS: 18};
        function is_word_letter(c){
         return re_word_letters[c >> 3] >> (c & 7) & 1;
        }
        function in_bitset(s, i){
         return caml_string_get(s, i >> 3) >> (i & 7) & 1;
        }
        function re_match_impl(re, s, pos, partial){
         var
          prog = caml_js_from_array(re[1]),
          cpool = caml_js_from_array(re[2]),
          normtable = caml_jsbytes_of_string(re[3]),
          numgroups = re[4] | 0,
          numregisters = re[5] | 0,
          startchars = re[6] | 0,
          s = caml_uint8_array_of_string(s),
          pc = 0,
          quit = false,
          stack = [],
          groups = new Array(numgroups),
          re_register = new Array(numregisters);
         for(var i = 0; i < groups.length; i++)
          groups[i] = {start: - 1, end: - 1};
         groups[0].start = pos;
         function backtrack(){
          while(stack.length){
           var item = stack.pop();
           if(item.undo)
            item.undo.obj[item.undo.prop] = item.undo.value;
           else if(item.pos){pc = item.pos.pc; pos = item.pos.txt; return;}
          }
          quit = true;
         }
         function push(item){stack.push(item);}
         function accept(){
          groups[0].end = pos;
          var result = new Array(1 + groups.length * 2);
          result[0] = 0;
          for(var i = 0; i < groups.length; i++){
           var g = groups[i];
           if(g.start < 0 || g.end < 0) g.start = g.end = - 1;
           result[2 * i + 1] = g.start;
           result[2 * i + 1 + 1] = g.end;
          }
          return result;
         }
         function prefix_match(){
          if(partial) return accept(); else backtrack();
         }
         while(! quit){
          var
           op = prog[pc] & 0xff,
           sarg = prog[pc] >> 8,
           uarg = sarg & 0xff,
           c = s[pos],
           group;
          pc++;
          switch(op){
            case opcodes.CHAR:
             if(pos === s.length){prefix_match(); break;}
             if(c === uarg) pos++; else backtrack();
             break;
            case opcodes.CHARNORM:
             if(pos === s.length){prefix_match(); break;}
             if(normtable.charCodeAt(c) === uarg) pos++; else backtrack();
             break;
            case opcodes.STRING:
             for
             (var arg = caml_jsbytes_of_string(cpool[uarg]), i = 0;
              i < arg.length;
              i++){
              if(pos === s.length){prefix_match(); break;}
              if(c === arg.charCodeAt(i))
               c = s[++pos];
              else{backtrack(); break;}
             }
             break;
            case opcodes.STRINGNORM:
             for
             (var arg = caml_jsbytes_of_string(cpool[uarg]), i = 0;
              i < arg.length;
              i++){
              if(pos === s.length){prefix_match(); break;}
              if(normtable.charCodeAt(c) === arg.charCodeAt(i))
               c = s[++pos];
              else{backtrack(); break;}
             }
             break;
            case opcodes.CHARCLASS:
             if(pos === s.length){prefix_match(); break;}
             if(in_bitset(cpool[uarg], c)) pos++; else backtrack();
             break;
            case opcodes.BOL:
             if(pos > 0 && s[pos - 1] !== 10) backtrack(); break;
            case opcodes.EOL:
             if(pos < s.length && s[pos] !== 10) backtrack(); break;
            case opcodes.WORDBOUNDARY:
             if(pos === 0){
              if(pos === s.length){prefix_match(); break;}
              if(is_word_letter(s[0])) break;
              backtrack();
             }
             else if(pos === s.length){
              if(is_word_letter(s[pos - 1])) break;
              backtrack();
             }
             else{
              if(is_word_letter(s[pos - 1]) !== is_word_letter(s[pos])) break;
              backtrack();
             }
             break;
            case opcodes.BEGGROUP:
             group = groups[uarg];
             push({undo: {obj: group, prop: "start", value: group.start}});
             group.start = pos;
             break;
            case opcodes.ENDGROUP:
             group = groups[uarg];
             push({undo: {obj: group, prop: "end", value: group.end}});
             group.end = pos;
             break;
            case opcodes.REFGROUP:
             group = groups[uarg];
             if(group.start < 0 || group.end < 0){backtrack(); break;}
             for(var i = group.start; i < group.end; i++){
              if(pos === s.length){prefix_match(); break;}
              if(s[i] !== s[pos]){backtrack(); break;}
              pos++;
             }
             break;
            case opcodes.SIMPLEOPT:
             if(in_bitset(cpool[uarg], c)) pos++; break;
            case opcodes.SIMPLESTAR:
             while(in_bitset(cpool[uarg], c)) c = s[++pos]; break;
            case opcodes.SIMPLEPLUS:
             if(pos === s.length){prefix_match(); break;}
             if(in_bitset(cpool[uarg], c))
              do c = s[++pos];while(in_bitset(cpool[uarg], c));
             else
              backtrack();
             break;
            case opcodes.ACCEPT: return accept();
            case opcodes.GOTO:
             pc = pc + sarg; break;
            case opcodes.PUSHBACK:
             push({pos: {pc: pc + sarg, txt: pos}}); break;
            case opcodes.SETMARK:
             push
              ({undo: {obj: re_register, prop: uarg, value: re_register[uarg]}});
             re_register[uarg] = pos;
             break;
            case opcodes.CHECKPROGRESS:
             if(re_register[uarg] === pos) backtrack(); break;
            default: throw new Error("Invalid bytecode");
          }
         }
         return 0;
        }
        return re_match_impl;
       }
       ();
   function re_partial_match(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.partial_match");
    var res = re_match(re, s, pos, 1);
    return res ? res : [0];
   }
   function re_replacement_text(repl, groups, orig){
    var
     repl = caml_jsbytes_of_string(repl),
     len = repl.length,
     orig = caml_jsbytes_of_string(orig),
     res = "",
     n = 0,
     cur,
     start,
     end,
     c;
    while(n < len){
     cur = repl.charAt(n++);
     if(cur !== "\\")
      res += cur;
     else{
      if(n === len) caml_failwith("Str.replace: illegal backslash sequence");
      cur = repl.charAt(n++);
      switch(cur){
        case "\\":
         res += cur; break;
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
         c = + cur;
         if(c * 2 >= groups.length - 1)
          caml_failwith("Str.replace: reference to unmatched group");
         start = caml_array_get(groups, c * 2);
         end = caml_array_get(groups, c * 2 + 1);
         if(start === - 1)
          caml_failwith("Str.replace: reference to unmatched group");
         res += orig.slice(start, end);
         break;
        default: res += "\\" + cur;
      }
     }
    }
    return caml_string_of_jsbytes(res);
   }
   function re_search_backward(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.search_backward");
    while(pos >= 0){
     var res = re_match(re, s, pos, 0);
     if(res) return res;
     pos--;
    }
    return [0];
   }
   function re_search_forward(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.search_forward");
    while(pos <= caml_ml_string_length(s)){
     var res = re_match(re, s, pos, 0);
     if(res) return res;
     pos++;
    }
    return [0];
   }
   function re_string_match(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.string_match");
    var res = re_match(re, s, pos, 0);
    return res ? res : [0];
   }
   function set_digit_nat(nat, ofs, digit){nat.data[ofs] = digit; return 0;}
   function set_digit_nat_native(nat, ofs, digit){nat.data[ofs] = digit; return 0;
   }
   function square_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    var carry = 0;
    carry += add_nat(nat1, ofs1, len1, nat1, ofs1, len1, 0);
    carry += mult_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat2, ofs2, len2);
    return carry;
   }
   function caml_setup_uncaught_exception_handler(){
    var process = globalThis.process;
    if(process && process.on)
     process.on
      ("uncaughtException",
       function(err, origin){
        caml_fatal_uncaught_exception(err);
        process.exit(2);
       });
    else if(globalThis.addEventListener)
     globalThis.addEventListener
      ("error",
       function(event){
        if(event.error) caml_fatal_uncaught_exception(event.error);
       });
   }
   caml_setup_uncaught_exception_handler();
   globalThis.jsoo_runtime =
    {caml_decompress_input: caml_decompress_input,
     caml_ml_mutex_unlock: caml_ml_mutex_unlock,
     caml_ml_mutex_try_lock: caml_ml_mutex_try_lock,
     caml_ml_mutex_lock: caml_ml_mutex_lock,
     caml_ml_mutex_new: caml_ml_mutex_new,
     MlMutex: MlMutex,
     caml_ephe_check_data: caml_ephe_check_data,
     caml_ephe_unset_data: caml_ephe_unset_data,
     caml_ephe_set_data_opt: caml_ephe_set_data_opt,
     caml_ephe_set_data: caml_ephe_set_data,
     caml_ephe_get_data_copy: caml_ephe_get_data_copy,
     caml_ephe_get_data: caml_ephe_get_data,
     caml_ephe_blit_data: caml_ephe_blit_data,
     caml_ephe_blit_key: caml_ephe_blit_key,
     caml_ephe_check_key: caml_ephe_check_key,
     caml_ephe_get_key_copy: caml_ephe_get_key_copy,
     caml_ephe_get_key: caml_ephe_get_key,
     caml_weak_set: caml_weak_set,
     caml_weak_create: caml_weak_create,
     caml_ephe_create: caml_ephe_create,
     caml_ephe_unset_key: caml_ephe_unset_key,
     caml_ephe_set_key: caml_ephe_set_key,
     caml_ephe_none: caml_ephe_none,
     caml_ephe_data_offset: caml_ephe_data_offset,
     caml_ephe_key_offset: caml_ephe_key_offset,
     caml_raise_system_error: caml_raise_system_error,
     caml_unix_inet_addr_of_string: caml_unix_inet_addr_of_string,
     caml_unix_findclose: caml_unix_findclose,
     caml_unix_findnext: caml_unix_findnext,
     caml_unix_findfirst: caml_unix_findfirst,
     caml_unix_rewinddir: caml_unix_rewinddir,
     caml_unix_closedir: caml_unix_closedir,
     caml_unix_readdir: caml_unix_readdir,
     caml_unix_opendir: caml_unix_opendir,
     caml_unix_has_symlink: caml_unix_has_symlink,
     caml_unix_getpwuid: caml_unix_getpwuid,
     caml_unix_getuid: caml_unix_getuid,
     caml_unix_outchannel_of_filedescr: caml_unix_outchannel_of_filedescr,
     caml_unix_inchannel_of_filedescr: caml_unix_inchannel_of_filedescr,
     caml_unix_close: caml_unix_close,
     caml_unix_ftruncate_64: caml_unix_ftruncate_64,
     caml_unix_ftruncate: caml_unix_ftruncate,
     caml_unix_lseek_64: caml_unix_lseek_64,
     caml_unix_lseek: caml_unix_lseek,
     caml_unix_read: caml_unix_read,
     caml_unix_write: caml_unix_write,
     caml_unix_fstat_64: caml_unix_fstat_64,
     caml_unix_fstat: caml_unix_fstat,
     caml_unix_lookup_file: caml_unix_lookup_file,
     caml_unix_open: caml_unix_open,
     caml_unix_truncate_64: caml_unix_truncate_64,
     caml_unix_truncate: caml_unix_truncate,
     caml_unix_utimes: caml_unix_utimes,
     caml_unix_unlink: caml_unix_unlink,
     caml_unix_readlink: caml_unix_readlink,
     caml_unix_symlink: caml_unix_symlink,
     caml_unix_rmdir: caml_unix_rmdir,
     caml_unix_mkdir: caml_unix_mkdir,
     caml_unix_rename: caml_unix_rename,
     caml_unix_lstat_64: caml_unix_lstat_64,
     caml_unix_lstat: caml_unix_lstat,
     caml_unix_stat_64: caml_unix_stat_64,
     caml_unix_stat: caml_unix_stat,
     make_unix_err_args: make_unix_err_args,
     unix_error: unix_error,
     caml_unix_isatty: caml_unix_isatty,
     caml_unix_filedescr_of_fd: caml_unix_filedescr_of_fd,
     caml_unix_cleanup: caml_unix_cleanup,
     caml_unix_startup: caml_unix_startup,
     caml_unix_mktime: caml_unix_mktime,
     caml_unix_localtime: caml_unix_localtime,
     caml_unix_gmtime: caml_unix_gmtime,
     caml_unix_time: caml_unix_time,
     caml_unix_gettimeofday: caml_unix_gettimeofday,
     re_replacement_text: re_replacement_text,
     re_partial_match: re_partial_match,
     re_string_match: re_string_match,
     re_search_backward: re_search_backward,
     re_search_forward: re_search_forward,
     re_match: re_match,
     caml_sys_const_naked_pointers_checked:
     caml_sys_const_naked_pointers_checked,
     caml_ml_runtime_warnings_enabled: caml_ml_runtime_warnings_enabled,
     caml_ml_enable_runtime_warnings: caml_ml_enable_runtime_warnings,
     caml_runtime_warnings: caml_runtime_warnings,
     caml_install_signal_handler: caml_install_signal_handler,
     caml_runtime_parameters: caml_runtime_parameters,
     caml_runtime_variant: caml_runtime_variant,
     caml_sys_isatty: caml_sys_isatty,
     caml_sys_get_config: caml_sys_get_config,
     os_type: os_type,
     caml_sys_const_backend_type: caml_sys_const_backend_type,
     caml_sys_const_ostype_cygwin: caml_sys_const_ostype_cygwin,
     caml_sys_const_ostype_win32: caml_sys_const_ostype_win32,
     caml_sys_const_ostype_unix: caml_sys_const_ostype_unix,
     caml_sys_const_max_wosize: caml_sys_const_max_wosize,
     caml_sys_const_int_size: caml_sys_const_int_size,
     caml_sys_const_word_size: caml_sys_const_word_size,
     caml_sys_const_big_endian: caml_sys_const_big_endian,
     caml_sys_random_seed: caml_sys_random_seed,
     caml_sys_time_include_children: caml_sys_time_include_children,
     caml_sys_time: caml_sys_time,
     caml_sys_system_command: caml_sys_system_command,
     caml_sys_executable_name: caml_sys_executable_name,
     caml_sys_modify_argv: caml_sys_modify_argv,
     caml_sys_argv: caml_sys_argv,
     caml_sys_get_argv: caml_sys_get_argv,
     caml_executable_name: caml_executable_name,
     caml_argv: caml_argv,
     caml_sys_unsafe_getenv: caml_sys_unsafe_getenv,
     caml_sys_getenv: caml_sys_getenv,
     jsoo_sys_getenv: jsoo_sys_getenv,
     caml_set_static_env: caml_set_static_env,
     jsoo_static_env: jsoo_static_env,
     caml_fatal_uncaught_exception: caml_fatal_uncaught_exception,
     caml_format_exception: caml_format_exception,
     caml_is_special_exception: caml_is_special_exception,
     caml_sys_exit: caml_sys_exit,
     caml_raise_sys_error: caml_raise_sys_error,
     caml_maybe_print_stats: caml_maybe_print_stats,
     caml_is_printable: caml_is_printable,
     caml_get_global_data: caml_get_global_data,
     caml_register_global: caml_register_global,
     jsoo_toplevel_reloc: jsoo_toplevel_reloc,
     caml_build_symbols: caml_build_symbols,
     caml_global_data: caml_global_data,
     caml_named_value: caml_named_value,
     caml_register_named_value: caml_register_named_value,
     caml_named_values: caml_named_values,
     caml_call_gen: caml_call_gen,
     caml_set_parser_trace: caml_set_parser_trace,
     caml_parse_engine: caml_parse_engine,
     caml_parser_trace: caml_parser_trace,
     caml_custom_identifier: caml_custom_identifier,
     caml_is_continuation_tag: caml_is_continuation_tag,
     caml_obj_add_offset: caml_obj_add_offset,
     caml_obj_reachable_words: caml_obj_reachable_words,
     caml_obj_set_raw_field: caml_obj_set_raw_field,
     caml_obj_raw_field: caml_obj_raw_field,
     caml_fresh_oo_id: caml_fresh_oo_id,
     caml_set_oo_id: caml_set_oo_id,
     caml_oo_last_id: caml_oo_last_id,
     caml_get_public_method: caml_get_public_method,
     caml_lazy_make_forward: caml_lazy_make_forward,
     caml_obj_make_forward: caml_obj_make_forward,
     caml_obj_truncate: caml_obj_truncate,
     caml_obj_dup: caml_obj_dup,
     caml_obj_with_tag: caml_obj_with_tag,
     caml_obj_block: caml_obj_block,
     caml_obj_set_tag: caml_obj_set_tag,
     caml_obj_tag: caml_obj_tag,
     caml_alloc_dummy_infix: caml_alloc_dummy_infix,
     caml_update_dummy: caml_update_dummy,
     deserialize_nat: deserialize_nat,
     serialize_nat: serialize_nat,
     lxor_digit_nat: lxor_digit_nat,
     lor_digit_nat: lor_digit_nat,
     land_digit_nat: land_digit_nat,
     compare_nat: compare_nat,
     compare_digits_nat: compare_digits_nat,
     shift_right_nat: shift_right_nat,
     div_nat: div_nat,
     div_digit_nat: div_digit_nat,
     div_helper: div_helper,
     shift_left_nat: shift_left_nat,
     square_nat: square_nat,
     mult_nat: mult_nat,
     mult_digit_nat: mult_digit_nat,
     sub_nat: sub_nat,
     decr_nat: decr_nat,
     complement_nat: complement_nat,
     add_nat: add_nat,
     incr_nat: incr_nat,
     is_digit_odd: is_digit_odd,
     is_digit_normalized: is_digit_normalized,
     is_digit_zero: is_digit_zero,
     is_digit_int: is_digit_int,
     num_leading_zero_bits_in_digit: num_leading_zero_bits_in_digit,
     num_digits_nat: num_digits_nat,
     nth_digit_nat_native: nth_digit_nat_native,
     set_digit_nat_native: set_digit_nat_native,
     nth_digit_nat: nth_digit_nat,
     set_digit_nat: set_digit_nat,
     blit_nat: blit_nat,
     set_to_zero_nat: set_to_zero_nat,
     create_nat: create_nat,
     nat_of_array: nat_of_array,
     length_nat: length_nat,
     caml_hash_nat: caml_hash_nat,
     MlNat: MlNat,
     initialize_nat: initialize_nat,
     caml_new_string: caml_new_string,
     caml_array_of_bytes: caml_array_of_bytes,
     caml_array_of_string: caml_array_of_string,
     caml_js_to_string: caml_js_to_string,
     caml_to_js_string: caml_to_js_string,
     caml_js_from_string: caml_js_from_string,
     caml_js_to_byte_string: caml_js_to_byte_string,
     caml_is_ml_string: caml_is_ml_string,
     caml_ml_bytes_content: caml_ml_bytes_content,
     caml_is_ml_bytes: caml_is_ml_bytes,
     caml_bytes_of_jsbytes: caml_bytes_of_jsbytes,
     caml_string_of_jsstring: caml_string_of_jsstring,
     caml_jsstring_of_string: caml_jsstring_of_string,
     caml_jsbytes_of_string: caml_jsbytes_of_string,
     caml_string_of_jsbytes: caml_string_of_jsbytes,
     caml_bytes_of_string: caml_bytes_of_string,
     caml_string_of_bytes: caml_string_of_bytes,
     caml_string_lessthan: caml_string_lessthan,
     caml_string_lessequal: caml_string_lessequal,
     caml_string_equal: caml_string_equal,
     caml_string_compare: caml_string_compare,
     caml_ml_string_length: caml_ml_string_length,
     caml_string_unsafe_get: caml_string_unsafe_get,
     caml_string_concat: caml_string_concat,
     caml_ml_bytes_length: caml_ml_bytes_length,
     caml_blit_string: caml_blit_string,
     caml_blit_bytes: caml_blit_bytes,
     caml_fill_bytes: caml_fill_bytes,
     caml_bytes_greaterthan: caml_bytes_greaterthan,
     caml_string_greaterthan: caml_string_greaterthan,
     caml_bytes_greaterequal: caml_bytes_greaterequal,
     caml_string_greaterequal: caml_string_greaterequal,
     caml_bytes_lessthan: caml_bytes_lessthan,
     caml_bytes_lessequal: caml_bytes_lessequal,
     caml_bytes_notequal: caml_bytes_notequal,
     caml_string_notequal: caml_string_notequal,
     caml_bytes_equal: caml_bytes_equal,
     caml_bytes_compare: caml_bytes_compare,
     caml_bytes_of_uint8_array: caml_bytes_of_uint8_array,
     caml_bytes_of_array: caml_bytes_of_array,
     caml_string_of_uint8_array: caml_string_of_uint8_array,
     caml_string_of_array: caml_string_of_array,
     caml_create_bytes: caml_create_bytes,
     caml_create_string: caml_create_string,
     caml_uint8_array_of_string: caml_uint8_array_of_string,
     caml_uint8_array_of_bytes: caml_uint8_array_of_bytes,
     caml_convert_bytes_to_array: caml_convert_bytes_to_array,
     caml_convert_string_to_bytes: caml_convert_string_to_bytes,
     MlBytes: MlBytes,
     caml_bytes_of_utf16_jsstring: caml_bytes_of_utf16_jsstring,
     caml_bytes_set: caml_bytes_set,
     caml_bytes_set64: caml_bytes_set64,
     caml_bytes_set32: caml_bytes_set32,
     caml_bytes_set16: caml_bytes_set16,
     caml_string_set: caml_string_set,
     caml_bytes_get: caml_bytes_get,
     caml_bytes_get64: caml_bytes_get64,
     caml_string_get64: caml_string_get64,
     caml_bytes_get32: caml_bytes_get32,
     caml_string_get32: caml_string_get32,
     caml_bytes_get16: caml_bytes_get16,
     caml_string_get16: caml_string_get16,
     caml_string_get: caml_string_get,
     caml_bytes_bound_error: caml_bytes_bound_error,
     caml_string_bound_error: caml_string_bound_error,
     caml_bytes_unsafe_set: caml_bytes_unsafe_set,
     caml_bytes_unsafe_get: caml_bytes_unsafe_get,
     jsoo_is_ascii: jsoo_is_ascii,
     caml_utf16_of_utf8: caml_utf16_of_utf8,
     caml_utf8_of_utf16: caml_utf8_of_utf16,
     caml_sub_uint8_array_to_jsbytes: caml_sub_uint8_array_to_jsbytes,
     caml_subarray_to_jsbytes: caml_subarray_to_jsbytes,
     caml_str_repeat: caml_str_repeat,
     caml_md5_bytes: caml_md5_bytes,
     caml_MD5Final: caml_MD5Final,
     caml_MD5Update: caml_MD5Update,
     caml_MD5Init: caml_MD5Init,
     caml_MD5Transform: caml_MD5Transform,
     caml_md5_string: caml_md5_string,
     caml_md5_chan: caml_md5_chan,
     caml_output_value_to_buffer: caml_output_value_to_buffer,
     caml_output_value_to_bytes: caml_output_value_to_bytes,
     caml_output_value_to_string: caml_output_value_to_string,
     caml_output_val: caml_output_val,
     MlObjectTable: MlObjectTable,
     caml_marshal_data_size: caml_marshal_data_size,
     caml_marshal_header_size: caml_marshal_header_size,
     caml_input_value_from_reader: caml_input_value_from_reader,
     caml_custom_ops: caml_custom_ops,
     caml_nativeint_unmarshal: caml_nativeint_unmarshal,
     caml_int32_unmarshal: caml_int32_unmarshal,
     caml_int64_marshal: caml_int64_marshal,
     caml_int64_unmarshal: caml_int64_unmarshal,
     caml_input_value_from_bytes: caml_input_value_from_bytes,
     caml_float_of_bytes: caml_float_of_bytes,
     BigStringReader: BigStringReader,
     MlStringReader: MlStringReader,
     UInt8ArrayReader: UInt8ArrayReader,
     caml_marshal_constants: caml_marshal_constants,
     caml_new_lex_engine: caml_new_lex_engine,
     caml_lex_engine: caml_lex_engine,
     caml_lex_array: caml_lex_array,
     caml_js_error_of_exception: caml_js_error_of_exception,
     caml_xmlhttprequest_create: caml_xmlhttprequest_create,
     caml_js_get_console: caml_js_get_console,
     caml_js_html_entities: caml_js_html_entities,
     caml_js_html_escape: caml_js_html_escape,
     caml_js_object: caml_js_object,
     caml_pure_js_expr: caml_pure_js_expr,
     caml_js_expr: caml_js_expr,
     caml_js_eval_string: caml_js_eval_string,
     caml_js_strict_equals: caml_js_strict_equals,
     caml_js_equals: caml_js_equals,
     caml_js_function_arity: caml_js_function_arity,
     caml_js_wrap_meth_callback_unsafe: caml_js_wrap_meth_callback_unsafe,
     caml_js_wrap_meth_callback_strict: caml_js_wrap_meth_callback_strict,
     caml_js_wrap_meth_callback_arguments:
     caml_js_wrap_meth_callback_arguments,
     caml_js_wrap_meth_callback: caml_js_wrap_meth_callback,
     caml_js_wrap_callback_unsafe: caml_js_wrap_callback_unsafe,
     caml_js_wrap_callback_strict: caml_js_wrap_callback_strict,
     caml_js_wrap_callback_arguments: caml_js_wrap_callback_arguments,
     caml_js_wrap_callback: caml_js_wrap_callback,
     caml_ojs_new_arr: caml_ojs_new_arr,
     caml_js_new: caml_js_new,
     caml_js_meth_call: caml_js_meth_call,
     caml_js_fun_call: caml_js_fun_call,
     caml_js_call: caml_js_call,
     caml_js_var: caml_js_var,
     caml_list_to_js_array: caml_list_to_js_array,
     caml_list_of_js_array: caml_list_of_js_array,
     caml_js_to_array: caml_js_to_array,
     caml_js_from_array: caml_js_from_array,
     caml_js_to_int32: caml_js_to_int32,
     caml_js_to_float: caml_js_to_float,
     caml_js_from_float: caml_js_from_float,
     caml_js_to_bool: caml_js_to_bool,
     caml_js_from_bool: caml_js_from_bool,
     caml_js_error_option_of_exception: caml_js_error_option_of_exception,
     caml_exn_with_js_backtrace: caml_exn_with_js_backtrace,
     caml_maybe_attach_backtrace: caml_maybe_attach_backtrace,
     caml_wrap_exception: caml_wrap_exception,
     caml_jsoo_flags_effects: caml_jsoo_flags_effects,
     caml_jsoo_flags_use_js_string: caml_jsoo_flags_use_js_string,
     caml_is_js: caml_is_js,
     caml_callback: caml_callback,
     caml_trampoline_return: caml_trampoline_return,
     caml_trampoline: caml_trampoline,
     caml_js_typeof: caml_js_typeof,
     caml_js_instanceof: caml_js_instanceof,
     caml_js_delete: caml_js_delete,
     caml_js_get: caml_js_get,
     caml_js_set: caml_js_set,
     caml_js_pure_expr: caml_js_pure_expr,
     caml_ml_set_buffered: caml_ml_set_buffered,
     caml_ml_is_buffered: caml_ml_is_buffered,
     caml_ml_output_int: caml_ml_output_int,
     caml_ml_pos_out_64: caml_ml_pos_out_64,
     caml_ml_pos_out: caml_ml_pos_out,
     caml_pos_out: caml_pos_out,
     caml_ml_seek_out_64: caml_ml_seek_out_64,
     caml_ml_seek_out: caml_ml_seek_out,
     caml_seek_out: caml_seek_out,
     caml_output_value: caml_output_value,
     caml_ml_output_char: caml_ml_output_char,
     caml_ml_output: caml_ml_output,
     caml_ml_output_bytes: caml_ml_output_bytes,
     caml_ml_output_ta: caml_ml_output_ta,
     caml_ml_flush: caml_ml_flush,
     caml_ml_input_scan_line: caml_ml_input_scan_line,
     caml_ml_pos_in_64: caml_ml_pos_in_64,
     caml_ml_pos_in: caml_ml_pos_in,
     caml_pos_in: caml_pos_in,
     caml_ml_seek_in_64: caml_ml_seek_in_64,
     caml_ml_seek_in: caml_ml_seek_in,
     caml_seek_in: caml_seek_in,
     caml_ml_input_int: caml_ml_input_int,
     caml_ml_input_char: caml_ml_input_char,
     caml_input_value: caml_input_value,
     caml_ml_input_block: caml_ml_input_block,
     caml_ml_input: caml_ml_input,
     caml_refill: caml_refill,
     caml_ml_set_channel_refill: caml_ml_set_channel_refill,
     caml_ml_set_channel_output: caml_ml_set_channel_output,
     caml_ml_channel_size_64: caml_ml_channel_size_64,
     caml_ml_channel_size: caml_ml_channel_size,
     caml_ml_close_channel: caml_ml_close_channel,
     caml_ml_set_binary_mode: caml_ml_set_binary_mode,
     caml_channel_descriptor: caml_channel_descriptor,
     caml_ml_open_descriptor_in: caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out: caml_ml_open_descriptor_out,
     caml_ml_out_channels_list: caml_ml_out_channels_list,
     caml_ml_channel_restore: caml_ml_channel_restore,
     caml_ml_channel_redirect: caml_ml_channel_redirect,
     caml_ml_channel_get: caml_ml_channel_get,
     caml_ml_channels: caml_ml_channels,
     caml_ml_set_channel_name: caml_ml_set_channel_name,
     caml_sys_open: caml_sys_open,
     MlChanid: MlChanid,
     caml_sys_close: caml_sys_close,
     caml_sys_fds: caml_sys_fds,
     caml_int64_bswap: caml_int64_bswap,
     caml_int32_bswap: caml_int32_bswap,
     caml_bswap16: caml_bswap16,
     caml_mod: caml_mod,
     caml_div: caml_div,
     caml_mul: caml_mul,
     caml_int_of_string: caml_int_of_string,
     caml_parse_digit: caml_parse_digit,
     caml_parse_sign_and_base: caml_parse_sign_and_base,
     caml_format_int: caml_format_int,
     caml_CamlinternalMod_update_mod: caml_CamlinternalMod_update_mod,
     caml_CamlinternalMod_init_mod: caml_CamlinternalMod_init_mod,
     caml_int64_hash: caml_int64_hash,
     caml_int64_to_bytes: caml_int64_to_bytes,
     caml_int64_of_bytes: caml_int64_of_bytes,
     caml_int64_hi32: caml_int64_hi32,
     caml_int64_lo32: caml_int64_lo32,
     caml_int64_create_lo_hi: caml_int64_create_lo_hi,
     caml_int64_create_lo_mi_hi: caml_int64_create_lo_mi_hi,
     caml_int64_of_string: caml_int64_of_string,
     caml_int64_format: caml_int64_format,
     caml_int64_of_float: caml_int64_of_float,
     caml_int64_to_float: caml_int64_to_float,
     caml_int64_to_int32: caml_int64_to_int32,
     caml_int64_of_int32: caml_int64_of_int32,
     caml_int64_mod: caml_int64_mod,
     caml_int64_div: caml_int64_div,
     caml_int64_shift_right: caml_int64_shift_right,
     caml_int64_shift_right_unsigned: caml_int64_shift_right_unsigned,
     caml_int64_shift_left: caml_int64_shift_left,
     caml_int64_xor: caml_int64_xor,
     caml_int64_or: caml_int64_or,
     caml_int64_and: caml_int64_and,
     caml_int64_is_negative: caml_int64_is_negative,
     caml_int64_is_zero: caml_int64_is_zero,
     caml_int64_mul: caml_int64_mul,
     caml_int64_sub: caml_int64_sub,
     caml_int64_add: caml_int64_add,
     caml_int64_neg: caml_int64_neg,
     caml_int64_compare: caml_int64_compare,
     caml_int64_ult: caml_int64_ult,
     MlInt64: MlInt64,
     caml_int64_offset: caml_int64_offset,
     caml_float_of_string: caml_float_of_string,
     caml_format_float: caml_format_float,
     caml_fma_float: caml_fma_float,
     caml_erfc_float: caml_erfc_float,
     caml_erf_float: caml_erf_float,
     caml_cbrt_float: caml_cbrt_float,
     caml_round_float: caml_round_float,
     caml_atanh_float: caml_atanh_float,
     caml_tanh_float: caml_tanh_float,
     caml_asinh_float: caml_asinh_float,
     caml_sinh_float: caml_sinh_float,
     caml_acosh_float: caml_acosh_float,
     caml_cosh_float: caml_cosh_float,
     caml_log10_float: caml_log10_float,
     caml_hypot_float: caml_hypot_float,
     caml_log2_float: caml_log2_float,
     caml_log1p_float: caml_log1p_float,
     caml_exp2_float: caml_exp2_float,
     caml_expm1_float: caml_expm1_float,
     caml_signbit_float: caml_signbit_float,
     caml_copysign_float: caml_copysign_float,
     caml_float_compare: caml_float_compare,
     caml_frexp_float: caml_frexp_float,
     caml_ldexp_float: caml_ldexp_float,
     caml_modf_float: caml_modf_float,
     caml_classify_float: caml_classify_float,
     caml_int32_float_of_bits: caml_int32_float_of_bits,
     caml_trunc_float: caml_trunc_float,
     caml_nextafter_float: caml_nextafter_float,
     caml_int64_float_of_bits: caml_int64_float_of_bits,
     caml_hexstring_of_float: caml_hexstring_of_float,
     caml_int32_bits_of_float: caml_int32_bits_of_float,
     caml_int64_bits_of_float: caml_int64_bits_of_float,
     jsoo_floor_log2: jsoo_floor_log2,
     caml_hash: caml_hash,
     caml_hash_mix_string: caml_hash_mix_string,
     caml_hash_mix_bytes: caml_hash_mix_bytes,
     caml_hash_mix_bytes_arr: caml_hash_mix_bytes_arr,
     caml_hash_mix_jsbytes: caml_hash_mix_jsbytes,
     caml_hash_mix_int64: caml_hash_mix_int64,
     caml_hash_mix_float: caml_hash_mix_float,
     caml_hash_mix_final: caml_hash_mix_final,
     caml_hash_mix_int: caml_hash_mix_int,
     caml_gr_close_subwindow: caml_gr_close_subwindow,
     caml_gr_open_subwindow: caml_gr_open_subwindow,
     caml_gr_window_id: caml_gr_window_id,
     caml_gr_display_mode: caml_gr_display_mode,
     caml_gr_remember_mode: caml_gr_remember_mode,
     caml_gr_synchronize: caml_gr_synchronize,
     caml_gr_wait_event: caml_gr_wait_event,
     caml_gr_sigio_signal: caml_gr_sigio_signal,
     caml_gr_sigio_handler: caml_gr_sigio_handler,
     caml_gr_blit_image: caml_gr_blit_image,
     caml_gr_create_image: caml_gr_create_image,
     caml_gr_draw_image: caml_gr_draw_image,
     caml_gr_dump_image: caml_gr_dump_image,
     caml_gr_make_image: caml_gr_make_image,
     caml_gr_text_size: caml_gr_text_size,
     caml_gr_set_text_size: caml_gr_set_text_size,
     caml_gr_set_font: caml_gr_set_font,
     caml_gr_draw_string: caml_gr_draw_string,
     caml_gr_draw_char: caml_gr_draw_char,
     caml_gr_draw_str: caml_gr_draw_str,
     caml_gr_fill_arc: caml_gr_fill_arc,
     caml_gr_fill_poly: caml_gr_fill_poly,
     caml_gr_fill_rect: caml_gr_fill_rect,
     caml_gr_set_line_width: caml_gr_set_line_width,
     caml_gr_draw_arc: caml_gr_draw_arc,
     caml_gr_arc_aux: caml_gr_arc_aux,
     caml_gr_draw_rect: caml_gr_draw_rect,
     caml_gr_lineto: caml_gr_lineto,
     caml_gr_current_y: caml_gr_current_y,
     caml_gr_current_x: caml_gr_current_x,
     caml_gr_moveto: caml_gr_moveto,
     caml_gr_point_color: caml_gr_point_color,
     caml_gr_plot: caml_gr_plot,
     caml_gr_set_color: caml_gr_set_color,
     caml_gr_size_y: caml_gr_size_y,
     caml_gr_size_x: caml_gr_size_x,
     caml_gr_clear_graph: caml_gr_clear_graph,
     caml_gr_resize_window: caml_gr_resize_window,
     caml_gr_set_window_title: caml_gr_set_window_title,
     caml_gr_close_graph: caml_gr_close_graph,
     caml_gr_doc_of_state: caml_gr_doc_of_state,
     caml_gr_state_create: caml_gr_state_create,
     caml_gr_state_init: caml_gr_state_init,
     caml_gr_open_graph: caml_gr_open_graph,
     caml_gr_state_set: caml_gr_state_set,
     caml_gr_state_get: caml_gr_state_get,
     caml_gr_state: caml_gr_state,
     caml_get_major_credit: caml_get_major_credit,
     caml_get_major_bucket: caml_get_major_bucket,
     caml_get_minor_free: caml_get_minor_free,
     caml_gc_minor_words: caml_gc_minor_words,
     caml_gc_major_slice: caml_gc_major_slice,
     caml_gc_huge_fallback_count: caml_gc_huge_fallback_count,
     caml_eventlog_pause: caml_eventlog_pause,
     caml_eventlog_resume: caml_eventlog_resume,
     caml_memprof_stop: caml_memprof_stop,
     caml_memprof_start: caml_memprof_start,
     caml_final_release: caml_final_release,
     caml_final_register_called_without_value:
     caml_final_register_called_without_value,
     caml_final_register: caml_final_register,
     caml_gc_get: caml_gc_get,
     caml_gc_set: caml_gc_set,
     caml_gc_stat: caml_gc_stat,
     caml_gc_quick_stat: caml_gc_quick_stat,
     caml_gc_counters: caml_gc_counters,
     caml_gc_compaction: caml_gc_compaction,
     caml_gc_full_major: caml_gc_full_major,
     caml_gc_major: caml_gc_major,
     caml_gc_minor: caml_gc_minor,
     caml_raise_nodejs_error: caml_raise_nodejs_error,
     caml_sys_open_for_node: caml_sys_open_for_node,
     MlNodeFd: MlNodeFd,
     fs_node_stats_from_js: fs_node_stats_from_js,
     MlNodeDevice: MlNodeDevice,
     fs_node_supported: fs_node_supported,
     MlFakeFd: MlFakeFd,
     MlFakeFd_out: MlFakeFd_out,
     MlFakeFile: MlFakeFile,
     MlFakeDevice: MlFakeDevice,
     caml_read_file_content: caml_read_file_content,
     jsoo_create_file: jsoo_create_file,
     caml_create_file: caml_create_file,
     caml_fs_init: caml_fs_init,
     jsoo_create_file_extern: jsoo_create_file_extern,
     caml_ba_map_file_bytecode: caml_ba_map_file_bytecode,
     caml_ba_map_file: caml_ba_map_file,
     caml_sys_rmdir: caml_sys_rmdir,
     caml_sys_mkdir: caml_sys_mkdir,
     caml_sys_rename: caml_sys_rename,
     caml_sys_is_directory: caml_sys_is_directory,
     caml_sys_remove: caml_sys_remove,
     caml_sys_read_directory: caml_sys_read_directory,
     caml_sys_file_exists: caml_sys_file_exists,
     caml_raise_no_such_file: caml_raise_no_such_file,
     caml_sys_chdir: caml_sys_chdir,
     caml_sys_getcwd: caml_sys_getcwd,
     caml_unmount: caml_unmount,
     caml_mount_autoload: caml_mount_autoload,
     resolve_fs_device: resolve_fs_device,
     caml_list_mount_point: caml_list_mount_point,
     jsoo_mount_point: jsoo_mount_point,
     caml_make_path: caml_make_path,
     path_is_absolute: path_is_absolute,
     MlFile: MlFile,
     caml_root: caml_root,
     caml_get_root: caml_get_root,
     caml_current_dir: caml_current_dir,
     caml_trailing_slash: caml_trailing_slash,
     caml_finish_formatting: caml_finish_formatting,
     caml_parse_format: caml_parse_format,
     caml_array_bound_error: caml_array_bound_error,
     caml_raise_not_found: caml_raise_not_found,
     caml_raise_zero_divide: caml_raise_zero_divide,
     caml_raise_end_of_file: caml_raise_end_of_file,
     caml_invalid_argument: caml_invalid_argument,
     caml_failwith: caml_failwith,
     caml_raise_with_string: caml_raise_with_string,
     caml_raise_with_args: caml_raise_with_args,
     caml_raise_with_arg: caml_raise_with_arg,
     caml_raise_constant: caml_raise_constant,
     caml_lessthan: caml_lessthan,
     caml_lessequal: caml_lessequal,
     caml_greaterthan: caml_greaterthan,
     caml_greaterequal: caml_greaterequal,
     caml_notequal: caml_notequal,
     caml_equal: caml_equal,
     caml_int_compare: caml_int_compare,
     caml_compare: caml_compare,
     caml_compare_val: caml_compare_val,
     caml_compare_val_number_custom: caml_compare_val_number_custom,
     caml_compare_val_get_custom: caml_compare_val_get_custom,
     caml_compare_val_tag: caml_compare_val_tag,
     caml_bigstring_blit_ba_to_bytes: caml_bigstring_blit_ba_to_bytes,
     caml_bigstring_blit_bytes_to_ba: caml_bigstring_blit_bytes_to_ba,
     caml_bigstring_blit_string_to_ba: caml_bigstring_blit_string_to_ba,
     caml_bigstring_blit_ba_to_ba: caml_bigstring_blit_ba_to_ba,
     caml_bigstring_memcmp: caml_bigstring_memcmp,
     bigstring_of_typed_array: bigstring_of_typed_array,
     bigstring_of_array_buffer: bigstring_of_array_buffer,
     bigstring_to_typed_array: bigstring_to_typed_array,
     bigstring_to_array_buffer: bigstring_to_array_buffer,
     caml_hash_mix_bigstring: caml_hash_mix_bigstring,
     caml_ba_from_typed_array: caml_ba_from_typed_array,
     caml_ba_kind_of_typed_array: caml_ba_kind_of_typed_array,
     caml_ba_to_typed_array: caml_ba_to_typed_array,
     caml_hash_mix_float16: caml_hash_mix_float16,
     caml_ba_hash: caml_ba_hash,
     caml_ba_create_from: caml_ba_create_from,
     caml_ba_deserialize: caml_ba_deserialize,
     caml_ba_serialize: caml_ba_serialize,
     caml_ba_reshape: caml_ba_reshape,
     caml_ba_slice: caml_ba_slice,
     caml_ba_sub: caml_ba_sub,
     caml_ba_blit: caml_ba_blit,
     caml_ba_fill: caml_ba_fill,
     caml_ba_set_3: caml_ba_set_3,
     caml_ba_set_2: caml_ba_set_2,
     caml_ba_set_1: caml_ba_set_1,
     caml_ba_uint8_set64: caml_ba_uint8_set64,
     caml_ba_uint8_set32: caml_ba_uint8_set32,
     caml_ba_uint8_set16: caml_ba_uint8_set16,
     caml_ba_set_generic: caml_ba_set_generic,
     caml_ba_get_3: caml_ba_get_3,
     caml_ba_get_2: caml_ba_get_2,
     caml_ba_get_1: caml_ba_get_1,
     caml_ba_uint8_get64: caml_ba_uint8_get64,
     caml_ba_uint8_get32: caml_ba_uint8_get32,
     caml_ba_uint8_get16: caml_ba_uint8_get16,
     caml_ba_get_generic: caml_ba_get_generic,
     caml_ba_dim_3: caml_ba_dim_3,
     caml_ba_dim_2: caml_ba_dim_2,
     caml_ba_dim_1: caml_ba_dim_1,
     caml_ba_dim: caml_ba_dim,
     caml_ba_num_dims: caml_ba_num_dims,
     caml_ba_layout: caml_ba_layout,
     caml_ba_kind: caml_ba_kind,
     caml_ba_change_layout: caml_ba_change_layout,
     caml_ba_create: caml_ba_create,
     caml_ba_create_unsafe: caml_ba_create_unsafe,
     caml_ba_compare: caml_ba_compare,
     Ml_Bigarray_c_1_1: Ml_Bigarray_c_1_1,
     Ml_Bigarray: Ml_Bigarray,
     caml_ba_custom_name: caml_ba_custom_name,
     caml_ba_create_buffer: caml_ba_create_buffer,
     caml_ba_get_size_per_element: caml_ba_get_size_per_element,
     caml_packFloat16: caml_packFloat16,
     caml_unpackFloat16: caml_unpackFloat16,
     caml_ba_get_size: caml_ba_get_size,
     caml_ba_init: caml_ba_init,
     caml_convert_raw_backtrace_slot: caml_convert_raw_backtrace_slot,
     caml_get_current_callstack: caml_get_current_callstack,
     caml_restore_raw_backtrace: caml_restore_raw_backtrace,
     caml_raw_backtrace_slot: caml_raw_backtrace_slot,
     caml_raw_backtrace_next_slot: caml_raw_backtrace_next_slot,
     caml_raw_backtrace_length: caml_raw_backtrace_length,
     caml_convert_raw_backtrace: caml_convert_raw_backtrace,
     caml_record_backtrace: caml_record_backtrace,
     caml_get_exception_raw_backtrace: caml_get_exception_raw_backtrace,
     caml_get_exception_backtrace: caml_get_exception_backtrace,
     caml_backtrace_status: caml_backtrace_status,
     caml_ml_debug_info_status: caml_ml_debug_info_status,
     caml_record_backtrace_runtime_flag: caml_record_backtrace_runtime_flag,
     caml_record_backtrace_env_flag: caml_record_backtrace_env_flag,
     caml_floatarray_create: caml_floatarray_create,
     caml_make_float_vect: caml_make_float_vect,
     caml_make_vect: caml_make_vect,
     caml_array_make: caml_array_make,
     caml_check_bound: caml_check_bound,
     caml_array_fill: caml_array_fill,
     caml_array_get: caml_array_get,
     caml_array_set: caml_array_set,
     caml_floatarray_blit: caml_floatarray_blit,
     caml_array_blit: caml_array_blit,
     caml_array_concat: caml_array_concat,
     caml_array_append: caml_array_append,
     caml_array_sub: caml_array_sub};
   var
    cst_Assert_failure = "Assert_failure",
    cst_Division_by_zero = "Division_by_zero",
    cst_End_of_file = "End_of_file",
    cst_Failure = "Failure",
    cst_Invalid_argument = "Invalid_argument",
    cst_Match_failure = "Match_failure",
    cst_Not_found = "Not_found",
    cst_Out_of_memory = "Out_of_memory",
    cst_Stack_overflow = "Stack_overflow",
    cst_Sys_blocked_io = "Sys_blocked_io",
    cst_Sys_error = "Sys_error",
    cst_Undefined_recursive_module = "Undefined_recursive_module";
   caml_fs_init();
   caml_register_global(0, [248, cst_Out_of_memory, -1], cst_Out_of_memory);
   caml_register_global(1, [248, cst_Sys_error, -2], cst_Sys_error);
   caml_register_global(2, [248, cst_Failure, -3], cst_Failure);
   caml_register_global
    (3, [248, cst_Invalid_argument, -4], cst_Invalid_argument);
   caml_register_global(4, [248, cst_End_of_file, -5], cst_End_of_file);
   caml_register_global
    (5, [248, cst_Division_by_zero, -6], cst_Division_by_zero);
   caml_register_global(6, [248, cst_Not_found, -7], cst_Not_found);
   caml_register_global(7, [248, cst_Match_failure, -8], cst_Match_failure);
   caml_register_global(8, [248, cst_Stack_overflow, -9], cst_Stack_overflow);
   caml_register_global(9, [248, cst_Sys_blocked_io, -10], cst_Sys_blocked_io);
   caml_register_global
    (10, [248, cst_Assert_failure, -11], cst_Assert_failure);
   caml_register_global
    (11,
     [248, cst_Undefined_recursive_module, -12],
     cst_Undefined_recursive_module);
   return;
  }
  (globalThis));

(function(a){"use strict";var
a3="Stdlib__filename",b0="Stdlib__arrayLabels",ax="Slanglib__Lexer",ay="Stdlib__result",bl="Stdlib__nativeint",a2="Slanglib__Interp_1",bG=129,bF="Slanglib__Past",I="Stdlib__bytesLabels",H=116,aw="Js_of_ocaml__PerformanceObserver",bZ="Js_of_ocaml__Intl",ab="Stdlib__hashtbl",bX=137,bY="Slanglib__Option",av="Assert_failure",bV="Js_of_ocaml__Lib_version",bW="Jsoo_runtime__",ci="Js_of_ocaml__EventSource",au=131,bk="Yojson__Raw",aa="End_of_file",ch="Stdlib__unit",at=134,bU="Js_of_ocaml__CSS",a1="Slanglib__Jargon",bT=122,cg="Out_of_memory",as="Stdlib__moreLabels",G="Slanglib__Static",ar="Js_of_ocaml__Url",bj="Not_found",cf="Failure",bD="Slanglib",bE="Yojson",bS="Jsoo_runtime__Runtime_version",ce="Stdlib__lexing",F=121,aq="Slanglib__Errors",a0="Stdlib",cd="Stdlib__sys",E="Stdlib__stream",bC=136,bB="Slanglib__Parser",bR="Js_of_ocaml__Geolocation",ap=124,aZ="Yojson__Safe",bA="Slanglib__Interp_2",D="Invalid_argument",bz="Yojson__Basic",bQ="Slanglib__Front_end",cc="Stdlib__float",cb="Stdlib__stack",ao=141,an=120,by="CamlinternalAtomic",bP="Js_of_ocaml__Dom_html",bO="Slanglib__Pptree",ca="Slanglib__Past_to_ast",am="Js_of_ocaml__Js",aY=132,bw="Js_of_ocaml__IntersectionObserver",bx=125,aX="Js_of_ocaml",C="Std_exit",bv="Js_of_ocaml__Jstable",B="Stdlib__oo",aW="Dune__exe__Export",b$="Match_failure",A="Stdlib__atomic",bi=133,bu="Js_of_ocaml__File",z="Stdlib__seq",bh="Js_of_ocaml__Regexp",b9=109,b_="Yojson__Lexer_utils",y=112,bg="Stdlib__digest",x=140,aV="Stdlib__buffer",al=118,bf="Slanglib__Interp_3",be="Stdlib__weak",w="Stdlib__printexc",$="Js_of_ocaml__Dom_svg",bd="CamlinternalLazy",ak="Js_of_ocaml__Worker",aU=139,_="Stdlib__list",bc="Ppx_deriving_yojson_runtime",v="Stdlib__bytes",Z="Sys_error",bb="Slanglib__Interp_0",bN="Slanglib__Tests",u="Dune__exe__Interp2",aT=107,t="Stdlib__queue",Y="Js_of_ocaml__Console",aS="Stdlib__complex",X="Stdlib__format",ba=126,bM="Stdlib__random",W="CamlinternalFormat",b8="Stdlib__set",bL="Stdlib__option",aj="Stack_overflow",s=108,V="Js_of_ocaml__WebSockets",ai="Stdlib__char",a$="Js_of_ocaml__",bt="Js_of_ocaml__Form",ah="Js_of_ocaml__Dom_events",aR="Undefined_recursive_module",U="Js_of_ocaml__ResizeObserver",aP="CamlinternalFormatBasics",aQ="Js_of_ocaml__WebGL",T="Jsoo_runtime",a_="Stdlib__bigarray",bs="Division_by_zero",r="Js_of_ocaml__Dom",aO="CamlinternalMod",aN=114,S="Dune__exe__Interp3",br=119,Q=110,R="Stdlib__arg",aM=113,a9="Dune__exe",q="Js_of_ocaml__Effect_js",P="Stdlib__bool",bq=101,O=128,b6="Js_of_ocaml__Typed_array",b7="Stdlib__int32",o=138,p=130,bK="Yojson__Common",b5="Stdlib__string",aL="Js_of_ocaml__MutationObserver",bp=100,N="Slanglib__Jargon_to_x86",b4="Stdlib__listLabels",n=106,aK=111,bJ="Stdlib__callback",m=117,aJ="Stdlib__printf",bo="Stdlib__genlex",bn="Stdlib__int",b3="Dune__exe__JargonSteps",l="Stdlib__obj",M=102,aI="Js_of_ocaml__Json",L="Stdlib__lazy",k="Stdlib__marshal",aH=135,j="Js_of_ocaml__XmlHttpRequest",aG=123,bm="Js_of_ocaml__Import",bI="Stdlib__ephemeron",ag="Stdlib__uchar",K="Slanglib__Ast",bH="Yojson__",aF="Stdlib__either",aE="Stdlib__array",i="Stdlib__int64",b2="Ppx_deriving_runtime",h="Slanglib__Free_vars",aD="Stdlib__map",b1="Stdlib__gc",g=103,af=115,aC=127,az="Stdlib__fun",aA="Stdlib__scanf",aB="Sys_blocked_io",e=142,f="Stdlib__stringLabels",a8=105,d="Stdlib__pervasives",a7="Stdlib__parsing",J="CamlinternalOO",ad=143,ae="Stdlib__stdLabels",a6="Yojson__Codec",ac=104,a4="Js_of_ocaml__Sys_js",a5="Yojson__T",c=a.jsoo_runtime,b=c.caml_get_global_data();b.prim_count=806;b.symbols=[0,[0,a5,83],[0,aZ,82],[0,bk,81],[0,b_,79],[0,bK,78],[0,a6,77],[0,bz,80],[0,bH,76],[0,bE,84],[0,aR,11],[0,Z,10],[0,aB,9],[0,be,56],[0,ch,27],[0,ag,22],[0,cd,23],[0,f,70],[0,b5,26],[0,E,44],[0,ae,72],[0,cb,40],[0,b8,38],[0,z,16],[0,aA,58],[0,ay,19],[0,bM,54],[0,t,41],[0,aJ,47],[0,w,50],[0,d,15],[0,a7,37],[0,bL,17],[0,B,61],[0,l,29],[0,bl,35],[0,as,71],[0,k,28],[0,aD,39],[0,b4,68],[0,_,24],[0,ce,36],[0,L,43],[0,i,34],[0,b7,33],[0,bn,32],[0,ab,55],[0,bo,63],[0,b1,52],[0,az,51],[0,X,57],[0,cc,31],[0,a3,65],[0,bI,64],[0,aF,18],[0,bg,53],[0,aS,66],[0,ai,21],[0,bJ,59],[0,I,69],[0,v,25],[0,aV,45],[0,P,20],[0,a_,73],[0,A,49],[0,b0,67],[0,aE,30],[0,R,48],[0,a0,14],[0,C,ad],[0,aj,8],[0,bN,87],[0,G,89],[0,bO,90],[0,ca,92],[0,bF,88],[0,bB,93],[0,bY,94],[0,ax,95],[0,N,98],[0,a1,97],[0,bf,99],[0,bA,bp],[0,a2,bq],[0,bb,M],[0,bQ,g],[0,h,96],[0,aq,86],[0,K,91],[0,bD,85],[0,bc,75],[0,b2,74],[0,cg,7],[0,bj,6],[0,b$,5],[0,bS,a8],[0,bW,ac],[0,T,n],[0,j,af],[0,ak,H],[0,V,m],[0,aQ,al],[0,ar,an],[0,b6,aK],[0,a4,bT],[0,U,aG],[0,bh,br],[0,aw,ap],[0,aL,bx],[0,bV,F],[0,bv,ba],[0,aI,aC],[0,am,b9],[0,bZ,bC],[0,bw,aH],[0,bm,s],[0,bR,at],[0,bt,aN],[0,bu,y],[0,ci,bi],[0,q,aY],[0,$,au],[0,bP,aM],[0,ah,p],[0,r,Q],[0,Y,bG],[0,bU,O],[0,a$,aT],[0,aX,bX],[0,D,4],[0,cf,3],[0,aa,2],[0,b3,ao],[0,S,x],[0,u,aU],[0,aW,e],[0,a9,o],[0,bs,1],[0,J,60],[0,aO,62],[0,bd,42],[0,aP,12],[0,W,46],[0,by,13],[0,av,0]];var
cj=[2,aX],ck=[2,Y],cl=[2,ah],cm=[0,0,[2,ci],bi,0,1],cn=[2,q],co=[0,0,[2,bR],at,0,1],cp=[2,bt],cq=[2,bZ],cr=[2,aI],cs=[2,aQ],ct=[0,0,[2,ar],an,0,1],cu=[2,bS],cv=[2,K],cw=[2,bQ],cx=[2,a5];b.sections=[0,[0,144,[0,[0,[0,[0,[0,[0,[0,0,[2,av],0,0,1],[2,by],13,[0,0,[2,W],46,0,1],2],[2,aP],12,[0,0,[2,bd],42,[0,[0,0,[2,aO],62,0,1],[2,J],60,0,2],3],4],[2,bs],1,[0,[0,0,[2,a9],o,[0,0,[2,aW],e,0,1],2],[2,u],aU,[0,[0,0,[2,S],x,[0,0,[2,b3],ao,0,1],2],[2,aa],2,0,3],4],5],[2,cf],3,[0,[0,[0,[0,[0,0,[2,D],4,[0,0,cj,bX,0,1],2],[2,a$],aT,[0,0,[2,bU],O,[0,0,ck,bG,0,1],2],3],[2,r],Q,[0,[0,[0,0,cl,p,0,1],[2,bP],aM,0,2],[2,$],au,[0,[0,0,cn,aY,cm,2],[2,bu],y,[0,0,cp,aN,co,2],3],4],5],[2,bm],s,[0,[0,[0,0,[2,bw],aH,[0,0,cq,bC,0,1],2],[2,am],b9,[0,[0,0,cr,aC,0,1],[2,bv],ba,0,2],3],[2,bV],F,[0,[0,0,[2,aL],bx,0,1],[2,aw],ap,0,2],4],6],[2,bh],br,[0,[0,[0,[0,0,[2,U],aG,0,1],[2,a4],bT,0,2],[2,b6],aK,[0,[0,[0,ct,cs,al,0,2],[2,V],m,0,3],[2,ak],H,[0,0,[2,j],af,0,1],4],5],[2,T],n,[0,[0,[0,0,[2,bW],ac,[0,0,cu,a8,0,1],2],[2,b$],5,[0,0,[2,bj],6,0,1],3],[2,cg],7,[0,[0,0,[2,b2],74,0,1],[2,bc],75,[0,0,[2,bD],85,[0,0,cv,91,0,1],2],3],4],6],7],8],[2,aq],86,[0,[0,[0,[0,[0,[0,0,[2,h],96,[0,0,cw,g,0,1],2],[2,bb],M,[0,0,[2,a2],bq,0,1],3],[2,bA],bp,[0,0,[2,bf],99,0,1],4],[2,a1],97,[0,[0,0,[2,N],98,0,1],[2,ax],95,0,2],5],[2,bY],94,[0,[0,[0,0,[2,bB],93,0,1],[2,bF],88,[0,0,[2,ca],92,0,1],2],[2,bO],90,[0,[0,0,[2,G],89,0,1],[2,bN],87,[0,0,[2,aj],8,[0,0,[2,C],ad,0,1],2],3],4],6],[2,a0],14,[0,[0,[0,0,[2,R],48,0,1],[2,aE],30,[0,[0,0,[2,b0],67,0,1],[2,A],49,[0,0,[2,a_],73,0,1],2],3],[2,P],20,[0,[0,[0,0,[2,aV],45,0,1],[2,v],25,[0,[0,0,[2,I],69,0,1],[2,bJ],59,0,2],3],[2,ai],21,[0,[0,0,[2,aS],66,0,1],[2,bg],53,0,2],4],5],7],9],[2,aF],18,[0,[0,[0,[0,[0,[0,0,[2,bI],64,[0,0,[2,a3],65,0,1],2],[2,cc],31,[0,[0,0,[2,X],57,0,1],[2,az],51,0,2],3],[2,b1],52,[0,[0,[0,0,[2,bo],63,0,1],[2,ab],55,0,2],[2,bn],32,[0,0,[2,b7],33,0,1],3],4],[2,i],34,[0,[0,[0,0,[2,L],43,0,1],[2,ce],36,0,2],[2,_],24,[0,[0,0,[2,b4],68,0,1],[2,aD],39,0,2],3],5],[2,k],28,[0,[0,[0,[0,0,[2,as],71,0,1],[2,bl],35,0,2],[2,l],29,[0,0,[2,B],61,0,1],3],[2,bL],17,[0,0,[2,a7],37,0,1],4],6],[2,d],15,[0,[0,[0,[0,[0,0,[2,w],50,0,1],[2,aJ],47,0,2],[2,t],41,[0,[0,0,[2,bM],54,0,1],[2,ay],19,[0,0,[2,aA],58,0,1],2],3],[2,z],16,[0,[0,0,[2,b8],38,0,1],[2,cb],40,[0,[0,[0,0,[2,ae],72,0,1],[2,E],44,0,2],[2,b5],26,[0,0,[2,f],70,0,1],3],4],5],[2,cd],23,[0,[0,0,[2,ag],22,[0,0,[2,ch],27,[0,0,[2,be],56,0,1],2],3],[2,aB],9,[0,[0,[0,0,[2,Z],10,0,1],[2,aR],11,[0,[0,0,[2,bE],84,0,1],[2,bH],76,[0,0,[2,bz],80,0,1],2],3],[2,a6],77,[0,[0,0,[2,bK],78,0,1],[2,b_],79,[0,0,[2,bk],81,[0,0,[2,aZ],82,[0,0,cx,83,0,1],2],3],4],5],6],7],8],10]],0,c.caml_list_of_js_array(["%caml_format_int_special","%direct_int_div","%direct_int_mod","%direct_int_mul","%direct_obj_tag","%identity","%int_add","%int_and","%int_asr","%int_div","%int_lsl","%int_lsr","%int_mod","%int_mul","%int_neg","%int_or","%int_sub","%int_xor","BigStringReader","MlBytes","MlChanid","MlFakeDevice","MlFakeFd","MlFakeFd_out","MlFakeFile","MlFile","MlInt64","MlMutex","MlNat","MlNodeDevice","MlNodeFd","MlObjectTable","MlStringReader","Ml_Bigarray","Ml_Bigarray_c_1_1","UInt8ArrayReader","add_nat","bigstring_of_array_buffer","bigstring_of_typed_array","bigstring_to_array_buffer","bigstring_to_typed_array","blit_nat","caml_CamlinternalMod_init_mod","caml_CamlinternalMod_update_mod","caml_MD5Final","caml_MD5Init","caml_MD5Transform","caml_MD5Update","caml_abs_float","caml_acos_float","caml_acosh_float","caml_add_float","caml_alloc_dummy","caml_alloc_dummy_float","caml_alloc_dummy_infix","caml_argv","caml_array_append","caml_array_blit","caml_array_bound_error","caml_array_concat","caml_array_fill","caml_array_get","caml_array_get_addr","caml_array_get_float","caml_array_make","caml_array_of_bytes","caml_array_of_string","caml_array_of_uniform_array","caml_array_set","caml_array_set_addr","caml_array_set_float","caml_array_sub","caml_array_unsafe_get","caml_array_unsafe_get_float","caml_array_unsafe_set","caml_array_unsafe_set_addr","caml_array_unsafe_set_float","caml_asin_float","caml_asinh_float","caml_atan2_float","caml_atan_float","caml_atanh_float","caml_ba_blit","caml_ba_change_layout","caml_ba_compare","caml_ba_create","caml_ba_create_buffer","caml_ba_create_from","caml_ba_create_unsafe","caml_ba_custom_name","caml_ba_deserialize","caml_ba_dim","caml_ba_dim_1","caml_ba_dim_2","caml_ba_dim_3","caml_ba_fill","caml_ba_from_typed_array","caml_ba_get_1","caml_ba_get_2","caml_ba_get_3","caml_ba_get_generic","caml_ba_get_size","caml_ba_get_size_per_element","caml_ba_hash","caml_ba_init","caml_ba_kind","caml_ba_kind_of_typed_array","caml_ba_layout","caml_ba_map_file","caml_ba_map_file_bytecode","caml_ba_num_dims","caml_ba_reshape","caml_ba_serialize","caml_ba_set_1","caml_ba_set_2","caml_ba_set_3","caml_ba_set_generic","caml_ba_slice","caml_ba_sub","caml_ba_to_typed_array","caml_ba_uint8_get16","caml_ba_uint8_get32","caml_ba_uint8_get64","caml_ba_uint8_set16","caml_ba_uint8_set32","caml_ba_uint8_set64","caml_backtrace_status","caml_bigstring_blit_ba_to_ba","caml_bigstring_blit_ba_to_bytes","caml_bigstring_blit_bytes_to_ba","caml_bigstring_blit_string_to_ba","caml_bigstring_memcmp","caml_blit_bytes","caml_blit_string","caml_bswap16","caml_build_symbols","caml_bytes_bound_error","caml_bytes_compare","caml_bytes_equal","caml_bytes_get","caml_bytes_get16","caml_bytes_get32","caml_bytes_get64","caml_bytes_greaterequal","caml_bytes_greaterthan","caml_bytes_lessequal","caml_bytes_lessthan","caml_bytes_notequal","caml_bytes_of_array","caml_bytes_of_jsbytes","caml_bytes_of_string","caml_bytes_of_uint8_array","caml_bytes_of_utf16_jsstring","caml_bytes_set","caml_bytes_set16","caml_bytes_set32","caml_bytes_set64","caml_bytes_unsafe_get","caml_bytes_unsafe_set","caml_call_gen","caml_callback","caml_cbrt_float","caml_ceil_float","caml_channel_descriptor","caml_check_bound","caml_check_bound_float","caml_check_bound_gen","caml_classify_float","caml_compare","caml_compare_val","caml_compare_val_get_custom","caml_compare_val_number_custom","caml_compare_val_tag","caml_convert_bytes_to_array","caml_convert_raw_backtrace","caml_convert_raw_backtrace_slot","caml_convert_string_to_bytes","caml_copysign_float","caml_cos_float","caml_cosh_float","caml_create_bytes","caml_create_file","caml_create_string","caml_current_dir","caml_custom_identifier","caml_custom_ops","caml_decompress_input","caml_div","caml_div_float","caml_ensure_stack_capacity","caml_ephe_blit_data","caml_ephe_blit_key","caml_ephe_check_data","caml_ephe_check_key","caml_ephe_create","caml_ephe_data_offset","caml_ephe_get_data","caml_ephe_get_data_copy","caml_ephe_get_key","caml_ephe_get_key_copy","caml_ephe_key_offset","caml_ephe_none","caml_ephe_set_data","caml_ephe_set_data_opt","caml_ephe_set_key","caml_ephe_unset_data","caml_ephe_unset_key","caml_eq_float","caml_equal","caml_erf_float","caml_erfc_float","caml_eventlog_pause","caml_eventlog_resume","caml_executable_name","caml_exn_with_js_backtrace","caml_exp2_float","caml_exp_float","caml_expm1_float","caml_failwith","caml_fatal_uncaught_exception","caml_fill_bytes","caml_final_register","caml_final_register_called_without_value","caml_final_release","caml_finish_formatting","caml_float_compare","caml_float_of_bytes","caml_float_of_int","caml_float_of_string","caml_floatarray_blit","caml_floatarray_create","caml_floatarray_get","caml_floatarray_set","caml_floatarray_unsafe_get","caml_floatarray_unsafe_set","caml_floor_float","caml_fma_float","caml_fmod_float","caml_format_exception","caml_format_float","caml_format_int","caml_fresh_oo_id","caml_frexp_float","caml_fs_init","caml_gc_compaction","caml_gc_counters","caml_gc_full_major","caml_gc_get","caml_gc_huge_fallback_count","caml_gc_major","caml_gc_major_slice","caml_gc_minor","caml_gc_minor_words","caml_gc_quick_stat","caml_gc_set","caml_gc_stat","caml_ge_float","caml_get_current_callstack","caml_get_exception_backtrace","caml_get_exception_raw_backtrace","caml_get_global_data","caml_get_major_bucket","caml_get_major_credit","caml_get_minor_free","caml_get_public_method","caml_get_root","caml_global_data","caml_gr_arc_aux","caml_gr_blit_image","caml_gr_clear_graph","caml_gr_close_graph","caml_gr_close_subwindow","caml_gr_create_image","caml_gr_current_x","caml_gr_current_y","caml_gr_display_mode","caml_gr_doc_of_state","caml_gr_draw_arc","caml_gr_draw_char","caml_gr_draw_image","caml_gr_draw_rect","caml_gr_draw_str","caml_gr_draw_string","caml_gr_dump_image","caml_gr_fill_arc","caml_gr_fill_poly","caml_gr_fill_rect","caml_gr_lineto","caml_gr_make_image","caml_gr_moveto","caml_gr_open_graph","caml_gr_open_subwindow","caml_gr_plot","caml_gr_point_color","caml_gr_remember_mode","caml_gr_resize_window","caml_gr_set_color","caml_gr_set_font","caml_gr_set_line_width","caml_gr_set_text_size","caml_gr_set_window_title","caml_gr_sigio_handler","caml_gr_sigio_signal","caml_gr_size_x","caml_gr_size_y","caml_gr_state","caml_gr_state_create","caml_gr_state_get","caml_gr_state_init","caml_gr_state_set","caml_gr_synchronize","caml_gr_text_size","caml_gr_wait_event","caml_gr_window_id","caml_greaterequal","caml_greaterthan","caml_gt_float","caml_hash","caml_hash_mix_bigstring","caml_hash_mix_bytes","caml_hash_mix_bytes_arr","caml_hash_mix_final","caml_hash_mix_float","caml_hash_mix_float16","caml_hash_mix_int","caml_hash_mix_int64","caml_hash_mix_jsbytes","caml_hash_mix_string","caml_hash_nat","caml_hexstring_of_float","caml_hypot_float","caml_input_value","caml_input_value_from_bytes","caml_input_value_from_reader","caml_install_signal_handler","caml_int32_add","caml_int32_and","caml_int32_bits_of_float","caml_int32_bswap","caml_int32_compare","caml_int32_div","caml_int32_float_of_bits","caml_int32_format","caml_int32_mod","caml_int32_mul","caml_int32_neg","caml_int32_of_float","caml_int32_of_int","caml_int32_of_string","caml_int32_or","caml_int32_shift_left","caml_int32_shift_right","caml_int32_shift_right_unsigned","caml_int32_sub","caml_int32_to_float","caml_int32_to_int","caml_int32_unmarshal","caml_int32_xor","caml_int64_add","caml_int64_and","caml_int64_bits_of_float","caml_int64_bswap","caml_int64_compare","caml_int64_create_lo_hi","caml_int64_create_lo_mi_hi","caml_int64_div","caml_int64_float_of_bits","caml_int64_format","caml_int64_hash","caml_int64_hi32","caml_int64_is_negative","caml_int64_is_zero","caml_int64_lo32","caml_int64_marshal","caml_int64_mod","caml_int64_mul","caml_int64_neg","caml_int64_of_bytes","caml_int64_of_float","caml_int64_of_int","caml_int64_of_int32","caml_int64_of_nativeint","caml_int64_of_string","caml_int64_offset","caml_int64_or","caml_int64_shift_left","caml_int64_shift_right","caml_int64_shift_right_unsigned","caml_int64_sub","caml_int64_to_bytes","caml_int64_to_float","caml_int64_to_int","caml_int64_to_int32","caml_int64_to_nativeint","caml_int64_ult","caml_int64_unmarshal","caml_int64_xor","caml_int_compare","caml_int_of_float","caml_int_of_string","caml_invalid_argument","caml_is_continuation_tag","caml_is_js","caml_is_ml_bytes","caml_is_ml_string","caml_is_printable","caml_is_special_exception","caml_js_call","caml_js_delete","caml_js_equals","caml_js_error_of_exception","caml_js_error_option_of_exception","caml_js_eval_string","caml_js_expr","caml_js_from_array","caml_js_from_bool","caml_js_from_float","caml_js_from_int32","caml_js_from_nativeint","caml_js_from_string","caml_js_fun_call","caml_js_function_arity","caml_js_get","caml_js_get_console","caml_js_html_entities","caml_js_html_escape","caml_js_instanceof","caml_js_meth_call","caml_js_new","caml_js_object","caml_js_pure_expr","caml_js_set","caml_js_strict_equals","caml_js_to_array","caml_js_to_bool","caml_js_to_byte_string","caml_js_to_float","caml_js_to_int32","caml_js_to_nativeint","caml_js_to_string","caml_js_typeof","caml_js_var","caml_js_wrap_callback","caml_js_wrap_callback_arguments","caml_js_wrap_callback_strict","caml_js_wrap_callback_unsafe","caml_js_wrap_meth_callback","caml_js_wrap_meth_callback_arguments","caml_js_wrap_meth_callback_strict","caml_js_wrap_meth_callback_unsafe","caml_jsbytes_of_string","caml_jsoo_flags_effects","caml_jsoo_flags_use_js_string","caml_jsstring_of_string","caml_lazy_make_forward","caml_ldexp_float","caml_le_float","caml_lessequal","caml_lessthan","caml_lex_array","caml_lex_engine","caml_list_mount_point","caml_list_of_js_array","caml_list_to_js_array","caml_log10_float","caml_log1p_float","caml_log2_float","caml_log_float","caml_lt_float","caml_make_array","caml_make_float_vect","caml_make_path","caml_make_vect","caml_marshal_constants","caml_marshal_data_size","caml_marshal_header_size","caml_maybe_attach_backtrace","caml_maybe_print_stats","caml_md5_bytes","caml_md5_chan","caml_md5_string","caml_memprof_start","caml_memprof_stop","caml_ml_bytes_content","caml_ml_bytes_length","caml_ml_channel_get","caml_ml_channel_redirect","caml_ml_channel_restore","caml_ml_channel_size","caml_ml_channel_size_64","caml_ml_channels","caml_ml_close_channel","caml_ml_debug_info_status","caml_ml_enable_runtime_warnings","caml_ml_flush","caml_ml_input","caml_ml_input_block","caml_ml_input_char","caml_ml_input_int","caml_ml_input_scan_line","caml_ml_is_buffered","caml_ml_mutex_lock","caml_ml_mutex_new","caml_ml_mutex_try_lock","caml_ml_mutex_unlock","caml_ml_open_descriptor_in","caml_ml_open_descriptor_out","caml_ml_out_channels_list","caml_ml_output","caml_ml_output_bytes","caml_ml_output_char","caml_ml_output_int","caml_ml_output_ta","caml_ml_pos_in","caml_ml_pos_in_64","caml_ml_pos_out","caml_ml_pos_out_64","caml_ml_runtime_warnings_enabled","caml_ml_seek_in","caml_ml_seek_in_64","caml_ml_seek_out","caml_ml_seek_out_64","caml_ml_set_binary_mode","caml_ml_set_buffered","caml_ml_set_channel_name","caml_ml_set_channel_output","caml_ml_set_channel_refill","caml_ml_string_length","caml_mod","caml_modf_float","caml_mount_autoload","caml_mul","caml_mul_float","caml_named_value","caml_named_values","caml_nativeint_add","caml_nativeint_and","caml_nativeint_bswap","caml_nativeint_compare","caml_nativeint_div","caml_nativeint_format","caml_nativeint_mod","caml_nativeint_mul","caml_nativeint_neg","caml_nativeint_of_float","caml_nativeint_of_int","caml_nativeint_of_int32","caml_nativeint_of_string","caml_nativeint_or","caml_nativeint_shift_left","caml_nativeint_shift_right","caml_nativeint_shift_right_unsigned","caml_nativeint_sub","caml_nativeint_to_float","caml_nativeint_to_int","caml_nativeint_to_int32","caml_nativeint_unmarshal","caml_nativeint_xor","caml_neg_float","caml_neq_float","caml_new_lex_engine","caml_new_string","caml_nextafter_float","caml_notequal","caml_obj_add_offset","caml_obj_block","caml_obj_dup","caml_obj_make_forward","caml_obj_raw_field","caml_obj_reachable_words","caml_obj_set_raw_field","caml_obj_set_tag","caml_obj_tag","caml_obj_truncate","caml_obj_with_tag","caml_ojs_new_arr","caml_oo_last_id","caml_output_val","caml_output_value","caml_output_value_to_buffer","caml_output_value_to_bytes","caml_output_value_to_string","caml_packFloat16","caml_parse_digit","caml_parse_engine","caml_parse_format","caml_parse_sign_and_base","caml_parser_trace","caml_pos_in","caml_pos_out","caml_power_float","caml_pure_js_expr","caml_raise_constant","caml_raise_end_of_file","caml_raise_no_such_file","caml_raise_nodejs_error","caml_raise_not_found","caml_raise_sys_error","caml_raise_system_error","caml_raise_with_arg","caml_raise_with_args","caml_raise_with_string","caml_raise_zero_divide","caml_raw_backtrace_length","caml_raw_backtrace_next_slot","caml_raw_backtrace_slot","caml_read_file_content","caml_record_backtrace","caml_record_backtrace_env_flag","caml_record_backtrace_runtime_flag","caml_refill","caml_register_global","caml_register_named_value","caml_restore_raw_backtrace","caml_root","caml_round_float","caml_runtime_parameters","caml_runtime_variant","caml_runtime_warnings","caml_seek_in","caml_seek_out","caml_set_oo_id","caml_set_parser_trace","caml_set_static_env","caml_signbit_float","caml_sin_float","caml_sinh_float","caml_sqrt_float","caml_str_repeat","caml_string_bound_error","caml_string_compare","caml_string_concat","caml_string_equal","caml_string_get","caml_string_get16","caml_string_get32","caml_string_get64","caml_string_greaterequal","caml_string_greaterthan","caml_string_lessequal","caml_string_lessthan","caml_string_notequal","caml_string_of_array","caml_string_of_bytes","caml_string_of_jsbytes","caml_string_of_jsstring","caml_string_of_uint8_array","caml_string_set","caml_string_unsafe_get","caml_sub_float","caml_sub_uint8_array_to_jsbytes","caml_subarray_to_jsbytes","caml_sys_argv","caml_sys_chdir","caml_sys_close","caml_sys_const_backend_type","caml_sys_const_big_endian","caml_sys_const_int_size","caml_sys_const_max_wosize","caml_sys_const_naked_pointers_checked","caml_sys_const_ostype_cygwin","caml_sys_const_ostype_unix","caml_sys_const_ostype_win32","caml_sys_const_word_size","caml_sys_executable_name","caml_sys_exit","caml_sys_fds","caml_sys_file_exists","caml_sys_get_argv","caml_sys_get_config","caml_sys_getcwd","caml_sys_getenv","caml_sys_is_directory","caml_sys_isatty","caml_sys_mkdir","caml_sys_modify_argv","caml_sys_open","caml_sys_open_for_node","caml_sys_random_seed","caml_sys_read_directory","caml_sys_remove","caml_sys_rename","caml_sys_rmdir","caml_sys_system_command","caml_sys_time","caml_sys_time_include_children","caml_sys_unsafe_getenv","caml_tan_float","caml_tanh_float","caml_to_js_string","caml_trailing_slash","caml_trampoline","caml_trampoline_return","caml_trunc_float","caml_uint8_array_of_bytes","caml_uint8_array_of_string","caml_unix_cleanup","caml_unix_close","caml_unix_closedir","caml_unix_filedescr_of_fd","caml_unix_findclose","caml_unix_findfirst","caml_unix_findnext","caml_unix_fstat","caml_unix_fstat_64","caml_unix_ftruncate","caml_unix_ftruncate_64","caml_unix_getpwuid","caml_unix_gettimeofday","caml_unix_getuid","caml_unix_gmtime","caml_unix_has_symlink","caml_unix_inchannel_of_filedescr","caml_unix_inet_addr_of_string","caml_unix_isatty","caml_unix_localtime","caml_unix_lookup_file","caml_unix_lseek","caml_unix_lseek_64","caml_unix_lstat","caml_unix_lstat_64","caml_unix_mkdir","caml_unix_mktime","caml_unix_open","caml_unix_opendir","caml_unix_outchannel_of_filedescr","caml_unix_read","caml_unix_readdir","caml_unix_readlink","caml_unix_rename","caml_unix_rewinddir","caml_unix_rmdir","caml_unix_startup","caml_unix_stat","caml_unix_stat_64","caml_unix_symlink","caml_unix_time","caml_unix_truncate","caml_unix_truncate_64","caml_unix_unlink","caml_unix_utimes","caml_unix_write","caml_unmount","caml_unpackFloat16","caml_update_dummy","caml_utf16_of_utf8","caml_utf8_of_utf16","caml_weak_create","caml_weak_set","caml_wrap_exception","caml_xmlhttprequest_create","compare_digits_nat","compare_nat","complement_nat","create_nat","decr_nat","deserialize_nat","div_digit_nat","div_helper","div_nat","fs_node_stats_from_js","fs_node_supported","incr_nat","initialize_nat","is_digit_int","is_digit_normalized","is_digit_odd","is_digit_zero","jsoo_create_file","jsoo_create_file_extern","jsoo_floor_log2","jsoo_is_ascii","jsoo_mount_point","jsoo_static_env","jsoo_sys_getenv","jsoo_toplevel_reloc","land_digit_nat","length_nat","lor_digit_nat","lxor_digit_nat","make_unix_err_args","mult_digit_nat","mult_nat","nat_of_array","nth_digit_nat","nth_digit_nat_native","num_digits_nat","num_leading_zero_bits_in_digit","os_type","path_is_absolute","re_match","re_partial_match","re_replacement_text","re_search_backward","re_search_forward","re_string_match","resolve_fs_device","serialize_nat","set_digit_nat","set_digit_nat_native","set_to_zero_nat","shift_left_nat","shift_right_nat","square_nat","sub_nat","unix_error"]),0];return}(globalThis));

//# 4 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function erase_rel(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, erase_rel(rest)];
      case 1:
       var rest$0 = param[1]; return [1, erase_rel(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, erase_rel(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, erase_rel(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, erase_rel(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, erase_rel(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, erase_rel(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, erase_rel(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
       return [8, ty, erase_rel(rest$7)];
      case 9:
       var rest$8 = param[3], ty1 = param[1];
       return [9, ty1, ty1, erase_rel(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, erase_rel(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, erase_rel(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, erase_rel(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, erase_rel(rest$12)];
      default: var rest$13 = param[1]; return [14, erase_rel(rest$13)];
    }
   }
   function concat_fmtty(fmtty1, fmtty2){
    if(typeof fmtty1 === "number") return fmtty2;
    switch(fmtty1[0]){
      case 0:
       var rest = fmtty1[1]; return [0, concat_fmtty(rest, fmtty2)];
      case 1:
       var rest$0 = fmtty1[1]; return [1, concat_fmtty(rest$0, fmtty2)];
      case 2:
       var rest$1 = fmtty1[1]; return [2, concat_fmtty(rest$1, fmtty2)];
      case 3:
       var rest$2 = fmtty1[1]; return [3, concat_fmtty(rest$2, fmtty2)];
      case 4:
       var rest$3 = fmtty1[1]; return [4, concat_fmtty(rest$3, fmtty2)];
      case 5:
       var rest$4 = fmtty1[1]; return [5, concat_fmtty(rest$4, fmtty2)];
      case 6:
       var rest$5 = fmtty1[1]; return [6, concat_fmtty(rest$5, fmtty2)];
      case 7:
       var rest$6 = fmtty1[1]; return [7, concat_fmtty(rest$6, fmtty2)];
      case 8:
       var rest$7 = fmtty1[2], ty = fmtty1[1];
       return [8, ty, concat_fmtty(rest$7, fmtty2)];
      case 9:
       var rest$8 = fmtty1[3], ty2 = fmtty1[2], ty1 = fmtty1[1];
       return [9, ty1, ty2, concat_fmtty(rest$8, fmtty2)];
      case 10:
       var rest$9 = fmtty1[1]; return [10, concat_fmtty(rest$9, fmtty2)];
      case 11:
       var rest$10 = fmtty1[1]; return [11, concat_fmtty(rest$10, fmtty2)];
      case 12:
       var rest$11 = fmtty1[1]; return [12, concat_fmtty(rest$11, fmtty2)];
      case 13:
       var rest$12 = fmtty1[1]; return [13, concat_fmtty(rest$12, fmtty2)];
      default:
       var rest$13 = fmtty1[1]; return [14, concat_fmtty(rest$13, fmtty2)];
    }
   }
   function concat_fmt(fmt1, fmt2){
    if(typeof fmt1 === "number") return fmt2;
    switch(fmt1[0]){
      case 0:
       var rest = fmt1[1]; return [0, concat_fmt(rest, fmt2)];
      case 1:
       var rest$0 = fmt1[1]; return [1, concat_fmt(rest$0, fmt2)];
      case 2:
       var rest$1 = fmt1[2], pad = fmt1[1];
       return [2, pad, concat_fmt(rest$1, fmt2)];
      case 3:
       var rest$2 = fmt1[2], pad$0 = fmt1[1];
       return [3, pad$0, concat_fmt(rest$2, fmt2)];
      case 4:
       var rest$3 = fmt1[4], prec = fmt1[3], pad$1 = fmt1[2], iconv = fmt1[1];
       return [4, iconv, pad$1, prec, concat_fmt(rest$3, fmt2)];
      case 5:
       var
        rest$4 = fmt1[4],
        prec$0 = fmt1[3],
        pad$2 = fmt1[2],
        iconv$0 = fmt1[1];
       return [5, iconv$0, pad$2, prec$0, concat_fmt(rest$4, fmt2)];
      case 6:
       var
        rest$5 = fmt1[4],
        prec$1 = fmt1[3],
        pad$3 = fmt1[2],
        iconv$1 = fmt1[1];
       return [6, iconv$1, pad$3, prec$1, concat_fmt(rest$5, fmt2)];
      case 7:
       var
        rest$6 = fmt1[4],
        prec$2 = fmt1[3],
        pad$4 = fmt1[2],
        iconv$2 = fmt1[1];
       return [7, iconv$2, pad$4, prec$2, concat_fmt(rest$6, fmt2)];
      case 8:
       var
        rest$7 = fmt1[4],
        prec$3 = fmt1[3],
        pad$5 = fmt1[2],
        fconv = fmt1[1];
       return [8, fconv, pad$5, prec$3, concat_fmt(rest$7, fmt2)];
      case 9:
       var rest$8 = fmt1[2], pad$6 = fmt1[1];
       return [9, pad$6, concat_fmt(rest$8, fmt2)];
      case 10:
       var rest$9 = fmt1[1]; return [10, concat_fmt(rest$9, fmt2)];
      case 11:
       var rest$10 = fmt1[2], str = fmt1[1];
       return [11, str, concat_fmt(rest$10, fmt2)];
      case 12:
       var rest$11 = fmt1[2], chr = fmt1[1];
       return [12, chr, concat_fmt(rest$11, fmt2)];
      case 13:
       var rest$12 = fmt1[3], fmtty = fmt1[2], pad$7 = fmt1[1];
       return [13, pad$7, fmtty, concat_fmt(rest$12, fmt2)];
      case 14:
       var rest$13 = fmt1[3], fmtty$0 = fmt1[2], pad$8 = fmt1[1];
       return [14, pad$8, fmtty$0, concat_fmt(rest$13, fmt2)];
      case 15:
       var rest$14 = fmt1[1]; return [15, concat_fmt(rest$14, fmt2)];
      case 16:
       var rest$15 = fmt1[1]; return [16, concat_fmt(rest$15, fmt2)];
      case 17:
       var rest$16 = fmt1[2], fmting_lit = fmt1[1];
       return [17, fmting_lit, concat_fmt(rest$16, fmt2)];
      case 18:
       var rest$17 = fmt1[2], fmting_gen = fmt1[1];
       return [18, fmting_gen, concat_fmt(rest$17, fmt2)];
      case 19:
       var rest$18 = fmt1[1]; return [19, concat_fmt(rest$18, fmt2)];
      case 20:
       var rest$19 = fmt1[3], char_set = fmt1[2], width_opt = fmt1[1];
       return [20, width_opt, char_set, concat_fmt(rest$19, fmt2)];
      case 21:
       var rest$20 = fmt1[2], counter = fmt1[1];
       return [21, counter, concat_fmt(rest$20, fmt2)];
      case 22:
       var rest$21 = fmt1[1]; return [22, concat_fmt(rest$21, fmt2)];
      case 23:
       var rest$22 = fmt1[2], ign = fmt1[1];
       return [23, ign, concat_fmt(rest$22, fmt2)];
      default:
       var rest$23 = fmt1[3], f = fmt1[2], arity = fmt1[1];
       return [24, arity, f, concat_fmt(rest$23, fmt2)];
    }
   }
   var CamlinternalFormatBasics = [0, concat_fmtty, erase_rel, concat_fmt];
   runtime.caml_register_global
    (0, CamlinternalFormatBasics, "CamlinternalFormatBasics");
   return;
  }
  (globalThis));

//# 178 "../.js/default/stdlib/stdlib.cma.js"
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function make(v){return [0, v];}
   function get(r){return r[1];}
   function set(r, v){r[1] = v; return 0;}
   function exchange(r, v){var cur = r[1]; r[1] = v; return cur;}
   function compare_and_set(r, seen, v){
    var cur = r[1];
    return cur === seen ? (r[1] = v, 1) : 0;
   }
   function fetch_and_add(r, n){
    var cur = r[1];
    r[1] = cur + n | 0;
    return cur;
   }
   function incr(r){fetch_and_add(r, 1); return 0;}
   function decr(r){fetch_and_add(r, -1); return 0;}
   var
    CamlinternalAtomic =
      [0,
       make,
       get,
       set,
       exchange,
       compare_and_set,
       fetch_and_add,
       incr,
       decr];
   runtime.caml_register_global(0, CamlinternalAtomic, "CamlinternalAtomic");
   return;
  }
  (globalThis));

//# 214 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_false$0 = "false",
    cst_true$0 = "true",
    caml_create_bytes = runtime.caml_create_bytes,
    caml_float_of_string = runtime.caml_float_of_string,
    caml_int64_float_of_bits = runtime.caml_int64_float_of_bits,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_channel_size = runtime.caml_ml_channel_size,
    caml_ml_channel_size_64 = runtime.caml_ml_channel_size_64,
    caml_ml_close_channel = runtime.caml_ml_close_channel,
    caml_ml_flush = runtime.caml_ml_flush,
    caml_ml_input = runtime.caml_ml_input,
    caml_ml_input_char = runtime.caml_ml_input_char,
    caml_ml_open_descriptor_in = runtime.caml_ml_open_descriptor_in,
    caml_ml_open_descriptor_out = runtime.caml_ml_open_descriptor_out,
    caml_ml_output = runtime.caml_ml_output,
    caml_ml_output_bytes = runtime.caml_ml_output_bytes,
    caml_ml_output_char = runtime.caml_ml_output_char,
    caml_ml_set_binary_mode = runtime.caml_ml_set_binary_mode,
    caml_ml_set_channel_name = runtime.caml_ml_set_channel_name,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_concat = runtime.caml_string_concat,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_sys_open = runtime.caml_sys_open,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalAtomic = global_data.CamlinternalAtomic,
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Invalid_argument = global_data.Invalid_argument,
    Failure = global_data.Failure,
    Match_failure = global_data.Match_failure,
    Assert_failure = global_data.Assert_failure,
    Not_found = global_data.Not_found,
    Out_of_memory = global_data.Out_of_memory,
    Stack_overflow = global_data.Stack_overflow,
    Sys_error = global_data.Sys_error,
    End_of_file = global_data.End_of_file,
    Division_by_zero = global_data.Division_by_zero,
    Sys_blocked_io = global_data.Sys_blocked_io,
    Undefined_recursive_module = global_data.Undefined_recursive_module;
   function failwith(s){
    throw caml_maybe_attach_backtrace([0, Failure, s], 1);
   }
   function invalid_arg(s){
    throw caml_maybe_attach_backtrace([0, Invalid_argument, s], 1);
   }
   var Exit = [248, "Stdlib.Exit", runtime.caml_fresh_oo_id(0)];
   function min(x, y){return runtime.caml_lessequal(x, y) ? x : y;}
   function max(x, y){return runtime.caml_greaterequal(x, y) ? x : y;}
   function abs(x){return 0 <= x ? x : - x | 0;}
   function lnot(x){return x ^ -1;}
   var
    infinity =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(0, 0, 32752)),
    neg_infinity =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(0, 0, 65520)),
    nan =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(1, 0, 32752)),
    max_float =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32751)),
    min_float =
      caml_int64_float_of_bits(runtime.caml_int64_create_lo_mi_hi(0, 0, 16)),
    epsilon_float =
      caml_int64_float_of_bits
       (runtime.caml_int64_create_lo_mi_hi(0, 0, 15536)),
    symbol_concat = caml_string_concat,
    cst_char_of_int = "char_of_int",
    cst_true = cst_true$0,
    cst_false = cst_false$0,
    cst_bool_of_string = "bool_of_string",
    _a_ = [0, 1],
    _b_ = [0, 0];
   function char_of_int(n){
    if(0 <= n && 255 >= n) return n;
    return invalid_arg(cst_char_of_int);
   }
   function string_of_bool(b){return b ? cst_true : cst_false;}
   function bool_of_string(param){
    return param !== cst_false$0
            ? param !== cst_true$0 ? invalid_arg(cst_bool_of_string) : 1
            : 0;
   }
   function bool_of_string_opt(param){
    return param !== cst_false$0 ? param !== cst_true$0 ? 0 : _a_ : _b_;
   }
   function string_of_int(n){return "" + n;}
   function int_of_string_opt(s){
    try{var _u_ = [0, caml_int_of_string(s)]; return _u_;}
    catch(_v_){
     var _t_ = caml_wrap_exception(_v_);
     if(_t_[1] === Failure) return 0;
     throw caml_maybe_attach_backtrace(_t_, 0);
    }
   }
   function valid_float_lexem(s1){
    var l = caml_ml_string_length(s1), i = 0;
    for(;;){
     if(l <= i) return s1 + ".";
     var match = runtime.caml_string_get(s1, i);
     a:
     {
      if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
      return s1;
     }
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function string_of_float(f){
    return valid_float_lexem(runtime.caml_format_float("%.12g", f));
   }
   function float_of_string_opt(s){
    try{var _r_ = [0, caml_float_of_string(s)]; return _r_;}
    catch(_s_){
     var _q_ = caml_wrap_exception(_s_);
     if(_q_[1] === Failure) return 0;
     throw caml_maybe_attach_backtrace(_q_, 0);
    }
   }
   function symbol(l1, l2){
    if(! l1) return l2;
    var tl = l1[2], hd = l1[1];
    return [0, hd, symbol(tl, l2)];
   }
   var
    stdin = caml_ml_open_descriptor_in(0),
    stdout = caml_ml_open_descriptor_out(1),
    stderr = caml_ml_open_descriptor_out(2),
    _c_ = [0, 1, [0, 3, [0, 4, [0, 7, 0]]]],
    _d_ = [0, 1, [0, 3, [0, 4, [0, 6, 0]]]],
    cst_output = "output",
    cst_output_substring = "output_substring",
    _e_ = [0, 0, [0, 7, 0]],
    _f_ = [0, 0, [0, 6, 0]],
    cst_input = "input",
    cst_really_input = "really_input";
   function open_out_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_out(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_out(name){return open_out_gen(_c_, 438, name);}
   function open_out_bin(name){return open_out_gen(_d_, 438, name);}
   function flush_all(param){
    var param$0 = runtime.caml_ml_out_channels_list(0);
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     try{caml_ml_flush(a);}
     catch(_p_){
      var _o_ = caml_wrap_exception(_p_);
      if(_o_[1] !== Sys_error) throw caml_maybe_attach_backtrace(_o_, 0);
     }
     param$0 = l;
    }
   }
   function output_bytes(oc, s){
    return caml_ml_output_bytes(oc, s, 0, caml_ml_bytes_length(s));
   }
   function output_string(oc, s){
    return caml_ml_output(oc, s, 0, caml_ml_string_length(s));
   }
   function output(oc, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_ml_output_bytes(oc, s, ofs, len);
    return invalid_arg(cst_output);
   }
   function output_substring(oc, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_string_length(s) - len | 0) >= ofs)
     return caml_ml_output(oc, s, ofs, len);
    return invalid_arg(cst_output_substring);
   }
   function output_value(chan, v){
    return runtime.caml_output_value(chan, v, 0);
   }
   function close_out(oc){
    caml_ml_flush(oc);
    return caml_ml_close_channel(oc);
   }
   function close_out_noerr(oc){
    try{caml_ml_flush(oc);}catch(_n_){}
    try{var _l_ = caml_ml_close_channel(oc); return _l_;}catch(_m_){return 0;}
   }
   function open_in_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_in(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_in(name){return open_in_gen(_e_, 0, name);}
   function open_in_bin(name){return open_in_gen(_f_, 0, name);}
   function input(ic, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_ml_input(ic, s, ofs, len);
    return invalid_arg(cst_input);
   }
   function unsafe_really_input(ic, s, ofs, len){
    var ofs$0 = ofs, len$0 = len;
    for(;;){
     if(0 >= len$0) return 0;
     var r = caml_ml_input(ic, s, ofs$0, len$0);
     if(0 === r) throw caml_maybe_attach_backtrace(End_of_file, 1);
     var len$1 = len$0 - r | 0, ofs$1 = ofs$0 + r | 0;
     ofs$0 = ofs$1;
     len$0 = len$1;
    }
   }
   function really_input(ic, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return unsafe_really_input(ic, s, ofs, len);
    return invalid_arg(cst_really_input);
   }
   function really_input_string(ic, len){
    var s = caml_create_bytes(len);
    really_input(ic, s, 0, len);
    return caml_string_of_bytes(s);
   }
   function input_line(chan){
    function build_result(buf, pos, param){
     var pos$0 = pos, param$0 = param;
     for(;;){
      if(! param$0) return buf;
      var tl = param$0[2], hd = param$0[1], len = caml_ml_bytes_length(hd);
      runtime.caml_blit_bytes(hd, 0, buf, pos$0 - len | 0, len);
      var pos$1 = pos$0 - len | 0;
      pos$0 = pos$1;
      param$0 = tl;
     }
    }
    var accu = 0, len = 0;
    for(;;){
     var n = runtime.caml_ml_input_scan_line(chan);
     if(0 === n){
      if(! accu) throw caml_maybe_attach_backtrace(End_of_file, 1);
      var _k_ = build_result(caml_create_bytes(len), len, accu);
     }
     else{
      if(0 >= n){
       var beg = caml_create_bytes(- n | 0);
       caml_ml_input(chan, beg, 0, - n | 0);
       var len$1 = len - n | 0, accu$0 = [0, beg, accu];
       accu = accu$0;
       len = len$1;
       continue;
      }
      var res = caml_create_bytes(n - 1 | 0);
      caml_ml_input(chan, res, 0, n - 1 | 0);
      caml_ml_input_char(chan);
      if(accu)
       var
        len$0 = (len + n | 0) - 1 | 0,
        _k_ = build_result(caml_create_bytes(len$0), len$0, [0, res, accu]);
      else
       var _k_ = res;
     }
     return caml_string_of_bytes(_k_);
    }
   }
   function close_in_noerr(ic){
    try{var _i_ = caml_ml_close_channel(ic); return _i_;}catch(_j_){return 0;}
   }
   function print_char(c){return caml_ml_output_char(stdout, c);}
   function print_string(s){return output_string(stdout, s);}
   function print_bytes(s){return output_bytes(stdout, s);}
   function print_int(i){return output_string(stdout, "" + i);}
   function print_float(f){return output_string(stdout, string_of_float(f));}
   function print_endline(s){
    output_string(stdout, s);
    caml_ml_output_char(stdout, 10);
    return caml_ml_flush(stdout);
   }
   function print_newline(param){
    caml_ml_output_char(stdout, 10);
    return caml_ml_flush(stdout);
   }
   function prerr_char(c){return caml_ml_output_char(stderr, c);}
   function prerr_string(s){return output_string(stderr, s);}
   function prerr_bytes(s){return output_bytes(stderr, s);}
   function prerr_int(i){return output_string(stderr, "" + i);}
   function prerr_float(f){return output_string(stderr, string_of_float(f));}
   function prerr_endline(s){
    output_string(stderr, s);
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   function prerr_newline(param){
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   function read_line(param){caml_ml_flush(stdout); return input_line(stdin);}
   function read_int(param){return caml_int_of_string(read_line(0));}
   function read_int_opt(param){return int_of_string_opt(read_line(0));}
   function read_float(param){return caml_float_of_string(read_line(0));}
   function read_float_opt(param){return float_of_string_opt(read_line(0));}
   function string_of_format(param){var str = param[2]; return str;}
   function symbol$0(param, _h_){
    var
     str2 = _h_[2],
     fmt2 = _h_[1],
     str1 = param[2],
     fmt1 = param[1],
     s2 = "%," + str2;
    return [0, caml_call2(CamlinternalFormatBasics[3], fmt1, fmt2), str1 + s2];
   }
   var exit_function = caml_call1(CamlinternalAtomic[1], flush_all);
   function at_exit(f){
    for(;;){
     var
      f_yet_to_run = caml_call1(CamlinternalAtomic[1], 1),
      old_exit = caml_call1(CamlinternalAtomic[2], exit_function);
     let f_yet_to_run$0 = f_yet_to_run, old_exit$0 = old_exit;
     var
      new_exit =
        function(param){
         if(caml_call3(CamlinternalAtomic[5], f_yet_to_run$0, 1, 0))
          caml_call1(f, 0);
         return caml_call1(old_exit$0, 0);
        },
      success =
        caml_call3(CamlinternalAtomic[5], exit_function, old_exit, new_exit),
      _g_ = 1 - success;
     if(! _g_) return _g_;
    }
   }
   function do_at_exit(param){
    return caml_call1(caml_call1(CamlinternalAtomic[2], exit_function), 0);
   }
   function exit(retcode){
    do_at_exit(0);
    return runtime.caml_sys_exit(retcode);
   }
   runtime.caml_register_named_value("Pervasives.do_at_exit", do_at_exit);
   var
    Stdlib =
      [0,
       invalid_arg,
       failwith,
       Exit,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       2147483647,
       -2147483648,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       symbol_concat,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       symbol,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       caml_ml_flush,
       flush_all,
       caml_ml_output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       caml_ml_output_char,
       runtime.caml_ml_output_int,
       output_value,
       runtime.caml_ml_seek_out,
       runtime.caml_ml_pos_out,
       caml_ml_channel_size,
       close_out,
       close_out_noerr,
       caml_ml_set_binary_mode,
       open_in,
       open_in_bin,
       open_in_gen,
       caml_ml_input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       caml_ml_input_char,
       runtime.caml_ml_input_int,
       runtime.caml_input_value,
       runtime.caml_ml_seek_in,
       runtime.caml_ml_pos_in,
       caml_ml_channel_size,
       caml_ml_close_channel,
       close_in_noerr,
       caml_ml_set_binary_mode,
       [0,
        runtime.caml_ml_seek_out_64,
        runtime.caml_ml_pos_out_64,
        caml_ml_channel_size_64,
        runtime.caml_ml_seek_in_64,
        runtime.caml_ml_pos_in_64,
        caml_ml_channel_size_64],
       string_of_format,
       symbol$0,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit];
   runtime.caml_register_global(46, Stdlib, "Stdlib");
   return;
  }
  (globalThis));

//# 883 "../.js/default/stdlib/stdlib.cma.js"
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function empty(param){return 0;}
   function return$0(x, param){return [0, x, empty];}
   function cons(x, next, param){return [0, x, next];}
   function append(seq1, seq2, param){
    var match = caml_call1(seq1, 0);
    if(! match) return caml_call1(seq2, 0);
    var next = match[2], x = match[1];
    return [0, x, function(_i_){return append(next, seq2, _i_);}];
   }
   function map(f, seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1];
    return [0, caml_call1(f, x), function(_h_){return map(f, next, _h_);}];
   }
   function filter_map(f, seq, param){
    var seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return 0;
     var next = match[2], x = match[1], match$0 = caml_call1(f, x);
     if(match$0){
      var y = match$0[1];
      return [0, y, function(_g_){return filter_map(f, next, _g_);}];
     }
     seq$0 = next;
    }
   }
   function filter(f, seq, param){
    var seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return 0;
     var next = match[2], x = match[1];
     if(caml_call1(f, x))
      return [0, x, function(_f_){return filter(f, next, _f_);}];
     seq$0 = next;
    }
   }
   function flat_map$0(counter, f, seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1], _d_ = 0, _e_ = caml_call1(f, x);
    if(counter >= 50)
     return caml_trampoline_return(flat_map_app$0, [0, f, _e_, next, _d_]);
    var counter$0 = counter + 1 | 0;
    return flat_map_app$0(counter$0, f, _e_, next, _d_);
   }
   function flat_map(f, seq, param){
    return caml_trampoline(flat_map$0(0, f, seq, param));
   }
   function flat_map_app$0(counter, f, seq, tail, param){
    var match = caml_call1(seq, 0);
    if(match){
     var next = match[2], x = match[1];
     return [0, x, function(_c_){return flat_map_app(f, next, tail, _c_);}];
    }
    var _b_ = 0;
    if(counter >= 50)
     return caml_trampoline_return(flat_map$0, [0, f, tail, _b_]);
    var counter$0 = counter + 1 | 0;
    return flat_map$0(counter$0, f, tail, _b_);
   }
   function flat_map_app(f, seq, tail, param){
    return caml_trampoline(flat_map_app$0(0, f, seq, tail, param));
   }
   function fold_left(f, acc, seq){
    var acc$0 = acc, seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return acc$0;
     var next = match[2], x = match[1], acc$1 = caml_call2(f, acc$0, x);
     acc$0 = acc$1;
     seq$0 = next;
    }
   }
   function iter(f, seq){
    var seq$0 = seq;
    for(;;){
     var match = caml_call1(seq$0, 0);
     if(! match) return 0;
     var next = match[2], x = match[1];
     caml_call1(f, x);
     seq$0 = next;
    }
   }
   function unfold(f, u, param){
    var match = caml_call1(f, u);
    if(! match) return 0;
    var match$0 = match[1], u$0 = match$0[2], x = match$0[1];
    return [0, x, function(_a_){return unfold(f, u$0, _a_);}];
   }
   var
    Stdlib_seq =
      [0,
       empty,
       return$0,
       cons,
       append,
       map,
       filter,
       filter_map,
       flat_map,
       fold_left,
       iter,
       unfold];
   runtime.caml_register_global(0, Stdlib_seq, "Stdlib__seq");
   return;
  }
  (globalThis));

//# 1375 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_string_of_bytes = runtime.caml_string_of_bytes;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\\\\",
    cst$0 = "\\'",
    Stdlib = global_data.Stdlib,
    cst_Char_chr = "Char.chr",
    cst_b = "\\b",
    cst_t = "\\t",
    cst_n = "\\n",
    cst_r = "\\r";
   function chr(n){
    if(0 <= n && 255 >= n) return n;
    return caml_call1(Stdlib[1], cst_Char_chr);
   }
   function escaped(c){
    a:
    {
     if(40 <= c){
      if(92 === c) return cst;
      if(127 > c) break a;
     }
     else{
      if(32 <= c){if(39 <= c) return cst$0; break a;}
      if(14 > c)
       switch(c){
         case 8:
          return cst_b;
         case 9:
          return cst_t;
         case 10:
          return cst_n;
         case 13:
          return cst_r;
       }
     }
     var s = caml_create_bytes(4);
     caml_bytes_unsafe_set(s, 0, 92);
     caml_bytes_unsafe_set(s, 1, 48 + (c / 100 | 0) | 0);
     caml_bytes_unsafe_set(s, 2, 48 + ((c / 10 | 0) % 10 | 0) | 0);
     caml_bytes_unsafe_set(s, 3, 48 + (c % 10 | 0) | 0);
     return caml_string_of_bytes(s);
    }
    var s$0 = caml_create_bytes(1);
    caml_bytes_unsafe_set(s$0, 0, c);
    return caml_string_of_bytes(s$0);
   }
   function lowercase(c){
    var _b_ = c - 192 | 0;
    a:
    {
     if(30 < _b_ >>> 0){
      if(25 < _b_ + 127 >>> 0) break a;
     }
     else if(23 === _b_) break a;
     return c + 32 | 0;
    }
    return c;
   }
   function uppercase(c){
    var _a_ = c - 224 | 0;
    a:
    {
     if(30 < _a_ >>> 0){
      if(25 < _a_ + 127 >>> 0) break a;
     }
     else if(23 === _a_) break a;
     return c - 32 | 0;
    }
    return c;
   }
   function lowercase_ascii(c){return 25 < c - 65 >>> 0 ? c : c + 32 | 0;}
   function uppercase_ascii(c){return 25 < c - 97 >>> 0 ? c : c - 32 | 0;}
   function compare(c1, c2){return c1 - c2 | 0;}
   function equal(c1, c2){return 0 === (c1 - c2 | 0) ? 1 : 0;}
   var
    Stdlib_char =
      [0,
       chr,
       escaped,
       lowercase,
       uppercase,
       lowercase_ascii,
       uppercase_ascii,
       compare,
       equal];
   runtime.caml_register_global(8, Stdlib_char, "Stdlib__char");
   return;
  }
  (globalThis));

//# 1480 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_format_int = runtime.caml_format_int;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    err_no_pred = "U+0000 has no predecessor",
    err_no_succ = "U+10FFFF has no successor",
    Stdlib = global_data.Stdlib,
    cst_is_not_an_Unicode_scalar_v = " is not an Unicode scalar value",
    cst_is_not_a_latin1_character = " is not a latin1 character",
    cst_U = "U+",
    lo_bound = 55295,
    hi_bound = 57344;
   function succ(u){
    return u === 55295
            ? hi_bound
            : u === 1114111 ? caml_call1(Stdlib[1], err_no_succ) : u + 1 | 0;
   }
   function pred(u){
    return u === 57344
            ? lo_bound
            : u === 0 ? caml_call1(Stdlib[1], err_no_pred) : u - 1 | 0;
   }
   function is_valid(i){
    var _j_ = 0 <= i ? 1 : 0, _k_ = _j_ ? i <= 55295 ? 1 : 0 : _j_;
    if(_k_)
     var _l_ = _k_;
    else
     var _m_ = 57344 <= i ? 1 : 0, _l_ = _m_ ? i <= 1114111 ? 1 : 0 : _m_;
    return _l_;
   }
   function of_int(i){
    if(is_valid(i)) return i;
    var
     _i_ =
       caml_call2
        (Stdlib[28], caml_format_int("%X", i), cst_is_not_an_Unicode_scalar_v);
    return caml_call1(Stdlib[1], _i_);
   }
   function is_char(u){return u < 256 ? 1 : 0;}
   function of_char(c){return c;}
   function to_char(u){
    if(255 >= u) return u;
    var
     _g_ =
       caml_call2
        (Stdlib[28],
         caml_format_int("%04X", u),
         cst_is_not_a_latin1_character),
     _h_ = caml_call2(Stdlib[28], cst_U, _g_);
    return caml_call1(Stdlib[1], _h_);
   }
   function unsafe_to_char(_f_){return _f_;}
   function equal(_e_, _d_){return _e_ === _d_ ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function hash(_c_){return _c_;}
   var
    Stdlib_uchar =
      [0,
       0,
       1114111,
       65279,
       65533,
       succ,
       pred,
       is_valid,
       of_int,
       function(_b_){return _b_;},
       function(_a_){return _a_;},
       is_char,
       of_char,
       to_char,
       unsafe_to_char,
       equal,
       compare,
       hash];
   runtime.caml_register_global(8, Stdlib_uchar, "Stdlib__uchar");
   return;
  }
  (globalThis));

//# 1576 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    ocaml_version = "4.12.1",
    Stdlib = global_data.Stdlib,
    executable_name = runtime.caml_sys_executable_name(0),
    os_type = runtime.caml_sys_get_config(0)[1],
    backend_type = [0, "js_of_ocaml"],
    unix = runtime.caml_sys_const_ostype_unix(0),
    win32 = runtime.caml_sys_const_ostype_win32(0),
    cygwin = runtime.caml_sys_const_ostype_cygwin(0),
    max_array_length = runtime.caml_sys_const_max_wosize(0),
    max_floatarray_length = max_array_length / 2 | 0,
    max_string_length = (4 * max_array_length | 0) - 1 | 0;
   function getenv_opt(s){
    try{var _d_ = [0, runtime.caml_sys_getenv(s)]; return _d_;}
    catch(_e_){
     var _c_ = caml_wrap_exception(_e_);
     if(_c_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_c_, 0);
    }
   }
   var interactive = [0, 0];
   function set_signal(sig_num, sig_beh){return 0;}
   var Break = [248, "Stdlib.Sys.Break", runtime.caml_fresh_oo_id(0)];
   function catch_break(on){return on ? 0 : 0;}
   function Make(_b_, _a_){return [0, 1];}
   var
    Immediate64 = [0, Make],
    Stdlib_sys =
      [0,
       executable_name,
       getenv_opt,
       interactive,
       os_type,
       backend_type,
       unix,
       win32,
       cygwin,
       32,
       32,
       0,
       max_string_length,
       max_array_length,
       max_floatarray_length,
       set_signal,
       -1,
       -2,
       -3,
       -4,
       -5,
       -6,
       -7,
       -8,
       -9,
       -10,
       -11,
       -12,
       -13,
       -14,
       -15,
       -16,
       -17,
       -18,
       -19,
       -20,
       -21,
       -22,
       -23,
       -24,
       -25,
       -26,
       -27,
       -28,
       Break,
       catch_break,
       ocaml_version,
       runtime.caml_ml_enable_runtime_warnings,
       runtime.caml_ml_runtime_warnings_enabled,
       Immediate64];
   runtime.caml_register_global(3, Stdlib_sys, "Stdlib__sys");
   return;
  }
  (globalThis));

//# 1668 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_List_nth$1 = "List.nth",
    caml_compare = runtime.caml_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_seq = global_data.Stdlib__seq,
    Stdlib_sys = global_data.Stdlib__sys,
    cst_hd = "hd",
    cst_tl = "tl",
    cst_nth = "nth",
    cst_List_nth = cst_List_nth$1,
    cst_List_nth$0 = cst_List_nth$1;
   function length(l$0){
    var len = 0, param = l$0;
    for(;;){
     if(! param) return len;
     var l = param[2], len$0 = len + 1 | 0;
     len = len$0;
     param = l;
    }
   }
   function cons(a, l){return [0, a, l];}
   function hd(param){
    if(! param) return caml_call1(Stdlib[2], cst_hd);
    var a = param[1];
    return a;
   }
   function tl(param){
    if(! param) return caml_call1(Stdlib[2], cst_tl);
    var l = param[2];
    return l;
   }
   function nth(l, n){
    if(0 > n) return caml_call1(Stdlib[1], cst_List_nth);
    var l$0 = l, n$0 = n;
    for(;;){
     if(! l$0) return caml_call1(Stdlib[2], cst_nth);
     var l$1 = l$0[2], a = l$0[1];
     if(0 === n$0) return a;
     var n$1 = n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
   }
   function nth_opt(l, n){
    if(0 > n) return caml_call1(Stdlib[1], cst_List_nth$0);
    var l$0 = l, n$0 = n;
    for(;;){
     if(! l$0) return 0;
     var l$1 = l$0[2], a = l$0[1];
     if(0 === n$0) return [0, a];
     var n$1 = n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
   }
   var append = Stdlib[37];
   function rev_append(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0;
     var l1$1 = l1$0[2], a = l1$0[1], l2$1 = [0, a, l2$0];
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
   }
   function rev(l){return rev_append(l, 0);}
   function init_aux(i, n, f){
    if(n <= i) return 0;
    var r = caml_call1(f, i);
    return [0, r, init_aux(i + 1 | 0, n, f)];
   }
   var
    cst_List_map2 = "List.map2",
    cst_List_iter2 = "List.iter2",
    cst_List_fold_left2 = "List.fold_left2",
    cst_List_fold_right2 = "List.fold_right2",
    cst_List_for_all2 = "List.for_all2",
    cst_List_exists2 = "List.exists2",
    _b_ = [0, 0, 0],
    cst_List_combine = "List.combine",
    cst_List_rev_map2 = "List.rev_map2",
    cst_List_init = "List.init",
    rev_init_threshold = typeof Stdlib_sys[5] === "number" ? 10000 : 50;
   function init(len, f){
    if(0 > len) return caml_call1(Stdlib[1], cst_List_init);
    if(rev_init_threshold >= len) return init_aux(0, len, f);
    var acc = 0, i = 0;
    for(;;){
     if(len <= i) return rev(acc);
     var i$0 = i + 1 | 0, acc$0 = [0, caml_call1(f, i), acc];
     acc = acc$0;
     i = i$0;
    }
   }
   function flatten(param){
    if(! param) return 0;
    var r = param[2], l = param[1], _H_ = flatten(r);
    return caml_call2(Stdlib[37], l, _H_);
   }
   function map(f, param){
    if(! param) return 0;
    var l = param[2], a = param[1], r = caml_call1(f, a);
    return [0, r, map(f, l)];
   }
   function _a_(i, f, param){
    if(! param) return 0;
    var l = param[2], a = param[1], r = caml_call2(f, i, a);
    return [0, r, _a_(i + 1 | 0, f, l)];
   }
   function mapi(f, l){return _a_(0, f, l);}
   function rev_map(f, l){
    var accu = 0, param = l;
    for(;;){
     if(! param) return accu;
     var l$0 = param[2], a = param[1], accu$0 = [0, caml_call1(f, a), accu];
     accu = accu$0;
     param = l$0;
    }
   }
   function iter(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     caml_call1(f, a);
     param$0 = l;
    }
   }
   function iteri(f, l$0){
    var i = 0, param = l$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], a = param[1];
     caml_call2(f, i, a);
     var i$0 = i + 1 | 0;
     i = i$0;
     param = l;
    }
   }
   function fold_left(f, accu, l){
    var accu$0 = accu, l$0 = l;
    for(;;){
     if(! l$0) return accu$0;
     var l$1 = l$0[2], a = l$0[1], accu$1 = caml_call2(f, accu$0, a);
     accu$0 = accu$1;
     l$0 = l$1;
    }
   }
   function fold_right(f, l, accu){
    if(! l) return accu;
    var l$0 = l[2], a = l[1];
    return caml_call2(f, a, fold_right(f, l$0, accu));
   }
   function map2(f, l1, l2){
    if(l1){
     if(l2){
      var
       l2$0 = l2[2],
       a2 = l2[1],
       l1$0 = l1[2],
       a1 = l1[1],
       r = caml_call2(f, a1, a2);
      return [0, r, map2(f, l1$0, l2$0)];
     }
    }
    else if(! l2) return 0;
    return caml_call1(Stdlib[1], cst_List_map2);
   }
   function rev_map2(f, l1, l2){
    var accu = 0, l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        accu$0 = [0, caml_call2(f, a1, a2), accu];
       accu = accu$0;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return accu;
     return caml_call1(Stdlib[1], cst_List_rev_map2);
    }
   }
   function iter2(f, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var l2$1 = l2$0[2], a2 = l2$0[1], l1$1 = l1$0[2], a1 = l1$0[1];
       caml_call2(f, a1, a2);
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 0;
     return caml_call1(Stdlib[1], cst_List_iter2);
    }
   }
   function fold_left2(f, accu, l1, l2){
    var accu$0 = accu, l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        accu$1 = caml_call3(f, accu$0, a1, a2);
       accu$0 = accu$1;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return accu$0;
     return caml_call1(Stdlib[1], cst_List_fold_left2);
    }
   }
   function fold_right2(f, l1, l2, accu){
    if(l1){
     if(l2){
      var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
      return caml_call3(f, a1, a2, fold_right2(f, l1$0, l2$0, accu));
     }
    }
    else if(! l2) return accu;
    return caml_call1(Stdlib[1], cst_List_fold_right2);
   }
   function for_all(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 1;
     var l = param$0[2], a = param$0[1], _G_ = caml_call1(p, a);
     if(! _G_) return _G_;
     param$0 = l;
    }
   }
   function exists(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1], _F_ = caml_call1(p, a);
     if(_F_) return _F_;
     param$0 = l;
    }
   }
   function for_all2(p, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _E_ = caml_call2(p, a1, a2);
       if(! _E_) return _E_;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 1;
     return caml_call1(Stdlib[1], cst_List_for_all2);
    }
   }
   function exists2(p, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _D_ = caml_call2(p, a1, a2);
       if(_D_) return _D_;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 0;
     return caml_call1(Stdlib[1], cst_List_exists2);
    }
   }
   function mem(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var
      l = param$0[2],
      a = param$0[1],
      _C_ = 0 === caml_compare(a, x) ? 1 : 0;
     if(_C_) return _C_;
     param$0 = l;
    }
   }
   function memq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1], _B_ = a === x ? 1 : 0;
     if(_B_) return _B_;
     param$0 = l;
    }
   }
   function assoc(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(0 === caml_compare(a, x)) return b;
     param$0 = l;
    }
   }
   function assoc_opt(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(0 === caml_compare(a, x)) return [0, b];
     param$0 = l;
    }
   }
   function assq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x) return b;
     param$0 = l;
    }
   }
   function assq_opt(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x) return [0, b];
     param$0 = l;
    }
   }
   function mem_assoc(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var
      l = param$0[2],
      a = param$0[1][1],
      _A_ = 0 === caml_compare(a, x) ? 1 : 0;
     if(_A_) return _A_;
     param$0 = l;
    }
   }
   function mem_assq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1][1], _z_ = a === x ? 1 : 0;
     if(_z_) return _z_;
     param$0 = l;
    }
   }
   function remove_assoc(x, param){
    if(! param) return 0;
    var l = param[2], pair = param[1], a = pair[1];
    return 0 === caml_compare(a, x) ? l : [0, pair, remove_assoc(x, l)];
   }
   function remove_assq(x, param){
    if(! param) return 0;
    var l = param[2], pair = param[1], a = pair[1];
    return a === x ? l : [0, pair, remove_assq(x, l)];
   }
   function find(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param$0[2], x = param$0[1];
     if(caml_call1(p, x)) return x;
     param$0 = l;
    }
   }
   function find_opt(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], x = param$0[1];
     if(caml_call1(p, x)) return [0, x];
     param$0 = l;
    }
   }
   function find_map(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], x = param$0[1], result = caml_call1(f, x);
     if(result) return result;
     param$0 = l;
    }
   }
   function find_all(p){
    var accu = 0;
    return function(param$0){
     var accu$0 = accu, param = param$0;
     for(;;){
      if(! param) return rev(accu$0);
      var l = param[2], x = param[1];
      if(caml_call1(p, x)){
       var accu$1 = [0, x, accu$0];
       accu$0 = accu$1;
       param = l;
      }
      else
       param = l;
     }};
   }
   function filteri(p, l){
    var i = 0, acc = 0, param = l;
    for(;;){
     if(! param) return rev(acc);
     var
      l$0 = param[2],
      x = param[1],
      acc$0 = caml_call2(p, i, x) ? [0, x, acc] : acc,
      i$0 = i + 1 | 0;
     i = i$0;
     acc = acc$0;
     param = l$0;
    }
   }
   function filter_map(f){
    var accu = 0;
    return function(param$0){
     var accu$0 = accu, param = param$0;
     for(;;){
      if(! param) return rev(accu$0);
      var l = param[2], x = param[1], match = caml_call1(f, x);
      if(match){
       var v = match[1], accu$1 = [0, v, accu$0];
       accu$0 = accu$1;
       param = l;
      }
      else
       param = l;
     }};
   }
   function concat_map(f, l){
    var acc = 0, param = l;
    for(;;){
     if(! param) return rev(acc);
     var
      l$0 = param[2],
      x = param[1],
      xs = caml_call1(f, x),
      acc$0 = rev_append(xs, acc);
     acc = acc$0;
     param = l$0;
    }
   }
   function fold_left_map(f, accu, l){
    var accu$0 = accu, l_accu = 0, param = l;
    for(;;){
     if(! param) return [0, accu$0, rev(l_accu)];
     var
      l$0 = param[2],
      x = param[1],
      match = caml_call2(f, accu$0, x),
      x$0 = match[2],
      accu$1 = match[1],
      l_accu$0 = [0, x$0, l_accu];
     accu$0 = accu$1;
     l_accu = l_accu$0;
     param = l$0;
    }
   }
   function partition(p, l){
    var yes = 0, no = 0, param = l;
    for(;;){
     if(! param){var _y_ = rev(no); return [0, rev(yes), _y_];}
     var l$0 = param[2], x = param[1];
     if(caml_call1(p, x)){
      var yes$0 = [0, x, yes];
      yes = yes$0;
      param = l$0;
     }
     else{var no$0 = [0, x, no]; no = no$0; param = l$0;}
    }
   }
   function partition_map(p, l){
    var left = 0, right = 0, param = l;
    for(;;){
     if(! param){var _x_ = rev(right); return [0, rev(left), _x_];}
     var l$0 = param[2], x = param[1], match = caml_call1(p, x);
     if(0 === match[0]){
      var v = match[1], left$0 = [0, v, left];
      left = left$0;
      param = l$0;
     }
     else{
      var v$0 = match[1], right$0 = [0, v$0, right];
      right = right$0;
      param = l$0;
     }
    }
   }
   function split(param){
    if(! param) return _b_;
    var
     l = param[2],
     match = param[1],
     y = match[2],
     x = match[1],
     match$0 = split(l),
     ry = match$0[2],
     rx = match$0[1];
    return [0, [0, x, rx], [0, y, ry]];
   }
   function combine(l1, l2){
    if(l1){
     if(l2){
      var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
      return [0, [0, a1, a2], combine(l1$0, l2$0)];
     }
    }
    else if(! l2) return 0;
    return caml_call1(Stdlib[1], cst_List_combine);
   }
   function merge(cmp, l1, l2){
    if(! l1) return l2;
    if(! l2) return l1;
    var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
    return 0 < caml_call2(cmp, h1, h2)
            ? [0, h2, merge(cmp, l1, t2)]
            : [0, h1, merge(cmp, t1, l2)];
   }
   function stable_sort(cmp, l){
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
           0 < caml_call2(cmp, x1, x2)
            ? [0, x2, [0, x1, 0]]
            : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _w_ = l[2];
      if(_w_){
       var match$2 = _w_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _w_[1],
         x1$0 = l[1],
         s$0 =
           0 < caml_call2(cmp, x1$0, x2$0)
            ? 0
              < caml_call2(cmp, x1$0, x3)
              ? 0
                < caml_call2(cmp, x2$0, x3)
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]]
              : [0, x2$0, [0, x1$0, [0, x3, 0]]]
            : 0
              < caml_call2(cmp, x2$0, x3)
              ? 0
                < caml_call2(cmp, x1$0, x3)
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]]
              : [0, x1$0, [0, x2$0, [0, x3, 0]]];
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = rev_sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
        if(0 < caml_call2(cmp, h1, h2)){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         accu = accu$0;
         continue;
        }
        var accu$1 = [0, h2, accu];
        l2 = t2;
        accu = accu$1;
        continue;
       }
       var _v_ = rev_append(l1, accu);
      }
      else
       var _v_ = rev_append(l2, accu);
      return [0, _v_, tl$0];
     }
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
           0 < caml_call2(cmp, x1, x2)
            ? [0, x1, [0, x2, 0]]
            : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _u_ = l[2];
      if(_u_){
       var match$2 = _u_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _u_[1],
         x1$0 = l[1],
         s$0 =
           0 < caml_call2(cmp, x1$0, x2$0)
            ? 0
              < caml_call2(cmp, x2$0, x3)
              ? [0, x1$0, [0, x2$0, [0, x3, 0]]]
              : 0
                < caml_call2(cmp, x1$0, x3)
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]]
            : 0
              < caml_call2(cmp, x1$0, x3)
              ? [0, x2$0, [0, x1$0, [0, x3, 0]]]
              : 0
                < caml_call2(cmp, x2$0, x3)
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]];
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
        if(0 < caml_call2(cmp, h1, h2)){
         var accu$0 = [0, h2, accu];
         l2 = t2;
         accu = accu$0;
         continue;
        }
        var accu$1 = [0, h1, accu];
        l1 = t1;
        accu = accu$1;
        continue;
       }
       var _t_ = rev_append(l1, accu);
      }
      else
       var _t_ = rev_append(l2, accu);
      return [0, _t_, tl$0];
     }
    }
    var len = length(l);
    return 2 <= len ? sort(len, l)[1] : l;
   }
   function sort_uniq(cmp, l){
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 = caml_call2(cmp, x1, x2),
         s =
           0 === c$0
            ? [0, x1, 0]
            : 0 <= c$0 ? [0, x2, [0, x1, 0]] : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _n_ = l[2];
      if(_n_){
       var match$2 = _n_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _n_[1],
         x1$0 = l[1],
         c$1 = caml_call2(cmp, x1$0, x2$0);
        if(0 === c$1)
         var
          c$2 = caml_call2(cmp, x2$0, x3),
          _o_ =
            0 === c$2
             ? [0, x2$0, 0]
             : 0 <= c$2 ? [0, x3, [0, x2$0, 0]] : [0, x2$0, [0, x3, 0]],
          s$0 = _o_;
        else if(0 <= c$1){
         var c$3 = caml_call2(cmp, x1$0, x3);
         if(0 === c$3)
          var _p_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 <= c$3)
          var
           c$4 = caml_call2(cmp, x2$0, x3),
           _q_ =
             0 === c$4
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                <= c$4
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]],
           _p_ = _q_;
         else
          var _p_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         var s$0 = _p_;
        }
        else{
         var c$5 = caml_call2(cmp, x2$0, x3);
         if(0 === c$5)
          var _r_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 <= c$5)
          var
           c$6 = caml_call2(cmp, x1$0, x3),
           _s_ =
             0 === c$6
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                <= c$6
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]],
           _r_ = _s_;
         else
          var _r_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         var s$0 = _r_;
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = rev_sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c = caml_call2(cmp, h1, h2);
        if(0 === c){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         l2 = t2;
         accu = accu$0;
         continue;
        }
        if(0 < c){
         var accu$1 = [0, h1, accu];
         l1 = t1;
         accu = accu$1;
         continue;
        }
        var accu$2 = [0, h2, accu];
        l2 = t2;
        accu = accu$2;
        continue;
       }
       var _m_ = rev_append(l1, accu);
      }
      else
       var _m_ = rev_append(l2, accu);
      return [0, _m_, tl$0];
     }
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 = caml_call2(cmp, x1, x2),
         s =
           0 === c$0
            ? [0, x1, 0]
            : 0 < c$0 ? [0, x1, [0, x2, 0]] : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _g_ = l[2];
      if(_g_){
       var match$2 = _g_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _g_[1],
         x1$0 = l[1],
         c$1 = caml_call2(cmp, x1$0, x2$0);
        if(0 === c$1)
         var
          c$2 = caml_call2(cmp, x2$0, x3),
          _h_ =
            0 === c$2
             ? [0, x2$0, 0]
             : 0 < c$2 ? [0, x2$0, [0, x3, 0]] : [0, x3, [0, x2$0, 0]],
          s$0 = _h_;
        else if(0 < c$1){
         var c$3 = caml_call2(cmp, x2$0, x3);
         if(0 === c$3)
          var _i_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 < c$3)
          var _i_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         else
          var
           c$4 = caml_call2(cmp, x1$0, x3),
           _j_ =
             0 === c$4
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                < c$4
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]],
           _i_ = _j_;
         var s$0 = _i_;
        }
        else{
         var c$5 = caml_call2(cmp, x1$0, x3);
         if(0 === c$5)
          var _k_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 < c$5)
          var _k_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         else
          var
           c$6 = caml_call2(cmp, x2$0, x3),
           _l_ =
             0 === c$6
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                < c$6
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]],
           _k_ = _l_;
         var s$0 = _k_;
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c = caml_call2(cmp, h1, h2);
        if(0 === c){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         l2 = t2;
         accu = accu$0;
         continue;
        }
        if(0 <= c){
         var accu$1 = [0, h2, accu];
         l2 = t2;
         accu = accu$1;
         continue;
        }
        var accu$2 = [0, h1, accu];
        l1 = t1;
        accu = accu$2;
        continue;
       }
       var _f_ = rev_append(l1, accu);
      }
      else
       var _f_ = rev_append(l2, accu);
      return [0, _f_, tl$0];
     }
    }
    var len = length(l);
    return 2 <= len ? sort(len, l)[1] : l;
   }
   function compare_lengths(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0 ? -1 : 0;
     if(! l2$0) return 1;
     var l2$1 = l2$0[2], l1$1 = l1$0[2];
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
   }
   function compare_length_with(l, n){
    var l$0 = l, n$0 = n;
    for(;;){
     if(! l$0) return 0 === n$0 ? 0 : 0 < n$0 ? -1 : 1;
     var l$1 = l$0[2];
     if(0 >= n$0) return 1;
     var n$1 = n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
   }
   function equal(eq, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _e_ = caml_call2(eq, a1, a2);
       if(! _e_) return _e_;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return 1;
     return 0;
    }
   }
   function compare(cmp, l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0 ? -1 : 0;
     var l1$1 = l1$0[2], a1 = l1$0[1];
     if(! l2$0) return 1;
     var l2$1 = l2$0[2], a2 = l2$0[1], c = caml_call2(cmp, a1, a2);
     if(0 !== c) return c;
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
   }
   function to_seq(l){
    function aux(l, param){
     if(! l) return 0;
     var tail = l[2], x = l[1];
     return [0, x, function(_d_){return aux(tail, _d_);}];
    }
    return function(_c_){return aux(l, _c_);};
   }
   function of_seq(seq){
    function direct(depth, seq){
     if(0 === depth)
      return rev
              (caml_call3
                (Stdlib_seq[9], function(acc, x){return [0, x, acc];}, 0, seq));
     var match = caml_call1(seq, 0);
     if(! match) return 0;
     var next = match[2], x = match[1];
     return [0, x, direct(depth - 1 | 0, next)];
    }
    return direct(500, seq);
   }
   var
    Stdlib_list =
      [0,
       length,
       compare_lengths,
       compare_length_with,
       cons,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       equal,
       compare,
       iter,
       iteri,
       map,
       mapi,
       rev_map,
       filter_map,
       concat_map,
       fold_left_map,
       fold_left,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_map,
       find_all,
       find_all,
       filteri,
       partition,
       partition_map,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       stable_sort,
       stable_sort,
       stable_sort,
       sort_uniq,
       merge,
       to_seq,
       of_seq];
   runtime.caml_register_global(18, Stdlib_list, "Stdlib__list");
   return;
  }
  (globalThis));

//# 2803 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_blit_bytes = runtime.caml_blit_bytes,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_get16 = runtime.caml_bytes_get16,
    caml_bytes_get32 = runtime.caml_bytes_get32,
    caml_bytes_get64 = runtime.caml_bytes_get64,
    caml_bytes_of_string = runtime.caml_bytes_of_string,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_bytes_set16 = runtime.caml_bytes_set16,
    caml_bytes_set32 = runtime.caml_bytes_set32,
    caml_bytes_set64 = runtime.caml_bytes_set64,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fill_bytes = runtime.caml_fill_bytes,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_sys = global_data.Stdlib__sys,
    Stdlib_seq = global_data.Stdlib__seq,
    Stdlib_char = global_data.Stdlib__char;
   function make(n, c){
    var s = caml_create_bytes(n);
    caml_fill_bytes(s, 0, n, c);
    return s;
   }
   function init(n, f){
    var s = caml_create_bytes(n), _U_ = n - 1 | 0, _T_ = 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
      caml_bytes_unsafe_set(s, i, caml_call1(f, i));
      var _V_ = i + 1 | 0;
      if(_U_ === i) break;
      i = _V_;
     }
    }
    return s;
   }
   var
    empty = caml_create_bytes(0),
    cst_String_sub_Bytes_sub = "String.sub / Bytes.sub",
    cst_Bytes_extend = "Bytes.extend",
    cst_String_fill_Bytes_fill = "String.fill / Bytes.fill",
    cst_Bytes_blit = "Bytes.blit",
    cst_String_blit_Bytes_blit_str = "String.blit / Bytes.blit_string",
    cst_Bytes_concat = "Bytes.concat",
    cst_String_index_from_Bytes_in = "String.index_from / Bytes.index_from",
    cst_String_index_from_opt_Byte =
      "String.index_from_opt / Bytes.index_from_opt",
    cst_String_rindex_from_Bytes_r = "String.rindex_from / Bytes.rindex_from",
    cst_String_rindex_from_opt_Byt =
      "String.rindex_from_opt / Bytes.rindex_from_opt",
    cst_String_contains_from_Bytes =
      "String.contains_from / Bytes.contains_from",
    cst_String_rcontains_from_Byte =
      "String.rcontains_from / Bytes.rcontains_from";
   function copy(s){
    var len = caml_ml_bytes_length(s), r = caml_create_bytes(len);
    caml_blit_bytes(s, 0, r, 0, len);
    return r;
   }
   function to_string(b){return caml_string_of_bytes(copy(b));}
   function of_string(s){return copy(caml_bytes_of_string(s));}
   function sub(s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
     var r = caml_create_bytes(len);
     caml_blit_bytes(s, ofs, r, 0, len);
     return r;
    }
    return caml_call1(Stdlib[1], cst_String_sub_Bytes_sub);
   }
   function sub_string(b, ofs, len){
    return caml_string_of_bytes(sub(b, ofs, len));
   }
   function symbol(a, b){
    var c = a + b | 0, _S_ = b < 0 ? 1 : 0, match = c < 0 ? 1 : 0;
    a:
    {
     if(a < 0){if(_S_ && ! match) break a;} else if(! _S_ && match) break a;
     return c;
    }
    return caml_call1(Stdlib[1], cst_Bytes_extend);
   }
   function extend(s, left, right){
    var
     len = symbol(symbol(caml_ml_bytes_length(s), left), right),
     r = caml_create_bytes(len);
    if(0 <= left)
     var dstoff = left, srcoff = 0;
    else
     var dstoff = 0, srcoff = - left | 0;
    var
     cpylen =
       caml_call2
        (Stdlib[16], caml_ml_bytes_length(s) - srcoff | 0, len - dstoff | 0);
    if(0 < cpylen) caml_blit_bytes(s, srcoff, r, dstoff, cpylen);
    return r;
   }
   function fill(s, ofs, len, c){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_fill_bytes(s, ofs, len, c);
    return caml_call1(Stdlib[1], cst_String_fill_Bytes_fill);
   }
   function blit(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_bytes_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return caml_blit_bytes(s1, ofs1, s2, ofs2, len);
    return caml_call1(Stdlib[1], cst_Bytes_blit);
   }
   function blit_string(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (runtime.caml_ml_string_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return runtime.caml_blit_string(s1, ofs1, s2, ofs2, len);
    return caml_call1(Stdlib[1], cst_String_blit_Bytes_blit_str);
   }
   function iter(f, a){
    var _Q_ = caml_ml_bytes_length(a) - 1 | 0, _P_ = 0;
    if(_Q_ >= 0){
     var i = _P_;
     for(;;){
      caml_call1(f, caml_bytes_unsafe_get(a, i));
      var _R_ = i + 1 | 0;
      if(_Q_ === i) break;
      i = _R_;
     }
    }
    return 0;
   }
   function iteri(f, a){
    var _N_ = caml_ml_bytes_length(a) - 1 | 0, _M_ = 0;
    if(_N_ >= 0){
     var i = _M_;
     for(;;){
      caml_call2(f, i, caml_bytes_unsafe_get(a, i));
      var _O_ = i + 1 | 0;
      if(_N_ === i) break;
      i = _O_;
     }
    }
    return 0;
   }
   function concat(sep, l){
    if(! l) return empty;
    var seplen = caml_ml_bytes_length(sep);
    a:
    {
     b:
     {
      var acc = 0, param = l, pos$1 = 0;
      for(;;){
       if(! param) break;
       var hd = param[1];
       if(! param[2]) break b;
       var
        tl = param[2],
        x = (caml_ml_bytes_length(hd) + seplen | 0) + acc | 0,
        acc$0 = acc <= x ? x : caml_call1(Stdlib[1], cst_Bytes_concat);
       acc = acc$0;
       param = tl;
      }
      var _L_ = acc;
      break a;
     }
     var _L_ = caml_ml_bytes_length(hd) + acc | 0;
    }
    var dst = caml_create_bytes(_L_), pos = pos$1, param$0 = l;
    for(;;){
     if(! param$0) return dst;
     var hd$0 = param$0[1];
     if(! param$0[2]){
      caml_blit_bytes(hd$0, 0, dst, pos, caml_ml_bytes_length(hd$0));
      return dst;
     }
     var tl$0 = param$0[2];
     caml_blit_bytes(hd$0, 0, dst, pos, caml_ml_bytes_length(hd$0));
     caml_blit_bytes
      (sep, 0, dst, pos + caml_ml_bytes_length(hd$0) | 0, seplen);
     var pos$0 = (pos + caml_ml_bytes_length(hd$0) | 0) + seplen | 0;
     pos = pos$0;
     param$0 = tl$0;
    }
   }
   function cat(s1, s2){
    var
     l1 = caml_ml_bytes_length(s1),
     l2 = caml_ml_bytes_length(s2),
     r = caml_create_bytes(l1 + l2 | 0);
    caml_blit_bytes(s1, 0, r, 0, l1);
    caml_blit_bytes(s2, 0, r, l1, l2);
    return r;
   }
   function is_space(param){
    var _K_ = param - 9 | 0;
    a:
    {
     if(4 < _K_ >>> 0){if(23 !== _K_) break a;} else if(2 === _K_) break a;
     return 1;
    }
    return 0;
   }
   function trim(s){
    var len = caml_ml_bytes_length(s), i = [0, 0];
    for(;;){
     if(i[1] >= len) break;
     if(! is_space(caml_bytes_unsafe_get(s, i[1]))) break;
     i[1]++;
    }
    var j = [0, len - 1 | 0];
    for(;;){
     if(i[1] <= j[1] && is_space(caml_bytes_unsafe_get(s, j[1]))){j[1]--; continue;}
     return i[1] <= j[1] ? sub(s, i[1], (j[1] - i[1] | 0) + 1 | 0) : empty;
    }
   }
   function escaped(s){
    var n = [0, 0], _D_ = caml_ml_bytes_length(s) - 1 | 0, _C_ = 0;
    if(_D_ >= 0){
     var i$0 = _C_;
     for(;;){
      var match = caml_bytes_unsafe_get(s, i$0);
      a:
      {
       b:
       {
        c:
        {
         if(32 <= match){
          var _H_ = match - 34 | 0;
          if(58 < _H_ >>> 0){
           if(93 <= _H_) break c;
          }
          else if(56 < _H_ - 1 >>> 0) break b;
          var _I_ = 1;
          break a;
         }
         if(11 <= match){
          if(13 === match) break b;
         }
         else if(8 <= match) break b;
        }
        var _I_ = 4;
        break a;
       }
       var _I_ = 2;
      }
      n[1] = n[1] + _I_ | 0;
      var _J_ = i$0 + 1 | 0;
      if(_D_ === i$0) break;
      i$0 = _J_;
     }
    }
    if(n[1] === caml_ml_bytes_length(s)) return copy(s);
    var s$0 = caml_create_bytes(n[1]);
    n[1] = 0;
    var _F_ = caml_ml_bytes_length(s) - 1 | 0, _E_ = 0;
    if(_F_ >= 0){
     var i = _E_;
     for(;;){
      var c = caml_bytes_unsafe_get(s, i);
      a:
      {
       b:
       {
        c:
        {
         if(35 <= c){
          if(92 !== c){if(127 <= c) break c; break b;}
         }
         else{
          if(32 > c){
           if(14 <= c) break c;
           switch(c){
             case 8:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 98);
              break a;
             case 9:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 116);
              break a;
             case 10:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 110);
              break a;
             case 13:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 114);
              break a;
             default: break c;
           }
          }
          if(34 > c) break b;
         }
         caml_bytes_unsafe_set(s$0, n[1], 92);
         n[1]++;
         caml_bytes_unsafe_set(s$0, n[1], c);
         break a;
        }
        caml_bytes_unsafe_set(s$0, n[1], 92);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c / 100 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c % 10 | 0) | 0);
        break a;
       }
       caml_bytes_unsafe_set(s$0, n[1], c);
      }
      n[1]++;
      var _G_ = i + 1 | 0;
      if(_F_ === i) break;
      i = _G_;
     }
    }
    return s$0;
   }
   function map(f, s){
    var l = caml_ml_bytes_length(s);
    if(0 === l) return s;
    var r = caml_create_bytes(l), _A_ = l - 1 | 0, _z_ = 0;
    if(_A_ >= 0){
     var i = _z_;
     for(;;){
      caml_bytes_unsafe_set(r, i, caml_call1(f, caml_bytes_unsafe_get(s, i)));
      var _B_ = i + 1 | 0;
      if(_A_ === i) break;
      i = _B_;
     }
    }
    return r;
   }
   function mapi(f, s){
    var l = caml_ml_bytes_length(s);
    if(0 === l) return s;
    var r = caml_create_bytes(l), _x_ = l - 1 | 0, _w_ = 0;
    if(_x_ >= 0){
     var i = _w_;
     for(;;){
      caml_bytes_unsafe_set
       (r, i, caml_call2(f, i, caml_bytes_unsafe_get(s, i)));
      var _y_ = i + 1 | 0;
      if(_x_ === i) break;
      i = _y_;
     }
    }
    return r;
   }
   function uppercase_ascii(s){return map(Stdlib_char[6], s);}
   function lowercase_ascii(s){return map(Stdlib_char[5], s);}
   function apply1(f, s){
    if(0 === caml_ml_bytes_length(s)) return s;
    var r = copy(s);
    caml_bytes_unsafe_set(r, 0, caml_call1(f, caml_bytes_unsafe_get(s, 0)));
    return r;
   }
   function capitalize_ascii(s){return apply1(Stdlib_char[6], s);}
   function uncapitalize_ascii(s){return apply1(Stdlib_char[5], s);}
   function index_rec(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_bytes_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index(s, c){return index_rec(s, caml_ml_bytes_length(s), 0, c);}
   function index_rec_opt(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) return 0;
     if(caml_bytes_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index_opt(s, c){
    return index_rec_opt(s, caml_ml_bytes_length(s), 0, c);
   }
   function index_from(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i) return index_rec(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_Bytes_in);
   }
   function index_from_opt(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i) return index_rec_opt(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_opt_Byte);
   }
   function rindex_rec(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_bytes_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex(s, c){
    return rindex_rec(s, caml_ml_bytes_length(s) - 1 | 0, c);
   }
   function rindex_from(s, i, c){
    if(-1 <= i && caml_ml_bytes_length(s) > i) return rindex_rec(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_Bytes_r);
   }
   function rindex_rec_opt(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) return 0;
     if(caml_bytes_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex_opt(s, c){
    return rindex_rec_opt(s, caml_ml_bytes_length(s) - 1 | 0, c);
   }
   function rindex_from_opt(s, i, c){
    if(-1 <= i && caml_ml_bytes_length(s) > i) return rindex_rec_opt(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_opt_Byt);
   }
   function contains_from(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i)
     try{index_rec(s, l, i, c); var _u_ = 1; return _u_;}
     catch(_v_){
      var _t_ = caml_wrap_exception(_v_);
      if(_t_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_t_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_contains_from_Bytes);
   }
   function contains(s, c){return contains_from(s, 0, c);}
   function rcontains_from(s, i, c){
    if(0 <= i && caml_ml_bytes_length(s) > i)
     try{rindex_rec(s, i, c); var _r_ = 1; return _r_;}
     catch(_s_){
      var _q_ = caml_wrap_exception(_s_);
      if(_q_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_q_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_rcontains_from_Byte);
   }
   var
    compare = runtime.caml_bytes_compare,
    cst_Bytes_of_seq_cannot_grow_b = "Bytes.of_seq: cannot grow bytes";
   function uppercase(s){return map(Stdlib_char[4], s);}
   function lowercase(s){return map(Stdlib_char[3], s);}
   function capitalize(s){return apply1(Stdlib_char[4], s);}
   function uncapitalize(s){return apply1(Stdlib_char[3], s);}
   function to_seq(s){
    function aux(i, param){
     if(i === caml_ml_bytes_length(s)) return 0;
     var x = caml_bytes_get(s, i), _o_ = i + 1 | 0;
     return [0, x, function(_p_){return aux(_o_, _p_);}];
    }
    var _m_ = 0;
    return function(_n_){return aux(_m_, _n_);};
   }
   function to_seqi(s){
    function aux(i, param){
     if(i === caml_ml_bytes_length(s)) return 0;
     var x = caml_bytes_get(s, i), _k_ = i + 1 | 0;
     return [0, [0, i, x], function(_l_){return aux(_k_, _l_);}];
    }
    var _i_ = 0;
    return function(_j_){return aux(_i_, _j_);};
   }
   function of_seq(i){
    var n = [0, 0], buf = [0, make(256, 0)];
    caml_call2
     (Stdlib_seq[10],
      function(c){
       if(n[1] === caml_ml_bytes_length(buf[1])){
        var
         new_len =
           caml_call2
            (Stdlib[16], 2 * caml_ml_bytes_length(buf[1]) | 0, Stdlib_sys[12]);
        if(caml_ml_bytes_length(buf[1]) === new_len)
         caml_call1(Stdlib[2], cst_Bytes_of_seq_cannot_grow_b);
        var new_buf = make(new_len, 0);
        blit(buf[1], 0, new_buf, 0, n[1]);
        buf[1] = new_buf;
       }
       caml_bytes_set(buf[1], n[1], c);
       n[1]++;
       return 0;
      },
      i);
    return sub(buf[1], 0, n[1]);
   }
   function get_int8(b, i){
    var _g_ = Stdlib_sys[10] - 8 | 0, _h_ = Stdlib_sys[10] - 8 | 0;
    return caml_bytes_get(b, i) << _h_ >> _g_;
   }
   function get_uint16_le(b, i){
    return Stdlib_sys[11]
            ? caml_bswap16(caml_bytes_get16(b, i))
            : caml_bytes_get16(b, i);
   }
   function get_uint16_be(b, i){
    return Stdlib_sys[11]
            ? caml_bytes_get16(b, i)
            : caml_bswap16(caml_bytes_get16(b, i));
   }
   function get_int16_ne(b, i){
    var _e_ = Stdlib_sys[10] - 16 | 0, _f_ = Stdlib_sys[10] - 16 | 0;
    return caml_bytes_get16(b, i) << _f_ >> _e_;
   }
   function get_int16_le(b, i){
    var _c_ = Stdlib_sys[10] - 16 | 0, _d_ = Stdlib_sys[10] - 16 | 0;
    return get_uint16_le(b, i) << _d_ >> _c_;
   }
   function get_int16_be(b, i){
    var _a_ = Stdlib_sys[10] - 16 | 0, _b_ = Stdlib_sys[10] - 16 | 0;
    return get_uint16_be(b, i) << _b_ >> _a_;
   }
   function get_int32_le(b, i){
    return Stdlib_sys[11]
            ? caml_int32_bswap(caml_bytes_get32(b, i))
            : caml_bytes_get32(b, i);
   }
   function get_int32_be(b, i){
    return Stdlib_sys[11]
            ? caml_bytes_get32(b, i)
            : caml_int32_bswap(caml_bytes_get32(b, i));
   }
   function get_int64_le(b, i){
    return Stdlib_sys[11]
            ? caml_int64_bswap(caml_bytes_get64(b, i))
            : caml_bytes_get64(b, i);
   }
   function get_int64_be(b, i){
    return Stdlib_sys[11]
            ? caml_bytes_get64(b, i)
            : caml_int64_bswap(caml_bytes_get64(b, i));
   }
   function set_int16_le(b, i, x){
    return Stdlib_sys[11]
            ? caml_bytes_set16(b, i, caml_bswap16(x))
            : caml_bytes_set16(b, i, x);
   }
   function set_int16_be(b, i, x){
    return Stdlib_sys[11]
            ? caml_bytes_set16(b, i, x)
            : caml_bytes_set16(b, i, caml_bswap16(x));
   }
   function set_int32_le(b, i, x){
    return Stdlib_sys[11]
            ? caml_bytes_set32(b, i, caml_int32_bswap(x))
            : caml_bytes_set32(b, i, x);
   }
   function set_int32_be(b, i, x){
    return Stdlib_sys[11]
            ? caml_bytes_set32(b, i, x)
            : caml_bytes_set32(b, i, caml_int32_bswap(x));
   }
   function set_int64_le(b, i, x){
    return Stdlib_sys[11]
            ? caml_bytes_set64(b, i, caml_int64_bswap(x))
            : caml_bytes_set64(b, i, x);
   }
   function set_int64_be(b, i, x){
    return Stdlib_sys[11]
            ? caml_bytes_set64(b, i, x)
            : caml_bytes_set64(b, i, caml_int64_bswap(x));
   }
   var
    set_uint8 = caml_bytes_set,
    set_uint16_ne = caml_bytes_set16,
    Stdlib_bytes =
      [0,
       make,
       init,
       empty,
       copy,
       of_string,
       to_string,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit_string,
       concat,
       cat,
       iter,
       iteri,
       map,
       mapi,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare,
       runtime.caml_bytes_equal,
       caml_string_of_bytes,
       caml_bytes_of_string,
       to_seq,
       to_seqi,
       of_seq,
       caml_bytes_get,
       get_int8,
       caml_bytes_get16,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       caml_bytes_get32,
       get_int32_be,
       get_int32_le,
       caml_bytes_get64,
       get_int64_be,
       get_int64_le,
       set_uint8,
       caml_bytes_set,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       caml_bytes_set16,
       set_int16_be,
       set_int16_le,
       caml_bytes_set32,
       set_int32_be,
       set_int32_le,
       caml_bytes_set64,
       set_int64_be,
       set_int64_le];
   runtime.caml_register_global(17, Stdlib_bytes, "Stdlib__bytes");
   return;
  }
  (globalThis));

//# 3492 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    caml_blit_string = runtime.caml_blit_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    Stdlib = global_data.Stdlib,
    Stdlib_bytes = global_data.Stdlib__bytes,
    bts = Stdlib_bytes[42],
    bos = Stdlib_bytes[43];
   function make(n, c){
    return caml_call1(bts, caml_call2(Stdlib_bytes[1], n, c));
   }
   function init(n, f){
    return caml_call1(bts, caml_call2(Stdlib_bytes[2], n, f));
   }
   function copy(s){
    var _I_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_bytes[4], _I_));
   }
   function sub(s, ofs, len){
    var _H_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call3(Stdlib_bytes[7], _H_, ofs, len));
   }
   var
    fill = Stdlib_bytes[10],
    blit = Stdlib_bytes[12],
    cst_String_concat = "String.concat",
    cst_String_index_from_Bytes_in = "String.index_from / Bytes.index_from",
    cst_String_index_from_opt_Byte =
      "String.index_from_opt / Bytes.index_from_opt",
    cst_String_rindex_from_Bytes_r = "String.rindex_from / Bytes.rindex_from",
    cst_String_rindex_from_opt_Byt =
      "String.rindex_from_opt / Bytes.rindex_from_opt",
    cst_String_contains_from_Bytes =
      "String.contains_from / Bytes.contains_from",
    cst_String_rcontains_from_Byte =
      "String.rcontains_from / Bytes.rcontains_from";
   function concat(sep, l){
    if(! l) return cst;
    var seplen = caml_ml_string_length(sep);
    a:
    {
     b:
     {
      var acc = 0, param = l, pos$1 = 0;
      for(;;){
       if(! param) break;
       var hd = param[1];
       if(! param[2]) break b;
       var
        tl = param[2],
        x = (caml_ml_string_length(hd) + seplen | 0) + acc | 0,
        acc$0 = acc <= x ? x : caml_call1(Stdlib[1], cst_String_concat);
       acc = acc$0;
       param = tl;
      }
      var _G_ = acc;
      break a;
     }
     var _G_ = caml_ml_string_length(hd) + acc | 0;
    }
    var dst = runtime.caml_create_bytes(_G_), pos = pos$1, param$0 = l;
    for(;;){
     if(param$0){
      var hd$0 = param$0[1];
      if(param$0[2]){
       var tl$0 = param$0[2];
       caml_blit_string(hd$0, 0, dst, pos, caml_ml_string_length(hd$0));
       caml_blit_string
        (sep, 0, dst, pos + caml_ml_string_length(hd$0) | 0, seplen);
       var pos$0 = (pos + caml_ml_string_length(hd$0) | 0) + seplen | 0;
       pos = pos$0;
       param$0 = tl$0;
       continue;
      }
      caml_blit_string(hd$0, 0, dst, pos, caml_ml_string_length(hd$0));
     }
     return caml_call1(bts, dst);
    }
   }
   function iter(f, s){
    var _E_ = caml_ml_string_length(s) - 1 | 0, _D_ = 0;
    if(_E_ >= 0){
     var i = _D_;
     for(;;){
      caml_call1(f, caml_string_unsafe_get(s, i));
      var _F_ = i + 1 | 0;
      if(_E_ === i) break;
      i = _F_;
     }
    }
    return 0;
   }
   function iteri(f, s){
    var _B_ = caml_ml_string_length(s) - 1 | 0, _A_ = 0;
    if(_B_ >= 0){
     var i = _A_;
     for(;;){
      caml_call2(f, i, caml_string_unsafe_get(s, i));
      var _C_ = i + 1 | 0;
      if(_B_ === i) break;
      i = _C_;
     }
    }
    return 0;
   }
   function map(f, s){
    var _z_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call2(Stdlib_bytes[17], f, _z_));
   }
   function mapi(f, s){
    var _y_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call2(Stdlib_bytes[18], f, _y_));
   }
   function is_space(param){
    var _x_ = param - 9 | 0;
    a:
    {
     if(4 < _x_ >>> 0){if(23 !== _x_) break a;} else if(2 === _x_) break a;
     return 1;
    }
    return 0;
   }
   function trim(s){
    if(s === cst$0) return s;
    if
     (!
      is_space(caml_string_unsafe_get(s, 0))
      &&
       !
       is_space(caml_string_unsafe_get(s, caml_ml_string_length(s) - 1 | 0)))
     return s;
    var _w_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_bytes[19], _w_));
   }
   function escaped(s){
    var n = caml_ml_string_length(s), i = 0;
    for(;;){
     if(n <= i) return s;
     var _u_ = caml_string_unsafe_get(s, i) - 32 | 0;
     a:
     {
      if(59 < _u_ >>> 0){
       if(33 < _u_ - 61 >>> 0) break a;
      }
      else if(2 === _u_) break a;
      var i$0 = i + 1 | 0;
      i = i$0;
      continue;
     }
     var _v_ = caml_call1(bos, s);
     return caml_call1(bts, caml_call1(Stdlib_bytes[20], _v_));
    }
   }
   function index_rec(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_string_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index(s, c){return index_rec(s, caml_ml_string_length(s), 0, c);}
   function index_rec_opt(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) return 0;
     if(caml_string_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index_opt(s, c){
    return index_rec_opt(s, caml_ml_string_length(s), 0, c);
   }
   function index_from(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i) return index_rec(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_Bytes_in);
   }
   function index_from_opt(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i) return index_rec_opt(s, l, i, c);
    return caml_call1(Stdlib[1], cst_String_index_from_opt_Byte);
   }
   function rindex_rec(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_string_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex(s, c){
    return rindex_rec(s, caml_ml_string_length(s) - 1 | 0, c);
   }
   function rindex_from(s, i, c){
    if(-1 <= i && caml_ml_string_length(s) > i) return rindex_rec(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_Bytes_r);
   }
   function rindex_rec_opt(s, i, c){
    var i$0 = i;
    for(;;){
     if(0 > i$0) return 0;
     if(caml_string_unsafe_get(s, i$0) === c) return [0, i$0];
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
   }
   function rindex_opt(s, c){
    return rindex_rec_opt(s, caml_ml_string_length(s) - 1 | 0, c);
   }
   function rindex_from_opt(s, i, c){
    if(-1 <= i && caml_ml_string_length(s) > i)
     return rindex_rec_opt(s, i, c);
    return caml_call1(Stdlib[1], cst_String_rindex_from_opt_Byt);
   }
   function contains_from(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i)
     try{index_rec(s, l, i, c); var _s_ = 1; return _s_;}
     catch(_t_){
      var _r_ = caml_wrap_exception(_t_);
      if(_r_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_r_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_contains_from_Bytes);
   }
   function contains(s, c){return contains_from(s, 0, c);}
   function rcontains_from(s, i, c){
    if(0 <= i && caml_ml_string_length(s) > i)
     try{rindex_rec(s, i, c); var _p_ = 1; return _p_;}
     catch(_q_){
      var _o_ = caml_wrap_exception(_q_);
      if(_o_ === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(_o_, 0);
     }
    return caml_call1(Stdlib[1], cst_String_rcontains_from_Byte);
   }
   function uppercase_ascii(s){
    var _n_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_bytes[36], _n_));
   }
   function lowercase_ascii(s){
    var _m_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_bytes[37], _m_));
   }
   function capitalize_ascii(s){
    var _l_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_bytes[38], _l_));
   }
   function uncapitalize_ascii(s){
    var _k_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_bytes[39], _k_));
   }
   function split_on_char(sep, s){
    var
     r = [0, 0],
     j = [0, caml_ml_string_length(s)],
     _g_ = caml_ml_string_length(s) - 1 | 0;
    if(_g_ >= 0){
     var i = _g_;
     for(;;){
      if(caml_string_unsafe_get(s, i) === sep){
       var _i_ = r[1];
       r[1] = [0, sub(s, i + 1 | 0, (j[1] - i | 0) - 1 | 0), _i_];
       j[1] = i;
      }
      var _j_ = i - 1 | 0;
      if(0 === i) break;
      i = _j_;
     }
    }
    var _h_ = r[1];
    return [0, sub(s, 0, j[1]), _h_];
   }
   function uppercase(s){
    var _f_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_bytes[32], _f_));
   }
   function lowercase(s){
    var _e_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_bytes[33], _e_));
   }
   function capitalize(s){
    var _d_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_bytes[34], _d_));
   }
   function uncapitalize(s){
    var _c_ = caml_call1(bos, s);
    return caml_call1(bts, caml_call1(Stdlib_bytes[35], _c_));
   }
   var compare = runtime.caml_string_compare;
   function to_seq(s){
    var _b_ = caml_call1(bos, s);
    return caml_call1(Stdlib_bytes[44], _b_);
   }
   function to_seqi(s){
    var _a_ = caml_call1(bos, s);
    return caml_call1(Stdlib_bytes[45], _a_);
   }
   function of_seq(g){
    return caml_call1(bts, caml_call1(Stdlib_bytes[46], g));
   }
   var
    Stdlib_string =
      [0,
       make,
       init,
       concat,
       caml_string_equal,
       compare,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       blit,
       copy,
       fill,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize];
   runtime.caml_register_global(11, Stdlib_string, "Stdlib__string");
   return;
  }
  (globalThis));

//# 3884 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Marshal_from_bytes$1 = "Marshal.from_bytes",
    caml_marshal_data_size = runtime.caml_marshal_data_size,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_bytes = global_data.Stdlib__bytes,
    Stdlib = global_data.Stdlib,
    cst_Marshal_to_buffer_substrin =
      "Marshal.to_buffer: substring out of bounds";
   function to_buffer(buff, ofs, len, v, flags){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(buff) - len | 0) >= ofs)
     return runtime.caml_output_value_to_buffer(buff, ofs, len, v, flags);
    return caml_call1(Stdlib[1], cst_Marshal_to_buffer_substrin);
   }
   var
    cst_Marshal_data_size = "Marshal.data_size",
    cst_Marshal_from_bytes = cst_Marshal_from_bytes$1,
    cst_Marshal_from_bytes$0 = cst_Marshal_from_bytes$1;
   function data_size(buff, ofs){
    if(0 <= ofs && (caml_ml_bytes_length(buff) - 20 | 0) >= ofs)
     return caml_marshal_data_size(buff, ofs);
    return caml_call1(Stdlib[1], cst_Marshal_data_size);
   }
   function total_size(buff, ofs){return 20 + data_size(buff, ofs) | 0;}
   function from_bytes(buff, ofs){
    if(0 <= ofs && (caml_ml_bytes_length(buff) - 20 | 0) >= ofs){
     var len = caml_marshal_data_size(buff, ofs);
     return (caml_ml_bytes_length(buff) - (20 + len | 0) | 0) < ofs
             ? caml_call1(Stdlib[1], cst_Marshal_from_bytes$0)
             : runtime.caml_input_value_from_bytes(buff, ofs);
    }
    return caml_call1(Stdlib[1], cst_Marshal_from_bytes);
   }
   function from_string(buff, ofs){
    return from_bytes(caml_call1(Stdlib_bytes[43], buff), ofs);
   }
   var
    Stdlib_marshal =
      [0,
       runtime.caml_output_value,
       to_buffer,
       runtime.caml_input_value,
       from_bytes,
       from_string,
       20,
       data_size,
       total_size];
   runtime.caml_register_global(6, Stdlib_marshal, "Stdlib__marshal");
   return;
  }
  (globalThis));

//# 3948 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Obj_extension_constructor$1 = "Obj.extension_constructor",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_sys = global_data.Stdlib__sys,
    Stdlib_marshal = global_data.Stdlib__marshal;
   function is_block(a){return 1 - (typeof a === "number" ? 1 : 0);}
   function double_field(x, i){return caml_check_bound(x, i)[1 + i];}
   function set_double_field(x, i, v){
    caml_check_bound(x, i)[1 + i] = v;
    return 0;
   }
   function marshal(obj){return runtime.caml_output_value_to_bytes(obj, 0);}
   function unmarshal(str, pos){
    var _i_ = pos + caml_call2(Stdlib_marshal[8], str, pos) | 0;
    return [0, caml_call2(Stdlib_marshal[4], str, pos), _i_];
   }
   var
    custom_tag = 255,
    _a_ = [0, "obj.ml", 100, 4],
    cst_Obj_extension_constructor = cst_Obj_extension_constructor$1,
    cst_Obj_extension_constructor$0 = cst_Obj_extension_constructor$1;
   function info(obj){
    if(caml_obj_tag(obj) !== 247)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    var
     info = runtime.caml_obj_raw_field(obj, 1),
     arity = 64 === Stdlib_sys[9] ? info >> 56 : info >> 24,
     start_env = info << 8 >>> 9 | 0;
    return [0, arity, start_env];
   }
   function of_val(x){
    a:
    {
     if(is_block(x) && caml_obj_tag(x) !== 248 && 1 <= x.length - 1){var slot = x[1]; break a;}
     var slot = x;
    }
    a:
    {
     if(is_block(slot) && caml_obj_tag(slot) === 248){var name = slot[1]; break a;}
     var name = caml_call1(Stdlib[1], cst_Obj_extension_constructor$0);
    }
    return caml_obj_tag(name) === 252
            ? slot
            : caml_call1(Stdlib[1], cst_Obj_extension_constructor);
   }
   function name(slot){return slot[1];}
   function id(slot){return slot[2];}
   var
    Extension_constructor = [0, of_val, name, id],
    extension_constructor = Extension_constructor[1],
    extension_name = Extension_constructor[2],
    extension_id = Extension_constructor[3],
    max_ephe_length = Stdlib_sys[13] - 2 | 0,
    cst_Obj_Ephemeron_create = "Obj.Ephemeron.create",
    cst_Obj_Ephemeron_get_key = "Obj.Ephemeron.get_key",
    cst_Obj_Ephemeron_get_key_copy = "Obj.Ephemeron.get_key_copy",
    cst_Obj_Ephemeron_set_key = "Obj.Ephemeron.set_key",
    cst_Obj_Ephemeron_unset_key = "Obj.Ephemeron.unset_key",
    cst_Obj_Ephemeron_check_key = "Obj.Ephemeron.check_key",
    cst_Obj_Ephemeron_blit_key = "Obj.Ephemeron.blit_key";
   function create(l){
    var _g_ = 0 <= l ? 1 : 0, _h_ = _g_ ? l <= max_ephe_length ? 1 : 0 : _g_;
    if(1 - _h_) caml_call1(Stdlib[1], cst_Obj_Ephemeron_create);
    return runtime.caml_ephe_create(l);
   }
   function length(x){return x.length - 3 | 0;}
   function raise_if_invalid_offset(e, o, msg){
    var
     _d_ = 0 <= o ? 1 : 0,
     _e_ = _d_ ? o < length(e) ? 1 : 0 : _d_,
     _f_ = 1 - _e_;
    return _f_ ? caml_call1(Stdlib[1], msg) : _f_;
   }
   function get_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_get_key);
    return runtime.caml_ephe_get_key(e, o);
   }
   function get_key_copy(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_get_key_copy);
    return runtime.caml_ephe_get_key_copy(e, o);
   }
   function set_key(e, o, x){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_set_key);
    return runtime.caml_ephe_set_key(e, o, x);
   }
   function unset_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_unset_key);
    return runtime.caml_ephe_unset_key(e, o);
   }
   function check_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_check_key);
    return runtime.caml_ephe_check_key(e, o);
   }
   function blit_key(e1, o1, e2, o2, l){
    if
     (0 <= l
      &&
       0 <= o1
       && (length(e1) - l | 0) >= o1 && 0 <= o2 && (length(e2) - l | 0) >= o2){
     var
      _b_ = 0 !== l ? 1 : 0,
      _c_ = _b_ ? runtime.caml_ephe_blit_key(e1, o1, e2, o2, l) : _b_;
     return _c_;
    }
    return caml_call1(Stdlib[1], cst_Obj_Ephemeron_blit_key);
   }
   var
    Stdlib_obj =
      [0,
       is_block,
       double_field,
       set_double_field,
       0,
       245,
       246,
       247,
       248,
       249,
       250,
       251,
       251,
       252,
       253,
       254,
       custom_tag,
       custom_tag,
       1000,
       1001,
       1002,
       [0, info],
       Extension_constructor,
       extension_constructor,
       extension_name,
       extension_id,
       marshal,
       unmarshal,
       [0,
        create,
        length,
        get_key,
        get_key_copy,
        set_key,
        unset_key,
        check_key,
        blit_key,
        runtime.caml_ephe_get_data,
        runtime.caml_ephe_get_data_copy,
        runtime.caml_ephe_set_data,
        runtime.caml_ephe_unset_data,
        runtime.caml_ephe_check_data,
        runtime.caml_ephe_blit_data,
        max_ephe_length]];
   runtime.caml_register_global(14, Stdlib_obj, "Stdlib__obj");
   return;
  }
  (globalThis));

//# 4127 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_array_sub = runtime.caml_array_sub,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_seq = global_data.Stdlib__seq,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    make_float = runtime.caml_make_float_vect,
    Floatarray = [0],
    cst_Array_init = "Array.init",
    cst_Array_sub = "Array.sub",
    cst_Array_fill = "Array.fill",
    cst_Array_blit = "Array.blit",
    cst_Array_iter2_arrays_must_ha =
      "Array.iter2: arrays must have the same length",
    cst_Array_map2_arrays_must_hav =
      "Array.map2: arrays must have the same length",
    cst_Array_for_all2 = "Array.for_all2",
    cst_Array_exists2 = "Array.exists2";
   function init(l, f){
    if(0 === l) return [0];
    if(0 > l) return caml_call1(Stdlib[1], cst_Array_init);
    var res = caml_make_vect(l, caml_call1(f, 0)), _ah_ = l - 1 | 0, _ag_ = 1;
    if(_ah_ >= 1){
     var i = _ag_;
     for(;;){
      res[1 + i] = caml_call1(f, i);
      var _ai_ = i + 1 | 0;
      if(_ah_ === i) break;
      i = _ai_;
     }
    }
    return res;
   }
   function make_matrix(sx, sy, init){
    var res = caml_make_vect(sx, [0]), _ae_ = sx - 1 | 0, _ad_ = 0;
    if(_ae_ >= 0){
     var x = _ad_;
     for(;;){
      res[1 + x] = caml_make_vect(sy, init);
      var _af_ = x + 1 | 0;
      if(_ae_ === x) break;
      x = _af_;
     }
    }
    return res;
   }
   function copy(a){
    var l = a.length - 1;
    return 0 === l ? [0] : caml_array_sub(a, 0, l);
   }
   function append(a1, a2){
    var l1 = a1.length - 1;
    return 0 === l1
            ? copy(a2)
            : 0
              === a2.length - 1
              ? caml_array_sub(a1, 0, l1)
              : runtime.caml_array_append(a1, a2);
   }
   function sub(a, ofs, len){
    if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
     return caml_array_sub(a, ofs, len);
    return caml_call1(Stdlib[1], cst_Array_sub);
   }
   function fill(a, ofs, len, v){
    if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
     return runtime.caml_array_fill(a, ofs, len, v);
    return caml_call1(Stdlib[1], cst_Array_fill);
   }
   function blit(a1, ofs1, a2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (a1.length - 1 - len | 0) >= ofs1
        && 0 <= ofs2 && (a2.length - 1 - len | 0) >= ofs2)
     return runtime.caml_array_blit(a1, ofs1, a2, ofs2, len);
    return caml_call1(Stdlib[1], cst_Array_blit);
   }
   function iter(f, a){
    var _ab_ = a.length - 2 | 0, _aa_ = 0;
    if(_ab_ >= 0){
     var i = _aa_;
     for(;;){
      caml_call1(f, a[1 + i]);
      var _ac_ = i + 1 | 0;
      if(_ab_ === i) break;
      i = _ac_;
     }
    }
    return 0;
   }
   function iter2(f, a, b){
    if(a.length - 1 !== b.length - 1)
     return caml_call1(Stdlib[1], cst_Array_iter2_arrays_must_ha);
    var ___ = a.length - 2 | 0, _Z_ = 0;
    if(___ >= 0){
     var i = _Z_;
     for(;;){
      caml_call2(f, a[1 + i], b[1 + i]);
      var _$_ = i + 1 | 0;
      if(___ === i) break;
      i = _$_;
     }
    }
    return 0;
   }
   function map(f, a){
    var l = a.length - 1;
    if(0 === l) return [0];
    var r = caml_make_vect(l, caml_call1(f, a[1])), _X_ = l - 1 | 0, _W_ = 1;
    if(_X_ >= 1){
     var i = _W_;
     for(;;){
      r[1 + i] = caml_call1(f, a[1 + i]);
      var _Y_ = i + 1 | 0;
      if(_X_ === i) break;
      i = _Y_;
     }
    }
    return r;
   }
   function map2(f, a, b){
    var la = a.length - 1, lb = b.length - 1;
    if(la !== lb)
     return caml_call1(Stdlib[1], cst_Array_map2_arrays_must_hav);
    if(0 === la) return [0];
    var
     r = caml_make_vect(la, caml_call2(f, a[1], b[1])),
     _U_ = la - 1 | 0,
     _T_ = 1;
    if(_U_ >= 1){
     var i = _T_;
     for(;;){
      r[1 + i] = caml_call2(f, a[1 + i], b[1 + i]);
      var _V_ = i + 1 | 0;
      if(_U_ === i) break;
      i = _V_;
     }
    }
    return r;
   }
   function iteri(f, a){
    var _R_ = a.length - 2 | 0, _Q_ = 0;
    if(_R_ >= 0){
     var i = _Q_;
     for(;;){
      caml_call2(f, i, a[1 + i]);
      var _S_ = i + 1 | 0;
      if(_R_ === i) break;
      i = _S_;
     }
    }
    return 0;
   }
   function mapi(f, a){
    var l = a.length - 1;
    if(0 === l) return [0];
    var
     r = caml_make_vect(l, caml_call2(f, 0, a[1])),
     _O_ = l - 1 | 0,
     _N_ = 1;
    if(_O_ >= 1){
     var i = _N_;
     for(;;){
      r[1 + i] = caml_call2(f, i, a[1 + i]);
      var _P_ = i + 1 | 0;
      if(_O_ === i) break;
      i = _P_;
     }
    }
    return r;
   }
   function to_list(a){
    var i$1 = a.length - 2 | 0, i = i$1, res = 0;
    for(;;){
     if(0 > i) return res;
     var res$0 = [0, a[1 + i], res], i$0 = i - 1 | 0;
     i = i$0;
     res = res$0;
    }
   }
   function list_length(accu, param){
    var accu$0 = accu, param$0 = param;
    for(;;){
     if(! param$0) return accu$0;
     var t = param$0[2], accu$1 = accu$0 + 1 | 0;
     accu$0 = accu$1;
     param$0 = t;
    }
   }
   function of_list(l){
    if(! l) return [0];
    var
     tl = l[2],
     hd = l[1],
     a = caml_make_vect(list_length(0, l), hd),
     i = 1,
     param = tl;
    for(;;){
     if(! param) return a;
     var tl$0 = param[2], hd$0 = param[1];
     a[1 + i] = hd$0;
     var i$0 = i + 1 | 0;
     i = i$0;
     param = tl$0;
    }
   }
   function fold_left(f, x, a){
    var r = [0, x], _L_ = a.length - 2 | 0, _K_ = 0;
    if(_L_ >= 0){
     var i = _K_;
     for(;;){
      r[1] = caml_call2(f, r[1], a[1 + i]);
      var _M_ = i + 1 | 0;
      if(_L_ === i) break;
      i = _M_;
     }
    }
    return r[1];
   }
   function fold_right(f, a, x){
    var r = [0, x], _I_ = a.length - 2 | 0;
    if(_I_ >= 0){
     var i = _I_;
     for(;;){
      r[1] = caml_call2(f, a[1 + i], r[1]);
      var _J_ = i - 1 | 0;
      if(0 === i) break;
      i = _J_;
     }
    }
    return r[1];
   }
   function exists(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(caml_call1(p, a[1 + i])) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_all(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 1;
     if(! caml_call1(p, a[1 + i])) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_all2(p, l1, l2){
    var n1 = l1.length - 1, n2 = l2.length - 1;
    if(n1 !== n2) return caml_call1(Stdlib[1], cst_Array_for_all2);
    var i = 0;
    for(;;){
     if(i === n1) return 1;
     if(! caml_call2(p, l1[1 + i], l2[1 + i])) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function exists2(p, l1, l2){
    var n1 = l1.length - 1, n2 = l2.length - 1;
    if(n1 !== n2) return caml_call1(Stdlib[1], cst_Array_exists2);
    var i = 0;
    for(;;){
     if(i === n1) return 0;
     if(caml_call2(p, l1[1 + i], l2[1 + i])) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function mem(x, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(0 === runtime.caml_compare(a[1 + i], x)) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function memq(x, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(x === a[1 + i]) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   var
    Bottom = [248, "Stdlib.Array.Bottom", runtime.caml_fresh_oo_id(0)],
    _a_ = [0, "array.ml", 258, 4];
   function sort(cmp, a){
    function maxson(l, i){
     var i31 = ((i + i | 0) + i | 0) + 1 | 0, x = [0, i31];
     if((i31 + 2 | 0) < l){
      var _B_ = i31 + 1 | 0, _C_ = caml_check_bound(a, _B_)[1 + _B_];
      if(caml_call2(cmp, caml_check_bound(a, i31)[1 + i31], _C_) < 0)
       x[1] = i31 + 1 | 0;
      var
       _D_ = i31 + 2 | 0,
       _E_ = caml_check_bound(a, _D_)[1 + _D_],
       _F_ = x[1];
      if(caml_call2(cmp, caml_check_bound(a, _F_)[1 + _F_], _E_) < 0)
       x[1] = i31 + 2 | 0;
      return x[1];
     }
     if((i31 + 1 | 0) < l){
      var _G_ = i31 + 1 | 0, _H_ = caml_check_bound(a, _G_)[1 + _G_];
      if(0 > caml_call2(cmp, caml_check_bound(a, i31)[1 + i31], _H_))
       return i31 + 1 | 0;
     }
     if(i31 < l) return i31;
     throw caml_maybe_attach_backtrace([0, Bottom, i], 1);
    }
    var l = a.length - 1, _v_ = ((l + 1 | 0) / 3 | 0) - 1 | 0;
    if(_v_ >= 0){
     var i$6 = _v_;
     for(;;){
      var e$1 = caml_check_bound(a, i$6)[1 + i$6];
      try{
       var i = i$6;
       for(;;){
        var j = maxson(l, i);
        if(0 >= caml_call2(cmp, caml_check_bound(a, j)[1 + j], e$1)) break;
        var _s_ = caml_check_bound(a, j)[1 + j];
        caml_check_bound(a, i)[1 + i] = _s_;
        i = j;
       }
       caml_check_bound(a, i)[1 + i] = e$1;
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn[1] !== Bottom) throw caml_maybe_attach_backtrace(exn, 0);
       var i$0 = exn[2];
       caml_check_bound(a, i$0)[1 + i$0] = e$1;
      }
      var _A_ = i$6 - 1 | 0;
      if(0 === i$6) break;
      i$6 = _A_;
     }
    }
    var _w_ = l - 1 | 0;
    if(_w_ >= 2){
     var i$4 = _w_;
     for(;;){
      var e$0 = caml_check_bound(a, i$4)[1 + i$4];
      a[1 + i$4] = caml_check_bound(a, 0)[1];
      var i$5 = 0;
      try{
       var i$1 = i$5;
       for(;;){
        var j$0 = maxson(i$4, i$1), _t_ = caml_check_bound(a, j$0)[1 + j$0];
        caml_check_bound(a, i$1)[1 + i$1] = _t_;
        i$1 = j$0;
       }
      }
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       if(exn$0[1] !== Bottom) throw caml_maybe_attach_backtrace(exn$0, 0);
       var i$2 = exn$0[2];
       a:
       {
        b:
        {
         var i$3 = i$2;
         for(;;){
          var father = (i$3 - 1 | 0) / 3 | 0;
          if(i$3 === father)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
          if
           (0 <= caml_call2(cmp, caml_check_bound(a, father)[1 + father], e$0))
           break;
          var _u_ = caml_check_bound(a, father)[1 + father];
          caml_check_bound(a, i$3)[1 + i$3] = _u_;
          if(0 >= father) break b;
          i$3 = father;
         }
         caml_check_bound(a, i$3)[1 + i$3] = e$0;
         break a;
        }
        caml_check_bound(a, 0)[1] = e$0;
       }
       var _z_ = i$4 - 1 | 0;
       if(2 === i$4) break;
       i$4 = _z_;
      }
     }
    }
    var _x_ = 1 < l ? 1 : 0;
    if(_x_){
     var e = caml_check_bound(a, 1)[2];
     a[2] = caml_check_bound(a, 0)[1];
     a[1] = e;
     var _y_ = 0;
    }
    else
     var _y_ = _x_;
    return _y_;
   }
   function stable_sort(cmp, a){
    function merge(src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs){
     var
      src1r = src1ofs + src1len | 0,
      src2r = src2ofs + src2len | 0,
      s2$1 = caml_check_bound(src2, src2ofs)[1 + src2ofs],
      s1$1 = caml_check_bound(a, src1ofs)[1 + src1ofs],
      i1 = src1ofs,
      s1 = s1$1,
      i2 = src2ofs,
      s2 = s2$1,
      d = dstofs;
     for(;;)
      if(0 < caml_call2(cmp, s1, s2)){
       caml_check_bound(dst, d)[1 + d] = s2;
       var i2$0 = i2 + 1 | 0;
       if(i2$0 >= src2r) return blit(a, i1, dst, d + 1 | 0, src1r - i1 | 0);
       var d$0 = d + 1 | 0, s2$0 = caml_check_bound(src2, i2$0)[1 + i2$0];
       i2 = i2$0;
       s2 = s2$0;
       d = d$0;
      }
      else{
       caml_check_bound(dst, d)[1 + d] = s1;
       var i1$0 = i1 + 1 | 0;
       if(i1$0 >= src1r)
        return blit(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
       var d$1 = d + 1 | 0, s1$0 = caml_check_bound(a, i1$0)[1 + i1$0];
       i1 = i1$0;
       s1 = s1$0;
       d = d$1;
      }
    }
    function isortto(srcofs, dst, dstofs, len){
     var _k_ = len - 1 | 0, _j_ = 0;
     if(_k_ >= 0){
      var i = _j_;
      for(;;){
       var
        _l_ = srcofs + i | 0,
        e = caml_check_bound(a, _l_)[1 + _l_],
        j = [0, (dstofs + i | 0) - 1 | 0];
       for(;;){
        if(dstofs > j[1]) break;
        var _m_ = j[1];
        if(0 >= caml_call2(cmp, caml_check_bound(dst, _m_)[1 + _m_], e))
         break;
        var
         _n_ = j[1],
         _o_ = caml_check_bound(dst, _n_)[1 + _n_],
         _p_ = j[1] + 1 | 0;
        caml_check_bound(dst, _p_)[1 + _p_] = _o_;
        j[1]--;
       }
       var _q_ = j[1] + 1 | 0;
       caml_check_bound(dst, _q_)[1 + _q_] = e;
       var _r_ = i + 1 | 0;
       if(_k_ === i) break;
       i = _r_;
      }
     }
     return 0;
    }
    function sortto(srcofs, dst, dstofs, len){
     if(len <= 5) return isortto(srcofs, dst, dstofs, len);
     var l1 = len / 2 | 0, l2 = len - l1 | 0;
     sortto(srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);
     sortto(srcofs, a, srcofs + l2 | 0, l1);
     return merge(srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);
    }
    var l = a.length - 1;
    if(l <= 5) return isortto(0, a, 0, l);
    var
     l1 = l / 2 | 0,
     l2 = l - l1 | 0,
     t = caml_make_vect(l2, caml_check_bound(a, 0)[1]);
    sortto(l1, t, 0, l2);
    sortto(0, a, l2, l1);
    return merge(l2, l1, t, 0, l2, a, 0);
   }
   function to_seq(a){
    function aux(i, param){
     if(i >= a.length - 1) return 0;
     var x = a[1 + i], _h_ = i + 1 | 0;
     return [0, x, function(_i_){return aux(_h_, _i_);}];
    }
    var _f_ = 0;
    return function(_g_){return aux(_f_, _g_);};
   }
   function to_seqi(a){
    function aux(i, param){
     if(i >= a.length - 1) return 0;
     var x = a[1 + i], _d_ = i + 1 | 0;
     return [0, [0, i, x], function(_e_){return aux(_d_, _e_);}];
    }
    var _b_ = 0;
    return function(_c_){return aux(_b_, _c_);};
   }
   function of_seq(i$2){
    var
     l =
       caml_call3
        (Stdlib_seq[9], function(acc, x){return [0, x, acc];}, 0, i$2);
    if(! l) return [0];
    var
     tl = l[2],
     hd = l[1],
     len = list_length(0, l),
     a = caml_make_vect(len, hd),
     i$1 = len - 2 | 0,
     i = i$1,
     param = tl;
    for(;;){
     if(! param) return a;
     var tl$0 = param[2], hd$0 = param[1];
     a[1 + i] = hd$0;
     var i$0 = i - 1 | 0;
     i = i$0;
     param = tl$0;
    }
   }
   var
    Stdlib_array =
      [0,
       make_float,
       init,
       make_matrix,
       make_matrix,
       append,
       runtime.caml_array_concat,
       sub,
       copy,
       fill,
       blit,
       to_list,
       of_list,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_right,
       iter2,
       map2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       sort,
       stable_sort,
       stable_sort,
       to_seq,
       to_seqi,
       of_seq,
       Floatarray];
   runtime.caml_register_global(13, Stdlib_array, "Stdlib__array");
   return;
  }
  (globalThis));

//# 5485 "../.js/default/stdlib/stdlib.cma.js"
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function abs(x){return 0 <= x ? x : - x | 0;}
   function lognot(x){return x ^ -1;}
   function equal(_b_, _a_){return _b_ === _a_ ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function to_string(x){return "" + x;}
   var
    Stdlib_int =
      [0,
       0,
       1,
       -1,
       abs,
       2147483647,
       -2147483648,
       lognot,
       equal,
       compare,
       to_string];
   runtime.caml_register_global(1, Stdlib_int, "Stdlib__int");
   return;
  }
  (globalThis));

//# 5513 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_int_compare = runtime.caml_int_compare,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_sys = global_data.Stdlib__sys,
    Assert_failure = global_data.Assert_failure,
    zero = 0,
    one = 1;
   function succ(n){return n + 1 | 0;}
   function pred(n){return n - 1 | 0;}
   function abs(n){return runtime.caml_greaterequal(n, 0) ? n : - n | 0;}
   function lognot(n){return n ^ -1;}
   var
    _a_ = Stdlib_sys[9],
    _b_ = [0, "int32.ml", 69, 6],
    minus_one = -1,
    min_int = -2147483648,
    max_int = 2147483647;
   if(32 === _a_)
    var
     max_int$0 = Stdlib[19],
     unsigned_to_int =
       function(n){
        if(0 >= caml_int_compare(0, n) && 0 >= caml_int_compare(n, max_int$0))
         return [0, n];
        return 0;
       };
   else{
    if(64 !== _a_)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    var
     move = caml_int_of_string("0x1_0000_0000"),
     unsigned_to_int =
       function(n){var i = 0 <= n ? n : n + move | 0; return [0, i];};
   }
   function to_string(n){return runtime.caml_format_int("%d", n);}
   function of_string_opt(s){
    try{var _d_ = [0, caml_int_of_string(s)]; return _d_;}
    catch(_e_){
     var _c_ = caml_wrap_exception(_e_);
     if(_c_[1] === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(_c_, 0);
    }
   }
   var compare = caml_int_compare;
   function equal(x, y){return 0 === caml_int_compare(x, y) ? 1 : 0;}
   function unsigned_compare(n, m){
    var y = m + 2147483648 | 0, x = n + 2147483648 | 0;
    return caml_int_compare(x, y);
   }
   function unsigned_div(n, d){
    if(runtime.caml_lessthan(d, 0))
     return 0 <= unsigned_compare(n, d) ? one : zero;
    var q = runtime.caml_div(n >>> 1 | 0, d) << 1, r = n - caml_mul(q, d) | 0;
    return 0 <= unsigned_compare(r, d) ? q + 1 | 0 : q;
   }
   function unsigned_rem(n, d){
    return n - caml_mul(unsigned_div(n, d), d) | 0;
   }
   var
    Stdlib_int32 =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal];
   runtime.caml_register_global(15, Stdlib_int32, "Stdlib__int32");
   return;
  }
  (globalThis));

//# 5607 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_compare = runtime.caml_int64_compare,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    _a_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    zero = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    one = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    minus_one = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    min_int = runtime.caml_int64_create_lo_mi_hi(0, 0, 32768),
    max_int = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
    Stdlib = global_data.Stdlib,
    _b_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _d_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535);
   function succ(n){return caml_int64_add(n, _a_);}
   function pred(n){return caml_int64_sub(n, _b_);}
   function abs(n){
    return runtime.caml_greaterequal(n, _c_) ? n : runtime.caml_int64_neg(n);
   }
   function lognot(n){return runtime.caml_int64_xor(n, _d_);}
   var max_int$0 = runtime.caml_int64_of_int32(Stdlib[19]);
   function unsigned_to_int(n){
    if
     (0 >= caml_int64_compare(zero, n)
      && 0 >= caml_int64_compare(n, max_int$0))
     return [0, runtime.caml_int64_to_int32(n)];
    return 0;
   }
   function to_string(n){return runtime.caml_int64_format("%d", n);}
   function of_string_opt(s){
    try{var _f_ = [0, runtime.caml_int64_of_string(s)]; return _f_;}
    catch(_g_){
     var _e_ = caml_wrap_exception(_g_);
     if(_e_[1] === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(_e_, 0);
    }
   }
   function compare(x, y){return caml_int64_compare(x, y);}
   function equal(x, y){return 0 === caml_int64_compare(x, y) ? 1 : 0;}
   function unsigned_compare(n, m){
    var y = caml_int64_sub(m, min_int), x = caml_int64_sub(n, min_int);
    return caml_int64_compare(x, y);
   }
   function unsigned_div(n, d){
    if(runtime.caml_lessthan(d, zero))
     return 0 <= unsigned_compare(n, d) ? one : zero;
    var
     q =
       runtime.caml_int64_shift_left
        (runtime.caml_int64_div
          (runtime.caml_int64_shift_right_unsigned(n, 1), d),
         1),
     r = caml_int64_sub(n, caml_int64_mul(q, d));
    return 0 <= unsigned_compare(r, d) ? caml_int64_add(q, _a_) : q;
   }
   function unsigned_rem(n, d){
    return caml_int64_sub(n, caml_int64_mul(unsigned_div(n, d), d));
   }
   var
    Stdlib_int64 =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal];
   runtime.caml_register_global(11, Stdlib_int64, "Stdlib__int64");
   return;
  }
  (globalThis));

//# 5700 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_sys = global_data.Stdlib__sys,
    zero = 0,
    one = 1;
   function succ(n){return n + 1 | 0;}
   function pred(n){return n - 1 | 0;}
   function abs(n){return runtime.caml_greaterequal(n, 0) ? n : - n | 0;}
   var
    size = Stdlib_sys[9],
    min_int = 1 << (size - 1 | 0),
    max_int = min_int - 1 | 0;
   function lognot(n){return n ^ -1;}
   var max_int$0 = Stdlib[19];
   function unsigned_to_int(n){
    if(0 >= caml_int_compare(0, n) && 0 >= caml_int_compare(n, max_int$0))
     return [0, n];
    return 0;
   }
   function to_string(n){return runtime.caml_format_int("%d", n);}
   function of_string_opt(s){
    try{var _b_ = [0, runtime.caml_int_of_string(s)]; return _b_;}
    catch(_c_){
     var _a_ = caml_wrap_exception(_c_);
     if(_a_[1] === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(_a_, 0);
    }
   }
   var compare = caml_int_compare;
   function equal(x, y){return 0 === caml_int_compare(x, y) ? 1 : 0;}
   function unsigned_compare(n, m){
    var y = m - min_int | 0, x = n - min_int | 0;
    return caml_int_compare(x, y);
   }
   function unsigned_div(n, d){
    if(runtime.caml_lessthan(d, 0))
     return 0 <= unsigned_compare(n, d) ? one : zero;
    var q = runtime.caml_div(n >>> 1 | 0, d) << 1, r = n - caml_mul(q, d) | 0;
    return 0 <= unsigned_compare(r, d) ? q + 1 | 0 : q;
   }
   function unsigned_rem(n, d){
    return n - caml_mul(unsigned_div(n, d), d) | 0;
   }
   var
    Stdlib_nativeint =
      [0,
       zero,
       one,
       -1,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       size,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal];
   runtime.caml_register_global(12, Stdlib_nativeint, "Stdlib__nativeint");
   return;
  }
  (globalThis));

//# 5780 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    caml_bytes_get = runtime.caml_bytes_get,
    caml_check_bound = runtime.caml_check_bound,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    dummy_pos = [0, cst, 0, 0, -1],
    zero_pos = [0, cst, 1, 0, 0],
    Stdlib_bytes = global_data.Stdlib__bytes,
    Stdlib = global_data.Stdlib,
    Stdlib_sys = global_data.Stdlib__sys,
    cst_Lexing_lex_refill_cannot_g = "Lexing.lex_refill: cannot grow buffer";
   function engine(tbl, state, buf){
    var
     result = runtime.caml_lex_engine(tbl, state, buf),
     _n_ = 0 <= result ? 1 : 0,
     _o_ = _n_ ? buf[12] !== dummy_pos ? 1 : 0 : _n_;
    if(_o_){
     buf[11] = buf[12];
     var _p_ = buf[12];
     buf[12] = [0, _p_[1], _p_[2], _p_[3], buf[4] + buf[6] | 0];
    }
    return result;
   }
   function new_engine(tbl, state, buf){
    var
     result = runtime.caml_new_lex_engine(tbl, state, buf),
     _k_ = 0 <= result ? 1 : 0,
     _l_ = _k_ ? buf[12] !== dummy_pos ? 1 : 0 : _k_;
    if(_l_){
     buf[11] = buf[12];
     var _m_ = buf[12];
     buf[12] = [0, _m_[1], _m_[2], _m_[3], buf[4] + buf[6] | 0];
    }
    return result;
   }
   function from_function(opt, read_fun){
    if(opt)
     var sth = opt[1], with_positions = sth;
    else
     var with_positions = 1;
    var
     _f_ = with_positions ? zero_pos : dummy_pos,
     _g_ = with_positions ? zero_pos : dummy_pos,
     aux_buffer = caml_create_bytes(512);
    return [0,
            function(lexbuf){
             var
              read =
                caml_call2
                 (read_fun, aux_buffer, caml_ml_bytes_length(aux_buffer)),
              n = 0 < read ? read : (lexbuf[9] = 1, 0);
             if(caml_ml_bytes_length(lexbuf[2]) < (lexbuf[3] + n | 0)){
              if
               (((lexbuf[3] - lexbuf[5] | 0) + n | 0)
                <= caml_ml_bytes_length(lexbuf[2]))
               caml_call5
                (Stdlib_bytes[11],
                 lexbuf[2],
                 lexbuf[5],
                 lexbuf[2],
                 0,
                 lexbuf[3] - lexbuf[5] | 0);
              else{
               var
                newlen =
                  caml_call2
                   (Stdlib[16],
                    2 * caml_ml_bytes_length(lexbuf[2]) | 0,
                    Stdlib_sys[12]);
               if(newlen < ((lexbuf[3] - lexbuf[5] | 0) + n | 0))
                caml_call1(Stdlib[2], cst_Lexing_lex_refill_cannot_g);
               var newbuf = caml_create_bytes(newlen);
               caml_call5
                (Stdlib_bytes[11],
                 lexbuf[2],
                 lexbuf[5],
                 newbuf,
                 0,
                 lexbuf[3] - lexbuf[5] | 0);
               lexbuf[2] = newbuf;
              }
              var s = lexbuf[5];
              lexbuf[4] = lexbuf[4] + s | 0;
              lexbuf[6] = lexbuf[6] - s | 0;
              lexbuf[5] = 0;
              lexbuf[7] = lexbuf[7] - s | 0;
              lexbuf[3] = lexbuf[3] - s | 0;
              var t = lexbuf[10], _i_ = t.length - 2 | 0, _h_ = 0;
              if(_i_ >= 0){
               var i = _h_;
               for(;;){
                var v = caml_check_bound(t, i)[1 + i];
                if(0 <= v) caml_check_bound(t, i)[1 + i] = v - s | 0;
                var _j_ = i + 1 | 0;
                if(_i_ === i) break;
                i = _j_;
               }
              }
             }
             caml_call5
              (Stdlib_bytes[11], aux_buffer, 0, lexbuf[2], lexbuf[3], n);
             lexbuf[3] = lexbuf[3] + n | 0;
             return 0;
            },
            caml_create_bytes(1024),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            [0],
            _g_,
            _f_];
   }
   function from_channel(with_positions, ic){
    return from_function
            (with_positions,
             function(buf, n){return caml_call4(Stdlib[84], ic, buf, 0, n);});
   }
   function from_string(opt, s){
    if(opt)
     var sth = opt[1], with_positions = sth;
    else
     var with_positions = 1;
    var
     _d_ = with_positions ? zero_pos : dummy_pos,
     _e_ = with_positions ? zero_pos : dummy_pos;
    return [0,
            function(lexbuf){lexbuf[9] = 1; return 0;},
            caml_call1(Stdlib_bytes[5], s),
            runtime.caml_ml_string_length(s),
            0,
            0,
            0,
            0,
            0,
            1,
            [0],
            _e_,
            _d_];
   }
   function set_position(lexbuf, position){
    lexbuf[12] = [0, lexbuf[12][1], position[2], position[3], position[4]];
    lexbuf[4] = position[4];
    return 0;
   }
   function set_filename(lexbuf, fname){
    var _c_ = lexbuf[12];
    lexbuf[12] = [0, fname, _c_[2], _c_[3], _c_[4]];
    return 0;
   }
   function with_positions(lexbuf){return lexbuf[12] !== dummy_pos ? 1 : 0;}
   function lexeme(lexbuf){
    var len = lexbuf[6] - lexbuf[5] | 0;
    return caml_call3(Stdlib_bytes[8], lexbuf[2], lexbuf[5], len);
   }
   function sub_lexeme(lexbuf, i1, i2){
    var len = i2 - i1 | 0;
    return caml_call3(Stdlib_bytes[8], lexbuf[2], i1, len);
   }
   function sub_lexeme_opt(lexbuf, i1, i2){
    if(0 > i1) return 0;
    var len = i2 - i1 | 0;
    return [0, caml_call3(Stdlib_bytes[8], lexbuf[2], i1, len)];
   }
   function sub_lexeme_char(lexbuf, i){return caml_bytes_get(lexbuf[2], i);}
   function sub_lexeme_char_opt(lexbuf, i){
    return 0 <= i ? [0, caml_bytes_get(lexbuf[2], i)] : 0;
   }
   function lexeme_char(lexbuf, i){
    return caml_bytes_get(lexbuf[2], lexbuf[5] + i | 0);
   }
   function lexeme_start(lexbuf){return lexbuf[11][4];}
   function lexeme_end(lexbuf){return lexbuf[12][4];}
   function lexeme_start_p(lexbuf){return lexbuf[11];}
   function lexeme_end_p(lexbuf){return lexbuf[12];}
   function new_line(lexbuf){
    var
     lcp = lexbuf[12],
     _a_ = lcp !== dummy_pos ? 1 : 0,
     _b_ =
       _a_
        ? (lexbuf[12] = [0, lcp[1], lcp[2] + 1 | 0, lcp[4], lcp[4]], 0)
        : _a_;
    return _b_;
   }
   function flush_input(lb){
    lb[6] = 0;
    lb[4] = 0;
    var lcp = lb[12];
    if(lcp !== dummy_pos)
     lb[12] = [0, lcp[1], zero_pos[2], zero_pos[3], zero_pos[4]];
    lb[3] = 0;
    return 0;
   }
   var
    Stdlib_lexing =
      [0,
       dummy_pos,
       from_channel,
       from_string,
       from_function,
       set_position,
       set_filename,
       with_positions,
       lexeme,
       lexeme_char,
       lexeme_start,
       lexeme_end,
       lexeme_start_p,
       lexeme_end_p,
       new_line,
       flush_input,
       sub_lexeme,
       sub_lexeme_opt,
       sub_lexeme_char,
       sub_lexeme_char_opt,
       engine,
       new_engine];
   runtime.caml_register_global(6, Stdlib_lexing, "Stdlib__lexing");
   return;
  }
  (globalThis));

//# 6040 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_obj = global_data.Stdlib__obj,
    Stdlib_array = global_data.Stdlib__array,
    Stdlib_lexing = global_data.Stdlib__lexing,
    YYexit = [248, "Stdlib.Parsing.YYexit", caml_fresh_oo_id(0)],
    Parse_error = [248, "Stdlib.Parsing.Parse_error", caml_fresh_oo_id(0)],
    env =
      [0,
       caml_make_vect(100, 0),
       caml_make_vect(100, 0),
       caml_make_vect(100, Stdlib_lexing[1]),
       caml_make_vect(100, Stdlib_lexing[1]),
       100,
       0,
       0,
       0,
       Stdlib_lexing[1],
       Stdlib_lexing[1],
       0,
       0,
       0,
       0,
       0,
       0],
    dummy = 0;
   function grow_stacks(param){
    var
     oldsize = env[5],
     newsize = oldsize * 2 | 0,
     new_s = caml_make_vect(newsize, 0),
     new_v = caml_make_vect(newsize, 0),
     new_start = caml_make_vect(newsize, Stdlib_lexing[1]),
     new_end = caml_make_vect(newsize, Stdlib_lexing[1]);
    caml_call5(Stdlib_array[10], env[1], 0, new_s, 0, oldsize);
    env[1] = new_s;
    caml_call5(Stdlib_array[10], env[2], 0, new_v, 0, oldsize);
    env[2] = new_v;
    caml_call5(Stdlib_array[10], env[3], 0, new_start, 0, oldsize);
    env[3] = new_start;
    caml_call5(Stdlib_array[10], env[4], 0, new_end, 0, oldsize);
    env[4] = new_end;
    env[5] = newsize;
   }
   function clear_parser(param){
    caml_call4(Stdlib_array[9], env[2], 0, env[5], 0);
    env[8] = 0;
    return 0;
   }
   var
    current_lookahead_fun = [0, function(param){return 0;}],
    cst_syntax_error = "syntax error";
   function yyparse(tables, start, lexer, lexbuf){
    var
     init_asp = env[11],
     init_sp = env[14],
     init_stackbase = env[6],
     init_state = env[15],
     init_curr_char = env[7],
     init_lval = env[8],
     init_errflag = env[16];
    env[6] = env[14] + 1 | 0;
    env[7] = start;
    env[10] = lexbuf[12];
    try{
     var cmd = 0, arg = 0;
     for(;;)
      switch(runtime.caml_parse_engine(tables, env, cmd, arg)){
        case 0:
         var arg$0 = caml_call1(lexer, lexbuf);
         env[9] = lexbuf[11];
         env[10] = lexbuf[12];
         cmd = 1;
         arg = arg$0;
         break;
        case 1:
         throw caml_maybe_attach_backtrace(Parse_error, 1);
        case 2:
         grow_stacks(0); cmd = 2; arg = 0; break;
        case 3:
         grow_stacks(0); cmd = 3; arg = 0; break;
        case 4:
         try{
          var
           _i_ = env[13],
           _j_ = caml_call1(caml_check_bound(tables[1], _i_)[1 + _i_], env),
           _k_ = 4,
           value = _j_,
           action = _k_;
         }
         catch(_m_){
          var _h_ = caml_wrap_exception(_m_);
          if(_h_ !== Parse_error) throw caml_maybe_attach_backtrace(_h_, 0);
          var value = 0, action = 5;
         }
         cmd = action;
         arg = value;
         break;
        default: caml_call1(tables[14], cst_syntax_error); cmd = 5; arg = 0;
      }
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), curr_char = env[7];
     env[11] = init_asp;
     env[14] = init_sp;
     env[6] = init_stackbase;
     env[15] = init_state;
     env[7] = init_curr_char;
     env[8] = init_lval;
     env[16] = init_errflag;
     if(exn[1] === YYexit){var v = exn[2]; return v;}
     current_lookahead_fun[1] =
      function(tok){
       if(! caml_call1(Stdlib_obj[1], tok))
        return caml_check_bound(tables[2], tok)[1 + tok] === curr_char ? 1 : 0;
       var _l_ = runtime.caml_obj_tag(tok);
       return caml_check_bound(tables[3], _l_)[1 + _l_] === curr_char ? 1 : 0;
      };
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function peek_val(env, n){
    var _g_ = env[11] - n | 0;
    return caml_check_bound(env[2], _g_)[1 + _g_];
   }
   function symbol_start_pos(param){
    var i$1 = env[12], i = i$1;
    for(;;){
     if(0 >= i){
      var _f_ = env[11];
      return caml_check_bound(env[4], _f_)[1 + _f_];
     }
     var
      _d_ = (env[11] - i | 0) + 1 | 0,
      st = caml_check_bound(env[3], _d_)[1 + _d_],
      _e_ = (env[11] - i | 0) + 1 | 0,
      en = caml_check_bound(env[4], _e_)[1 + _e_];
     if(runtime.caml_notequal(st, en)) return st;
     var i$0 = i - 1 | 0;
     i = i$0;
    }
   }
   function symbol_end_pos(param){
    var _c_ = env[11];
    return caml_check_bound(env[4], _c_)[1 + _c_];
   }
   function rhs_start_pos(n){
    var _b_ = env[11] - (env[12] - n | 0) | 0;
    return caml_check_bound(env[3], _b_)[1 + _b_];
   }
   function rhs_end_pos(n){
    var _a_ = env[11] - (env[12] - n | 0) | 0;
    return caml_check_bound(env[4], _a_)[1 + _a_];
   }
   function symbol_start(param){return symbol_start_pos(0)[4];}
   function symbol_end(param){return symbol_end_pos(0)[4];}
   function rhs_start(n){return rhs_start_pos(n)[4];}
   function rhs_end(n){return rhs_end_pos(n)[4];}
   function is_current_lookahead(tok){
    return caml_call1(current_lookahead_fun[1], tok);
   }
   function parse_error(param){return 0;}
   var
    Stdlib_parsing =
      [0,
       symbol_start,
       symbol_end,
       rhs_start,
       rhs_end,
       symbol_start_pos,
       symbol_end_pos,
       rhs_start_pos,
       rhs_end_pos,
       clear_parser,
       Parse_error,
       runtime.caml_set_parser_trace,
       YYexit,
       yyparse,
       peek_val,
       is_current_lookahead,
       parse_error];
   runtime.caml_register_global(7, Stdlib_parsing, "Stdlib__parsing");
   return;
  }
  (globalThis));

//# 7071 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Map_bal$3 = "Map.bal",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_seq = global_data.Stdlib__seq,
    cst_Map_bal = cst_Map_bal$3,
    cst_Map_bal$0 = cst_Map_bal$3,
    cst_Map_bal$1 = cst_Map_bal$3,
    cst_Map_bal$2 = cst_Map_bal$3,
    cst_Map_remove_min_elt = "Map.remove_min_elt",
    _a_ = [0, 0, 0, 0],
    _b_ = [0, "map.ml", 400, 10],
    _c_ = [0, 0, 0],
    Stdlib_map =
      [0,
       function(Ord){
        function height(param){
         if(! param) return 0;
         var h = param[5];
         return h;
        }
        function create(l, x, d, r){
         var
          hl = height(l),
          hr = height(r),
          _K_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
         return [0, l, x, d, r, _K_];
        }
        function singleton(x, d){return [0, 0, x, d, 0, 1];}
        function bal(l, x, d, r){
         if(l) var h = l[5], hl = h; else var hl = 0;
         if(r) var h$0 = r[5], hr = h$0; else var hr = 0;
         if((hr + 2 | 0) < hl){
          if(! l) return caml_call1(Stdlib[1], cst_Map_bal$0);
          var lr = l[4], ld = l[3], lv = l[2], ll = l[1], _F_ = height(lr);
          if(_F_ <= height(ll))
           return create(ll, lv, ld, create(lr, x, d, r));
          if(! lr) return caml_call1(Stdlib[1], cst_Map_bal);
          var
           lrr = lr[4],
           lrd = lr[3],
           lrv = lr[2],
           lrl = lr[1],
           _G_ = create(lrr, x, d, r);
          return create(create(ll, lv, ld, lrl), lrv, lrd, _G_);
         }
         if((hl + 2 | 0) >= hr){
          var _J_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
          return [0, l, x, d, r, _J_];
         }
         if(! r) return caml_call1(Stdlib[1], cst_Map_bal$2);
         var rr = r[4], rd = r[3], rv = r[2], rl = r[1], _H_ = height(rl);
         if(_H_ <= height(rr)) return create(create(l, x, d, rl), rv, rd, rr);
         if(! rl) return caml_call1(Stdlib[1], cst_Map_bal$1);
         var
          rlr = rl[4],
          rld = rl[3],
          rlv = rl[2],
          rll = rl[1],
          _I_ = create(rlr, rv, rd, rr);
         return create(create(l, x, d, rll), rlv, rld, _I_);
        }
        var empty = 0;
        function is_empty(param){return param ? 0 : 1;}
        function add(x, data, m){
         if(! m) return [0, 0, x, data, 0, 1];
         var
          h = m[5],
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return d === data ? m : [0, l, x, data, r, h];
         if(0 <= c){
          var rr = add(x, data, r);
          return r === rr ? m : bal(l, v, d, rr);
         }
         var ll = add(x, data, l);
         return l === ll ? m : bal(ll, v, d, r);
        }
        function find(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           c = caml_call2(Ord[1], x, v);
          if(0 === c) return d;
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
        }
        function find_first(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = l$0;
           for(;;){
            if(! param) return [0, v0, d0];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = l;
            }
            else
             param = r;
           }
          }
          else
           param$1 = r$0;
         }
        }
        function find_first_opt(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) return 0;
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = l$0;
           for(;;){
            if(! param) return [0, [0, v0, d0]];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = l;
            }
            else
             param = r;
           }
          }
          else
           param$1 = r$0;
         }
        }
        function find_last(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = r$0;
           for(;;){
            if(! param) return [0, v0, d0];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = r;
            }
            else
             param = l;
           }
          }
          else
           param$1 = l$0;
         }
        }
        function find_last_opt(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1) return 0;
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = r$0;
           for(;;){
            if(! param) return [0, [0, v0, d0]];
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            if(caml_call1(f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = r;
            }
            else
             param = l;
           }
          }
          else
           param$1 = l$0;
         }
        }
        function find_opt(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           c = caml_call2(Ord[1], x, v);
          if(0 === c) return [0, d];
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
        }
        function mem(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var
           r = param$0[4],
           v = param$0[2],
           l = param$0[1],
           c = caml_call2(Ord[1], x, v),
           _E_ = 0 === c ? 1 : 0;
          if(_E_) return _E_;
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
        }
        function min_binding(param){
         var param$0 = param;
         for(;;){
          if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var l = param$0[1];
          if(! l){var d = param$0[3], v = param$0[2]; return [0, v, d];}
          param$0 = l;
         }
        }
        function min_binding_opt(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var l = param$0[1];
          if(! l){var d = param$0[3], v = param$0[2]; return [0, [0, v, d]];}
          param$0 = l;
         }
        }
        function max_binding(param){
         var param$0 = param;
         for(;;){
          if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          if(! param$0[4]){
           var d = param$0[3], v = param$0[2];
           return [0, v, d];
          }
          var r = param$0[4];
          param$0 = r;
         }
        }
        function max_binding_opt(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          if(! param$0[4]){
           var d = param$0[3], v = param$0[2];
           return [0, [0, v, d]];
          }
          var r = param$0[4];
          param$0 = r;
         }
        }
        function remove_min_binding(param){
         if(! param) return caml_call1(Stdlib[1], cst_Map_remove_min_elt);
         var l = param[1];
         if(l){
          var r = param[4], d = param[3], v = param[2];
          return bal(remove_min_binding(l), v, d, r);
         }
         var r$0 = param[4];
         return r$0;
        }
        function _d_(t1, t2){
         if(! t1) return t2;
         if(! t2) return t1;
         var match = min_binding(t2), d = match[2], x = match[1];
         return bal(t1, x, d, remove_min_binding(t2));
        }
        function remove(x, m){
         if(! m) return 0;
         var
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return _d_(l, r);
         if(0 <= c){
          var rr = remove(x, r);
          return r === rr ? m : bal(l, v, d, rr);
         }
         var ll = remove(x, l);
         return l === ll ? m : bal(ll, v, d, r);
        }
        function update(x, f, m){
         if(! m){
          var match$0 = caml_call1(f, 0);
          if(! match$0) return 0;
          var data$0 = match$0[1];
          return [0, 0, x, data$0, 0, 1];
         }
         var
          h = m[5],
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c){
          var match = caml_call1(f, [0, d]);
          if(! match) return _d_(l, r);
          var data = match[1];
          return d === data ? m : [0, l, x, data, r, h];
         }
         if(0 <= c){
          var rr = update(x, f, r);
          return r === rr ? m : bal(l, v, d, rr);
         }
         var ll = update(x, f, l);
         return l === ll ? m : bal(ll, v, d, r);
        }
        function iter(f, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var r = param$0[4], d = param$0[3], v = param$0[2], l = param$0[1];
          iter(f, l);
          caml_call2(f, v, d);
          param$0 = r;
         }
        }
        function map(f, param){
         if(! param) return 0;
         var
          h = param[5],
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = map(f, l),
          d$0 = caml_call1(f, d),
          r$0 = map(f, r);
         return [0, l$0, v, d$0, r$0, h];
        }
        function mapi(f, param){
         if(! param) return 0;
         var
          h = param[5],
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = mapi(f, l),
          d$0 = caml_call2(f, v, d),
          r$0 = mapi(f, r);
         return [0, l$0, v, d$0, r$0, h];
        }
        function fold(f, m, accu){
         var m$0 = m, accu$0 = accu;
         for(;;){
          if(! m$0) return accu$0;
          var
           r = m$0[4],
           d = m$0[3],
           v = m$0[2],
           l = m$0[1],
           accu$1 = caml_call3(f, v, d, fold(f, l, accu$0));
          m$0 = r;
          accu$0 = accu$1;
         }
        }
        function for_all(p, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 1;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           _B_ = caml_call2(p, v, d);
          if(_B_){
           var _C_ = for_all(p, l);
           if(_C_){param$0 = r; continue;}
           var _D_ = _C_;
          }
          else
           var _D_ = _B_;
          return _D_;
         }
        }
        function exists(p, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           _y_ = caml_call2(p, v, d);
          if(_y_)
           var _z_ = _y_;
          else{
           var _A_ = exists(p, l);
           if(! _A_){param$0 = r; continue;}
           var _z_ = _A_;
          }
          return _z_;
         }
        }
        function add_min_binding(k, x, param){
         if(! param) return singleton(k, x);
         var r = param[4], d = param[3], v = param[2], l = param[1];
         return bal(add_min_binding(k, x, l), v, d, r);
        }
        function add_max_binding(k, x, param){
         if(! param) return singleton(k, x);
         var r = param[4], d = param[3], v = param[2], l = param[1];
         return bal(l, v, d, add_max_binding(k, x, r));
        }
        function join(l, v, d, r){
         if(! l) return add_min_binding(v, d, r);
         if(! r) return add_max_binding(v, d, l);
         var
          rh = r[5],
          rr = r[4],
          rd = r[3],
          rv = r[2],
          rl = r[1],
          lh = l[5],
          lr = l[4],
          ld = l[3],
          lv = l[2],
          ll = l[1];
         return (rh + 2 | 0) < lh
                 ? bal(ll, lv, ld, join(lr, v, d, r))
                 : (lh
                   + 2
                   | 0)
                   < rh
                   ? bal(join(l, v, d, rl), rv, rd, rr)
                   : create(l, v, d, r);
        }
        function concat(t1, t2){
         if(! t1) return t2;
         if(! t2) return t1;
         var match = min_binding(t2), d = match[2], x = match[1];
         return join(t1, x, d, remove_min_binding(t2));
        }
        function concat_or_join(t1, v, d, t2){
         if(! d) return concat(t1, t2);
         var d$0 = d[1];
         return join(t1, v, d$0, t2);
        }
        function split(x, param){
         if(! param) return _a_;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return [0, l, [0, d], r];
         if(0 <= c){
          var
           match = split(x, r),
           rr = match[3],
           pres = match[2],
           lr = match[1];
          return [0, join(l, v, d, lr), pres, rr];
         }
         var
          match$0 = split(x, l),
          rl = match$0[3],
          pres$0 = match$0[2],
          ll = match$0[1];
         return [0, ll, pres$0, join(rl, v, d, r)];
        }
        function merge(f, s1, s2){
         if(s1){
          var h1 = s1[5], r1 = s1[4], d1 = s1[3], v1 = s1[2], l1 = s1[1];
          if(height(s2) <= h1){
           var
            match = split(v1, s2),
            r2 = match[3],
            d2 = match[2],
            l2 = match[1],
            _u_ = merge(f, r1, r2),
            _v_ = caml_call3(f, v1, [0, d1], d2);
           return concat_or_join(merge(f, l1, l2), v1, _v_, _u_);
          }
         }
         else if(! s2) return 0;
         if(! s2)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
         var
          r2$0 = s2[4],
          d2$0 = s2[3],
          v2 = s2[2],
          l2$0 = s2[1],
          match$0 = split(v2, s1),
          r1$0 = match$0[3],
          d1$0 = match$0[2],
          l1$0 = match$0[1],
          _w_ = merge(f, r1$0, r2$0),
          _x_ = caml_call3(f, v2, d1$0, [0, d2$0]);
         return concat_or_join(merge(f, l1$0, l2$0), v2, _x_, _w_);
        }
        function union(f, s1, s2){
         if(s1){
          if(s2){
           var
            h2 = s2[5],
            r2 = s2[4],
            d2 = s2[3],
            v2 = s2[2],
            l2 = s2[1],
            h1 = s1[5],
            r1 = s1[4],
            d1 = s1[3],
            v1 = s1[2],
            l1 = s1[1];
           if(h2 <= h1){
            var
             match = split(v1, s2),
             r2$0 = match[3],
             d2$0 = match[2],
             l2$0 = match[1],
             l = union(f, l1, l2$0),
             r = union(f, r1, r2$0);
            if(! d2$0) return join(l, v1, d1, r);
            var d2$1 = d2$0[1];
            return concat_or_join(l, v1, caml_call3(f, v1, d1, d2$1), r);
           }
           var
            match$0 = split(v2, s1),
            r1$0 = match$0[3],
            d1$0 = match$0[2],
            l1$0 = match$0[1],
            l$0 = union(f, l1$0, l2),
            r$0 = union(f, r1$0, r2);
           if(! d1$0) return join(l$0, v2, d2, r$0);
           var d1$1 = d1$0[1];
           return concat_or_join(l$0, v2, caml_call3(f, v2, d1$1, d2), r$0);
          }
          var s = s1;
         }
         else
          var s = s2;
         return s;
        }
        function filter(p, m){
         if(! m) return 0;
         var
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          l$0 = filter(p, l),
          pvd = caml_call2(p, v, d),
          r$0 = filter(p, r);
         if(! pvd) return concat(l$0, r$0);
         if(l === l$0 && r === r$0) return m;
         return join(l$0, v, d, r$0);
        }
        function filter_map(f, param){
         if(! param) return 0;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = filter_map(f, l),
          fvd = caml_call2(f, v, d),
          r$0 = filter_map(f, r);
         if(! fvd) return concat(l$0, r$0);
         var d$0 = fvd[1];
         return join(l$0, v, d$0, r$0);
        }
        function partition(p, param){
         if(! param) return _c_;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          match = partition(p, l),
          lf = match[2],
          lt = match[1],
          pvd = caml_call2(p, v, d),
          match$0 = partition(p, r),
          rf = match$0[2],
          rt = match$0[1];
         if(pvd){
          var _s_ = concat(lf, rf);
          return [0, join(lt, v, d, rt), _s_];
         }
         var _t_ = join(lf, v, d, rf);
         return [0, concat(lt, rt), _t_];
        }
        function cons_enum(m, e){
         var m$0 = m, e$0 = e;
         for(;;){
          if(! m$0) return e$0;
          var
           r = m$0[4],
           d = m$0[3],
           v = m$0[2],
           l = m$0[1],
           e$1 = [0, v, d, r, e$0];
          m$0 = l;
          e$0 = e$1;
         }
        }
        function compare(cmp, m1, m2){
         var
          e2$2 = cons_enum(m2, 0),
          e1$2 = cons_enum(m1, 0),
          e1 = e1$2,
          e2 = e2$2;
         for(;;){
          if(! e1) return e2 ? -1 : 0;
          if(! e2) return 1;
          var
           e2$0 = e2[4],
           r2 = e2[3],
           d2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[4],
           r1 = e1[3],
           d1 = e1[2],
           v1 = e1[1],
           c = caml_call2(Ord[1], v1, v2);
          if(0 !== c) return c;
          var c$0 = caml_call2(cmp, d1, d2);
          if(0 !== c$0) return c$0;
          var e2$1 = cons_enum(r2, e2$0), e1$1 = cons_enum(r1, e1$0);
          e1 = e1$1;
          e2 = e2$1;
         }
        }
        function equal(cmp, m1, m2){
         var
          e2$2 = cons_enum(m2, 0),
          e1$2 = cons_enum(m1, 0),
          e1 = e1$2,
          e2 = e2$2;
         for(;;){
          if(! e1) return e2 ? 0 : 1;
          if(! e2) return 0;
          var
           e2$0 = e2[4],
           r2 = e2[3],
           d2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[4],
           r1 = e1[3],
           d1 = e1[2],
           v1 = e1[1],
           _p_ = 0 === caml_call2(Ord[1], v1, v2) ? 1 : 0;
          if(_p_){
           var _q_ = caml_call2(cmp, d1, d2);
           if(_q_){
            var e2$1 = cons_enum(r2, e2$0), e1$1 = cons_enum(r1, e1$0);
            e1 = e1$1;
            e2 = e2$1;
            continue;
           }
           var _r_ = _q_;
          }
          else
           var _r_ = _p_;
          return _r_;
         }
        }
        function cardinal(param){
         if(! param) return 0;
         var r = param[4], l = param[1], _o_ = cardinal(r);
         return (cardinal(l) + 1 | 0) + _o_ | 0;
        }
        function bindings_aux(accu, param){
         var accu$0 = accu, param$0 = param;
         for(;;){
          if(! param$0) return accu$0;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           accu$1 = [0, [0, v, d], bindings_aux(accu$0, r)];
          accu$0 = accu$1;
          param$0 = l;
         }
        }
        function bindings(s){return bindings_aux(0, s);}
        function add_seq(i, m){
         return caml_call3
                 (Stdlib_seq[9],
                  function(m, param){
                   var v = param[2], k = param[1];
                   return add(k, v, m);
                  },
                  m,
                  i);
        }
        function of_seq(i){return add_seq(i, empty);}
        function seq_of_enum(c, param){
         if(! c) return 0;
         var
          rest = c[4],
          t = c[3],
          v = c[2],
          k = c[1],
          _m_ = cons_enum(t, rest);
         return [0, [0, k, v], function(_n_){return seq_of_enum(_m_, _n_);}];
        }
        function to_seq(m){
         var _k_ = cons_enum(m, 0);
         return function(_l_){return seq_of_enum(_k_, _l_);};
        }
        function snoc_enum(s, e){
         var s$0 = s, e$0 = e;
         for(;;){
          if(! s$0) return e$0;
          var
           r = s$0[4],
           d = s$0[3],
           v = s$0[2],
           l = s$0[1],
           e$1 = [0, v, d, l, e$0];
          s$0 = r;
          e$0 = e$1;
         }
        }
        function rev_seq_of_enum(c, param){
         if(! c) return 0;
         var
          rest = c[4],
          t = c[3],
          v = c[2],
          k = c[1],
          _i_ = snoc_enum(t, rest);
         return [0,
                 [0, k, v],
                 function(_j_){return rev_seq_of_enum(_i_, _j_);}];
        }
        function to_rev_seq(c){
         var _g_ = snoc_enum(c, 0);
         return function(_h_){return rev_seq_of_enum(_g_, _h_);};
        }
        function to_seq_from(low, m){
         a:
         {
          b:
          {
           var m$0 = m, c = 0;
           for(;;){
            if(! m$0) break;
            var
             r = m$0[4],
             d = m$0[3],
             v = m$0[2],
             l = m$0[1],
             n = caml_call2(Ord[1], v, low);
            if(0 === n) break b;
            if(0 <= n){
             var c$0 = [0, v, d, r, c];
             m$0 = l;
             c = c$0;
            }
            else
             m$0 = r;
           }
           var _e_ = c;
           break a;
          }
          var _e_ = [0, v, d, r, c];
         }
         return function(_f_){return seq_of_enum(_e_, _f_);};
        }
        return [0,
                empty,
                is_empty,
                mem,
                add,
                update,
                singleton,
                remove,
                merge,
                union,
                compare,
                equal,
                iter,
                fold,
                for_all,
                exists,
                filter,
                filter_map,
                partition,
                cardinal,
                bindings,
                min_binding,
                min_binding_opt,
                max_binding,
                max_binding_opt,
                min_binding,
                min_binding_opt,
                split,
                find,
                find_opt,
                find_first,
                find_first_opt,
                find_last,
                find_last_opt,
                map,
                mapi,
                to_seq,
                to_rev_seq,
                to_seq_from,
                add_seq,
                of_seq];
       }];
   runtime.caml_register_global(11, Stdlib_map, "Stdlib__map");
   return;
  }
  (globalThis));

//# 7937 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_seq = global_data.Stdlib__seq,
    Stdlib_list = global_data.Stdlib__list,
    Empty = [248, "Stdlib.Stack.Empty", runtime.caml_fresh_oo_id(0)];
   function create(param){return [0, 0, 0];}
   function clear(s){s[1] = 0; s[2] = 0; return 0;}
   function copy(s){return [0, s[1], s[2]];}
   function push(x, s){s[1] = [0, x, s[1]]; s[2] = s[2] + 1 | 0; return 0;}
   function pop(s){
    var match = s[1];
    if(! match) throw caml_maybe_attach_backtrace(Empty, 1);
    var tl = match[2], hd = match[1];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
    return hd;
   }
   function pop_opt(s){
    var match = s[1];
    if(! match) return 0;
    var tl = match[2], hd = match[1];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
    return [0, hd];
   }
   function top(s){
    var match = s[1];
    if(! match) throw caml_maybe_attach_backtrace(Empty, 1);
    var hd = match[1];
    return hd;
   }
   function top_opt(s){
    var match = s[1];
    if(! match) return 0;
    var hd = match[1];
    return [0, hd];
   }
   function is_empty(s){return 0 === s[1] ? 1 : 0;}
   function length(s){return s[2];}
   function iter(f, s){return caml_call2(Stdlib_list[17], f, s[1]);}
   function fold(f, acc, s){return caml_call3(Stdlib_list[25], f, acc, s[1]);}
   function to_seq(s){return caml_call1(Stdlib_list[61], s[1]);}
   function add_seq(q, i){
    return caml_call2(Stdlib_seq[10], function(x){return push(x, q);}, i);
   }
   function of_seq(g){var s = create(0); add_seq(s, g); return s;}
   var
    Stdlib_stack =
      [0,
       Empty,
       create,
       push,
       pop,
       pop_opt,
       top,
       top_opt,
       clear,
       copy,
       is_empty,
       length,
       iter,
       fold,
       to_seq,
       add_seq,
       of_seq];
   runtime.caml_register_global(3, Stdlib_stack, "Stdlib__stack");
   return;
  }
  (globalThis));

//# 8030 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_seq = global_data.Stdlib__seq,
    Empty = [248, "Stdlib.Queue.Empty", runtime.caml_fresh_oo_id(0)];
   function create(param){return [0, 0, 0, 0];}
   function clear(q){q[1] = 0; q[2] = 0; q[3] = 0; return 0;}
   function add(x, q){
    var cell = [0, x, 0], match = q[3];
    return match
            ? (q[1] = q[1] + 1 | 0, match[2] = cell, q[3] = cell, 0)
            : (q[1] = 1, q[2] = cell, q[3] = cell, 0);
   }
   function peek(q){
    var match = q[2];
    if(! match) throw caml_maybe_attach_backtrace(Empty, 1);
    var content = match[1];
    return content;
   }
   function peek_opt(q){
    var match = q[2];
    if(! match) return 0;
    var content = match[1];
    return [0, content];
   }
   function take(q){
    var _f_ = q[2];
    if(! _f_) throw caml_maybe_attach_backtrace(Empty, 1);
    var content = _f_[1];
    if(_f_[2]){
     var next = _f_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
     return content;
    }
    clear(q);
    return content;
   }
   function take_opt(q){
    var _e_ = q[2];
    if(! _e_) return 0;
    var content = _e_[1];
    if(_e_[2]){
     var next = _e_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
     return [0, content];
    }
    clear(q);
    return [0, content];
   }
   function copy(q){
    var cell$0 = q[2], q_res = [0, q[1], 0, 0], prev = 0, cell = cell$0;
    for(;;){
     if(! cell){q_res[3] = prev; return q_res;}
     var content = cell[1], next = cell[2], prev$0 = [0, content, 0];
     if(prev) prev[2] = prev$0; else q_res[2] = prev$0;
     prev = prev$0;
     cell = next;
    }
   }
   function is_empty(q){return 0 === q[1] ? 1 : 0;}
   function length(q){return q[1];}
   function iter(f, q){
    var cell$0 = q[2], cell = cell$0;
    for(;;){
     if(! cell) return 0;
     var content = cell[1], next = cell[2];
     caml_call1(f, content);
     cell = next;
    }
   }
   function fold(f, accu$1, q){
    var cell$0 = q[2], accu = accu$1, cell = cell$0;
    for(;;){
     if(! cell) return accu;
     var
      content = cell[1],
      next = cell[2],
      accu$0 = caml_call2(f, accu, content);
     accu = accu$0;
     cell = next;
    }
   }
   function transfer(q1, q2){
    var _d_ = 0 < q1[1] ? 1 : 0;
    if(! _d_) return _d_;
    var match = q2[3];
    return match
            ? (q2
               [1]
              = q2[1] + q1[1] | 0,
              match[2] = q1[2],
              q2[3] = q1[3],
              clear(q1))
            : (q2[1] = q1[1], q2[2] = q1[2], q2[3] = q1[3], clear(q1));
   }
   function to_seq(q){
    function aux(c, param){
     if(! c) return 0;
     var x = c[1], next = c[2];
     return [0, x, function(_c_){return aux(next, _c_);}];
    }
    var _a_ = q[2];
    return function(_b_){return aux(_a_, _b_);};
   }
   function add_seq(q, i){
    return caml_call2(Stdlib_seq[10], function(x){return add(x, q);}, i);
   }
   function of_seq(g){var q = create(0); add_seq(q, g); return q;}
   var
    Stdlib_queue =
      [0,
       Empty,
       create,
       add,
       add,
       take,
       take_opt,
       take,
       peek,
       peek_opt,
       peek,
       clear,
       copy,
       is_empty,
       length,
       iter,
       fold,
       transfer,
       to_seq,
       add_seq,
       of_seq];
   runtime.caml_register_global(2, Stdlib_queue, "Stdlib__queue");
   return;
  }
  (globalThis));

//# 8661 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_buffer_ml = "buffer.ml",
    caml_blit_string = runtime.caml_blit_string,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_sys = global_data.Stdlib__sys,
    Stdlib_seq = global_data.Stdlib__seq,
    Stdlib = global_data.Stdlib,
    Stdlib_string = global_data.Stdlib__string,
    Assert_failure = global_data.Assert_failure,
    Stdlib_bytes = global_data.Stdlib__bytes,
    Stdlib_uchar = global_data.Stdlib__uchar,
    cst_Buffer_sub = "Buffer.sub",
    cst_Buffer_blit = "Buffer.blit",
    cst_Buffer_nth = "Buffer.nth",
    _a_ = [0, cst_buffer_ml, 94, 2],
    _b_ = [0, cst_buffer_ml, 93, 2],
    cst_Buffer_add_cannot_grow_buf = "Buffer.add: cannot grow buffer",
    _c_ = [0, cst_buffer_ml, 171, 8],
    _d_ = [0, cst_buffer_ml, 138, 19],
    _e_ = [0, cst_buffer_ml, 192, 8],
    _f_ = [0, cst_buffer_ml, 174, 19],
    _g_ = [0, cst_buffer_ml, 213, 8],
    _h_ = [0, cst_buffer_ml, 195, 19],
    cst_Buffer_add_substring_add_s = "Buffer.add_substring/add_subbytes",
    _i_ = [0, cst_buffer_ml, 263, 2],
    cst_Buffer_add_channel = "Buffer.add_channel",
    _j_ = [0, cst_buffer_ml, 282, 9],
    cst_Buffer_truncate = "Buffer.truncate",
    dummy = 0;
   function create(n){
    var
     n$0 = 1 <= n ? n : 1,
     n$1 = Stdlib_sys[12] < n$0 ? Stdlib_sys[12] : n$0,
     s = caml_create_bytes(n$1);
    return [0, s, 0, n$1, s];
   }
   function contents(b){return caml_call3(Stdlib_bytes[8], b[1], 0, b[2]);}
   function to_bytes(b){return caml_call3(Stdlib_bytes[7], b[1], 0, b[2]);}
   function sub(b, ofs, len){
    if(0 <= ofs && 0 <= len && (b[2] - len | 0) >= ofs)
     return caml_call3(Stdlib_bytes[8], b[1], ofs, len);
    return caml_call1(Stdlib[1], cst_Buffer_sub);
   }
   function blit(src, srcoff, dst, dstoff, len){
    if
     (0 <= len
      &&
       0 <= srcoff
       &&
        (src[2] - len | 0) >= srcoff
        && 0 <= dstoff && (caml_ml_bytes_length(dst) - len | 0) >= dstoff)
     return runtime.caml_blit_bytes(src[1], srcoff, dst, dstoff, len);
    return caml_call1(Stdlib[1], cst_Buffer_blit);
   }
   function nth(b, ofs){
    if(0 <= ofs && b[2] > ofs) return caml_bytes_unsafe_get(b[1], ofs);
    return caml_call1(Stdlib[1], cst_Buffer_nth);
   }
   function length(b){return b[2];}
   function clear(b){b[2] = 0; return 0;}
   function reset(b){
    b[2] = 0;
    b[1] = b[4];
    b[3] = caml_ml_bytes_length(b[1]);
    return 0;
   }
   function resize(b, more){
    var old_pos = b[2], old_len = b[3], new_len = [0, old_len];
    for(;;){
     if(new_len[1] >= (old_pos + more | 0)) break;
     new_len[1] = 2 * new_len[1] | 0;
    }
    if(Stdlib_sys[12] < new_len[1])
     if((old_pos + more | 0) <= Stdlib_sys[12])
      new_len[1] = Stdlib_sys[12];
     else
      caml_call1(Stdlib[2], cst_Buffer_add_cannot_grow_buf);
    var new_buffer = caml_create_bytes(new_len[1]);
    caml_call5(Stdlib_bytes[11], b[1], 0, new_buffer, 0, b[2]);
    b[1] = new_buffer;
    b[3] = new_len[1];
    if((b[2] + more | 0) > b[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    if((old_pos + more | 0) <= b[3]) return;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function add_char(b, c){
    var pos = b[2];
    if(b[3] <= pos) resize(b, 1);
    caml_bytes_unsafe_set(b[1], pos, c);
    b[2] = pos + 1 | 0;
    return 0;
   }
   function add_utf_8_uchar(b, u){
    var u$0 = caml_call1(Stdlib_uchar[10], u);
    if(0 > u$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
    if(127 >= u$0) return add_char(b, u$0);
    if(2047 >= u$0){
     var pos$1 = b[2];
     if(b[3] < (pos$1 + 2 | 0)) resize(b, 2);
     caml_bytes_unsafe_set(b[1], pos$1, 192 | u$0 >>> 6 | 0);
     caml_bytes_unsafe_set(b[1], pos$1 + 1 | 0, 128 | u$0 & 63);
     b[2] = pos$1 + 2 | 0;
     return 0;
    }
    if(65535 < u$0){
     if(1114111 < u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
     var pos = b[2];
     if(b[3] < (pos + 4 | 0)) resize(b, 4);
     caml_bytes_unsafe_set(b[1], pos, 240 | u$0 >>> 18 | 0);
     caml_bytes_unsafe_set(b[1], pos + 1 | 0, 128 | (u$0 >>> 12 | 0) & 63);
     caml_bytes_unsafe_set(b[1], pos + 2 | 0, 128 | (u$0 >>> 6 | 0) & 63);
     caml_bytes_unsafe_set(b[1], pos + 3 | 0, 128 | u$0 & 63);
     b[2] = pos + 4 | 0;
     return 0;
    }
    var pos$0 = b[2];
    if(b[3] < (pos$0 + 3 | 0)) resize(b, 3);
    caml_bytes_unsafe_set(b[1], pos$0, 224 | u$0 >>> 12 | 0);
    caml_bytes_unsafe_set(b[1], pos$0 + 1 | 0, 128 | (u$0 >>> 6 | 0) & 63);
    caml_bytes_unsafe_set(b[1], pos$0 + 2 | 0, 128 | u$0 & 63);
    b[2] = pos$0 + 3 | 0;
    return 0;
   }
   function add_utf_16be_uchar(b, u){
    var u$0 = caml_call1(Stdlib_uchar[10], u);
    if(0 > u$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
    if(65535 < u$0){
     if(1114111 < u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023,
      pos = b[2];
     if(b[3] < (pos + 4 | 0)) resize(b, 4);
     caml_bytes_unsafe_set(b[1], pos, hi >>> 8 | 0);
     caml_bytes_unsafe_set(b[1], pos + 1 | 0, hi & 255);
     caml_bytes_unsafe_set(b[1], pos + 2 | 0, lo >>> 8 | 0);
     caml_bytes_unsafe_set(b[1], pos + 3 | 0, lo & 255);
     b[2] = pos + 4 | 0;
     return 0;
    }
    var pos$0 = b[2];
    if(b[3] < (pos$0 + 2 | 0)) resize(b, 2);
    caml_bytes_unsafe_set(b[1], pos$0, u$0 >>> 8 | 0);
    caml_bytes_unsafe_set(b[1], pos$0 + 1 | 0, u$0 & 255);
    b[2] = pos$0 + 2 | 0;
    return 0;
   }
   function add_utf_16le_uchar(b, u){
    var u$0 = caml_call1(Stdlib_uchar[10], u);
    if(0 > u$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
    if(65535 < u$0){
     if(1114111 < u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023,
      pos = b[2];
     if(b[3] < (pos + 4 | 0)) resize(b, 4);
     caml_bytes_unsafe_set(b[1], pos, hi & 255);
     caml_bytes_unsafe_set(b[1], pos + 1 | 0, hi >>> 8 | 0);
     caml_bytes_unsafe_set(b[1], pos + 2 | 0, lo & 255);
     caml_bytes_unsafe_set(b[1], pos + 3 | 0, lo >>> 8 | 0);
     b[2] = pos + 4 | 0;
     return 0;
    }
    var pos$0 = b[2];
    if(b[3] < (pos$0 + 2 | 0)) resize(b, 2);
    caml_bytes_unsafe_set(b[1], pos$0, u$0 & 255);
    caml_bytes_unsafe_set(b[1], pos$0 + 1 | 0, u$0 >>> 8 | 0);
    b[2] = pos$0 + 2 | 0;
    return 0;
   }
   function add_substring(b, s, offset, len){
    var _z_ = offset < 0 ? 1 : 0;
    if(_z_)
     var _A_ = _z_;
    else
     var
      _B_ = len < 0 ? 1 : 0,
      _A_ = _B_ || ((caml_ml_string_length(s) - len | 0) < offset ? 1 : 0);
    if(_A_) caml_call1(Stdlib[1], cst_Buffer_add_substring_add_s);
    var new_position = b[2] + len | 0;
    if(b[3] < new_position) resize(b, len);
    caml_blit_string(s, offset, b[1], b[2], len);
    b[2] = new_position;
    return 0;
   }
   function add_subbytes(b, s, offset, len){
    return add_substring(b, caml_call1(Stdlib_bytes[42], s), offset, len);
   }
   function add_string(b, s){
    var len = caml_ml_string_length(s), new_position = b[2] + len | 0;
    if(b[3] < new_position) resize(b, len);
    caml_blit_string(s, 0, b[1], b[2], len);
    b[2] = new_position;
    return 0;
   }
   function add_bytes(b, s){
    return add_string(b, caml_call1(Stdlib_bytes[42], s));
   }
   function add_buffer(b, bs){return add_subbytes(b, bs[1], 0, bs[2]);}
   function add_channel(b, ic, to_read$1){
    var
     _x_ = to_read$1 < 0 ? 1 : 0,
     _y_ = _x_ || (Stdlib_sys[12] < to_read$1 ? 1 : 0);
    if(_y_) caml_call1(Stdlib[1], cst_Buffer_add_channel);
    if(b[3] < (b[2] + to_read$1 | 0)) resize(b, to_read$1);
    var
     ofs$1 = b[2],
     buf = b[1],
     already_read = 0,
     ofs = ofs$1,
     to_read = to_read$1;
    for(;;){
     if(0 !== to_read){
      var r = caml_call4(Stdlib[84], ic, buf, ofs, to_read);
      if(0 !== r){
       var
        already_read$0 = already_read + r | 0,
        ofs$0 = ofs + r | 0,
        to_read$0 = to_read - r | 0;
       already_read = already_read$0;
       ofs = ofs$0;
       to_read = to_read$0;
       continue;
      }
     }
     if((b[2] + already_read | 0) > b[3])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
     b[2] = b[2] + already_read | 0;
     if(already_read < to_read$1)
      throw caml_maybe_attach_backtrace(Stdlib[12], 1);
     return 0;
    }
   }
   function output_buffer(oc, b){
    return caml_call4(Stdlib[68], oc, b[1], 0, b[2]);
   }
   function add_substitute(b, f, s){
    var lim$1 = caml_ml_string_length(s), previous = 32, i$4 = 0;
    for(;;){
     if(i$4 >= lim$1){
      var _w_ = 92 === previous ? 1 : 0;
      return _w_ ? add_char(b, previous) : _w_;
     }
     var previous$0 = caml_string_get(s, i$4);
     if(36 === previous$0)
      if(92 === previous){
       add_char(b, previous$0);
       var i$5 = i$4 + 1 | 0;
       previous = 32;
       i$4 = i$5;
      }
      else{
       var start$0 = i$4 + 1 | 0;
       if(lim$1 <= start$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
       var opening = caml_string_get(s, start$0);
       a:
       {
        if(40 !== opening && 123 !== opening){
         var start = start$0 + 1 | 0, lim$0 = caml_ml_string_length(s);
         b:
         {
          c:
          {
           d:
           {
            var i$2 = start;
            for(;;){
             if(lim$0 <= i$2) break c;
             var match = caml_string_get(s, i$2);
             if(91 <= match){
              if(97 <= match){
               if(123 <= match) break d;
              }
              else if(95 !== match) break d;
             }
             else
              if(58 <= match){
               if(65 > match) break;
              }
              else if(48 > match) break d;
             var i$3 = i$2 + 1 | 0;
             i$2 = i$3;
            }
           }
           var stop$0 = i$2;
           break b;
          }
          var stop$0 = lim$0;
         }
         var
          match$0 =
            [0,
             caml_call3(Stdlib_string[9], s, start$0, stop$0 - start$0 | 0),
             stop$0];
         break a;
        }
        var new_start = start$0 + 1 | 0, k$2 = 0;
        if(40 === opening)
         var closing = 41;
        else{
         if(123 !== opening)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
         var closing = 125;
        }
        var lim = caml_ml_string_length(s), k = k$2, stop = new_start;
        for(;;){
         if(lim <= stop) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
         if(caml_string_get(s, stop) === opening){
          var i = stop + 1 | 0, k$0 = k + 1 | 0;
          k = k$0;
          stop = i;
         }
         else if(caml_string_get(s, stop) === closing){
          if(0 === k) break;
          var i$0 = stop + 1 | 0, k$1 = k - 1 | 0;
          k = k$1;
          stop = i$0;
         }
         else{var i$1 = stop + 1 | 0; stop = i$1;}
        }
        var
         match$0 =
           [0,
            caml_call3
             (Stdlib_string[9], s, new_start, (stop - start$0 | 0) - 1 | 0),
            stop + 1 | 0];
       }
       var next_i = match$0[2], ident = match$0[1];
       add_string(b, caml_call1(f, ident));
       previous = 32;
       i$4 = next_i;
      }
     else if(92 === previous){
      add_char(b, 92);
      add_char(b, previous$0);
      var i$6 = i$4 + 1 | 0;
      previous = 32;
      i$4 = i$6;
     }
     else if(92 === previous$0){
      var i$7 = i$4 + 1 | 0;
      previous = previous$0;
      i$4 = i$7;
     }
     else{
      add_char(b, previous$0);
      var i$8 = i$4 + 1 | 0;
      previous = previous$0;
      i$4 = i$8;
     }
    }
   }
   function truncate(b, len){
    if(0 <= len && b[2] >= len){b[2] = len; return 0;}
    return caml_call1(Stdlib[1], cst_Buffer_truncate);
   }
   function to_seq(b){
    function aux(i, param){
     if(b[2] <= i) return 0;
     var x = caml_bytes_unsafe_get(b[1], i), _u_ = i + 1 | 0;
     return [0, x, function(_v_){return aux(_u_, _v_);}];
    }
    var _s_ = 0;
    return function(_t_){return aux(_s_, _t_);};
   }
   function to_seqi(b){
    function aux(i, param){
     if(b[2] <= i) return 0;
     var x = caml_bytes_unsafe_get(b[1], i), _q_ = i + 1 | 0;
     return [0, [0, i, x], function(_r_){return aux(_q_, _r_);}];
    }
    var _o_ = 0;
    return function(_p_){return aux(_o_, _p_);};
   }
   function add_seq(b, seq){
    return caml_call2
            (Stdlib_seq[10], function(_n_){return add_char(b, _n_);}, seq);
   }
   function of_seq(i){var b = create(32); add_seq(b, i); return b;}
   function add_int8(b, x){
    var new_position = b[2] + 1 | 0;
    if(b[3] < new_position) resize(b, 1);
    caml_bytes_unsafe_set(b[1], b[2], x);
    b[2] = new_position;
    return 0;
   }
   function add_int16_ne(b, x){
    var new_position = b[2] + 2 | 0;
    if(b[3] < new_position) resize(b, 2);
    runtime.caml_bytes_set16(b[1], b[2], x);
    b[2] = new_position;
    return 0;
   }
   function add_int32_ne(b, x){
    var new_position = b[2] + 4 | 0;
    if(b[3] < new_position) resize(b, 4);
    runtime.caml_bytes_set32(b[1], b[2], x);
    b[2] = new_position;
    return 0;
   }
   function add_int64_ne(b, x){
    var new_position = b[2] + 8 | 0;
    if(b[3] < new_position) resize(b, 8);
    runtime.caml_bytes_set64(b[1], b[2], x);
    b[2] = new_position;
    return 0;
   }
   function add_int16_le(b, x){
    var _m_ = Stdlib_sys[11] ? caml_bswap16(x) : x;
    return add_int16_ne(b, _m_);
   }
   function add_int16_be(b, x){
    var x$0 = Stdlib_sys[11] ? x : caml_bswap16(x);
    return add_int16_ne(b, x$0);
   }
   function add_int32_le(b, x){
    var _l_ = Stdlib_sys[11] ? caml_int32_bswap(x) : x;
    return add_int32_ne(b, _l_);
   }
   function add_int32_be(b, x){
    var x$0 = Stdlib_sys[11] ? x : caml_int32_bswap(x);
    return add_int32_ne(b, x$0);
   }
   function add_int64_le(b, x){
    var _k_ = Stdlib_sys[11] ? caml_int64_bswap(x) : x;
    return add_int64_ne(b, _k_);
   }
   function add_int64_be(b, x){
    var x$0 = Stdlib_sys[11] ? x : caml_int64_bswap(x);
    return add_int64_ne(b, x$0);
   }
   var
    Stdlib_buffer =
      [0,
       create,
       contents,
       to_bytes,
       sub,
       blit,
       nth,
       length,
       clear,
       reset,
       add_char,
       add_utf_8_uchar,
       add_utf_16le_uchar,
       add_utf_16be_uchar,
       add_string,
       add_bytes,
       add_substring,
       add_subbytes,
       add_substitute,
       add_buffer,
       add_channel,
       output_buffer,
       truncate,
       to_seq,
       to_seqi,
       add_seq,
       of_seq,
       add_int8,
       add_int8,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int32_ne,
       add_int32_be,
       add_int32_le,
       add_int64_ne,
       add_int64_be,
       add_int64_le];
   runtime.caml_register_global(24, Stdlib_buffer, "Stdlib__buffer");
   return;
  }
  (globalThis));

//# 9192 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$43 = "",
    cst_and = " and ",
    cst_Li$3 = "%Li",
    cst_i$3 = "%i",
    cst_li$3 = "%li",
    cst_ni$3 = "%ni",
    cst_u$0 = "%u",
    cst$42 = "' '",
    cst$41 = "'#'",
    cst$39 = "'*'",
    cst$40 = "'+'",
    cst$44 = ", ",
    cst_0$3 = "0",
    cst_at_character_number = ": at character number ",
    cst$38 = "@[",
    cst$37 = "@{",
    cst_bad_input_format_type_mism =
      "bad input: format type mismatch between ",
    cst_bad_input_format_type_mism$0 =
      "bad input: format type mismatch between %S and %S",
    cst_camlinternalFormat_ml = "camlinternalFormat.ml",
    cst_invalid_format = "invalid format ",
    cst_precision$3 = "precision",
    caml_blit_string = runtime.caml_blit_string,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_format_float = runtime.caml_format_float,
    caml_format_int = runtime.caml_format_int,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_notequal = runtime.caml_notequal,
    caml_string_get = runtime.caml_string_get,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$9 = "%{",
    cst$10 = "%}",
    cst$11 = "%(",
    cst$12 = "%)",
    cst$13 = "%?",
    cst$18 = cst$37,
    cst$19 = cst$38,
    cst$20 = cst$37,
    cst$21 = cst$38,
    cst$22 = cst$37,
    cst$23 = cst$38,
    cst$26 = cst$39,
    cst$24 = "'-'",
    cst$25 = cst$39,
    cst$27 = cst$40,
    cst$28 = cst$41,
    cst$29 = cst$42,
    cst$30 = cst$40,
    cst$31 = "'_'",
    sub_format = [0, 0, cst$43],
    formatting_lit = [0, "@;", 1, 0],
    cst$35 = cst$41,
    cst$32 = cst$40,
    cst$33 = cst$40,
    cst$34 = cst$42,
    cst$36 = cst$40,
    cst_unexpected_end_of_format = "unexpected end of format",
    cst$17 = ".",
    cst$14 = "%!",
    cst$15 = cst$37,
    cst$16 = cst$38,
    cst$8 = "%%",
    cst$0 = "@]",
    cst$1 = "@}",
    cst$2 = "@?",
    cst$3 = "@\n",
    cst$4 = "@.",
    cst$5 = "@@",
    cst$6 = "@%",
    cst$7 = "@",
    cst = ".*",
    Assert_failure = global_data.Assert_failure,
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Stdlib = global_data.Stdlib,
    Stdlib_buffer = global_data.Stdlib__buffer,
    Stdlib_string = global_data.Stdlib__string,
    Stdlib_sys = global_data.Stdlib__sys,
    Stdlib_char = global_data.Stdlib__char,
    Stdlib_bytes = global_data.Stdlib__bytes,
    Stdlib_int = global_data.Stdlib__int,
    _a_ = [0, 0, 0],
    cst_c = "%c",
    cst_s = "%s",
    cst_i = cst_i$3,
    cst_li = cst_li$3,
    cst_ni = cst_ni$3,
    cst_Li = cst_Li$3,
    cst_f = "%f",
    cst_B = "%B",
    cst_a = "%a",
    cst_t = "%t",
    cst_r = "%r",
    cst_r$0 = "%_r",
    cst_0c = "0c",
    _b_ = [0, cst_camlinternalFormat_ml, 850, 23],
    _c_ = [0, cst_camlinternalFormat_ml, 837, 26],
    _d_ = [0, cst_camlinternalFormat_ml, 847, 28],
    _e_ = [0, cst_camlinternalFormat_ml, 815, 21],
    _f_ = [0, cst_camlinternalFormat_ml, 819, 21],
    _g_ = [0, cst_camlinternalFormat_ml, 823, 19],
    _h_ = [0, cst_camlinternalFormat_ml, 827, 22],
    _i_ = [0, cst_camlinternalFormat_ml, 832, 30],
    _j_ = [0, cst_camlinternalFormat_ml, 851, 23],
    _k_ = [0, cst_camlinternalFormat_ml, 836, 26],
    _l_ = [0, cst_camlinternalFormat_ml, 846, 28],
    _m_ = [0, cst_camlinternalFormat_ml, 814, 21],
    _n_ = [0, cst_camlinternalFormat_ml, 818, 21],
    _o_ = [0, cst_camlinternalFormat_ml, 822, 19],
    _p_ = [0, cst_camlinternalFormat_ml, 826, 22],
    _q_ = [0, cst_camlinternalFormat_ml, 831, 30];
   function create_char_set(param){return caml_call2(Stdlib_bytes[1], 32, 0);}
   function add_in_char_set(char_set, c){
    var
     str_ind = c >>> 3 | 0,
     mask = 1 << (c & 7),
     _cU_ = runtime.caml_bytes_get(char_set, str_ind) | mask;
    return caml_bytes_set(char_set, str_ind, caml_call1(Stdlib[29], _cU_));
   }
   function freeze_char_set(char_set){
    return caml_call1(Stdlib_bytes[6], char_set);
   }
   function rev_char_set(char_set){
    var char_set$0 = create_char_set(0), i = 0;
    for(;;){
     var _cS_ = caml_string_get(char_set, i) ^ 255;
     caml_bytes_set(char_set$0, i, caml_call1(Stdlib[29], _cS_));
     var _cT_ = i + 1 | 0;
     if(31 === i) return caml_call1(Stdlib_bytes[42], char_set$0);
     i = _cT_;
    }
   }
   function is_in_char_set(char_set, c){
    var str_ind = c >>> 3 | 0, mask = 1 << (c & 7);
    return 0 !== (caml_string_get(char_set, str_ind) & mask) ? 1 : 0;
   }
   function pad_of_pad_opt(pad_opt){
    if(! pad_opt) return 0;
    var width = pad_opt[1];
    return [0, 1, width];
   }
   function param_format_of_ignored_format(ign, fmt){
    if(typeof ign === "number")
     switch(ign){
       case 0:
        return [0, [0, fmt]];
       case 1:
        return [0, [1, fmt]];
       case 2:
        return [0, [19, fmt]];
       default: return [0, [22, fmt]];
     }
    switch(ign[0]){
      case 0:
       var pad_opt = ign[1]; return [0, [2, pad_of_pad_opt(pad_opt), fmt]];
      case 1:
       var pad_opt$0 = ign[1];
       return [0, [3, pad_of_pad_opt(pad_opt$0), fmt]];
      case 2:
       var pad_opt$1 = ign[2], iconv = ign[1];
       return [0, [4, iconv, pad_of_pad_opt(pad_opt$1), 0, fmt]];
      case 3:
       var pad_opt$2 = ign[2], iconv$0 = ign[1];
       return [0, [5, iconv$0, pad_of_pad_opt(pad_opt$2), 0, fmt]];
      case 4:
       var pad_opt$3 = ign[2], iconv$1 = ign[1];
       return [0, [6, iconv$1, pad_of_pad_opt(pad_opt$3), 0, fmt]];
      case 5:
       var pad_opt$4 = ign[2], iconv$2 = ign[1];
       return [0, [7, iconv$2, pad_of_pad_opt(pad_opt$4), 0, fmt]];
      case 6:
       var prec_opt = ign[2], pad_opt$5 = ign[1];
       if(prec_opt)
        var ndec = prec_opt[1], _cR_ = [0, ndec];
       else
        var _cR_ = 0;
       return [0, [8, _a_, pad_of_pad_opt(pad_opt$5), _cR_, fmt]];
      case 7:
       var pad_opt$6 = ign[1];
       return [0, [9, pad_of_pad_opt(pad_opt$6), fmt]];
      case 8:
       var fmtty = ign[2], pad_opt$7 = ign[1];
       return [0, [13, pad_opt$7, fmtty, fmt]];
      case 9:
       var fmtty$0 = ign[2], pad_opt$8 = ign[1];
       return [0, [14, pad_opt$8, fmtty$0, fmt]];
      case 10:
       var char_set = ign[2], width_opt = ign[1];
       return [0, [20, width_opt, char_set, fmt]];
      default: var counter = ign[1]; return [0, [21, counter, fmt]];
    }
   }
   function default_float_precision(fconv){return 5 === fconv[2] ? 12 : -6;}
   function buffer_create(init_size){
    return [0, 0, caml_create_bytes(init_size)];
   }
   function buffer_check_size(buf, overhead){
    var
     len = runtime.caml_ml_bytes_length(buf[2]),
     min_len = buf[1] + overhead | 0;
    if(len < min_len){
     var
      new_len = caml_call2(Stdlib[17], len * 2 | 0, min_len),
      new_str = caml_create_bytes(new_len);
     caml_call5(Stdlib_bytes[11], buf[2], 0, new_str, 0, len);
     buf[2] = new_str;
    }
   }
   function buffer_add_char(buf, c){
    buffer_check_size(buf, 1);
    caml_bytes_set(buf[2], buf[1], c);
    buf[1] = buf[1] + 1 | 0;
   }
   function buffer_add_string(buf, s){
    var str_len = caml_ml_string_length(s);
    buffer_check_size(buf, str_len);
    caml_call5(Stdlib_string[32], s, 0, buf[2], buf[1], str_len);
    buf[1] = buf[1] + str_len | 0;
   }
   function buffer_contents(buf){
    return caml_call3(Stdlib_bytes[8], buf[2], 0, buf[1]);
   }
   function char_of_iconv(iconv){
    switch(iconv){
      case 6:
      case 7:
       return 120;
      case 8:
      case 9:
       return 88;
      case 10:
      case 11:
       return 111;
      case 12:
      case 15:
       return 117;
      case 0:
      case 1:
      case 2:
      case 13:
       return 100;
      default: return 105;
    }
   }
   function char_of_fconv(opt, fconv){
    if(opt) var sth = opt[1], cF = sth; else var cF = 70;
    switch(fconv[2]){
      case 0:
       return 102;
      case 1:
       return 101;
      case 2:
       return 69;
      case 3:
       return 103;
      case 4:
       return 71;
      case 5:
       return cF;
      case 6:
       return 104;
      case 7:
       return 72;
      default: return 70;
    }
   }
   function bprint_padty(buf, padty){
    switch(padty){
      case 0:
       return buffer_add_char(buf, 45);
      case 1:
       return;
      default: return buffer_add_char(buf, 48);
    }
   }
   function bprint_ignored_flag(buf, ign_flag){
    return ign_flag ? buffer_add_char(buf, 95) : ign_flag;
   }
   function bprint_pad_opt(buf, pad_opt){
    if(! pad_opt) return;
    var width = pad_opt[1];
    return buffer_add_string(buf, caml_call1(Stdlib_int[10], width));
   }
   function bprint_padding(buf, pad){
    if(typeof pad === "number") return;
    if(0 === pad[0]){
     var n = pad[2], padty = pad[1];
     bprint_padty(buf, padty);
     return buffer_add_string(buf, caml_call1(Stdlib_int[10], n));
    }
    var padty$0 = pad[1];
    bprint_padty(buf, padty$0);
    return buffer_add_char(buf, 42);
   }
   function bprint_precision(buf, prec){
    if(typeof prec !== "number"){
     var n = prec[1];
     buffer_add_char(buf, 46);
     return buffer_add_string(buf, caml_call1(Stdlib_int[10], n));
    }
    if(prec) return buffer_add_string(buf, cst);
   }
   function bprint_iconv_flag(buf, iconv){
    switch(iconv){
      case 1:
      case 4:
       return buffer_add_char(buf, 43);
      case 2:
      case 5:
       return buffer_add_char(buf, 32);
      case 7:
      case 9:
      case 11:
      case 13:
      case 14:
      case 15:
       return buffer_add_char(buf, 35);
      default: return;
    }
   }
   function bprint_altint_fmt(buf, ign_flag, iconv, pad, prec, c){
    buffer_add_char(buf, 37);
    bprint_ignored_flag(buf, ign_flag);
    bprint_iconv_flag(buf, iconv);
    bprint_padding(buf, pad);
    bprint_precision(buf, prec);
    buffer_add_char(buf, c);
    return buffer_add_char(buf, char_of_iconv(iconv));
   }
   function bprint_fconv_flag(buf, fconv){
    switch(fconv[1]){
      case 0: break;
      case 1:
       buffer_add_char(buf, 43); break;
      default: buffer_add_char(buf, 32);
    }
    if(8 <= fconv[2]) return buffer_add_char(buf, 35);
   }
   function string_of_formatting_lit(formatting_lit){
    if(typeof formatting_lit === "number")
     switch(formatting_lit){
       case 0:
        return cst$0;
       case 1:
        return cst$1;
       case 2:
        return cst$2;
       case 3:
        return cst$3;
       case 4:
        return cst$4;
       case 5:
        return cst$5;
       default: return cst$6;
     }
    switch(formatting_lit[0]){
      case 0:
       var str = formatting_lit[1]; return str;
      case 1:
       var str$0 = formatting_lit[1]; return str$0;
      default:
       var c = formatting_lit[1], _cQ_ = caml_call2(Stdlib_string[1], 1, c);
       return caml_call2(Stdlib[28], cst$7, _cQ_);
    }
   }
   function bprint_char_literal(buf, chr){
    return 37 === chr
            ? buffer_add_string(buf, cst$8)
            : buffer_add_char(buf, chr);
   }
   function bprint_string_literal(buf, str){
    var _cO_ = caml_ml_string_length(str) - 1 | 0, _cN_ = 0;
    if(_cO_ >= 0){
     var i = _cN_;
     for(;;){
      bprint_char_literal(buf, caml_string_get(str, i));
      var _cP_ = i + 1 | 0;
      if(_cO_ === i) break;
      i = _cP_;
     }
    }
   }
   function bprint_fmtty(buf, fmtty){
    var fmtty$0 = fmtty;
    for(;;){
     if(typeof fmtty$0 === "number") return;
     switch(fmtty$0[0]){
       case 0:
        var fmtty$1 = fmtty$0[1];
        buffer_add_string(buf, cst_c);
        fmtty$0 = fmtty$1;
        break;
       case 1:
        var fmtty$2 = fmtty$0[1];
        buffer_add_string(buf, cst_s);
        fmtty$0 = fmtty$2;
        break;
       case 2:
        var fmtty$3 = fmtty$0[1];
        buffer_add_string(buf, cst_i);
        fmtty$0 = fmtty$3;
        break;
       case 3:
        var fmtty$4 = fmtty$0[1];
        buffer_add_string(buf, cst_li);
        fmtty$0 = fmtty$4;
        break;
       case 4:
        var fmtty$5 = fmtty$0[1];
        buffer_add_string(buf, cst_ni);
        fmtty$0 = fmtty$5;
        break;
       case 5:
        var fmtty$6 = fmtty$0[1];
        buffer_add_string(buf, cst_Li);
        fmtty$0 = fmtty$6;
        break;
       case 6:
        var fmtty$7 = fmtty$0[1];
        buffer_add_string(buf, cst_f);
        fmtty$0 = fmtty$7;
        break;
       case 7:
        var fmtty$8 = fmtty$0[1];
        buffer_add_string(buf, cst_B);
        fmtty$0 = fmtty$8;
        break;
       case 8:
        var fmtty$9 = fmtty$0[2], sub_fmtty = fmtty$0[1];
        buffer_add_string(buf, cst$9);
        bprint_fmtty(buf, sub_fmtty);
        buffer_add_string(buf, cst$10);
        fmtty$0 = fmtty$9;
        break;
       case 9:
        var fmtty$10 = fmtty$0[3], sub_fmtty$0 = fmtty$0[1];
        buffer_add_string(buf, cst$11);
        bprint_fmtty(buf, sub_fmtty$0);
        buffer_add_string(buf, cst$12);
        fmtty$0 = fmtty$10;
        break;
       case 10:
        var fmtty$11 = fmtty$0[1];
        buffer_add_string(buf, cst_a);
        fmtty$0 = fmtty$11;
        break;
       case 11:
        var fmtty$12 = fmtty$0[1];
        buffer_add_string(buf, cst_t);
        fmtty$0 = fmtty$12;
        break;
       case 12:
        var fmtty$13 = fmtty$0[1];
        buffer_add_string(buf, cst$13);
        fmtty$0 = fmtty$13;
        break;
       case 13:
        var fmtty$14 = fmtty$0[1];
        buffer_add_string(buf, cst_r);
        fmtty$0 = fmtty$14;
        break;
       default:
        var fmtty$15 = fmtty$0[1];
        buffer_add_string(buf, cst_r$0);
        fmtty$0 = fmtty$15;
     }
    }
   }
   function int_of_custom_arity(param){
    if(! param) return 0;
    var x = param[1];
    return 1 + int_of_custom_arity(x) | 0;
   }
   function string_of_fmt(fmt){
    var buf = buffer_create(16);
    function fmtiter(fmt, ign_flag){
     var fmt$0 = fmt, ign_flag$0 = ign_flag;
     for(;;){
      if(typeof fmt$0 === "number") return;
      switch(fmt$0[0]){
        case 0:
         var rest = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 99);
         fmt$0 = rest;
         ign_flag$0 = 0;
         break;
        case 1:
         var rest$0 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 67);
         fmt$0 = rest$0;
         ign_flag$0 = 0;
         break;
        case 2:
         var rest$1 = fmt$0[2], pad = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_padding(buf, pad);
         buffer_add_char(buf, 115);
         fmt$0 = rest$1;
         ign_flag$0 = 0;
         break;
        case 3:
         var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_padding(buf, pad$0);
         buffer_add_char(buf, 83);
         fmt$0 = rest$2;
         ign_flag$0 = 0;
         break;
        case 4:
         var
          rest$3 = fmt$0[4],
          prec = fmt$0[3],
          pad$1 = fmt$0[2],
          iconv = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_iconv_flag(buf, iconv);
         bprint_padding(buf, pad$1);
         bprint_precision(buf, prec);
         buffer_add_char(buf, char_of_iconv(iconv));
         fmt$0 = rest$3;
         ign_flag$0 = 0;
         break;
        case 5:
         var
          rest$4 = fmt$0[4],
          prec$0 = fmt$0[3],
          pad$2 = fmt$0[2],
          iconv$0 = fmt$0[1];
         bprint_altint_fmt(buf, ign_flag$0, iconv$0, pad$2, prec$0, 108);
         fmt$0 = rest$4;
         ign_flag$0 = 0;
         break;
        case 6:
         var
          rest$5 = fmt$0[4],
          prec$1 = fmt$0[3],
          pad$3 = fmt$0[2],
          iconv$1 = fmt$0[1];
         bprint_altint_fmt(buf, ign_flag$0, iconv$1, pad$3, prec$1, 110);
         fmt$0 = rest$5;
         ign_flag$0 = 0;
         break;
        case 7:
         var
          rest$6 = fmt$0[4],
          prec$2 = fmt$0[3],
          pad$4 = fmt$0[2],
          iconv$2 = fmt$0[1];
         bprint_altint_fmt(buf, ign_flag$0, iconv$2, pad$4, prec$2, 76);
         fmt$0 = rest$6;
         ign_flag$0 = 0;
         break;
        case 8:
         var
          rest$7 = fmt$0[4],
          prec$3 = fmt$0[3],
          pad$5 = fmt$0[2],
          fconv = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_fconv_flag(buf, fconv);
         bprint_padding(buf, pad$5);
         bprint_precision(buf, prec$3);
         buffer_add_char(buf, char_of_fconv(0, fconv));
         fmt$0 = rest$7;
         ign_flag$0 = 0;
         break;
        case 9:
         var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_padding(buf, pad$6);
         buffer_add_char(buf, 66);
         fmt$0 = rest$8;
         ign_flag$0 = 0;
         break;
        case 10:
         var rest$9 = fmt$0[1];
         buffer_add_string(buf, cst$14);
         fmt$0 = rest$9;
         break;
        case 11:
         var rest$10 = fmt$0[2], str = fmt$0[1];
         bprint_string_literal(buf, str);
         fmt$0 = rest$10;
         break;
        case 12:
         var rest$11 = fmt$0[2], chr = fmt$0[1];
         bprint_char_literal(buf, chr);
         fmt$0 = rest$11;
         break;
        case 13:
         var rest$12 = fmt$0[3], fmtty = fmt$0[2], pad_opt = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_pad_opt(buf, pad_opt);
         buffer_add_char(buf, 123);
         bprint_fmtty(buf, fmtty);
         buffer_add_char(buf, 37);
         buffer_add_char(buf, 125);
         fmt$0 = rest$12;
         ign_flag$0 = 0;
         break;
        case 14:
         var rest$13 = fmt$0[3], fmtty$0 = fmt$0[2], pad_opt$0 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_pad_opt(buf, pad_opt$0);
         buffer_add_char(buf, 40);
         bprint_fmtty(buf, fmtty$0);
         buffer_add_char(buf, 37);
         buffer_add_char(buf, 41);
         fmt$0 = rest$13;
         ign_flag$0 = 0;
         break;
        case 15:
         var rest$14 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 97);
         fmt$0 = rest$14;
         ign_flag$0 = 0;
         break;
        case 16:
         var rest$15 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 116);
         fmt$0 = rest$15;
         ign_flag$0 = 0;
         break;
        case 17:
         var rest$16 = fmt$0[2], fmting_lit = fmt$0[1];
         bprint_string_literal(buf, string_of_formatting_lit(fmting_lit));
         fmt$0 = rest$16;
         break;
        case 18:
         var rest$17 = fmt$0[2], fmting_gen = fmt$0[1];
         if(0 === fmting_gen[0]){
          var str$0 = fmting_gen[1][2];
          buffer_add_string(buf, cst$15);
          buffer_add_string(buf, str$0);
         }
         else{
          var str$1 = fmting_gen[1][2];
          buffer_add_string(buf, cst$16);
          buffer_add_string(buf, str$1);
         }
         fmt$0 = rest$17;
         break;
        case 19:
         var rest$18 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         buffer_add_char(buf, 114);
         fmt$0 = rest$18;
         ign_flag$0 = 0;
         break;
        case 20:
         var rest$19 = fmt$0[3], char_set = fmt$0[2], width_opt = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_pad_opt(buf, width_opt);
         var
          print_char =
            function(buf, i){
             var c = caml_call1(Stdlib[29], i);
             return 37 === c
                     ? (buffer_add_char(buf, 37), buffer_add_char(buf, 37))
                     : 64
                       === c
                       ? (buffer_add_char(buf, 37), buffer_add_char(buf, 64))
                       : buffer_add_char(buf, c);
            };
         buffer_add_char(buf, 91);
         var
          set =
            is_in_char_set(char_set, 0)
             ? (buffer_add_char(buf, 94), rev_char_set(char_set))
             : char_set;
         let set$0 = set;
         var
          is_alone =
            function(c){
             var
              after = caml_call1(Stdlib_char[1], c + 1 | 0),
              before = caml_call1(Stdlib_char[1], c - 1 | 0),
              _cJ_ = is_in_char_set(set$0, c);
             if(_cJ_)
              var
               _cK_ = is_in_char_set(set$0, before),
               _cL_ = _cK_ ? is_in_char_set(set$0, after) : _cK_,
               _cM_ = 1 - _cL_;
             else
              var _cM_ = _cJ_;
             return _cM_;
            };
         if(is_alone(93)) buffer_add_char(buf, 93);
         a:
         b:
         {
          c:
          {
           d:
           {
            var i = 1;
            for(;;){
             if(i >= 256) break;
             if(is_in_char_set(set, caml_call1(Stdlib[29], i))){
              var switcher = caml_call1(Stdlib[29], i) - 45 | 0;
              if(48 < switcher >>> 0){
               if(210 <= switcher) break d;
              }
              else if(46 < switcher - 1 >>> 0){
               var i$2 = i + 1 | 0;
               i = i$2;
               continue;
              }
              var i$1 = i + 1 | 0;
              if(is_in_char_set(set, caml_call1(Stdlib[29], i$1))){
               var switcher$0 = caml_call1(Stdlib[29], i$1) - 45 | 0;
               if(48 < switcher$0 >>> 0){
                if(210 <= switcher$0) break c;
               }
               else if
                (46 < switcher$0 - 1 >>> 0
                 && ! is_in_char_set(set, caml_call1(Stdlib[29], i$1 + 1 | 0))){
                print_char(buf, i$1 - 1 | 0);
                var i$5 = i$1 + 1 | 0;
                i = i$5;
                continue;
               }
               if(is_in_char_set(set, caml_call1(Stdlib[29], i$1 + 1 | 0))){
                var j = i$1 + 2 | 0, i$3 = i$1 - 1 | 0, j$0 = j;
                for(;;){
                 if(256 === j$0) break;
                 if(! is_in_char_set(set, caml_call1(Stdlib[29], j$0))) break;
                 var j$1 = j$0 + 1 | 0;
                 j$0 = j$1;
                }
                print_char(buf, i$3);
                print_char(buf, 45);
                print_char(buf, j$0 - 1 | 0);
                if(j$0 >= 256) break b;
                var i$7 = j$0 + 1 | 0;
                i = i$7;
               }
               else{
                print_char(buf, i$1 - 1 | 0);
                print_char(buf, i$1);
                var i$4 = i$1 + 2 | 0;
                i = i$4;
               }
              }
              else{
               print_char(buf, i$1 - 1 | 0);
               var i$6 = i$1 + 1 | 0;
               i = i$6;
              }
             }
             else{var i$0 = i + 1 | 0; i = i$0;}
            }
            break a;
           }
           print_char(buf, 255);
           break a;
          }
          print_char(buf, 254);
          print_char(buf, 255);
          break a;
         }
         if(is_alone(45)) buffer_add_char(buf, 45);
         buffer_add_char(buf, 93);
         fmt$0 = rest$19;
         ign_flag$0 = 0;
         break;
        case 21:
         var rest$20 = fmt$0[2], counter = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         switch(counter){
           case 0:
            var _cF_ = 108; break;
           case 1:
            var _cF_ = 110; break;
           default: var _cF_ = 78;
         }
         buffer_add_char(buf, _cF_);
         fmt$0 = rest$20;
         ign_flag$0 = 0;
         break;
        case 22:
         var rest$21 = fmt$0[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag$0);
         bprint_string_literal(buf, cst_0c);
         fmt$0 = rest$21;
         ign_flag$0 = 0;
         break;
        case 23:
         var
          rest$22 = fmt$0[2],
          ign = fmt$0[1],
          fmt$1 = param_format_of_ignored_format(ign, rest$22)[1];
         fmt$0 = fmt$1;
         ign_flag$0 = 1;
         break;
        default:
         var
          rest$23 = fmt$0[3],
          arity = fmt$0[1],
          _cH_ = int_of_custom_arity(arity),
          _cG_ = 1;
         if(_cH_ >= 1){
          var i$8 = _cG_;
          for(;;){
           buffer_add_char(buf, 37);
           bprint_ignored_flag(buf, ign_flag$0);
           buffer_add_char(buf, 63);
           var _cI_ = i$8 + 1 | 0;
           if(_cH_ === i$8) break;
           i$8 = _cI_;
          }
         }
         fmt$0 = rest$23;
         ign_flag$0 = 0;
      }
     }
    }
    fmtiter(fmt, 0);
    return buffer_contents(buf);
   }
   function symm(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, symm(rest)];
      case 1:
       var rest$0 = param[1]; return [1, symm(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, symm(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, symm(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, symm(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, symm(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, symm(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, symm(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1]; return [8, ty, symm(rest$7)];
      case 9:
       var rest$8 = param[3], ty2 = param[2], ty1 = param[1];
       return [9, ty2, ty1, symm(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, symm(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, symm(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, symm(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, symm(rest$12)];
      default: var rest$13 = param[1]; return [14, symm(rest$13)];
    }
   }
   function fmtty_rel_det(param){
    if(typeof param === "number")
     return [0, , function(param){}, , function(param){}];
    switch(param[0]){
      case 0:
       var
        rest = param[1],
        match = fmtty_rel_det(rest),
        de = match[4],
        af = match[2];
       return [0, , function(param){af(0);}, , de];
      case 1:
       var
        rest$0 = param[1],
        match$0 = fmtty_rel_det(rest$0),
        de$0 = match$0[4],
        af$0 = match$0[2];
       return [0, , function(param){af$0(0);}, , de$0];
      case 2:
       var
        rest$1 = param[1],
        match$1 = fmtty_rel_det(rest$1),
        de$1 = match$1[4],
        af$1 = match$1[2];
       return [0, , function(param){af$1(0);}, , de$1];
      case 3:
       var
        rest$2 = param[1],
        match$2 = fmtty_rel_det(rest$2),
        de$2 = match$2[4],
        af$2 = match$2[2];
       return [0, , function(param){af$2(0);}, , de$2];
      case 4:
       var
        rest$3 = param[1],
        match$3 = fmtty_rel_det(rest$3),
        de$3 = match$3[4],
        af$3 = match$3[2];
       return [0, , function(param){af$3(0);}, , de$3];
      case 5:
       var
        rest$4 = param[1],
        match$4 = fmtty_rel_det(rest$4),
        de$4 = match$4[4],
        af$4 = match$4[2];
       return [0, , function(param){af$4(0);}, , de$4];
      case 6:
       var
        rest$5 = param[1],
        match$5 = fmtty_rel_det(rest$5),
        de$5 = match$5[4],
        af$5 = match$5[2];
       return [0, , function(param){af$5(0);}, , de$5];
      case 7:
       var
        rest$6 = param[1],
        match$6 = fmtty_rel_det(rest$6),
        de$6 = match$6[4],
        af$6 = match$6[2];
       return [0, , function(param){af$6(0);}, , de$6];
      case 8:
       var
        rest$7 = param[2],
        match$7 = fmtty_rel_det(rest$7),
        de$7 = match$7[4],
        af$7 = match$7[2];
       return [0, , function(param){af$7(0);}, , de$7];
      case 9:
       var
        rest$8 = param[3],
        ty2 = param[2],
        ty1 = param[1],
        match$8 = fmtty_rel_det(rest$8),
        de$8 = match$8[4],
        af$8 = match$8[2],
        ty = trans(symm(ty1), ty2),
        match$9 = fmtty_rel_det(ty),
        jd = match$9[4],
        ga = match$9[2];
       return [0,
               ,
               function(param){ga(0); af$8(0);},
               ,
               function(param){jd(0); de$8(0);}];
      case 10:
       var
        rest$9 = param[1],
        match$10 = fmtty_rel_det(rest$9),
        de$9 = match$10[4],
        af$9 = match$10[2];
       return [0, , function(param){af$9(0);}, , de$9];
      case 11:
       var
        rest$10 = param[1],
        match$11 = fmtty_rel_det(rest$10),
        de$10 = match$11[4],
        af$10 = match$11[2];
       return [0, , function(param){af$10(0);}, , de$10];
      case 12:
       var
        rest$11 = param[1],
        match$12 = fmtty_rel_det(rest$11),
        de$11 = match$12[4],
        af$11 = match$12[2];
       return [0, , function(param){af$11(0);}, , de$11];
      case 13:
       var
        rest$12 = param[1],
        match$13 = fmtty_rel_det(rest$12),
        de$12 = match$13[4],
        af$12 = match$13[2];
       return [0, , function(param){af$12(0);}, , function(param){de$12(0);}];
      default:
       var
        rest$13 = param[1],
        match$14 = fmtty_rel_det(rest$13),
        de$13 = match$14[4],
        af$13 = match$14[2];
       return [0, , function(param){af$13(0);}, , function(param){de$13(0);}];
    }
   }
   function trans(ty1, ty2){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           if(typeof ty1 !== "number"){
            switch(ty1[0]){
              case 0:
               var rest1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 0:
                   var rest2 = ty2[1]; return [0, trans(rest1, rest2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 1:
               var rest1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 1:
                   var rest2$0 = ty2[1]; return [1, trans(rest1$0, rest2$0)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 2:
               var rest1$1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 2:
                   var rest2$1 = ty2[1]; return [2, trans(rest1$1, rest2$1)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 3:
               var rest1$2 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 3:
                   var rest2$2 = ty2[1]; return [3, trans(rest1$2, rest2$2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 4:
               var rest1$3 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 4:
                   var rest2$3 = ty2[1]; return [4, trans(rest1$3, rest2$3)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 5:
               var rest1$4 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 5:
                   var rest2$4 = ty2[1]; return [5, trans(rest1$4, rest2$4)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 6:
               var rest1$5 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 6:
                   var rest2$5 = ty2[1]; return [6, trans(rest1$5, rest2$5)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 7:
               var rest1$6 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 7:
                   var rest2$6 = ty2[1]; return [7, trans(rest1$6, rest2$6)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 8:
               var rest1$7 = ty1[2], ty1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   var
                    rest2$7 = ty2[2],
                    ty2$0 = ty2[1],
                    _cE_ = trans(rest1$7, rest2$7);
                   return [8, trans(ty1$0, ty2$0), _cE_];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
              case 9:
               var rest1$8 = ty1[3], ty12 = ty1[2], ty11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   break f;
                  case 9:
                   var
                    rest2$8 = ty2[3],
                    ty22 = ty2[2],
                    ty21 = ty2[1],
                    ty = trans(symm(ty12), ty21),
                    match = fmtty_rel_det(ty),
                    f4 = match[4],
                    f2 = match[2];
                   f2(0);
                   f4(0);
                   return [9, ty11, ty22, trans(rest1$8, rest2$8)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
              case 10:
               var rest1$9 = ty1[1];
               if(typeof ty2 !== "number" && 10 === ty2[0]){
                var rest2$9 = ty2[1];
                return [10, trans(rest1$9, rest2$9)];
               }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
              case 11:
               var rest1$10 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   var rest2$10 = ty2[1];
                   return [11, trans(rest1$10, rest2$10)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
              case 12:
               var rest1$11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   var rest2$11 = ty2[1];
                   return [12, trans(rest1$11, rest2$11)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
              case 13:
               var rest1$12 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   var rest2$12 = ty2[1];
                   return [13, trans(rest1$12, rest2$12)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
              default:
               var rest1$13 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   var rest2$13 = ty2[1];
                   return [14, trans(rest1$13, rest2$13)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
           }
           if(typeof ty2 === "number") return 0;
           switch(ty2[0]){
             case 10:
              break a;
             case 11:
              break b;
             case 12:
              break c;
             case 13:
              break d;
             case 14:
              break e;
             case 8:
              break f;
             case 9: break;
             default:
              throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
           }
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
   }
   function fmtty_of_fmt(fmtty){
    var fmtty$0 = fmtty;
    for(;;){
     if(typeof fmtty$0 === "number") return 0;
     switch(fmtty$0[0]){
       case 0:
        var rest = fmtty$0[1]; return [0, fmtty_of_fmt(rest)];
       case 1:
        var rest$0 = fmtty$0[1]; return [0, fmtty_of_fmt(rest$0)];
       case 2:
        var rest$1 = fmtty$0[2], pad = fmtty$0[1];
        return fmtty_of_padding_fmtty(pad, [1, fmtty_of_fmt(rest$1)]);
       case 3:
        var rest$2 = fmtty$0[2], pad$0 = fmtty$0[1];
        return fmtty_of_padding_fmtty(pad$0, [1, fmtty_of_fmt(rest$2)]);
       case 4:
        var
         rest$3 = fmtty$0[4],
         prec = fmtty$0[3],
         pad$1 = fmtty$0[2],
         ty_rest = fmtty_of_fmt(rest$3),
         prec_ty = fmtty_of_precision_fmtty(prec, [2, ty_rest]);
        return fmtty_of_padding_fmtty(pad$1, prec_ty);
       case 5:
        var
         rest$4 = fmtty$0[4],
         prec$0 = fmtty$0[3],
         pad$2 = fmtty$0[2],
         ty_rest$0 = fmtty_of_fmt(rest$4),
         prec_ty$0 = fmtty_of_precision_fmtty(prec$0, [3, ty_rest$0]);
        return fmtty_of_padding_fmtty(pad$2, prec_ty$0);
       case 6:
        var
         rest$5 = fmtty$0[4],
         prec$1 = fmtty$0[3],
         pad$3 = fmtty$0[2],
         ty_rest$1 = fmtty_of_fmt(rest$5),
         prec_ty$1 = fmtty_of_precision_fmtty(prec$1, [4, ty_rest$1]);
        return fmtty_of_padding_fmtty(pad$3, prec_ty$1);
       case 7:
        var
         rest$6 = fmtty$0[4],
         prec$2 = fmtty$0[3],
         pad$4 = fmtty$0[2],
         ty_rest$2 = fmtty_of_fmt(rest$6),
         prec_ty$2 = fmtty_of_precision_fmtty(prec$2, [5, ty_rest$2]);
        return fmtty_of_padding_fmtty(pad$4, prec_ty$2);
       case 8:
        var
         rest$7 = fmtty$0[4],
         prec$3 = fmtty$0[3],
         pad$5 = fmtty$0[2],
         ty_rest$3 = fmtty_of_fmt(rest$7),
         prec_ty$3 = fmtty_of_precision_fmtty(prec$3, [6, ty_rest$3]);
        return fmtty_of_padding_fmtty(pad$5, prec_ty$3);
       case 9:
        var rest$8 = fmtty$0[2], pad$6 = fmtty$0[1];
        return fmtty_of_padding_fmtty(pad$6, [7, fmtty_of_fmt(rest$8)]);
       case 10:
        var fmtty$1 = fmtty$0[1]; fmtty$0 = fmtty$1; break;
       case 11:
        var fmtty$2 = fmtty$0[2]; fmtty$0 = fmtty$2; break;
       case 12:
        var fmtty$3 = fmtty$0[2]; fmtty$0 = fmtty$3; break;
       case 13:
        var rest$9 = fmtty$0[3], ty = fmtty$0[2];
        return [8, ty, fmtty_of_fmt(rest$9)];
       case 14:
        var rest$10 = fmtty$0[3], ty$0 = fmtty$0[2];
        return [9, ty$0, ty$0, fmtty_of_fmt(rest$10)];
       case 15:
        var rest$11 = fmtty$0[1]; return [10, fmtty_of_fmt(rest$11)];
       case 16:
        var rest$12 = fmtty$0[1]; return [11, fmtty_of_fmt(rest$12)];
       case 17:
        var fmtty$4 = fmtty$0[2]; fmtty$0 = fmtty$4; break;
       case 18:
        var
         rest$13 = fmtty$0[2],
         formatting_gen = fmtty$0[1],
         _cB_ = fmtty_of_fmt(rest$13);
        if(0 === formatting_gen[0])
         var fmt = formatting_gen[1][1], _cC_ = fmtty_of_fmt(fmt);
        else
         var fmt$0 = formatting_gen[1][1], _cC_ = fmtty_of_fmt(fmt$0);
        return caml_call2(CamlinternalFormatBasics[1], _cC_, _cB_);
       case 19:
        var rest$14 = fmtty$0[1]; return [13, fmtty_of_fmt(rest$14)];
       case 20:
        var rest$15 = fmtty$0[3]; return [1, fmtty_of_fmt(rest$15)];
       case 21:
        var rest$16 = fmtty$0[2]; return [2, fmtty_of_fmt(rest$16)];
       case 22:
        var rest$17 = fmtty$0[1]; return [0, fmtty_of_fmt(rest$17)];
       case 23:
        var fmtty$5 = fmtty$0[2], ign = fmtty$0[1];
        if(typeof ign === "number")
         switch(ign){
           case 0:
            fmtty$0 = fmtty$5; break;
           case 1:
            fmtty$0 = fmtty$5; break;
           case 2:
            return [14, fmtty_of_fmt(fmtty$5)];
           default: fmtty$0 = fmtty$5;
         }
        else
         switch(ign[0]){
           case 0:
            fmtty$0 = fmtty$5; break;
           case 1:
            fmtty$0 = fmtty$5; break;
           case 2:
            fmtty$0 = fmtty$5; break;
           case 3:
            fmtty$0 = fmtty$5; break;
           case 4:
            fmtty$0 = fmtty$5; break;
           case 5:
            fmtty$0 = fmtty$5; break;
           case 6:
            fmtty$0 = fmtty$5; break;
           case 7:
            fmtty$0 = fmtty$5; break;
           case 8:
            fmtty$0 = fmtty$5; break;
           case 9:
            var fmtty$6 = ign[2], _cD_ = fmtty_of_fmt(fmtty$5);
            return caml_call2(CamlinternalFormatBasics[1], fmtty$6, _cD_);
           case 10:
            fmtty$0 = fmtty$5; break;
           default: fmtty$0 = fmtty$5;
         }
        break;
       default:
        var rest$18 = fmtty$0[3], arity = fmtty$0[1];
        return fmtty_of_custom(arity, fmtty_of_fmt(rest$18));
     }
    }
   }
   function fmtty_of_custom(arity, fmtty){
    if(! arity) return fmtty;
    var arity$0 = arity[1];
    return [12, fmtty_of_custom(arity$0, fmtty)];
   }
   function fmtty_of_padding_fmtty(pad, fmtty){
    return typeof pad === "number" ? fmtty : 0 === pad[0] ? fmtty : [2, fmtty];
   }
   function fmtty_of_precision_fmtty(prec, fmtty){
    return typeof prec === "number" ? prec ? [2, fmtty] : fmtty : fmtty;
   }
   var
    Type_mismatch =
      [248, "CamlinternalFormat.Type_mismatch", runtime.caml_fresh_oo_id(0)],
    cst_d = "%d",
    cst_d$0 = "%+d",
    cst_d$1 = "% d",
    cst_i$0 = cst_i$3,
    cst_i$1 = "%+i",
    cst_i$2 = "% i",
    cst_x = "%x",
    cst_x$0 = "%#x",
    cst_X = "%X",
    cst_X$0 = "%#X",
    cst_o = "%o",
    cst_o$0 = "%#o",
    cst_u = cst_u$0,
    cst_Ld = "%Ld",
    cst_Ld$0 = "%+Ld",
    cst_Ld$1 = "% Ld",
    cst_Li$0 = cst_Li$3,
    cst_Li$1 = "%+Li",
    cst_Li$2 = "% Li",
    cst_Lx = "%Lx",
    cst_Lx$0 = "%#Lx",
    cst_LX = "%LX",
    cst_LX$0 = "%#LX",
    cst_Lo = "%Lo",
    cst_Lo$0 = "%#Lo",
    cst_Lu = "%Lu",
    cst_ld = "%ld",
    cst_ld$0 = "%+ld",
    cst_ld$1 = "% ld",
    cst_li$0 = cst_li$3,
    cst_li$1 = "%+li",
    cst_li$2 = "% li",
    cst_lx = "%lx",
    cst_lx$0 = "%#lx",
    cst_lX = "%lX",
    cst_lX$0 = "%#lX",
    cst_lo = "%lo",
    cst_lo$0 = "%#lo",
    cst_lu = "%lu",
    cst_nd = "%nd",
    cst_nd$0 = "%+nd",
    cst_nd$1 = "% nd",
    cst_ni$0 = cst_ni$3,
    cst_ni$1 = "%+ni",
    cst_ni$2 = "% ni",
    cst_nx = "%nx",
    cst_nx$0 = "%#nx",
    cst_nX = "%nX",
    cst_nX$0 = "%#nX",
    cst_no = "%no",
    cst_no$0 = "%#no",
    cst_nu = "%nu",
    _r_ = [0, 103],
    cst_neg_infinity = "neg_infinity",
    cst_infinity = "infinity",
    cst_nan = "nan",
    _s_ = [0, cst_camlinternalFormat_ml, 1558, 4],
    cst_Printf_bad_conversion = "Printf: bad conversion %[",
    _t_ = [0, cst_camlinternalFormat_ml, 1626, 39],
    _u_ = [0, cst_camlinternalFormat_ml, 1649, 31],
    _v_ = [0, cst_camlinternalFormat_ml, 1650, 31],
    cst_Printf_bad_conversion$0 = "Printf: bad conversion %_",
    _w_ = [0, cst_camlinternalFormat_ml, 1830, 8],
    _x_ = [0, 0, 4],
    _y_ =
      [0,
       [11, "invalid box description ", [3, 0, 0]],
       "invalid box description %S"],
    _z_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11, cst_at_character_number, [4, 0, 0, 0, [11, cst$44, [2, 0, 0]]]]]],
       "invalid format %S: at character number %d, %s"],
    cst_non_zero_widths_are_unsupp =
      "non-zero widths are unsupported for %c conversions",
    _A_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, ", '", [0, [11, "' without ", [2, 0, 0]]]]]]]],
       "invalid format %S: at character number %d, '%c' without %s"],
    _B_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, cst$44, [2, 0, [11, " expected, read ", [1, 0]]]]]]]],
       "invalid format %S: at character number %d, %s expected, read %C"],
    _C_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, ", duplicate flag ", [1, 0]]]]]],
       "invalid format %S: at character number %d, duplicate flag %C"],
    cst_padding = "padding",
    _D_ = [0, 1, 0],
    cst_0 = cst_0$3,
    _E_ = [0, 0],
    cst_precision = cst_precision$3,
    _F_ = [1, 0],
    _G_ = [1, 1],
    cst_precision$0 = cst_precision$3,
    _H_ = [1, 1],
    cst_precision$1 = cst_precision$3,
    cst_0$0 = cst_0$3,
    _I_ = [1, 1],
    cst_0$1 = cst_0$3,
    cst_0$2 = "'0'",
    _J_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11, ', invalid conversion "', [12, 37, [0, [12, 34, 0]]]]]]]],
       'invalid format %S: at character number %d, invalid conversion "%%%c"'],
    _K_ = [0, 0],
    cst_padding$0 = "`padding'",
    _L_ = [0, 0],
    cst_precision$2 = "`precision'",
    _M_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11,
            ", flag ",
            [1,
             [11,
              " is only allowed after the '",
              [12, 37, [11, "', before padding and precision", 0]]]]]]]]],
       "invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision"],
    _N_ = [0, [12, 64, 0]],
    _O_ = [0, "@ ", 1, 0],
    _P_ = [0, "@,", 0, 0],
    _Q_ = [2, 60],
    _R_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ": '",
          [12,
           37,
           [11,
            "' alone is not accepted in character sets, use ",
            [12,
             37,
             [12,
              37,
              [11, " instead at position ", [4, 0, 0, 0, [12, 46, 0]]]]]]]]]],
       "invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d."],
    _S_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ": integer ",
          [4, 0, 0, 0, [11, " is greater than the limit ", [4, 0, 0, 0, 0]]]]]],
       "invalid format %S: integer %d is greater than the limit %d"],
    _T_ = [0, cst_camlinternalFormat_ml, 2837, 11],
    cst_digit = "digit",
    _U_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ': unclosed sub-format, expected "',
          [12, 37, [0, [11, '" at character number ', [4, 0, 0, 0, 0]]]]]]],
       'invalid format %S: unclosed sub-format, expected "%%%c" at character number %d'],
    cst_character = "character ')'",
    cst_character$0 = "character '}'",
    _V_ = [0, cst_camlinternalFormat_ml, 2899, 34],
    _W_ = [0, cst_camlinternalFormat_ml, 2935, 28],
    _X_ = [0, cst_camlinternalFormat_ml, 2957, 11],
    _Y_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11,
            cst$44,
            [2,
             0,
             [11,
              " is incompatible with '",
              [0, [11, "' in sub-format ", [3, 0, 0]]]]]]]]]],
       "invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S"],
    _Z_ =
      [0,
       [11, cst_bad_input_format_type_mism, [3, 0, [11, cst_and, [3, 0, 0]]]],
       cst_bad_input_format_type_mism$0],
    ___ =
      [0,
       [11, cst_bad_input_format_type_mism, [3, 0, [11, cst_and, [3, 0, 0]]]],
       cst_bad_input_format_type_mism$0];
   function type_padding(pad, fmtty){
    if(typeof pad === "number") return [0, 0, fmtty];
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     return [0, [0, padty, w], fmtty];
    }
    if(typeof fmtty !== "number" && 2 === fmtty[0]){
     var rest = fmtty[1], padty$0 = pad[1];
     return [0, [1, padty$0], rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_padprec(pad, prec, fmtty){
    var match = type_padding(pad, fmtty);
    if(typeof prec !== "number"){
     var rest$1 = match[2], pad$2 = match[1], p = prec[1];
     return [0, pad$2, [0, p], rest$1];
    }
    if(! prec){
     var rest$0 = match[2], pad$1 = match[1];
     return [0, pad$1, 0, rest$0];
    }
    var match$0 = match[2];
    if(typeof match$0 !== "number" && 2 === match$0[0]){
     var rest = match$0[1], pad$0 = match[1];
     return [0, pad$0, 1, rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_format(fmt, fmtty){
    var _cA_ = type_format_gen(fmt, fmtty);
    if(typeof _cA_[2] !== "number")
     throw caml_maybe_attach_backtrace(Type_mismatch, 1);
    var fmt$0 = _cA_[1];
    return fmt$0;
   }
   function type_format_gen(fmt, fmtty_rest){
    if(typeof fmt === "number") return [0, 0, fmtty_rest];
    switch(fmt[0]){
      case 0:
       if(typeof fmtty_rest !== "number" && 0 === fmtty_rest[0]){
        var
         fmtty_rest$0 = fmtty_rest[1],
         fmt_rest = fmt[1],
         match = type_format_gen(fmt_rest, fmtty_rest$0),
         fmtty = match[2],
         fmt$0 = match[1];
        return [0, [0, fmt$0], fmtty];
       }
       break;
      case 1:
       if(typeof fmtty_rest !== "number" && 0 === fmtty_rest[0]){
        var
         fmtty_rest$1 = fmtty_rest[1],
         fmt_rest$0 = fmt[1],
         match$0 = type_format_gen(fmt_rest$0, fmtty_rest$1),
         fmtty$0 = match$0[2],
         fmt$1 = match$0[1];
        return [0, [1, fmt$1], fmtty$0];
       }
       break;
      case 2:
       var
        fmt_rest$1 = fmt[2],
        pad = fmt[1],
        match$1 = type_padding(pad, fmtty_rest),
        pad$0 = match$1[1],
        match$2 = match$1[2];
       if(typeof match$2 !== "number" && 1 === match$2[0]){
        var
         fmtty_rest$2 = match$2[1],
         match$3 = type_format_gen(fmt_rest$1, fmtty_rest$2),
         fmtty$1 = match$3[2],
         fmt$2 = match$3[1];
        return [0, [2, pad$0, fmt$2], fmtty$1];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 3:
       var
        fmt_rest$2 = fmt[2],
        pad$1 = fmt[1],
        match$4 = type_padding(pad$1, fmtty_rest),
        pad$2 = match$4[1],
        match$5 = match$4[2];
       if(typeof match$5 !== "number" && 1 === match$5[0]){
        var
         fmtty_rest$3 = match$5[1],
         match$6 = type_format_gen(fmt_rest$2, fmtty_rest$3),
         fmtty$2 = match$6[2],
         fmt$3 = match$6[1];
        return [0, [3, pad$2, fmt$3], fmtty$2];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 4:
       var
        fmt_rest$3 = fmt[4],
        prec = fmt[3],
        pad$3 = fmt[2],
        iconv = fmt[1],
        match$7 = type_padprec(pad$3, prec, fmtty_rest),
        pad$4 = match$7[1],
        match$8 = match$7[3];
       if(typeof match$8 !== "number" && 2 === match$8[0]){
        var
         fmtty_rest$4 = match$8[1],
         prec$0 = match$7[2],
         match$9 = type_format_gen(fmt_rest$3, fmtty_rest$4),
         fmtty$3 = match$9[2],
         fmt$4 = match$9[1];
        return [0, [4, iconv, pad$4, prec$0, fmt$4], fmtty$3];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 5:
       var
        fmt_rest$4 = fmt[4],
        prec$1 = fmt[3],
        pad$5 = fmt[2],
        iconv$0 = fmt[1],
        match$10 = type_padprec(pad$5, prec$1, fmtty_rest),
        pad$6 = match$10[1],
        match$11 = match$10[3];
       if(typeof match$11 !== "number" && 3 === match$11[0]){
        var
         fmtty_rest$5 = match$11[1],
         prec$2 = match$10[2],
         match$12 = type_format_gen(fmt_rest$4, fmtty_rest$5),
         fmtty$4 = match$12[2],
         fmt$5 = match$12[1];
        return [0, [5, iconv$0, pad$6, prec$2, fmt$5], fmtty$4];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 6:
       var
        fmt_rest$5 = fmt[4],
        prec$3 = fmt[3],
        pad$7 = fmt[2],
        iconv$1 = fmt[1],
        match$13 = type_padprec(pad$7, prec$3, fmtty_rest),
        pad$8 = match$13[1],
        match$14 = match$13[3];
       if(typeof match$14 !== "number" && 4 === match$14[0]){
        var
         fmtty_rest$6 = match$14[1],
         prec$4 = match$13[2],
         match$15 = type_format_gen(fmt_rest$5, fmtty_rest$6),
         fmtty$5 = match$15[2],
         fmt$6 = match$15[1];
        return [0, [6, iconv$1, pad$8, prec$4, fmt$6], fmtty$5];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 7:
       var
        fmt_rest$6 = fmt[4],
        prec$5 = fmt[3],
        pad$9 = fmt[2],
        iconv$2 = fmt[1],
        match$16 = type_padprec(pad$9, prec$5, fmtty_rest),
        pad$10 = match$16[1],
        match$17 = match$16[3];
       if(typeof match$17 !== "number" && 5 === match$17[0]){
        var
         fmtty_rest$7 = match$17[1],
         prec$6 = match$16[2],
         match$18 = type_format_gen(fmt_rest$6, fmtty_rest$7),
         fmtty$6 = match$18[2],
         fmt$7 = match$18[1];
        return [0, [7, iconv$2, pad$10, prec$6, fmt$7], fmtty$6];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 8:
       var
        fmt_rest$7 = fmt[4],
        prec$7 = fmt[3],
        pad$11 = fmt[2],
        fconv = fmt[1],
        match$19 = type_padprec(pad$11, prec$7, fmtty_rest),
        pad$12 = match$19[1],
        match$20 = match$19[3];
       if(typeof match$20 !== "number" && 6 === match$20[0]){
        var
         fmtty_rest$8 = match$20[1],
         prec$8 = match$19[2],
         match$21 = type_format_gen(fmt_rest$7, fmtty_rest$8),
         fmtty$7 = match$21[2],
         fmt$8 = match$21[1];
        return [0, [8, fconv, pad$12, prec$8, fmt$8], fmtty$7];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 9:
       var
        fmt_rest$8 = fmt[2],
        pad$13 = fmt[1],
        match$22 = type_padding(pad$13, fmtty_rest),
        pad$14 = match$22[1],
        match$23 = match$22[2];
       if(typeof match$23 !== "number" && 7 === match$23[0]){
        var
         fmtty_rest$9 = match$23[1],
         match$24 = type_format_gen(fmt_rest$8, fmtty_rest$9),
         fmtty$8 = match$24[2],
         fmt$9 = match$24[1];
        return [0, [9, pad$14, fmt$9], fmtty$8];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 10:
       var
        fmt_rest$9 = fmt[1],
        match$25 = type_format_gen(fmt_rest$9, fmtty_rest),
        fmtty$9 = match$25[2],
        fmt$10 = match$25[1];
       return [0, [10, fmt$10], fmtty$9];
      case 11:
       var
        fmt_rest$10 = fmt[2],
        str = fmt[1],
        match$26 = type_format_gen(fmt_rest$10, fmtty_rest),
        fmtty$10 = match$26[2],
        fmt$11 = match$26[1];
       return [0, [11, str, fmt$11], fmtty$10];
      case 12:
       var
        fmt_rest$11 = fmt[2],
        chr = fmt[1],
        match$27 = type_format_gen(fmt_rest$11, fmtty_rest),
        fmtty$11 = match$27[2],
        fmt$12 = match$27[1];
       return [0, [12, chr, fmt$12], fmtty$11];
      case 13:
       if(typeof fmtty_rest !== "number" && 8 === fmtty_rest[0]){
        var
         fmtty_rest$10 = fmtty_rest[2],
         sub_fmtty = fmtty_rest[1],
         fmt_rest$12 = fmt[3],
         sub_fmtty$0 = fmt[2],
         pad_opt = fmt[1];
        if(caml_notequal([0, sub_fmtty$0], [0, sub_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$28 = type_format_gen(fmt_rest$12, fmtty_rest$10),
         fmtty$12 = match$28[2],
         fmt$13 = match$28[1];
        return [0, [13, pad_opt, sub_fmtty, fmt$13], fmtty$12];
       }
       break;
      case 14:
       if(typeof fmtty_rest !== "number" && 9 === fmtty_rest[0]){
        var
         fmtty_rest$11 = fmtty_rest[3],
         sub_fmtty1 = fmtty_rest[1],
         fmt_rest$13 = fmt[3],
         sub_fmtty$1 = fmt[2],
         pad_opt$0 = fmt[1],
         _cy_ = [0, caml_call1(CamlinternalFormatBasics[2], sub_fmtty1)];
        if
         (caml_notequal
           ([0, caml_call1(CamlinternalFormatBasics[2], sub_fmtty$1)], _cy_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$29 =
           type_format_gen
            (fmt_rest$13,
             caml_call1(CamlinternalFormatBasics[2], fmtty_rest$11)),
         fmtty$13 = match$29[2],
         fmt$14 = match$29[1];
        return [0, [14, pad_opt$0, sub_fmtty1, fmt$14], fmtty$13];
       }
       break;
      case 15:
       if(typeof fmtty_rest !== "number" && 10 === fmtty_rest[0]){
        var
         fmtty_rest$12 = fmtty_rest[1],
         fmt_rest$14 = fmt[1],
         match$30 = type_format_gen(fmt_rest$14, fmtty_rest$12),
         fmtty$14 = match$30[2],
         fmt$15 = match$30[1];
        return [0, [15, fmt$15], fmtty$14];
       }
       break;
      case 16:
       if(typeof fmtty_rest !== "number" && 11 === fmtty_rest[0]){
        var
         fmtty_rest$13 = fmtty_rest[1],
         fmt_rest$15 = fmt[1],
         match$31 = type_format_gen(fmt_rest$15, fmtty_rest$13),
         fmtty$15 = match$31[2],
         fmt$16 = match$31[1];
        return [0, [16, fmt$16], fmtty$15];
       }
       break;
      case 17:
       var
        fmt_rest$16 = fmt[2],
        formatting_lit = fmt[1],
        match$32 = type_format_gen(fmt_rest$16, fmtty_rest),
        fmtty$16 = match$32[2],
        fmt$17 = match$32[1];
       return [0, [17, formatting_lit, fmt$17], fmtty$16];
      case 18:
       var fmt_rest$17 = fmt[2], formatting_gen = fmt[1];
       if(0 === formatting_gen[0]){
        var
         match$36 = formatting_gen[1],
         str$0 = match$36[2],
         fmt1 = match$36[1],
         match$37 = type_format_gen(fmt1, fmtty_rest),
         fmtty2 = match$37[2],
         fmt2 = match$37[1],
         match$38 = type_format_gen(fmt_rest$17, fmtty2),
         fmtty3 = match$38[2],
         fmt3 = match$38[1];
        return [0, [18, [0, [0, fmt2, str$0]], fmt3], fmtty3];
       }
       var
        match$39 = formatting_gen[1],
        str$1 = match$39[2],
        fmt1$0 = match$39[1],
        match$40 = type_format_gen(fmt1$0, fmtty_rest),
        fmtty2$0 = match$40[2],
        fmt2$0 = match$40[1],
        match$41 = type_format_gen(fmt_rest$17, fmtty2$0),
        fmtty3$0 = match$41[2],
        fmt3$0 = match$41[1];
       return [0, [18, [1, [0, fmt2$0, str$1]], fmt3$0], fmtty3$0];
      case 19:
       if(typeof fmtty_rest !== "number" && 13 === fmtty_rest[0]){
        var
         fmtty_rest$14 = fmtty_rest[1],
         fmt_rest$18 = fmt[1],
         match$33 = type_format_gen(fmt_rest$18, fmtty_rest$14),
         fmtty$17 = match$33[2],
         fmt$18 = match$33[1];
        return [0, [19, fmt$18], fmtty$17];
       }
       break;
      case 20:
       if(typeof fmtty_rest !== "number" && 1 === fmtty_rest[0]){
        var
         fmtty_rest$15 = fmtty_rest[1],
         fmt_rest$19 = fmt[3],
         char_set = fmt[2],
         width_opt = fmt[1],
         match$34 = type_format_gen(fmt_rest$19, fmtty_rest$15),
         fmtty$18 = match$34[2],
         fmt$19 = match$34[1];
        return [0, [20, width_opt, char_set, fmt$19], fmtty$18];
       }
       break;
      case 21:
       if(typeof fmtty_rest !== "number" && 2 === fmtty_rest[0]){
        var
         fmtty_rest$16 = fmtty_rest[1],
         fmt_rest$20 = fmt[2],
         counter = fmt[1],
         match$35 = type_format_gen(fmt_rest$20, fmtty_rest$16),
         fmtty$19 = match$35[2],
         fmt$20 = match$35[1];
        return [0, [21, counter, fmt$20], fmtty$19];
       }
       break;
      case 23:
       var rest = fmt[2], ign = fmt[1];
       if(typeof ign !== "number")
        switch(ign[0]){
          case 0:
           return type_ignored_param_one(ign, rest, fmtty_rest);
          case 1:
           return type_ignored_param_one(ign, rest, fmtty_rest);
          case 2:
           return type_ignored_param_one(ign, rest, fmtty_rest);
          case 3:
           return type_ignored_param_one(ign, rest, fmtty_rest);
          case 4:
           return type_ignored_param_one(ign, rest, fmtty_rest);
          case 5:
           return type_ignored_param_one(ign, rest, fmtty_rest);
          case 6:
           return type_ignored_param_one(ign, rest, fmtty_rest);
          case 7:
           return type_ignored_param_one(ign, rest, fmtty_rest);
          case 8:
           var sub_fmtty$2 = ign[2], pad_opt$1 = ign[1];
           return type_ignored_param_one
                   ([8, pad_opt$1, sub_fmtty$2], rest, fmtty_rest);
          case 9:
           var
            sub_fmtty$3 = ign[2],
            pad_opt$2 = ign[1],
            _cz_ =
              type_ignored_format_substituti(sub_fmtty$3, rest, fmtty_rest),
            match$43 = _cz_[2],
            fmtty$21 = match$43[2],
            fmt$22 = match$43[1],
            sub_fmtty$4 = _cz_[1];
           return [0, [23, [9, pad_opt$2, sub_fmtty$4], fmt$22], fmtty$21];
          case 10:
           return type_ignored_param_one(ign, rest, fmtty_rest);
          default: return type_ignored_param_one(ign, rest, fmtty_rest);
        }
       switch(ign){
         case 0:
          return type_ignored_param_one(ign, rest, fmtty_rest);
         case 1:
          return type_ignored_param_one(ign, rest, fmtty_rest);
         case 2:
          if(typeof fmtty_rest !== "number" && 14 === fmtty_rest[0]){
           var
            fmtty_rest$17 = fmtty_rest[1],
            match$42 = type_format_gen(rest, fmtty_rest$17),
            fmtty$20 = match$42[2],
            fmt$21 = match$42[1];
           return [0, [23, 2, fmt$21], fmtty$20];
          }
          throw caml_maybe_attach_backtrace(Type_mismatch, 1);
         default: return type_ignored_param_one(ign, rest, fmtty_rest);
       }
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_ignored_param_one(ign, fmt, fmtty){
    var
     match = type_format_gen(fmt, fmtty),
     fmtty$0 = match[2],
     fmt$0 = match[1];
    return [0, [23, ign, fmt$0], fmtty$0];
   }
   function type_ignored_format_substituti(sub_fmtty, fmt, fmtty){
    if(typeof sub_fmtty === "number")
     return [0, 0, type_format_gen(fmt, fmtty)];
    switch(sub_fmtty[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         sub_fmtty_rest = sub_fmtty[1],
         match =
           type_ignored_format_substituti(sub_fmtty_rest, fmt, fmtty_rest),
         fmt$0 = match[2],
         sub_fmtty_rest$0 = match[1];
        return [0, [0, sub_fmtty_rest$0], fmt$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         sub_fmtty_rest$1 = sub_fmtty[1],
         match$0 =
           type_ignored_format_substituti(sub_fmtty_rest$1, fmt, fmtty_rest$0),
         fmt$1 = match$0[2],
         sub_fmtty_rest$2 = match$0[1];
        return [0, [1, sub_fmtty_rest$2], fmt$1];
       }
       break;
      case 2:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$1 = fmtty[1],
         sub_fmtty_rest$3 = sub_fmtty[1],
         match$1 =
           type_ignored_format_substituti(sub_fmtty_rest$3, fmt, fmtty_rest$1),
         fmt$2 = match$1[2],
         sub_fmtty_rest$4 = match$1[1];
        return [0, [2, sub_fmtty_rest$4], fmt$2];
       }
       break;
      case 3:
       if(typeof fmtty !== "number" && 3 === fmtty[0]){
        var
         fmtty_rest$2 = fmtty[1],
         sub_fmtty_rest$5 = sub_fmtty[1],
         match$2 =
           type_ignored_format_substituti(sub_fmtty_rest$5, fmt, fmtty_rest$2),
         fmt$3 = match$2[2],
         sub_fmtty_rest$6 = match$2[1];
        return [0, [3, sub_fmtty_rest$6], fmt$3];
       }
       break;
      case 4:
       if(typeof fmtty !== "number" && 4 === fmtty[0]){
        var
         fmtty_rest$3 = fmtty[1],
         sub_fmtty_rest$7 = sub_fmtty[1],
         match$3 =
           type_ignored_format_substituti(sub_fmtty_rest$7, fmt, fmtty_rest$3),
         fmt$4 = match$3[2],
         sub_fmtty_rest$8 = match$3[1];
        return [0, [4, sub_fmtty_rest$8], fmt$4];
       }
       break;
      case 5:
       if(typeof fmtty !== "number" && 5 === fmtty[0]){
        var
         fmtty_rest$4 = fmtty[1],
         sub_fmtty_rest$9 = sub_fmtty[1],
         match$4 =
           type_ignored_format_substituti(sub_fmtty_rest$9, fmt, fmtty_rest$4),
         fmt$5 = match$4[2],
         sub_fmtty_rest$10 = match$4[1];
        return [0, [5, sub_fmtty_rest$10], fmt$5];
       }
       break;
      case 6:
       if(typeof fmtty !== "number" && 6 === fmtty[0]){
        var
         fmtty_rest$5 = fmtty[1],
         sub_fmtty_rest$11 = sub_fmtty[1],
         match$5 =
           type_ignored_format_substituti
            (sub_fmtty_rest$11, fmt, fmtty_rest$5),
         fmt$6 = match$5[2],
         sub_fmtty_rest$12 = match$5[1];
        return [0, [6, sub_fmtty_rest$12], fmt$6];
       }
       break;
      case 7:
       if(typeof fmtty !== "number" && 7 === fmtty[0]){
        var
         fmtty_rest$6 = fmtty[1],
         sub_fmtty_rest$13 = sub_fmtty[1],
         match$6 =
           type_ignored_format_substituti
            (sub_fmtty_rest$13, fmt, fmtty_rest$6),
         fmt$7 = match$6[2],
         sub_fmtty_rest$14 = match$6[1];
        return [0, [7, sub_fmtty_rest$14], fmt$7];
       }
       break;
      case 8:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$7 = fmtty[2],
         sub2_fmtty = fmtty[1],
         sub_fmtty_rest$15 = sub_fmtty[2],
         sub2_fmtty$0 = sub_fmtty[1];
        if(caml_notequal([0, sub2_fmtty$0], [0, sub2_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$7 =
           type_ignored_format_substituti
            (sub_fmtty_rest$15, fmt, fmtty_rest$7),
         fmt$8 = match$7[2],
         sub_fmtty_rest$16 = match$7[1];
        return [0, [8, sub2_fmtty, sub_fmtty_rest$16], fmt$8];
       }
       break;
      case 9:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$8 = fmtty[3],
         sub2_fmtty$1 = fmtty[2],
         sub1_fmtty = fmtty[1],
         sub_fmtty_rest$17 = sub_fmtty[3],
         sub2_fmtty$2 = sub_fmtty[2],
         sub1_fmtty$0 = sub_fmtty[1],
         _cw_ = [0, caml_call1(CamlinternalFormatBasics[2], sub1_fmtty)];
        if
         (caml_notequal
           ([0, caml_call1(CamlinternalFormatBasics[2], sub1_fmtty$0)], _cw_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var _cx_ = [0, caml_call1(CamlinternalFormatBasics[2], sub2_fmtty$1)];
        if
         (caml_notequal
           ([0, caml_call1(CamlinternalFormatBasics[2], sub2_fmtty$2)], _cx_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         sub_fmtty$0 = trans(symm(sub1_fmtty), sub2_fmtty$1),
         match$8 = fmtty_rel_det(sub_fmtty$0),
         f4 = match$8[4],
         f2 = match$8[2];
        f2(0);
        f4(0);
        var
         match$9 =
           type_ignored_format_substituti
            (caml_call1(CamlinternalFormatBasics[2], sub_fmtty_rest$17),
             fmt,
             fmtty_rest$8),
         fmt$9 = match$9[2],
         sub_fmtty_rest$18 = match$9[1];
        return [0,
                [9, sub1_fmtty, sub2_fmtty$1, symm(sub_fmtty_rest$18)],
                fmt$9];
       }
       break;
      case 10:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[1],
         sub_fmtty_rest$19 = sub_fmtty[1],
         match$10 =
           type_ignored_format_substituti
            (sub_fmtty_rest$19, fmt, fmtty_rest$9),
         fmt$10 = match$10[2],
         sub_fmtty_rest$20 = match$10[1];
        return [0, [10, sub_fmtty_rest$20], fmt$10];
       }
       break;
      case 11:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[1],
         sub_fmtty_rest$21 = sub_fmtty[1],
         match$11 =
           type_ignored_format_substituti
            (sub_fmtty_rest$21, fmt, fmtty_rest$10),
         fmt$11 = match$11[2],
         sub_fmtty_rest$22 = match$11[1];
        return [0, [11, sub_fmtty_rest$22], fmt$11];
       }
       break;
      case 13:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         sub_fmtty_rest$23 = sub_fmtty[1],
         match$12 =
           type_ignored_format_substituti
            (sub_fmtty_rest$23, fmt, fmtty_rest$11),
         fmt$12 = match$12[2],
         sub_fmtty_rest$24 = match$12[1];
        return [0, [13, sub_fmtty_rest$24], fmt$12];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         sub_fmtty_rest$25 = sub_fmtty[1],
         match$13 =
           type_ignored_format_substituti
            (sub_fmtty_rest$25, fmt, fmtty_rest$12),
         fmt$13 = match$13[2],
         sub_fmtty_rest$26 = match$13[1];
        return [0, [14, sub_fmtty_rest$26], fmt$13];
       }
       break;
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function recast(fmt, fmtty){
    var _cv_ = symm(fmtty);
    return type_format(fmt, caml_call1(CamlinternalFormatBasics[2], _cv_));
   }
   function fix_padding(padty, width, str){
    var
     len = caml_ml_string_length(str),
     padty$0 = 0 <= width ? padty : 0,
     width$0 = caml_call1(Stdlib[18], width);
    if(width$0 <= len) return str;
    var
     _cu_ = 2 === padty$0 ? 48 : 32,
     res = caml_call2(Stdlib_bytes[1], width$0, _cu_);
    switch(padty$0){
      case 0:
       caml_call5(Stdlib_string[32], str, 0, res, 0, len); break;
      case 1:
       caml_call5(Stdlib_string[32], str, 0, res, width$0 - len | 0, len);
       break;
      default:
       a:
       if(0 < len){
        if
         (43 !== caml_string_get(str, 0)
          && 45 !== caml_string_get(str, 0) && 32 !== caml_string_get(str, 0))
         break a;
        caml_bytes_set(res, 0, caml_string_get(str, 0));
        caml_call5
         (Stdlib_string[32],
          str,
          1,
          res,
          (width$0 - len | 0) + 1 | 0,
          len - 1 | 0);
        break;
       }
       a:
       if(1 < len && 48 === caml_string_get(str, 0)){
        if(120 !== caml_string_get(str, 1) && 88 !== caml_string_get(str, 1))
         break a;
        caml_bytes_set(res, 1, caml_string_get(str, 1));
        caml_call5
         (Stdlib_string[32],
          str,
          2,
          res,
          (width$0 - len | 0) + 2 | 0,
          len - 2 | 0);
        break;
       }
       caml_call5(Stdlib_string[32], str, 0, res, width$0 - len | 0, len);
    }
    return caml_call1(Stdlib_bytes[42], res);
   }
   function fix_int_precision(prec, str){
    var
     prec$0 = caml_call1(Stdlib[18], prec),
     len = caml_ml_string_length(str),
     c = caml_string_get(str, 0);
    a:
    {
     b:
     {
      if(58 > c){
       if(32 !== c){
        if(43 > c) break a;
        switch(c - 43 | 0){
          case 5:
           c:
           if(len < (prec$0 + 2 | 0) && 1 < len){
            if
             (120 !== caml_string_get(str, 1)
              && 88 !== caml_string_get(str, 1))
             break c;
            var res$1 = caml_call2(Stdlib_bytes[1], prec$0 + 2 | 0, 48);
            caml_bytes_set(res$1, 1, caml_string_get(str, 1));
            caml_call5
             (Stdlib_string[32],
              str,
              2,
              res$1,
              (prec$0 - len | 0) + 4 | 0,
              len - 2 | 0);
            return caml_call1(Stdlib_bytes[42], res$1);
           }
           break b;
          case 0:
          case 2: break;
          case 1:
          case 3:
          case 4:
           break a;
          default: break b;
        }
       }
       if(len >= (prec$0 + 1 | 0)) break a;
       var res$0 = caml_call2(Stdlib_bytes[1], prec$0 + 1 | 0, 48);
       caml_bytes_set(res$0, 0, c);
       caml_call5
        (Stdlib_string[32],
         str,
         1,
         res$0,
         (prec$0 - len | 0) + 2 | 0,
         len - 1 | 0);
       return caml_call1(Stdlib_bytes[42], res$0);
      }
      if(71 <= c){if(5 < c - 97 >>> 0) break a;} else if(65 > c) break a;
     }
     if(len < prec$0){
      var res = caml_call2(Stdlib_bytes[1], prec$0, 48);
      caml_call5(Stdlib_string[32], str, 0, res, prec$0 - len | 0, len);
      return caml_call1(Stdlib_bytes[42], res);
     }
    }
    return str;
   }
   function string_to_caml_string(str){
    var
     str$0 = caml_call1(Stdlib_string[14], str),
     l = caml_ml_string_length(str$0),
     res = caml_call2(Stdlib_bytes[1], l + 2 | 0, 34);
    caml_blit_string(str$0, 0, res, 1, l);
    return caml_call1(Stdlib_bytes[42], res);
   }
   function format_of_fconv(fconv, prec){
    var
     prec$0 = caml_call1(Stdlib[18], prec),
     symb = char_of_fconv(_r_, fconv),
     buf = buffer_create(16);
    buffer_add_char(buf, 37);
    bprint_fconv_flag(buf, fconv);
    buffer_add_char(buf, 46);
    buffer_add_string(buf, caml_call1(Stdlib_int[10], prec$0));
    buffer_add_char(buf, symb);
    return buffer_contents(buf);
   }
   function transform_int_alt(iconv, s){
    if(13 > iconv) return s;
    var n = [0, 0], _cp_ = caml_ml_string_length(s) - 1 | 0, _co_ = 0;
    if(_cp_ >= 0){
     var i$0 = _co_;
     for(;;){
      if(9 >= caml_string_unsafe_get(s, i$0) - 48 >>> 0) n[1]++;
      var _ct_ = i$0 + 1 | 0;
      if(_cp_ === i$0) break;
      i$0 = _ct_;
     }
    }
    var
     digits = n[1],
     buf =
       caml_create_bytes
        (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
     pos = [0, 0];
    function put(c){caml_bytes_set(buf, pos[1], c); pos[1]++;}
    var
     left = [0, ((digits - 1 | 0) % 3 | 0) + 1 | 0],
     _cr_ = caml_ml_string_length(s) - 1 | 0,
     _cq_ = 0;
    if(_cr_ >= 0){
     var i = _cq_;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      if(9 < c - 48 >>> 0)
       put(c);
      else{if(0 === left[1]){put(95); left[1] = 3;} left[1]--; put(c);}
      var _cs_ = i + 1 | 0;
      if(_cr_ === i) break;
      i = _cs_;
     }
    }
    return caml_call1(Stdlib_bytes[42], buf);
   }
   function convert_int(iconv, n){
    switch(iconv){
      case 1:
       var _cn_ = cst_d$0; break;
      case 2:
       var _cn_ = cst_d$1; break;
      case 4:
       var _cn_ = cst_i$1; break;
      case 5:
       var _cn_ = cst_i$2; break;
      case 6:
       var _cn_ = cst_x; break;
      case 7:
       var _cn_ = cst_x$0; break;
      case 8:
       var _cn_ = cst_X; break;
      case 9:
       var _cn_ = cst_X$0; break;
      case 10:
       var _cn_ = cst_o; break;
      case 11:
       var _cn_ = cst_o$0; break;
      case 0:
      case 13:
       var _cn_ = cst_d; break;
      case 3:
      case 14:
       var _cn_ = cst_i$0; break;
      default: var _cn_ = cst_u;
    }
    return transform_int_alt(iconv, caml_format_int(_cn_, n));
   }
   function convert_int32(iconv, n){
    switch(iconv){
      case 1:
       var _cm_ = cst_ld$0; break;
      case 2:
       var _cm_ = cst_ld$1; break;
      case 4:
       var _cm_ = cst_li$1; break;
      case 5:
       var _cm_ = cst_li$2; break;
      case 6:
       var _cm_ = cst_lx; break;
      case 7:
       var _cm_ = cst_lx$0; break;
      case 8:
       var _cm_ = cst_lX; break;
      case 9:
       var _cm_ = cst_lX$0; break;
      case 10:
       var _cm_ = cst_lo; break;
      case 11:
       var _cm_ = cst_lo$0; break;
      case 0:
      case 13:
       var _cm_ = cst_ld; break;
      case 3:
      case 14:
       var _cm_ = cst_li$0; break;
      default: var _cm_ = cst_lu;
    }
    return transform_int_alt(iconv, caml_format_int(_cm_, n));
   }
   function convert_nativeint(iconv, n){
    switch(iconv){
      case 1:
       var _cl_ = cst_nd$0; break;
      case 2:
       var _cl_ = cst_nd$1; break;
      case 4:
       var _cl_ = cst_ni$1; break;
      case 5:
       var _cl_ = cst_ni$2; break;
      case 6:
       var _cl_ = cst_nx; break;
      case 7:
       var _cl_ = cst_nx$0; break;
      case 8:
       var _cl_ = cst_nX; break;
      case 9:
       var _cl_ = cst_nX$0; break;
      case 10:
       var _cl_ = cst_no; break;
      case 11:
       var _cl_ = cst_no$0; break;
      case 0:
      case 13:
       var _cl_ = cst_nd; break;
      case 3:
      case 14:
       var _cl_ = cst_ni$0; break;
      default: var _cl_ = cst_nu;
    }
    return transform_int_alt(iconv, caml_format_int(_cl_, n));
   }
   function convert_int64(iconv, n){
    switch(iconv){
      case 1:
       var _ck_ = cst_Ld$0; break;
      case 2:
       var _ck_ = cst_Ld$1; break;
      case 4:
       var _ck_ = cst_Li$1; break;
      case 5:
       var _ck_ = cst_Li$2; break;
      case 6:
       var _ck_ = cst_Lx; break;
      case 7:
       var _ck_ = cst_Lx$0; break;
      case 8:
       var _ck_ = cst_LX; break;
      case 9:
       var _ck_ = cst_LX$0; break;
      case 10:
       var _ck_ = cst_Lo; break;
      case 11:
       var _ck_ = cst_Lo$0; break;
      case 0:
      case 13:
       var _ck_ = cst_Ld; break;
      case 3:
      case 14:
       var _ck_ = cst_Li$0; break;
      default: var _ck_ = cst_Lu;
    }
    return transform_int_alt(iconv, runtime.caml_int64_format(_ck_, n));
   }
   function convert_float(fconv, prec, x){
    function hex(param){
     switch(fconv[1]){
       case 0:
        var sign = 45; break;
       case 1:
        var sign = 43; break;
       default: var sign = 32;
     }
     return runtime.caml_hexstring_of_float(x, prec, sign);
    }
    function caml_special_val(str){
     var match = runtime.caml_classify_float(x);
     return 3 === match
             ? x < 0. ? cst_neg_infinity : cst_infinity
             : 4 <= match ? cst_nan : str;
    }
    switch(fconv[2]){
      case 5:
       var
        str = caml_format_float(format_of_fconv(fconv, prec), x),
        len = caml_ml_string_length(str),
        i = 0;
       for(;;){
        if(i === len)
         var _ch_ = 0;
        else{
         var _cg_ = caml_string_get(str, i) - 46 | 0;
         a:
         {
          if(23 < _cg_ >>> 0){
           if(55 === _cg_) break a;
          }
          else if(21 < _cg_ - 1 >>> 0) break a;
          var i$0 = i + 1 | 0;
          i = i$0;
          continue;
         }
         var _ch_ = 1;
        }
        var _ci_ = _ch_ ? str : caml_call2(Stdlib[28], str, cst$17);
        return caml_special_val(_ci_);
       }
      case 6:
       return hex(0);
      case 7:
       var _cj_ = hex(0); return caml_call1(Stdlib_string[15], _cj_);
      case 8:
       return caml_special_val(hex(0));
      default: return caml_format_float(format_of_fconv(fconv, prec), x);
    }
   }
   function string_of_fmtty(fmtty){
    var buf = buffer_create(16);
    bprint_fmtty(buf, fmtty);
    return buffer_contents(buf);
   }
   function make_printf$0(counter, k, acc, fmt){
    var k$0 = k, acc$0 = acc, fmt$0 = fmt;
    for(;;){
     if(typeof fmt$0 === "number") return caml_call1(k$0, acc$0);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest);};
       case 1:
        var rest$0 = fmt$0[1];
        return function(c){
         var
          str = caml_call1(Stdlib_char[2], c),
          l = caml_ml_string_length(str),
          res = caml_call2(Stdlib_bytes[1], l + 2 | 0, 39);
         caml_blit_string(str, 0, res, 1, l);
         var new_acc = [4, acc$0, caml_call1(Stdlib_bytes[42], res)];
         return make_printf(k$0, new_acc, rest$0);};
       case 2:
        var rest$1 = fmt$0[2], pad = fmt$0[1];
        return make_padding
                (k$0, acc$0, rest$1, pad, function(str){return str;});
       case 3:
        var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$2, pad$0, string_to_caml_string);
       case 4:
        var
         rest$3 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$3, pad$1, prec, convert_int, iconv);
       case 5:
        var
         rest$4 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$4, pad$2, prec$0, convert_int32, iconv$0);
       case 6:
        var
         rest$5 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1];
        return make_int_padding_precision
                (k$0,
                 acc$0,
                 rest$5,
                 pad$3,
                 prec$1,
                 convert_nativeint,
                 iconv$1);
       case 7:
        var
         rest$6 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$6, pad$4, prec$2, convert_int64, iconv$2);
       case 8:
        var
         rest$7 = fmt$0[4],
         prec$3 = fmt$0[3],
         pad$5 = fmt$0[2],
         fconv = fmt$0[1];
        if(typeof pad$5 === "number"){
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var str = convert_float(fconv, p, x);
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   }
                  : function
                   (x){
                    var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x);
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   };
         var p = prec$3[1];
         return function(x){
          var str = convert_float(fconv, p, x);
          return make_printf(k$0, [4, acc$0, str], rest$7);};
        }
        if(0 === pad$5[0]){
         var w = pad$5[2], padty = pad$5[1];
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var str = fix_padding(padty, w, convert_float(fconv, p, x));
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   }
                  : function
                   (x){
                    var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x),
                     str$0 = fix_padding(padty, w, str);
                    return make_printf(k$0, [4, acc$0, str$0], rest$7);
                   };
         var p$0 = prec$3[1];
         return function(x){
          var str = fix_padding(padty, w, convert_float(fconv, p$0, x));
          return make_printf(k$0, [4, acc$0, str], rest$7);};
        }
        var padty$0 = pad$5[1];
        if(typeof prec$3 === "number")
         return prec$3
                 ? function
                  (w, p, x){
                   var
                    str = fix_padding(padty$0, w, convert_float(fconv, p, x));
                   return make_printf(k$0, [4, acc$0, str], rest$7);
                  }
                 : function
                  (w, x){
                   var
                    str =
                      convert_float(fconv, default_float_precision(fconv), x),
                    str$0 = fix_padding(padty$0, w, str);
                   return make_printf(k$0, [4, acc$0, str$0], rest$7);
                  };
        var p$1 = prec$3[1];
        return function(w, x){
         var str = fix_padding(padty$0, w, convert_float(fconv, p$1, x));
         return make_printf(k$0, [4, acc$0, str], rest$7);};
       case 9:
        var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$8, pad$6, Stdlib[30]);
       case 10:
        var rest$9 = fmt$0[1], acc$1 = [7, acc$0];
        acc$0 = acc$1;
        fmt$0 = rest$9;
        break;
       case 11:
        var rest$10 = fmt$0[2], str = fmt$0[1], acc$2 = [2, acc$0, str];
        acc$0 = acc$2;
        fmt$0 = rest$10;
        break;
       case 12:
        var rest$11 = fmt$0[2], chr = fmt$0[1], acc$3 = [3, acc$0, chr];
        acc$0 = acc$3;
        fmt$0 = rest$11;
        break;
       case 13:
        var
         rest$12 = fmt$0[3],
         sub_fmtty = fmt$0[2],
         ty = string_of_fmtty(sub_fmtty);
        return function(str){
         return make_printf(k$0, [4, acc$0, ty], rest$12);};
       case 14:
        var rest$13 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
         var fmt = param[1], _cf_ = recast(fmt, fmtty);
         return make_printf
                 (k$0,
                  acc$0,
                  caml_call2(CamlinternalFormatBasics[3], _cf_, rest$13));};
       case 15:
        var rest$14 = fmt$0[1];
        return function(f, x){
         return make_printf
                 (k$0,
                  [6, acc$0, function(o){return caml_call2(f, o, x);}],
                  rest$14);};
       case 16:
        var rest$15 = fmt$0[1];
        return function(f){return make_printf(k$0, [6, acc$0, f], rest$15);};
       case 17:
        var
         rest$16 = fmt$0[2],
         fmting_lit = fmt$0[1],
         acc$4 = [0, acc$0, fmting_lit];
        acc$0 = acc$4;
        fmt$0 = rest$16;
        break;
       case 18:
        var _cd_ = fmt$0[1];
        if(0 === _cd_[0]){
         var rest$17 = fmt$0[2], fmt$1 = _cd_[1][1];
         let acc = acc$0, k = k$0, rest = rest$17;
         var
          k$1 =
            function(kacc){return make_printf(k, [1, acc, [0, kacc]], rest);};
         k$0 = k$1;
         acc$0 = 0;
         fmt$0 = fmt$1;
        }
        else{
         var rest$18 = fmt$0[2], fmt$2 = _cd_[1][1];
         let acc = acc$0, k = k$0, rest = rest$18;
         var
          k$2 =
            function(kacc){return make_printf(k, [1, acc, [1, kacc]], rest);};
         k$0 = k$2;
         acc$0 = 0;
         fmt$0 = fmt$2;
        }
        break;
       case 19:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
       case 20:
        var
         rest$19 = fmt$0[3],
         new_acc = [8, acc$0, cst_Printf_bad_conversion];
        return function(param){return make_printf(k$0, new_acc, rest$19);};
       case 21:
        var rest$20 = fmt$0[2];
        return function(n){
         var new_acc = [4, acc$0, caml_format_int(cst_u$0, n)];
         return make_printf(k$0, new_acc, rest$20);};
       case 22:
        var rest$21 = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest$21);};
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (make_ignored_param$0, [0, k$0, acc$0, ign, rest$22]);
        var counter$1 = counter + 1 | 0;
        return make_ignored_param$0(counter$1, k$0, acc$0, ign, rest$22);
       default:
        var
         rest$23 = fmt$0[3],
         f = fmt$0[2],
         arity = fmt$0[1],
         _ce_ = caml_call1(f, 0);
        if(counter >= 50)
         return caml_trampoline_return
                 (make_custom$0, [0, k$0, acc$0, rest$23, arity, _ce_]);
        var counter$0 = counter + 1 | 0;
        return make_custom$0(counter$0, k$0, acc$0, rest$23, arity, _ce_);
     }
    }
   }
   function make_printf(k, acc, fmt){
    return caml_trampoline(make_printf$0(0, k, acc, fmt));
   }
   function make_ignored_param$0(counter, k, acc, ign, fmt){
    if(typeof ign === "number")
     switch(ign){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$0 = counter + 1 | 0;
        return make_invalid_arg(counter$0, k, acc, fmt);
       case 1:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$1 = counter + 1 | 0;
        return make_invalid_arg(counter$1, k, acc, fmt);
       case 2:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
       default:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$2 = counter + 1 | 0;
        return make_invalid_arg(counter$2, k, acc, fmt);
     }
    switch(ign[0]){
      case 0:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$3 = counter + 1 | 0;
       return make_invalid_arg(counter$3, k, acc, fmt);
      case 1:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$4 = counter + 1 | 0;
       return make_invalid_arg(counter$4, k, acc, fmt);
      case 2:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$5 = counter + 1 | 0;
       return make_invalid_arg(counter$5, k, acc, fmt);
      case 3:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$6 = counter + 1 | 0;
       return make_invalid_arg(counter$6, k, acc, fmt);
      case 4:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$7 = counter + 1 | 0;
       return make_invalid_arg(counter$7, k, acc, fmt);
      case 5:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$8 = counter + 1 | 0;
       return make_invalid_arg(counter$8, k, acc, fmt);
      case 6:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$9 = counter + 1 | 0;
       return make_invalid_arg(counter$9, k, acc, fmt);
      case 7:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$10 = counter + 1 | 0;
       return make_invalid_arg(counter$10, k, acc, fmt);
      case 8:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$11 = counter + 1 | 0;
       return make_invalid_arg(counter$11, k, acc, fmt);
      case 9:
       var fmtty = ign[2];
       if(counter >= 50)
        return caml_trampoline_return
                (make_from_fmtty$0, [0, k, acc, fmtty, fmt]);
       var counter$14 = counter + 1 | 0;
       return make_from_fmtty$0(counter$14, k, acc, fmtty, fmt);
      case 10:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$12 = counter + 1 | 0;
       return make_invalid_arg(counter$12, k, acc, fmt);
      default:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$13 = counter + 1 | 0;
       return make_invalid_arg(counter$13, k, acc, fmt);
    }
   }
   function make_ignored_param(k, acc, ign, fmt){
    return caml_trampoline(make_ignored_param$0(0, k, acc, ign, fmt));
   }
   function make_from_fmtty$0(counter, k, acc, fmtty, fmt){
    if(typeof fmtty !== "number")
     switch(fmtty[0]){
       case 0:
        var rest = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest, fmt);};
       case 1:
        var rest$0 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$0, fmt);};
       case 2:
        var rest$1 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$1, fmt);};
       case 3:
        var rest$2 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$2, fmt);};
       case 4:
        var rest$3 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$3, fmt);};
       case 5:
        var rest$4 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$4, fmt);};
       case 6:
        var rest$5 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$5, fmt);};
       case 7:
        var rest$6 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$6, fmt);};
       case 8:
        var rest$7 = fmtty[2];
        return function(param){return make_from_fmtty(k, acc, rest$7, fmt);};
       case 9:
        var
         rest$8 = fmtty[3],
         ty2 = fmtty[2],
         ty1 = fmtty[1],
         ty = trans(symm(ty1), ty2);
        return function(param){
         return make_from_fmtty
                 (k,
                  acc,
                  caml_call2(CamlinternalFormatBasics[1], ty, rest$8),
                  fmt);};
       case 10:
        var rest$9 = fmtty[1];
        return function(param, _cc_){
         return make_from_fmtty(k, acc, rest$9, fmt);};
       case 11:
        var rest$10 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$10, fmt);};
       case 12:
        var rest$11 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$11, fmt);};
       case 13:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _v_], 1);
     }
    if(counter >= 50)
     return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_invalid_arg(counter$0, k, acc, fmt);
   }
   function make_from_fmtty(k, acc, fmtty, fmt){
    return caml_trampoline(make_from_fmtty$0(0, k, acc, fmtty, fmt));
   }
   function make_invalid_arg(counter, k, acc, fmt){
    var _cb_ = [8, acc, cst_Printf_bad_conversion$0];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _cb_, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _cb_, fmt);
   }
   function make_padding(k, acc, fmt, pad, trans){
    if(typeof pad === "number")
     return function(x){
      var new_acc = [4, acc, caml_call1(trans, x)];
      return make_printf(k, new_acc, fmt);};
    if(0 === pad[0]){
     var width = pad[2], padty = pad[1];
     return function(x){
      var new_acc = [4, acc, fix_padding(padty, width, caml_call1(trans, x))];
      return make_printf(k, new_acc, fmt);};
    }
    var padty$0 = pad[1];
    return function(w, x){
     var new_acc = [4, acc, fix_padding(padty$0, w, caml_call1(trans, x))];
     return make_printf(k, new_acc, fmt);};
   }
   function make_int_padding_precision(k, acc, fmt, pad, prec, trans, iconv){
    if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = fix_int_precision(p, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = caml_call2(trans, iconv, x);
                return make_printf(k, [4, acc, str], fmt);
               };
     var p = prec[1];
     return function(x){
      var str = fix_int_precision(p, caml_call2(trans, iconv, x));
      return make_printf(k, [4, acc, str], fmt);};
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var
                 str =
                   fix_padding
                    (padty,
                     w,
                     fix_int_precision(p, caml_call2(trans, iconv, x)));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = fix_padding(padty, w, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               };
     var p$0 = prec[1];
     return function(x){
      var
       str =
         fix_padding
          (padty, w, fix_int_precision(p$0, caml_call2(trans, iconv, x)));
      return make_printf(k, [4, acc, str], fmt);};
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var
                str =
                  fix_padding
                   (padty$0,
                    w,
                    fix_int_precision(p, caml_call2(trans, iconv, x)));
               return make_printf(k, [4, acc, str], fmt);
              }
             : function
              (w, x){
               var str = fix_padding(padty$0, w, caml_call2(trans, iconv, x));
               return make_printf(k, [4, acc, str], fmt);
              };
    var p$1 = prec[1];
    return function(w, x){
     var
      str =
        fix_padding
         (padty$0, w, fix_int_precision(p$1, caml_call2(trans, iconv, x)));
     return make_printf(k, [4, acc, str], fmt);};
   }
   function make_custom$0(counter, k, acc, rest, arity, f){
    if(arity){
     var arity$0 = arity[1];
     return function(x){
      return make_custom(k, acc, rest, arity$0, caml_call1(f, x));};
    }
    var _ca_ = [4, acc, f];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _ca_, rest]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _ca_, rest);
   }
   function make_custom(k, acc, rest, arity, f){
    return caml_trampoline(make_custom$0(0, k, acc, rest, arity, f));
   }
   function make_iprintf$0(counter, k, o, fmt){
    var k$0 = k, fmt$0 = fmt;
    for(;;){
     if(typeof fmt$0 === "number") return caml_call1(k$0, o);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1], x = make_iprintf(k$0, o, rest);
        return function(_b$_){return x;};
       case 1:
        var rest$0 = fmt$0[1], x$0 = make_iprintf(k$0, o, rest$0);
        return function(_b__){return x$0;};
       case 2:
        var _bM_ = fmt$0[1];
        if(typeof _bM_ === "number"){
         var rest$1 = fmt$0[2], x$1 = make_iprintf(k$0, o, rest$1);
         return function(_b9_){return x$1;};
        }
        if(0 === _bM_[0]){
         var rest$2 = fmt$0[2], x$2 = make_iprintf(k$0, o, rest$2);
         return function(_b8_){return x$2;};
        }
        var
         rest$3 = fmt$0[2],
         x$3 = make_iprintf(k$0, o, rest$3),
         x$4 = function(_b7_){return x$3;};
        return function(_b6_){return x$4;};
       case 3:
        var _bN_ = fmt$0[1];
        if(typeof _bN_ === "number"){
         var rest$4 = fmt$0[2], x$5 = make_iprintf(k$0, o, rest$4);
         return function(_b5_){return x$5;};
        }
        if(0 === _bN_[0]){
         var rest$5 = fmt$0[2], x$6 = make_iprintf(k$0, o, rest$5);
         return function(_b4_){return x$6;};
        }
        var
         rest$6 = fmt$0[2],
         x$7 = make_iprintf(k$0, o, rest$6),
         x$8 = function(_b3_){return x$7;};
        return function(_b2_){return x$8;};
       case 4:
        var rest$7 = fmt$0[4], prec = fmt$0[3], pad = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$7, pad, prec);
       case 5:
        var rest$8 = fmt$0[4], prec$0 = fmt$0[3], pad$0 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$8, pad$0, prec$0);
       case 6:
        var rest$9 = fmt$0[4], prec$1 = fmt$0[3], pad$1 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$9, pad$1, prec$1);
       case 7:
        var rest$10 = fmt$0[4], prec$2 = fmt$0[3], pad$2 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$10, pad$2, prec$2);
       case 8:
        var rest$11 = fmt$0[4], prec$3 = fmt$0[3], pad$3 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$11, pad$3, prec$3);
       case 9:
        var _bO_ = fmt$0[1];
        if(typeof _bO_ === "number"){
         var rest$12 = fmt$0[2], x$9 = make_iprintf(k$0, o, rest$12);
         return function(_b1_){return x$9;};
        }
        if(0 === _bO_[0]){
         var rest$13 = fmt$0[2], x$10 = make_iprintf(k$0, o, rest$13);
         return function(_b0_){return x$10;};
        }
        var
         rest$14 = fmt$0[2],
         x$11 = make_iprintf(k$0, o, rest$14),
         x$12 = function(_bZ_){return x$11;};
        return function(_bY_){return x$12;};
       case 10:
        var rest$15 = fmt$0[1]; fmt$0 = rest$15; break;
       case 11:
        var rest$16 = fmt$0[2]; fmt$0 = rest$16; break;
       case 12:
        var rest$17 = fmt$0[2]; fmt$0 = rest$17; break;
       case 13:
        var rest$18 = fmt$0[3], x$13 = make_iprintf(k$0, o, rest$18);
        return function(_bX_){return x$13;};
       case 14:
        var rest$19 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
         var fmt = param[1], _bW_ = recast(fmt, fmtty);
         return make_iprintf
                 (k$0,
                  o,
                  caml_call2(CamlinternalFormatBasics[3], _bW_, rest$19));};
       case 15:
        var
         rest$20 = fmt$0[1],
         x$14 = make_iprintf(k$0, o, rest$20),
         x$15 = function(_bV_){return x$14;};
        return function(_bU_){return x$15;};
       case 16:
        var rest$21 = fmt$0[1], x$16 = make_iprintf(k$0, o, rest$21);
        return function(_bT_){return x$16;};
       case 17:
        var rest$22 = fmt$0[2]; fmt$0 = rest$22; break;
       case 18:
        var _bP_ = fmt$0[1];
        if(0 === _bP_[0]){
         var rest$23 = fmt$0[2], fmt$1 = _bP_[1][1];
         let k = k$0, rest = rest$23;
         var k$1 = function(koc){return make_iprintf(k, koc, rest);};
         k$0 = k$1;
         fmt$0 = fmt$1;
        }
        else{
         var rest$24 = fmt$0[2], fmt$2 = _bP_[1][1];
         let k = k$0, rest = rest$24;
         var k$2 = function(koc){return make_iprintf(k, koc, rest);};
         k$0 = k$2;
         fmt$0 = fmt$2;
        }
        break;
       case 19:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _w_], 1);
       case 20:
        var rest$25 = fmt$0[3], x$17 = make_iprintf(k$0, o, rest$25);
        return function(_bS_){return x$17;};
       case 21:
        var rest$26 = fmt$0[2], x$18 = make_iprintf(k$0, o, rest$26);
        return function(_bR_){return x$18;};
       case 22:
        var rest$27 = fmt$0[1], x$19 = make_iprintf(k$0, o, rest$27);
        return function(_bQ_){return x$19;};
       case 23:
        var rest$28 = fmt$0[2], ign = fmt$0[1];
        return make_ignored_param
                (function(param){return caml_call1(k$0, o);}, 0, ign, rest$28);
       default:
        var rest$29 = fmt$0[3], arity = fmt$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (fn_of_custom_arity$0, [0, k$0, o, rest$29, arity]);
        var counter$0 = counter + 1 | 0;
        return fn_of_custom_arity$0(counter$0, k$0, o, rest$29, arity);
     }
    }
   }
   function make_iprintf(k, o, fmt){
    return caml_trampoline(make_iprintf$0(0, k, o, fmt));
   }
   function fn_of_padding_precision(k, o, fmt, pad, prec){
    if(typeof pad === "number"){
     if(typeof prec !== "number"){
      var x$2 = make_iprintf(k, o, fmt);
      return function(_bL_){return x$2;};
     }
     if(prec){
      var x = make_iprintf(k, o, fmt), x$0 = function(_bK_){return x;};
      return function(_bJ_){return x$0;};
     }
     var x$1 = make_iprintf(k, o, fmt);
     return function(_bI_){return x$1;};
    }
    if(0 === pad[0]){
     if(typeof prec !== "number"){
      var x$6 = make_iprintf(k, o, fmt);
      return function(_bH_){return x$6;};
     }
     if(prec){
      var x$3 = make_iprintf(k, o, fmt), x$4 = function(_bG_){return x$3;};
      return function(_bF_){return x$4;};
     }
     var x$5 = make_iprintf(k, o, fmt);
     return function(_bE_){return x$5;};
    }
    if(typeof prec !== "number"){
     var x$12 = make_iprintf(k, o, fmt), x$13 = function(_bD_){return x$12;};
     return function(_bC_){return x$13;};
    }
    if(prec){
     var
      x$7 = make_iprintf(k, o, fmt),
      x$8 = function(_bB_){return x$7;},
      x$9 = function(_bA_){return x$8;};
     return function(_bz_){return x$9;};
    }
    var x$10 = make_iprintf(k, o, fmt);
    function x$11(_by_){return x$10;}
    return function(_bx_){return x$11;};
   }
   function fn_of_custom_arity$0(counter, k, o, fmt, param){
    if(param){
     var arity = param[1], x = fn_of_custom_arity(k, o, fmt, arity);
     return function(_bw_){return x;};
    }
    if(counter >= 50)
     return caml_trampoline_return(make_iprintf$0, [0, k, o, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_iprintf$0(counter$0, k, o, fmt);
   }
   function fn_of_custom_arity(k, o, fmt, param){
    return caml_trampoline(fn_of_custom_arity$0(0, k, o, fmt, param));
   }
   function output_acc(o, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        output_acc(o, p);
        return caml_call2(Stdlib[66], o, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         output_acc(o, p$0);
         caml_call2(Stdlib[66], o, cst$18);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         output_acc(o, p$0);
         caml_call2(Stdlib[66], o, cst$19);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        output_acc(o, p$3);
        return caml_call1(f, o);
       case 7:
        var p$4 = acc$0[1];
        output_acc(o, p$4);
        return caml_call1(Stdlib[63], o);
       case 8:
        var msg = acc$0[2], p$5 = acc$0[1];
        output_acc(o, p$5);
        return caml_call1(Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        output_acc(o, p$1);
        return caml_call2(Stdlib[66], o, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        output_acc(o, p$2);
        return caml_call2(Stdlib[65], o, c);
     }
    }
   }
   function bufput_acc(b, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        bufput_acc(b, p);
        return caml_call2(Stdlib_buffer[14], b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         bufput_acc(b, p$0);
         caml_call2(Stdlib_buffer[14], b, cst$20);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         bufput_acc(b, p$0);
         caml_call2(Stdlib_buffer[14], b, cst$21);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        bufput_acc(b, p$3);
        return caml_call1(f, b);
       case 7:
        var acc$3 = acc$0[1]; acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
        bufput_acc(b, p$4);
        return caml_call1(Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        bufput_acc(b, p$1);
        return caml_call2(Stdlib_buffer[14], b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        bufput_acc(b, p$2);
        return caml_call2(Stdlib_buffer[10], b, c);
     }
    }
   }
   function strput_acc(b, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        strput_acc(b, p);
        return caml_call2(Stdlib_buffer[14], b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         strput_acc(b, p$0);
         caml_call2(Stdlib_buffer[14], b, cst$22);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         strput_acc(b, p$0);
         caml_call2(Stdlib_buffer[14], b, cst$23);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        strput_acc(b, p$3);
        var _bv_ = caml_call1(f, 0);
        return caml_call2(Stdlib_buffer[14], b, _bv_);
       case 7:
        var acc$3 = acc$0[1]; acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
        strput_acc(b, p$4);
        return caml_call1(Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        strput_acc(b, p$1);
        return caml_call2(Stdlib_buffer[14], b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        strput_acc(b, p$2);
        return caml_call2(Stdlib_buffer[10], b, c);
     }
    }
   }
   function failwith_message(param){
    var fmt = param[1], buf = caml_call1(Stdlib_buffer[1], 256);
    function k(acc){
     strput_acc(buf, acc);
     var _bu_ = caml_call1(Stdlib_buffer[2], buf);
     return caml_call1(Stdlib[2], _bu_);
    }
    return make_printf(k, 0, fmt);
   }
   function open_box_of_string(str){
    if(str === cst$43) return _x_;
    var len = caml_ml_string_length(str);
    function invalid_box(param){
     return caml_call1(failwith_message(_y_), str);
    }
    function parse_spaces(i){
     var i$0 = i;
     for(;;){
      if(i$0 === len) return i$0;
      var match = caml_string_get(str, i$0);
      if(9 !== match && 32 !== match) return i$0;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
     }
    }
    var wstart = parse_spaces(0);
    a:
    b:
    {
     var wend = wstart;
     for(;;){
      if(wend === len) break b;
      if(25 < caml_string_get(str, wend) - 97 >>> 0) break;
      var j = wend + 1 | 0;
      wend = j;
     }
     break a;
    }
    var
     box_name = caml_call3(Stdlib_string[9], str, wstart, wend - wstart | 0),
     nstart = parse_spaces(wend);
    a:
    b:
    {
     var nend = nstart;
     for(;;){
      if(nend === len) break b;
      var match = caml_string_get(str, nend);
      if(48 <= match){if(58 <= match) break;} else if(45 !== match) break;
      var j$0 = nend + 1 | 0;
      nend = j$0;
     }
     break a;
    }
    if(nstart === nend)
     var indent = 0;
    else
     try{
      var
       _bs_ =
         runtime.caml_int_of_string
          (caml_call3(Stdlib_string[9], str, nstart, nend - nstart | 0)),
       indent = _bs_;
     }
     catch(_bt_){
      var _br_ = caml_wrap_exception(_bt_);
      if(_br_[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(_br_, 0);
      var indent = invalid_box(0);
     }
    var exp_end = parse_spaces(nend);
    if(exp_end !== len) invalid_box(0);
    a:
    {
     if(box_name !== cst$43 && box_name !== "b"){
      if(box_name === "h"){var box_type = 0; break a;}
      if(box_name === "hov"){var box_type = 3; break a;}
      if(box_name === "hv"){var box_type = 2; break a;}
      if(box_name !== "v"){var box_type = invalid_box(0); break a;}
      var box_type = 1;
      break a;
     }
     var box_type = 4;
    }
    return [0, indent, box_type];
   }
   function make_padding_fmt_ebb(pad, fmt){
    if(typeof pad === "number") return [0, 0, fmt];
    if(0 === pad[0]){var w = pad[2], s = pad[1]; return [0, [0, s, w], fmt];}
    var s$0 = pad[1];
    return [0, [1, s$0], fmt];
   }
   function make_padprec_fmt_ebb(pad, prec, fmt){
    if(typeof prec === "number")
     var match = prec ? [0, 1] : [0, 0];
    else
     var p = prec[1], match = [0, [0, p]];
    var prec$0 = match[1];
    if(typeof pad === "number") return [0, 0, prec$0, fmt];
    if(0 === pad[0]){
     var w = pad[2], s = pad[1];
     return [0, [0, s, w], prec$0, fmt];
    }
    var s$0 = pad[1];
    return [0, [1, s$0], prec$0, fmt];
   }
   function fmt_ebb_of_string(legacy_behavior, str){
    if(legacy_behavior)
     var flag = legacy_behavior[1], legacy_behavior$0 = flag;
    else
     var legacy_behavior$0 = 1;
    function invalid_format_message(str_ind, msg){
     return caml_call3(failwith_message(_z_), str, str_ind, msg);
    }
    function invalid_format_without(str_ind, c, s){
     return caml_call4(failwith_message(_A_), str, str_ind, c, s);
    }
    function expected_character(str_ind, expected, read){
     return caml_call4(failwith_message(_B_), str, str_ind, expected, read);
    }
    function parse(lit_start, end_ind){
     a:
     {
      var str_ind = lit_start;
      for(;;){
       if(str_ind === end_ind) return add_literal(lit_start, str_ind, 0);
       var match = caml_string_get(str, str_ind);
       if(37 === match) break;
       if(64 === match) break a;
       var str_ind$1 = str_ind + 1 | 0;
       str_ind = str_ind$1;
      }
      var str_ind$2 = str_ind + 1 | 0;
      if(str_ind$2 === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var
       match$1 =
         95 === caml_string_get(str, str_ind$2)
          ? parse_flags(str_ind, str_ind$2 + 1 | 0, end_ind, 1)
          : parse_flags(str_ind, str_ind$2, end_ind, 0),
       fmt_rest = match$1[1];
      return add_literal(lit_start, str_ind, fmt_rest);
     }
     var str_ind$0 = str_ind + 1 | 0;
     a:
     if(str_ind$0 === end_ind)
      var match$0 = _N_;
     else{
      var c = caml_string_get(str, str_ind$0);
      if(65 <= c){
       if(94 <= c){
        var switcher = c - 123 | 0;
        if(2 >= switcher >>> 0)
         switch(switcher){
           case 0:
            var match$0 = parse_tag(1, str_ind$0 + 1 | 0, end_ind); break a;
           case 1: break;
           default:
            var
             fmt_rest$2 = parse(str_ind$0 + 1 | 0, end_ind)[1],
             match$0 = [0, [17, 1, fmt_rest$2]];
            break a;
         }
       }
       else if(91 <= c)
        switch(c - 91 | 0){
          case 0:
           var match$0 = parse_tag(0, str_ind$0 + 1 | 0, end_ind); break a;
          case 1: break;
          default:
           var
            fmt_rest$3 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 0, fmt_rest$3]];
           break a;
        }
      }
      else{
       if(10 === c){
        var
         fmt_rest$4 = parse(str_ind$0 + 1 | 0, end_ind)[1],
         match$0 = [0, [17, 3, fmt_rest$4]];
        break a;
       }
       if(32 <= c)
        switch(c - 32 | 0){
          case 0:
           var
            fmt_rest$5 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, _O_, fmt_rest$5]];
           break a;
          case 5:
           if
            ((str_ind$0 + 1 | 0) < end_ind
             && 37 === caml_string_get(str, str_ind$0 + 1 | 0)){
            var
             fmt_rest$6 = parse(str_ind$0 + 2 | 0, end_ind)[1],
             match$0 = [0, [17, 6, fmt_rest$6]];
            break a;
           }
           var
            fmt_rest$7 = parse(str_ind$0, end_ind)[1],
            match$0 = [0, [12, 64, fmt_rest$7]];
           break a;
          case 12:
           var
            fmt_rest$8 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, _P_, fmt_rest$8]];
           break a;
          case 14:
           var
            fmt_rest$9 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 4, fmt_rest$9]];
           break a;
          case 27:
           var str_ind$3 = str_ind$0 + 1 | 0;
           b:
           try{
            var
             _bg_ = str_ind$3 === end_ind ? 1 : 0,
             _bh_ = _bg_ || (60 !== caml_string_get(str, str_ind$3) ? 1 : 0);
            if(_bh_) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
            var
             str_ind_1 = parse_spaces(str_ind$3 + 1 | 0, end_ind),
             match$2 = caml_string_get(str, str_ind_1);
            c:
            {
             if(48 <= match$2){
              if(58 > match$2) break c;
             }
             else if(45 === match$2) break c;
             throw caml_maybe_attach_backtrace(Stdlib[8], 1);
            }
            var
             match$3 = parse_integer(str_ind_1, end_ind),
             width = match$3[2],
             str_ind_2 = match$3[1],
             str_ind_3 = parse_spaces(str_ind_2, end_ind),
             switcher$0 = caml_string_get(str, str_ind_3) - 45 | 0;
            if(12 < switcher$0 >>> 0){
             if(17 === switcher$0){
              var
               s =
                 caml_call3
                  (Stdlib_string[9],
                   str,
                   str_ind$3 - 2 | 0,
                   (str_ind_3 - str_ind$3 | 0) + 3 | 0),
               _bi_ = [0, s, width, 0],
               _bj_ = str_ind_3 + 1 | 0,
               formatting_lit$0 = _bi_,
               next_ind = _bj_;
              break b;
             }
            }
            else if(1 < switcher$0 - 1 >>> 0){
             var
              match$4 = parse_integer(str_ind_3, end_ind),
              offset = match$4[2],
              str_ind_4 = match$4[1],
              str_ind_5 = parse_spaces(str_ind_4, end_ind);
             if(62 !== caml_string_get(str, str_ind_5))
              throw caml_maybe_attach_backtrace(Stdlib[8], 1);
             var
              s$0 =
                caml_call3
                 (Stdlib_string[9],
                  str,
                  str_ind$3 - 2 | 0,
                  (str_ind_5 - str_ind$3 | 0) + 3 | 0),
              _bk_ = [0, s$0, width, offset],
              _bl_ = str_ind_5 + 1 | 0,
              formatting_lit$0 = _bk_,
              next_ind = _bl_;
             break b;
            }
            throw caml_maybe_attach_backtrace(Stdlib[8], 1);
           }
           catch(_bq_){
            var _bf_ = caml_wrap_exception(_bq_);
            if(_bf_ !== Stdlib[8] && _bf_[1] !== Stdlib[7])
             throw caml_maybe_attach_backtrace(_bf_, 0);
            var formatting_lit$0 = formatting_lit, next_ind = str_ind$3;
           }
           var
            fmt_rest$12 = parse(next_ind, end_ind)[1],
            match$0 = [0, [17, formatting_lit$0, fmt_rest$12]];
           break a;
          case 28:
           var str_ind$4 = str_ind$0 + 1 | 0;
           try{
            var
             str_ind_1$0 = parse_spaces(str_ind$4, end_ind),
             match$6 = caml_string_get(str, str_ind_1$0);
            b:
            {
             c:
             {
              if(48 <= match$6){
               if(58 > match$6) break c;
              }
              else if(45 === match$6) break c;
              var _bo_ = 0;
              break b;
             }
             var
              match$7 = parse_integer(str_ind_1$0, end_ind),
              size = match$7[2],
              str_ind_2$0 = match$7[1],
              str_ind_3$0 = parse_spaces(str_ind_2$0, end_ind);
             if(62 !== caml_string_get(str, str_ind_3$0))
              throw caml_maybe_attach_backtrace(Stdlib[8], 1);
             var
              s$1 =
                caml_call3
                 (Stdlib_string[9],
                  str,
                  str_ind$4 - 2 | 0,
                  (str_ind_3$0 - str_ind$4 | 0) + 3 | 0),
              _bo_ = [0, [0, str_ind_3$0 + 1 | 0, [1, s$1, size]]];
            }
            var _bn_ = _bo_;
           }
           catch(_bp_){
            var _bm_ = caml_wrap_exception(_bp_);
            if(_bm_ !== Stdlib[8] && _bm_[1] !== Stdlib[7])
             throw caml_maybe_attach_backtrace(_bm_, 0);
            var _bn_ = 0;
           }
           if(_bn_)
            var
             match$5 = _bn_[1],
             formatting_lit$1 = match$5[2],
             next_ind$0 = match$5[1],
             fmt_rest$13 = parse(next_ind$0, end_ind)[1],
             _be_ = [0, [17, formatting_lit$1, fmt_rest$13]];
           else
            var
             fmt_rest$14 = parse(str_ind$4, end_ind)[1],
             _be_ = [0, [17, _Q_, fmt_rest$14]];
           var match$0 = _be_;
           break a;
          case 31:
           var
            fmt_rest$10 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 2, fmt_rest$10]];
           break a;
          case 32:
           var
            fmt_rest$11 = parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 5, fmt_rest$11]];
           break a;
        }
      }
      var
       fmt_rest$1 = parse(str_ind$0 + 1 | 0, end_ind)[1],
       match$0 = [0, [17, [2, c], fmt_rest$1]];
     }
     var fmt_rest$0 = match$0[1];
     return add_literal(lit_start, str_ind, fmt_rest$0);
    }
    function parse_flags(pct_ind, str_ind, end_ind, ign){
     var
      zero = [0, 0],
      minus = [0, 0],
      plus = [0, 0],
      space = [0, 0],
      hash = [0, 0];
     function set_flag(str_ind, flag){
      var _bb_ = flag[1], _bc_ = _bb_ ? 1 - legacy_behavior$0 : _bb_;
      if(_bc_){
       var _bd_ = caml_string_get(str, str_ind);
       caml_call3(failwith_message(_C_), str, str_ind, _bd_);
      }
      flag[1] = 1;
     }
     a:
     b:
     {
      var str_ind$0 = str_ind;
      c:
      for(;;){
       if(str_ind$0 === end_ind)
        invalid_format_message(end_ind, cst_unexpected_end_of_format);
       var switcher = caml_string_get(str, str_ind$0) - 32 | 0;
       if(16 < switcher >>> 0) break b;
       switch(switcher){
         case 0:
          set_flag(str_ind$0, space);
          var str_ind$1 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$1;
          break;
         case 3:
          set_flag(str_ind$0, hash);
          var str_ind$2 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$2;
          break;
         case 11:
          set_flag(str_ind$0, plus);
          var str_ind$3 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$3;
          break;
         case 13:
          set_flag(str_ind$0, minus);
          var str_ind$4 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$4;
          break;
         case 16:
          set_flag(str_ind$0, zero);
          var str_ind$5 = str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$5;
          break;
         default: break c;
       }
      }
      break a;
     }
     var
      space$0 = space[1],
      hash$0 = hash[1],
      plus$0 = plus[1],
      minus$0 = minus[1],
      zero$0 = zero[1];
     if(str_ind$0 === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var
      padty =
        zero$0
         ? minus$0
           ? legacy_behavior$0
             ? 0
             : incompatible_flag(pct_ind, str_ind$0, 45, cst_0)
           : 2
         : minus$0 ? 0 : 1,
      match = caml_string_get(str, str_ind$0);
     if(48 <= match){
      if(58 > match){
       var
        match$0 = parse_positive(str_ind$0, end_ind, 0),
        width = match$0[2],
        new_ind = match$0[1];
       return parse_after_padding
               (pct_ind,
                new_ind,
                end_ind,
                minus$0,
                plus$0,
                hash$0,
                space$0,
                ign,
                [0, padty, width]);
      }
     }
     else if(42 === match)
      return parse_after_padding
              (pct_ind,
               str_ind$0 + 1 | 0,
               end_ind,
               minus$0,
               plus$0,
               hash$0,
               space$0,
               ign,
               [1, padty]);
     switch(padty){
       case 0:
        if(1 - legacy_behavior$0)
         invalid_format_without(str_ind$0 - 1 | 0, 45, cst_padding);
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 0);
       case 1:
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 0);
       default:
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 _D_);
     }
    }
    function parse_after_padding
    (pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var symb = caml_string_get(str, str_ind);
     if(46 !== symb)
      return parse_conversion
              (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               0,
               pad,
               symb);
     var str_ind$0 = str_ind + 1 | 0;
     if(str_ind$0 === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     function parse_literal(minus, str_ind){
      var
       match = parse_positive(str_ind, end_ind, 0),
       prec = match[2],
       new_ind = match[1];
      return parse_after_precision
              (pct_ind,
               new_ind,
               end_ind,
               minus,
               plus,
               hash,
               space,
               ign,
               pad,
               [0, prec]);
     }
     var symb$0 = caml_string_get(str, str_ind$0);
     if(48 <= symb$0){
      if(58 > symb$0) return parse_literal(minus, str_ind$0);
     }
     else if(42 <= symb$0)
      switch(symb$0 - 42 | 0){
        case 0:
         return parse_after_precision
                 (pct_ind,
                  str_ind$0 + 1 | 0,
                  end_ind,
                  minus,
                  plus,
                  hash,
                  space,
                  ign,
                  pad,
                  1);
        case 1:
        case 3:
         if(legacy_behavior$0){
          var
           _ba_ = str_ind$0 + 1 | 0,
           minus$0 = minus || (45 === symb$0 ? 1 : 0);
          return parse_literal(minus$0, _ba_);
         }
         break;
      }
     return legacy_behavior$0
             ? parse_after_precision
               (pct_ind,
                str_ind$0,
                end_ind,
                minus,
                plus,
                hash,
                space,
                ign,
                pad,
                _E_)
             : invalid_format_without(str_ind$0 - 1 | 0, 46, cst_precision);
    }
    function parse_after_precision
    (pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad, prec){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     function parse_conv(padprec){
      return parse_conversion
              (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               prec,
               padprec,
               caml_string_get(str, str_ind));
     }
     if(typeof pad !== "number") return parse_conv(pad);
     if(typeof prec === "number" && ! prec) return parse_conv(0);
     if(minus){
      if(typeof prec === "number") return parse_conv(_F_);
      var n = prec[1];
      return parse_conv([0, 0, n]);
     }
     if(typeof prec === "number") return parse_conv(_G_);
     var n$0 = prec[1];
     return parse_conv([0, 1, n$0]);
    }
    function parse_conversion
    (pct_ind,
     str_ind,
     end_ind,
     plus,
     hash,
     space,
     ign,
     pad,
     prec,
     padprec,
     symb){
     var
      plus_used = [0, 0],
      hash_used = [0, 0],
      space_used = [0, 0],
      ign_used = [0, 0],
      pad_used = [0, 0],
      prec_used = [0, 0];
     function get_plus(param){plus_used[1] = 1; return plus;}
     function get_hash(param){hash_used[1] = 1; return hash;}
     function get_space(param){space_used[1] = 1; return space;}
     function get_ign(param){ign_used[1] = 1; return ign;}
     function get_pad(param){pad_used[1] = 1; return pad;}
     function get_prec(param){prec_used[1] = 1; return prec;}
     function get_padprec(param){pad_used[1] = 1; return padprec;}
     function get_int_pad(param){
      var pad = get_pad(0), match = get_prec(0);
      if(typeof match === "number" && ! match) return pad;
      if(typeof pad === "number") return 0;
      if(0 !== pad[0])
       return 2 <= pad[1]
               ? legacy_behavior$0
                 ? _H_
                 : incompatible_flag(pct_ind, str_ind, 48, cst_precision$1)
               : pad;
      if(2 > pad[1]) return pad;
      var n = pad[2];
      return legacy_behavior$0
              ? [0, 1, n]
              : incompatible_flag(pct_ind, str_ind, 48, cst_precision$0);
     }
     function check_no_0(symb, pad){
      if(typeof pad === "number") return pad;
      if(0 !== pad[0])
       return 2 <= pad[1]
               ? legacy_behavior$0
                 ? _I_
                 : incompatible_flag(pct_ind, str_ind, symb, cst_0$1)
               : pad;
      if(2 > pad[1]) return pad;
      var width = pad[2];
      return legacy_behavior$0
              ? [0, 1, width]
              : incompatible_flag(pct_ind, str_ind, symb, cst_0$0);
     }
     function opt_of_pad(c, pad){
      if(typeof pad === "number") return 0;
      if(0 === pad[0])
       switch(pad[1]){
         case 0:
          var width = pad[2];
          return legacy_behavior$0
                  ? [0, width]
                  : incompatible_flag(pct_ind, str_ind, c, cst$24);
         case 1:
          var width$0 = pad[2]; return [0, width$0];
         default:
          var width$1 = pad[2];
          return legacy_behavior$0
                  ? [0, width$1]
                  : incompatible_flag(pct_ind, str_ind, c, cst_0$2);
       }
      return incompatible_flag(pct_ind, str_ind, c, cst$25);
     }
     function get_pad_opt(c){return opt_of_pad(c, get_pad(0));}
     function get_padprec_opt(c){return opt_of_pad(c, get_padprec(0));}
     a:
     {
      if(124 > symb)
       switch(symb){
         case 33:
          var
           fmt_rest$5 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [10, fmt_rest$5]];
          break a;
         case 40:
          var
           sub_end = search_subformat_end(str_ind, end_ind, 41),
           fmt_rest$7 = parse(sub_end + 2 | 0, end_ind)[1],
           sub_fmt = parse(str_ind, sub_end)[1],
           sub_fmtty = fmtty_of_fmt(sub_fmt);
          if(get_ign(0))
           var
            ignored$2 = [9, get_pad_opt(95), sub_fmtty],
            _aJ_ = [0, [23, ignored$2, fmt_rest$7]];
          else
           var _aJ_ = [0, [14, get_pad_opt(40), sub_fmtty, fmt_rest$7]];
          var fmt_result = _aJ_;
          break a;
         case 44:
          var fmt_result = parse(str_ind, end_ind); break a;
         case 67:
          var
           fmt_rest$10 = parse(str_ind, end_ind)[1],
           _aL_ =
             get_ign(0) ? [0, [23, 1, fmt_rest$10]] : [0, [1, fmt_rest$10]],
           fmt_result = _aL_;
          break a;
         case 78:
          var fmt_rest$14 = parse(str_ind, end_ind)[1], counter$0 = 2;
          if(get_ign(0))
           var
            ignored$6 = [11, counter$0],
            _aR_ = [0, [23, ignored$6, fmt_rest$14]];
          else
           var _aR_ = [0, [21, counter$0, fmt_rest$14]];
          var fmt_result = _aR_;
          break a;
         case 83:
          var
           pad$6 = check_no_0(symb, get_padprec(0)),
           fmt_rest$15 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$7 = [1, get_padprec_opt(95)],
            _aS_ = [0, [23, ignored$7, fmt_rest$15]];
          else
           var
            match$5 = make_padding_fmt_ebb(pad$6, fmt_rest$15),
            fmt_rest$16 = match$5[2],
            pad$7 = match$5[1],
            _aS_ = [0, [3, pad$7, fmt_rest$16]];
          var fmt_result = _aS_;
          break a;
         case 91:
          if(str_ind === end_ind)
           invalid_format_message(end_ind, cst_unexpected_end_of_format);
          var
           char_set = create_char_set(0),
           add_range =
             function(c$0, c){
              if(c >= c$0){
               var i = c$0;
               for(;;){
                add_in_char_set(char_set, caml_call1(Stdlib[29], i));
                var _a$_ = i + 1 | 0;
                if(c === i) break;
                i = _a$_;
               }
              }
             },
           fail_single_percent =
             function(str_ind){
              return caml_call2(failwith_message(_R_), str, str_ind);
             },
           parse_char_set_content =
             function(counter, str_ind, end_ind){
              var str_ind$0 = str_ind;
              for(;;){
               if(str_ind$0 === end_ind)
                invalid_format_message(end_ind, cst_unexpected_end_of_format);
               var c = caml_string_get(str, str_ind$0);
               if(45 !== c){
                if(93 === c) return str_ind$0 + 1 | 0;
                var _a__ = str_ind$0 + 1 | 0;
                if(counter >= 50)
                 return caml_trampoline_return
                         (parse_char_set_after_char$0, [0, _a__, end_ind, c]);
                var counter$0 = counter + 1 | 0;
                return parse_char_set_after_char$0
                        (counter$0, _a__, end_ind, c);
               }
               add_in_char_set(char_set, 45);
               var str_ind$1 = str_ind$0 + 1 | 0;
               str_ind$0 = str_ind$1;
              }
             },
           parse_char_set_after_char$0 =
             function(counter, str_ind, end_ind, c){
              var str_ind$0 = str_ind, c$0 = c;
              for(;;){
               if(str_ind$0 === end_ind)
                invalid_format_message(end_ind, cst_unexpected_end_of_format);
               var c$1 = caml_string_get(str, str_ind$0);
               a:
               {
                if(46 <= c$1){
                 if(64 !== c$1){
                  if(93 !== c$1) break a;
                  add_in_char_set(char_set, c$0);
                  return str_ind$0 + 1 | 0;
                 }
                }
                else if(37 !== c$1){
                 if(45 > c$1) break a;
                 var str_ind$2 = str_ind$0 + 1 | 0;
                 if(str_ind$2 === end_ind)
                  invalid_format_message
                   (end_ind, cst_unexpected_end_of_format);
                 var c$2 = caml_string_get(str, str_ind$2);
                 if(37 === c$2){
                  if((str_ind$2 + 1 | 0) === end_ind)
                   invalid_format_message
                    (end_ind, cst_unexpected_end_of_format);
                  var c$3 = caml_string_get(str, str_ind$2 + 1 | 0);
                  if(37 !== c$3 && 64 !== c$3)
                   return fail_single_percent(str_ind$2);
                  add_range(c$0, c$3);
                  var _a8_ = str_ind$2 + 2 | 0;
                  if(counter >= 50)
                   return caml_trampoline_return
                           (parse_char_set_content, [0, _a8_, end_ind]);
                  var counter$1 = counter + 1 | 0;
                  return parse_char_set_content(counter$1, _a8_, end_ind);
                 }
                 if(93 === c$2){
                  add_in_char_set(char_set, c$0);
                  add_in_char_set(char_set, 45);
                  return str_ind$2 + 1 | 0;
                 }
                 add_range(c$0, c$2);
                 var _a9_ = str_ind$2 + 1 | 0;
                 if(counter >= 50)
                  return caml_trampoline_return
                          (parse_char_set_content, [0, _a9_, end_ind]);
                 var counter$0 = counter + 1 | 0;
                 return parse_char_set_content(counter$0, _a9_, end_ind);
                }
                if(37 === c$0){
                 add_in_char_set(char_set, c$1);
                 var _a7_ = str_ind$0 + 1 | 0;
                 if(counter >= 50)
                  return caml_trampoline_return
                          (parse_char_set_content, [0, _a7_, end_ind]);
                 var counter$2 = counter + 1 | 0;
                 return parse_char_set_content(counter$2, _a7_, end_ind);
                }
               }
               if(37 === c$0) fail_single_percent(str_ind$0);
               add_in_char_set(char_set, c$0);
               var str_ind$1 = str_ind$0 + 1 | 0;
               str_ind$0 = str_ind$1;
               c$0 = c$1;
              }
             },
           parse_char_set_after_char =
             function(str_ind, end_ind, c){
              return caml_trampoline
                      (parse_char_set_after_char$0(0, str_ind, end_ind, c));
             };
          if(str_ind === end_ind)
           invalid_format_message(end_ind, cst_unexpected_end_of_format);
          if(94 === caml_string_get(str, str_ind))
           var
            str_ind$0 = str_ind + 1 | 0,
            reverse = 1,
            str_ind$1 = str_ind$0;
          else
           var reverse = 0, str_ind$1 = str_ind;
          if(str_ind$1 === end_ind)
           invalid_format_message(end_ind, cst_unexpected_end_of_format);
          var
           c = caml_string_get(str, str_ind$1),
           next_ind = parse_char_set_after_char(str_ind$1 + 1 | 0, end_ind, c),
           char_set$0 = freeze_char_set(char_set),
           char_set$1 = reverse ? rev_char_set(char_set$0) : char_set$0,
           fmt_rest$19 = parse(next_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$9 = [10, get_pad_opt(95), char_set$1],
            _aX_ = [0, [23, ignored$9, fmt_rest$19]];
          else
           var _aX_ = [0, [20, get_pad_opt(91), char_set$1, fmt_rest$19]];
          var fmt_result = _aX_;
          break a;
         case 97:
          var
           fmt_rest$20 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [15, fmt_rest$20]];
          break a;
         case 99:
          var
           char_format =
             function(fmt_rest){
              return get_ign(0) ? [0, [23, 0, fmt_rest]] : [0, [0, fmt_rest]];
             },
           fmt_rest$21 = parse(str_ind, end_ind)[1],
           match$7 = get_pad_opt(99);
          if(match$7){
           if(0 === match$7[1])
            var
             _aY_ =
               get_ign(0) ? [0, [23, 3, fmt_rest$21]] : [0, [22, fmt_rest$21]],
             _aZ_ = _aY_;
           else
            var
             _aZ_ =
               legacy_behavior$0
                ? char_format(fmt_rest$21)
                : invalid_format_message
                  (str_ind, cst_non_zero_widths_are_unsupp);
           var _a0_ = _aZ_;
          }
          else
           var _a0_ = char_format(fmt_rest$21);
          var fmt_result = _a0_;
          break a;
         case 114:
          var
           fmt_rest$22 = parse(str_ind, end_ind)[1],
           _a1_ =
             get_ign(0) ? [0, [23, 2, fmt_rest$22]] : [0, [19, fmt_rest$22]],
           fmt_result = _a1_;
          break a;
         case 115:
          var
           pad$9 = check_no_0(symb, get_padprec(0)),
           fmt_rest$23 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$10 = [0, get_padprec_opt(95)],
            _a2_ = [0, [23, ignored$10, fmt_rest$23]];
          else
           var
            match$8 = make_padding_fmt_ebb(pad$9, fmt_rest$23),
            fmt_rest$24 = match$8[2],
            pad$10 = match$8[1],
            _a2_ = [0, [2, pad$10, fmt_rest$24]];
          var fmt_result = _a2_;
          break a;
         case 116:
          var
           fmt_rest$25 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [16, fmt_rest$25]];
          break a;
         case 123:
          var
           sub_end$0 = search_subformat_end(str_ind, end_ind, 125),
           sub_fmt$0 = parse(str_ind, sub_end$0)[1],
           fmt_rest$26 = parse(sub_end$0 + 2 | 0, end_ind)[1],
           sub_fmtty$0 = fmtty_of_fmt(sub_fmt$0);
          if(get_ign(0))
           var
            ignored$11 = [8, get_pad_opt(95), sub_fmtty$0],
            _a3_ = [0, [23, ignored$11, fmt_rest$26]];
          else
           var _a3_ = [0, [13, get_pad_opt(123), sub_fmtty$0, fmt_rest$26]];
          var fmt_result = _a3_;
          break a;
         case 66:
         case 98:
          var
           pad$3 = check_no_0(symb, get_padprec(0)),
           fmt_rest$8 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$3 = [7, get_padprec_opt(95)],
            _aK_ = [0, [23, ignored$3, fmt_rest$8]];
          else
           var
            match$3 = make_padding_fmt_ebb(pad$3, fmt_rest$8),
            fmt_rest$9 = match$3[2],
            pad$4 = match$3[1],
            _aK_ = [0, [9, pad$4, fmt_rest$9]];
          var fmt_result = _aK_;
          break a;
         case 37:
         case 64:
          var
           fmt_rest$6 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [12, symb, fmt_rest$6]];
          break a;
         case 76:
         case 108:
         case 110:
          if(str_ind !== end_ind){
           var symb$0 = caml_string_get(str, str_ind), _a4_ = symb$0 - 88 | 0;
           b:
           {
            if(32 >= _a4_ >>> 0)
             switch(_a4_){
               case 0:
               case 12:
               case 17:
               case 23:
               case 29:
               case 32:
                var _aQ_ = 1; break b;
             }
            var _aQ_ = 0;
           }
           if(_aQ_) break;
          }
          var fmt_rest$13 = parse(str_ind, end_ind)[1];
          b:
          {
           if(108 <= symb){
            if(111 > symb)
             switch(symb - 108 | 0){
               case 0:
                var counter = 0; break b;
               case 1: break;
               default: var counter = 1; break b;
             }
           }
           else if(76 === symb){var counter = 2; break b;}
           throw caml_maybe_attach_backtrace([0, Assert_failure, _V_], 1);
          }
          if(get_ign(0))
           var
            ignored$5 = [11, counter],
            _aP_ = [0, [23, ignored$5, fmt_rest$13]];
          else
           var _aP_ = [0, [21, counter, fmt_rest$13]];
          var fmt_result = _aP_;
          break a;
         case 32:
         case 35:
         case 43:
         case 45:
         case 95:
          var
           fmt_result = caml_call3(failwith_message(_M_), str, pct_ind, symb);
          break a;
         case 88:
         case 100:
         case 105:
         case 111:
         case 117:
         case 120:
          var
           _aT_ = get_space(0),
           _aU_ = get_hash(0),
           iconv$2 =
             compute_int_conv(pct_ind, str_ind, get_plus(0), _aU_, _aT_, symb),
           fmt_rest$17 = parse(str_ind, end_ind)[1];
          if(get_ign(0))
           var
            ignored$8 = [2, iconv$2, get_pad_opt(95)],
            _aV_ = [0, [23, ignored$8, fmt_rest$17]];
          else
           var
            _aW_ = get_prec(0),
            match$6 = make_padprec_fmt_ebb(get_int_pad(0), _aW_, fmt_rest$17),
            fmt_rest$18 = match$6[3],
            prec$4 = match$6[2],
            pad$8 = match$6[1],
            _aV_ = [0, [4, iconv$2, pad$8, prec$4, fmt_rest$18]];
          var fmt_result = _aV_;
          break a;
         case 69:
         case 70:
         case 71:
         case 72:
         case 101:
         case 102:
         case 103:
         case 104:
          var
           space$1 = get_space(0),
           hash$1 = get_hash(0),
           plus$2 = get_plus(0),
           flag =
             plus$2
              ? space$1
                ? legacy_behavior$0
                  ? 1
                  : incompatible_flag(pct_ind, str_ind, 32, cst$36)
                : 1
              : space$1 ? 2 : 0;
          b:
          {
           c:
           if(73 <= symb){
            var switcher = symb - 101 | 0;
            if(3 >= switcher >>> 0){
             switch(switcher){
               case 0:
                var _a5_ = 1; break;
               case 1:
                var _a5_ = 0; break;
               case 2:
                var _a5_ = 3; break;
               default: var _a5_ = 6;
             }
             var kind = _a5_;
             break b;
            }
           }
           else if(69 <= symb){
            switch(symb - 69 | 0){
              case 0:
               var _a6_ = 2; break;
              case 1:
               break c;
              case 2:
               var _a6_ = 4; break;
              default: var _a6_ = 7;
            }
            var kind = _a6_;
            break b;
           }
           if(hash$1){
            if(70 === symb){var kind = 8; break b;}
           }
           else if(70 === symb){var kind = 5; break b;}
           throw caml_maybe_attach_backtrace([0, Assert_failure, _X_], 1);
          }
          var
           fconv = [0, flag, kind],
           fmt_rest$11 = parse(str_ind, end_ind)[1];
          if(get_ign(0)){
           var match = get_prec(0);
           if(typeof match === "number")
            var
             _aM_ =
               match ? incompatible_flag(pct_ind, str_ind, 95, cst$26) : 0;
           else
            var ndec = match[1], _aM_ = [0, ndec];
           var
            ignored$4 = [6, get_pad_opt(95), _aM_],
            _aN_ = [0, [23, ignored$4, fmt_rest$11]];
          }
          else
           var
            _aO_ = get_prec(0),
            match$4 = make_padprec_fmt_ebb(get_pad(0), _aO_, fmt_rest$11),
            fmt_rest$12 = match$4[3],
            prec$3 = match$4[2],
            pad$5 = match$4[1],
            _aN_ = [0, [8, fconv, pad$5, prec$3, fmt_rest$12]];
          var fmt_result = _aN_;
          break a;
       }
      b:
      if(108 <= symb){
       if(111 > symb){
        switch(symb - 108 | 0){
          case 0:
           var
            _at_ = caml_string_get(str, str_ind),
            _au_ = get_space(0),
            _av_ = get_hash(0),
            iconv =
              compute_int_conv
               (pct_ind, str_ind + 1 | 0, get_plus(0), _av_, _au_, _at_),
            fmt_rest = parse(str_ind + 1 | 0, end_ind)[1];
           if(get_ign(0))
            var
             ignored = [3, iconv, get_pad_opt(95)],
             _aw_ = [0, [23, ignored, fmt_rest]];
           else
            var
             _ay_ = get_prec(0),
             match$0 = make_padprec_fmt_ebb(get_int_pad(0), _ay_, fmt_rest),
             fmt_rest$0 = match$0[3],
             prec$0 = match$0[2],
             pad$0 = match$0[1],
             _aw_ = [0, [5, iconv, pad$0, prec$0, fmt_rest$0]];
           var _ax_ = _aw_;
           break;
          case 1:
           break b;
          default:
           var
            _az_ = caml_string_get(str, str_ind),
            _aA_ = get_space(0),
            _aB_ = get_hash(0),
            iconv$0 =
              compute_int_conv
               (pct_ind, str_ind + 1 | 0, get_plus(0), _aB_, _aA_, _az_),
            fmt_rest$1 = parse(str_ind + 1 | 0, end_ind)[1];
           if(get_ign(0))
            var
             ignored$0 = [4, iconv$0, get_pad_opt(95)],
             _aC_ = [0, [23, ignored$0, fmt_rest$1]];
           else
            var
             _aD_ = get_prec(0),
             match$1 = make_padprec_fmt_ebb(get_int_pad(0), _aD_, fmt_rest$1),
             fmt_rest$2 = match$1[3],
             prec$1 = match$1[2],
             pad$1 = match$1[1],
             _aC_ = [0, [6, iconv$0, pad$1, prec$1, fmt_rest$2]];
           var _ax_ = _aC_;
        }
        var fmt_result = _ax_;
        break a;
       }
      }
      else if(76 === symb){
       var
        _aE_ = caml_string_get(str, str_ind),
        _aF_ = get_space(0),
        _aG_ = get_hash(0),
        iconv$1 =
          compute_int_conv
           (pct_ind, str_ind + 1 | 0, get_plus(0), _aG_, _aF_, _aE_),
        fmt_rest$3 = parse(str_ind + 1 | 0, end_ind)[1];
       if(get_ign(0))
        var
         ignored$1 = [5, iconv$1, get_pad_opt(95)],
         _aH_ = [0, [23, ignored$1, fmt_rest$3]];
       else
        var
         _aI_ = get_prec(0),
         match$2 = make_padprec_fmt_ebb(get_int_pad(0), _aI_, fmt_rest$3),
         fmt_rest$4 = match$2[3],
         prec$2 = match$2[2],
         pad$2 = match$2[1],
         _aH_ = [0, [7, iconv$1, pad$2, prec$2, fmt_rest$4]];
       var fmt_result = _aH_;
       break a;
      }
      var
       fmt_result =
         caml_call3(failwith_message(_J_), str, str_ind - 1 | 0, symb);
     }
     if(1 - legacy_behavior$0){
      var _ak_ = 1 - plus_used[1], plus$0 = _ak_ ? plus : _ak_;
      if(plus$0) incompatible_flag(pct_ind, str_ind, symb, cst$27);
      var _al_ = 1 - hash_used[1], hash$0 = _al_ ? hash : _al_;
      if(hash$0) incompatible_flag(pct_ind, str_ind, symb, cst$28);
      var _am_ = 1 - space_used[1], space$0 = _am_ ? space : _am_;
      if(space$0) incompatible_flag(pct_ind, str_ind, symb, cst$29);
      var
       _an_ = 1 - pad_used[1],
       _ao_ = _an_ ? caml_notequal([0, pad], _K_) : _an_;
      if(_ao_) incompatible_flag(pct_ind, str_ind, symb, cst_padding$0);
      var
       _ap_ = 1 - prec_used[1],
       _aq_ = _ap_ ? caml_notequal([0, prec], _L_) : _ap_;
      if(_aq_){
       var _ar_ = ign ? 95 : symb;
       incompatible_flag(pct_ind, str_ind, _ar_, cst_precision$2);
      }
      var plus$1 = ign ? plus : ign;
      if(plus$1) incompatible_flag(pct_ind, str_ind, 95, cst$30);
     }
     var _as_ = 1 - ign_used[1], ign$0 = _as_ ? ign : _as_;
     a:
     if(ign$0){
      b:
      {
       if(38 <= symb){
        if(44 !== symb && 64 !== symb) break b;
       }
       else if(33 !== symb && 37 > symb) break b;
       if(legacy_behavior$0) break a;
      }
      incompatible_flag(pct_ind, str_ind, symb, cst$31);
     }
     return fmt_result;
    }
    function parse_tag(is_open_tag, str_ind, end_ind){
     try{
      if(str_ind === end_ind) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      if(60 !== caml_string_get(str, str_ind))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var ind = caml_call3(Stdlib_string[21], str, str_ind + 1 | 0, 62);
      if(end_ind <= ind) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var
       sub_str =
         caml_call3
          (Stdlib_string[9], str, str_ind, (ind - str_ind | 0) + 1 | 0),
       fmt_rest$0 = parse(ind + 1 | 0, end_ind)[1],
       sub_fmt = parse(str_ind, ind + 1 | 0)[1],
       sub_format$0 = [0, sub_fmt, sub_str],
       formatting$0 = is_open_tag ? [0, sub_format$0] : [1, sub_format$0],
       _ai_ = [0, [18, formatting$0, fmt_rest$0]];
      return _ai_;
     }
     catch(_aj_){
      var _ah_ = caml_wrap_exception(_aj_);
      if(_ah_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ah_, 0);
      var
       fmt_rest = parse(str_ind, end_ind)[1],
       formatting = is_open_tag ? [0, sub_format] : [1, sub_format];
      return [0, [18, formatting, fmt_rest]];
     }
    }
    function parse_spaces(str_ind, end_ind){
     var str_ind$0 = str_ind;
     for(;;){
      if(str_ind$0 === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      if(32 !== caml_string_get(str, str_ind$0)) return str_ind$0;
      var str_ind$1 = str_ind$0 + 1 | 0;
      str_ind$0 = str_ind$1;
     }
    }
    function parse_positive(str_ind, end_ind, acc){
     var str_ind$0 = str_ind, acc$0 = acc;
     for(;;){
      if(str_ind$0 === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var c = caml_string_get(str, str_ind$0);
      if(9 < c - 48 >>> 0) return [0, str_ind$0, acc$0];
      var new_acc = (acc$0 * 10 | 0) + (c - 48 | 0) | 0;
      if(Stdlib_sys[12] < new_acc){
       var _ag_ = Stdlib_sys[12];
       return caml_call3(failwith_message(_S_), str, new_acc, _ag_);
      }
      var str_ind$1 = str_ind$0 + 1 | 0;
      str_ind$0 = str_ind$1;
      acc$0 = new_acc;
     }
    }
    function parse_integer(str_ind, end_ind){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var match = caml_string_get(str, str_ind);
     if(48 <= match){
      if(58 > match) return parse_positive(str_ind, end_ind, 0);
     }
     else if(45 === match){
      if((str_ind + 1 | 0) === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var c = caml_string_get(str, str_ind + 1 | 0);
      if(9 < c - 48 >>> 0)
       return expected_character(str_ind + 1 | 0, cst_digit, c);
      var
       match$0 = parse_positive(str_ind + 1 | 0, end_ind, 0),
       n = match$0[2],
       next_ind = match$0[1];
      return [0, next_ind, - n | 0];
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _T_], 1);
    }
    function add_literal(lit_start, str_ind, fmt){
     var size = str_ind - lit_start | 0;
     return 0 === size
             ? [0, fmt]
             : 1
               === size
               ? [0, [12, caml_string_get(str, lit_start), fmt]]
               : [0,
                 [11, caml_call3(Stdlib_string[9], str, lit_start, size), fmt]];
    }
    function search_subformat_end(str_ind, end_ind, c){
     var str_ind$0 = str_ind;
     for(;;){
      if(str_ind$0 === end_ind)
       caml_call3(failwith_message(_U_), str, c, end_ind);
      if(37 === caml_string_get(str, str_ind$0)){
       if((str_ind$0 + 1 | 0) === end_ind)
        invalid_format_message(end_ind, cst_unexpected_end_of_format);
       if(caml_string_get(str, str_ind$0 + 1 | 0) === c) return str_ind$0;
       var match = caml_string_get(str, str_ind$0 + 1 | 0);
       if(95 <= match){
        if(123 <= match){
         if(126 > match)
          switch(match - 123 | 0){
            case 0:
             var
              sub_end = search_subformat_end(str_ind$0 + 2 | 0, end_ind, 125),
              str_ind$2 = sub_end + 2 | 0;
             str_ind$0 = str_ind$2;
             continue;
            case 1: break;
            default:
             return expected_character(str_ind$0 + 1 | 0, cst_character, 125);
          }
        }
        else if(96 > match){
         if((str_ind$0 + 2 | 0) === end_ind)
          invalid_format_message(end_ind, cst_unexpected_end_of_format);
         var match$0 = caml_string_get(str, str_ind$0 + 2 | 0);
         if(40 === match$0){
          var
           sub_end$0 = search_subformat_end(str_ind$0 + 3 | 0, end_ind, 41),
           str_ind$3 = sub_end$0 + 2 | 0;
          str_ind$0 = str_ind$3;
          continue;
         }
         if(123 === match$0){
          var
           sub_end$1 = search_subformat_end(str_ind$0 + 3 | 0, end_ind, 125),
           str_ind$4 = sub_end$1 + 2 | 0;
          str_ind$0 = str_ind$4;
          continue;
         }
         var str_ind$5 = str_ind$0 + 3 | 0;
         str_ind$0 = str_ind$5;
         continue;
        }
       }
       else{
        if(40 === match){
         var
          sub_end$2 = search_subformat_end(str_ind$0 + 2 | 0, end_ind, 41),
          str_ind$6 = sub_end$2 + 2 | 0;
         str_ind$0 = str_ind$6;
         continue;
        }
        if(41 === match)
         return expected_character(str_ind$0 + 1 | 0, cst_character$0, 41);
       }
       var str_ind$1 = str_ind$0 + 2 | 0;
       str_ind$0 = str_ind$1;
      }
      else{var str_ind$7 = str_ind$0 + 1 | 0; str_ind$0 = str_ind$7;}
     }
    }
    function compute_int_conv(pct_ind, str_ind, plus, hash, space, symb){
     var plus$0 = plus, hash$0 = hash, space$0 = space;
     for(;;){
      a:
      {
       if(plus$0){
        if(! hash$0){
         if(space$0) break a;
         if(100 === symb) return 1;
         if(105 === symb) return 4;
         break a;
        }
       }
       else{
        if(! hash$0){
         if(space$0){
          if(100 === symb) return 2;
          if(105 === symb) return 5;
          break a;
         }
         var switcher$1 = symb - 88 | 0;
         if(32 < switcher$1 >>> 0) break a;
         switch(switcher$1){
           case 0:
            return 8;
           case 12:
            return 0;
           case 17:
            return 3;
           case 23:
            return 10;
           case 29:
            return 12;
           case 32:
            return 6;
           default: break a;
         }
        }
        if(! space$0){
         var switcher$0 = symb - 88 | 0;
         if(32 >= switcher$0 >>> 0)
          switch(switcher$0){
            case 0:
             return 9;
            case 12:
             return 13;
            case 17:
             return 14;
            case 23:
             return 11;
            case 29:
             return 15;
            case 32:
             return 7;
          }
        }
       }
       var switcher = symb - 88 | 0;
       if(32 >= switcher >>> 0)
        switch(switcher){
          case 0:
           if(legacy_behavior$0) return 9; break;
          case 23:
           if(legacy_behavior$0) return 11; break;
          case 32:
           if(legacy_behavior$0) return 7; break;
          case 12:
          case 17:
          case 29:
           if(! legacy_behavior$0)
            return incompatible_flag(pct_ind, str_ind, symb, cst$35);
           hash$0 = 0;
           continue;
        }
      }
      if(plus$0)
       if(space$0){
        if(! legacy_behavior$0)
         return incompatible_flag(pct_ind, str_ind, 32, cst$32);
        space$0 = 0;
       }
       else{
        if(! legacy_behavior$0)
         return incompatible_flag(pct_ind, str_ind, symb, cst$33);
        plus$0 = 0;
       }
      else{
       if(! space$0)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _W_], 1);
       if(! legacy_behavior$0)
        return incompatible_flag(pct_ind, str_ind, symb, cst$34);
       space$0 = 0;
      }
     }
    }
    function incompatible_flag(pct_ind, str_ind, symb, option){
     var
      subfmt =
        caml_call3(Stdlib_string[9], str, pct_ind, str_ind - pct_ind | 0);
     return caml_call5
             (failwith_message(_Y_), str, pct_ind, option, symb, subfmt);
    }
    return parse(0, caml_ml_string_length(str));
   }
   function format_of_string_fmtty(str, fmtty){
    var fmt = fmt_ebb_of_string(0, str)[1];
    try{var _ae_ = [0, type_format(fmt, fmtty), str]; return _ae_;}
    catch(_af_){
     var _ac_ = caml_wrap_exception(_af_);
     if(_ac_ !== Type_mismatch) throw caml_maybe_attach_backtrace(_ac_, 0);
     var _ad_ = string_of_fmtty(fmtty);
     return caml_call2(failwith_message(_Z_), str, _ad_);
    }
   }
   function format_of_string_format(str, param){
    var
     str$0 = param[2],
     fmt = param[1],
     fmt$0 = fmt_ebb_of_string(0, str)[1];
    try{
     var _aa_ = [0, type_format(fmt$0, fmtty_of_fmt(fmt)), str];
     return _aa_;
    }
    catch(_ab_){
     var _$_ = caml_wrap_exception(_ab_);
     if(_$_ === Type_mismatch)
      return caml_call2(failwith_message(___), str, str$0);
     throw caml_maybe_attach_backtrace(_$_, 0);
    }
   }
   var
    CamlinternalFormat =
      [0,
       is_in_char_set,
       rev_char_set,
       create_char_set,
       add_in_char_set,
       freeze_char_set,
       param_format_of_ignored_format,
       make_printf,
       make_iprintf,
       output_acc,
       bufput_acc,
       strput_acc,
       type_format,
       fmt_ebb_of_string,
       format_of_string_fmtty,
       format_of_string_format,
       char_of_iconv,
       string_of_formatting_lit,
       string_of_fmtty,
       string_of_fmt,
       open_box_of_string,
       symm,
       trans,
       recast];
   runtime.caml_register_global(197, CamlinternalFormat, "CamlinternalFormat");
   return;
  }
  (globalThis));

//# 14394 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_buffer = global_data.Stdlib__buffer,
    CamlinternalFormat = global_data.CamlinternalFormat,
    Stdlib = global_data.Stdlib;
   function kfprintf(k, o, param){
    var fmt = param[1];
    return caml_call3
            (CamlinternalFormat[7],
             function(acc){
              caml_call2(CamlinternalFormat[9], o, acc);
              return caml_call1(k, o);
             },
             0,
             fmt);
   }
   function kbprintf(k, b, param){
    var fmt = param[1];
    return caml_call3
            (CamlinternalFormat[7],
             function(acc){
              caml_call2(CamlinternalFormat[10], b, acc);
              return caml_call1(k, b);
             },
             0,
             fmt);
   }
   function ikfprintf(k, oc, param){
    var fmt = param[1];
    return caml_call3(CamlinternalFormat[8], k, oc, fmt);
   }
   function fprintf(oc, fmt){
    return kfprintf(function(_d_){return 0;}, oc, fmt);
   }
   function bprintf(b, fmt){
    return kbprintf(function(_c_){return 0;}, b, fmt);
   }
   function ifprintf(oc, fmt){
    return ikfprintf(function(_b_){return 0;}, oc, fmt);
   }
   function ibprintf(b, fmt){
    return ikfprintf(function(_a_){return 0;}, b, fmt);
   }
   function printf(fmt){return fprintf(Stdlib[39], fmt);}
   function eprintf(fmt){return fprintf(Stdlib[40], fmt);}
   function ksprintf(k, param){
    var fmt = param[1];
    function k$0(acc){
     var buf = caml_call1(Stdlib_buffer[1], 64);
     caml_call2(CamlinternalFormat[11], buf, acc);
     return caml_call1(k, caml_call1(Stdlib_buffer[2], buf));
    }
    return caml_call3(CamlinternalFormat[7], k$0, 0, fmt);
   }
   function sprintf(fmt){return ksprintf(function(s){return s;}, fmt);}
   var
    Stdlib_printf =
      [0,
       fprintf,
       printf,
       eprintf,
       sprintf,
       bprintf,
       ifprintf,
       ibprintf,
       kfprintf,
       ikfprintf,
       ksprintf,
       kbprintf,
       ikfprintf,
       ksprintf];
   runtime.caml_register_global(3, Stdlib_printf, "Stdlib__printf");
   return;
  }
  (globalThis));

//# 14491 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst$9 = "  ",
    cst_Display_this_list_of_optio$1 = " Display this list of options",
    cst_s = "%s",
    cst_help$4 = "--help",
    cst_help$3 = "-help",
    cst$8 = ".\n",
    cst_a_float$1 = "a float",
    cst_an_integer$1 = "an integer",
    caml_check_bound = runtime.caml_check_bound,
    caml_equal = runtime.caml_equal,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_sys_argv = runtime.caml_sys_argv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$6 = "\n",
    cst$3 = cst$7,
    cst$4 = " ",
    cst$5 = cst$7,
    cst$2 = "(?)",
    cst = "}",
    cst$0 = "|",
    cst$1 = "{",
    Stdlib = global_data.Stdlib,
    Stdlib_printf = global_data.Stdlib__printf,
    Stdlib_array = global_data.Stdlib__array,
    Stdlib_buffer = global_data.Stdlib__buffer,
    Stdlib_list = global_data.Stdlib__list,
    Stdlib_string = global_data.Stdlib__string,
    Bad = [248, "Stdlib.Arg.Bad", caml_fresh_oo_id(0)],
    Help = [248, "Stdlib.Arg.Help", caml_fresh_oo_id(0)],
    Stop = [248, "Stdlib.Arg.Stop", caml_fresh_oo_id(0)],
    cst_none = "<none>",
    _a_ = [0, [11, cst$9, [2, 0, [12, 32, [2, 0, [12, 10, 0]]]]], "  %s %s\n"],
    _b_ =
      [0,
       [11, cst$9, [2, 0, [12, 32, [2, 0, [2, 0, [12, 10, 0]]]]]],
       "  %s %s%s\n"],
    _c_ = [0, cst_help$3],
    cst_Display_this_list_of_optio = cst_Display_this_list_of_optio$1,
    cst_help = cst_help$3,
    cst_Display_this_list_of_optio$0 = cst_Display_this_list_of_optio$1,
    cst_help$0 = cst_help$4,
    cst_help$1 = cst_help$4,
    cst_help$2 = cst_help$3,
    _d_ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    _e_ = [0, [2, 0, 0], cst_s];
   function assoc3(x, l){
    var l$0 = l;
    for(;;){
     if(! l$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var match = l$0[1], y2 = match[2], y1 = match[1];
     if(caml_equal(y1, x)) return y2;
     var t = l$0[2];
     l$0 = t;
    }
   }
   function make_symlist(prefix, sep, suffix, l){
    if(! l) return cst_none;
    var
     t = l[2],
     h = l[1],
     _az_ = caml_call2(Stdlib[28], prefix, h),
     _aA_ =
       caml_call3
        (Stdlib_list[25],
         function(x, y){
          var _aB_ = caml_call2(Stdlib[28], sep, y);
          return caml_call2(Stdlib[28], x, _aB_);
         },
         _az_,
         t);
    return caml_call2(Stdlib[28], _aA_, suffix);
   }
   function help_action(param){
    throw caml_maybe_attach_backtrace([0, Stop, _c_], 1);
   }
   function add_help(speclist){
    try{assoc3(cst_help$2, speclist); var _aw_ = 0, add1 = _aw_;}
    catch(_ay_){
     var _as_ = caml_wrap_exception(_ay_);
     if(_as_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_as_, 0);
     var
      add1 =
        [0,
         [0, cst_help, [0, help_action], cst_Display_this_list_of_optio],
         0];
    }
    try{assoc3(cst_help$1, speclist); var _av_ = 0, add2 = _av_;}
    catch(_ax_){
     var _at_ = caml_wrap_exception(_ax_);
     if(_at_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_at_, 0);
     var
      add2 =
        [0,
         [0, cst_help$0, [0, help_action], cst_Display_this_list_of_optio$0],
         0];
    }
    var _au_ = caml_call2(Stdlib[37], add1, add2);
    return caml_call2(Stdlib[37], speclist, _au_);
   }
   function usage_b(buf, speclist, errmsg){
    caml_call3(Stdlib_printf[5], buf, _d_, errmsg);
    var _ap_ = add_help(speclist);
    return caml_call2
            (Stdlib_list[17],
             function(param){
              var
               doc = param[3],
               spec = param[2],
               key = param[1],
               _aq_ = 0 < caml_ml_string_length(doc) ? 1 : 0;
              if(! _aq_) return _aq_;
              if(11 !== spec[0])
               return caml_call4(Stdlib_printf[5], buf, _a_, key, doc);
              var l = spec[1], _ar_ = make_symlist(cst$1, cst$0, cst, l);
              return caml_call5(Stdlib_printf[5], buf, _b_, key, _ar_, doc);
             },
             _ap_);
   }
   function usage_string(speclist, errmsg){
    var b = caml_call1(Stdlib_buffer[1], 200);
    usage_b(b, speclist, errmsg);
    return caml_call1(Stdlib_buffer[2], b);
   }
   function usage(speclist, errmsg){
    var _ao_ = usage_string(speclist, errmsg);
    return caml_call2(Stdlib_printf[3], _e_, _ao_);
   }
   var
    current = [0, 0],
    _f_ =
      [0,
       [2, 0, [11, ": unknown option '", [2, 0, [11, "'.\n", 0]]]],
       "%s: unknown option '%s'.\n"],
    _g_ = [0, cst_help$3],
    _h_ = [0, cst_help$4],
    _i_ =
      [0,
       [2,
        0,
        [11,
         ": wrong argument '",
         [2,
          0,
          [11,
           "'; option '",
           [2, 0, [11, "' expects ", [2, 0, [11, cst$8, 0]]]]]]]],
       "%s: wrong argument '%s'; option '%s' expects %s.\n"],
    _j_ =
      [0,
       [2, 0, [11, ": option '", [2, 0, [11, "' needs an argument.\n", 0]]]],
       "%s: option '%s' needs an argument.\n"],
    _k_ = [0, [2, 0, [11, ": ", [2, 0, [11, cst$8, 0]]]], "%s: %s.\n"],
    cst_no_argument = "no argument",
    cst_a_boolean = "a boolean",
    cst_an_integer = cst_an_integer$1,
    cst_an_integer$0 = cst_an_integer$1,
    cst_a_float = cst_a_float$1,
    cst_a_float$0 = cst_a_float$1,
    cst_one_of = "one of: ",
    cst_Arg_Expand_is_is_only_allo =
      "Arg.Expand is is only allowed with Arg.parse_and_expand_argv_dynamic",
    _l_ = [0, [2, 0, 0], cst_s],
    _m_ = [0, [2, 0, 0], cst_s],
    _n_ = [0, [2, 0, 0], cst_s],
    _o_ = [0, [2, 0, 0], cst_s],
    _p_ = [0, [2, 0, 0], cst_s],
    _q_ = [0, [2, 0, 0], cst_s],
    dummy = 0;
   function int_of_string_opt(x){
    try{var _am_ = [0, runtime.caml_int_of_string(x)]; return _am_;}
    catch(_an_){
     var _al_ = caml_wrap_exception(_an_);
     if(_al_[1] === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(_al_, 0);
    }
   }
   function float_of_string_opt(x){
    try{var _aj_ = [0, runtime.caml_float_of_string(x)]; return _aj_;}
    catch(_ak_){
     var _ai_ = caml_wrap_exception(_ak_);
     if(_ai_[1] === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(_ai_, 0);
    }
   }
   function parse_and_expand_argv_dynamic_
   (allow_expand, current, argv, speclist, anonfun, errmsg){
    var initpos = current[1];
    function convert_error(error){
     var
      b = caml_call1(Stdlib_buffer[1], 200),
      progname =
        initpos < argv[1].length - 1
         ? caml_check_bound(argv[1], initpos)[1 + initpos]
         : cst$2;
     switch(error[0]){
       case 0:
        var s = error[1];
        if(s !== cst_help$4 && s !== cst_help$3)
         caml_call4(Stdlib_printf[5], b, _f_, progname, s);
        break;
       case 1:
        var expected = error[3], arg = error[2], opt = error[1];
        caml_call6(Stdlib_printf[5], b, _i_, progname, arg, opt, expected);
        break;
       case 2:
        var s$0 = error[1];
        caml_call4(Stdlib_printf[5], b, _j_, progname, s$0);
        break;
       default:
        var s$1 = error[1];
        caml_call4(Stdlib_printf[5], b, _k_, progname, s$1);
     }
     usage_b(b, speclist[1], errmsg);
     if(! caml_equal(error, _g_) && ! caml_equal(error, _h_))
      return [0, Bad, caml_call1(Stdlib_buffer[2], b)];
     return [0, Help, caml_call1(Stdlib_buffer[2], b)];
    }
    current[1]++;
    for(;;){
     if(current[1] >= argv[1].length - 1) return 0;
     try{
      var _V_ = current[1], s = caml_check_bound(argv[1], _V_)[1 + _V_];
      a:
      {
       if(1 <= caml_ml_string_length(s) && 45 === caml_string_get(s, 0)){
        try{
         var
          follow$1 = 0,
          _Z_ = assoc3(s, speclist[1]),
          follow$0 = follow$1,
          action = _Z_;
        }
        catch(_ag_){
         var _W_ = caml_wrap_exception(_ag_);
         if(_W_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_W_, 0);
         try{
          var
           i = caml_call2(Stdlib_string[25], s, 61),
           len = caml_ml_string_length(s),
           arg =
             caml_call3(Stdlib_string[9], s, i + 1 | 0, len - (i + 1 | 0) | 0),
           keyword = caml_call3(Stdlib_string[9], s, 0, i),
           follow = [0, arg],
           _Y_ = assoc3(keyword, speclist[1]),
           follow$0 = follow,
           action = _Y_;
         }
         catch(_ah_){
          var _X_ = caml_wrap_exception(_ah_);
          if(_X_ === Stdlib[8])
           throw caml_maybe_attach_backtrace([0, Stop, [0, s]], 1);
          throw caml_maybe_attach_backtrace(_X_, 0);
         }
        }
        let s$0 = s, follow$2 = follow$0;
        var
         no_arg =
           function(param){
            if(! follow$2) return;
            var arg = follow$2[1];
            throw caml_maybe_attach_backtrace
                   ([0, Stop, [1, s$0, arg, cst_no_argument]], 1);
           },
         get_arg =
           function(param){
            if(follow$2){var arg = follow$2[1]; return arg;}
            if((current[1] + 1 | 0) >= argv[1].length - 1)
             throw caml_maybe_attach_backtrace([0, Stop, [2, s$0]], 1);
            var _af_ = current[1] + 1 | 0;
            return caml_check_bound(argv[1], _af_)[1 + _af_];
           },
         consume_arg =
           function(param){return follow$2 ? 0 : (current[1]++, 0);},
         treat_action =
           function(param){
            switch(param[0]){
              case 0:
               var f = param[1]; no_arg$0(0); return caml_call1(f, 0);
              case 1:
               var f$0 = param[1], arg = get_arg$0(0);
               try{var _$_ = [0, caml_call1(Stdlib[32], arg)], match = _$_;}
               catch(_ae_){
                var ___ = caml_wrap_exception(_ae_);
                if(___[1] !== Stdlib[6])
                 throw caml_maybe_attach_backtrace(___, 0);
                var match = 0;
               }
               if(! match)
                throw caml_maybe_attach_backtrace
                       ([0, Stop, [1, s$0, arg, cst_a_boolean]], 1);
               var s = match[1];
               caml_call1(f$0, s);
               return consume_arg$0(0);
              case 2:
               var r = param[1]; no_arg$0(0); r[1] = 1; return 0;
              case 3:
               var r$0 = param[1]; no_arg$0(0); r$0[1] = 0; return 0;
              case 4:
               var f$1 = param[1], arg$0 = get_arg$0(0);
               caml_call1(f$1, arg$0);
               return consume_arg$0(0);
              case 5:
               var r$1 = param[1];
               r$1[1] = get_arg$0(0);
               return consume_arg$0(0);
              case 6:
               var
                f$2 = param[1],
                arg$1 = get_arg$0(0),
                match$0 = int_of_string_opt(arg$1);
               if(! match$0)
                throw caml_maybe_attach_backtrace
                       ([0, Stop, [1, s$0, arg$1, cst_an_integer]], 1);
               var x = match$0[1];
               caml_call1(f$2, x);
               return consume_arg$0(0);
              case 7:
               var
                r$2 = param[1],
                arg$2 = get_arg$0(0),
                match$1 = int_of_string_opt(arg$2);
               if(! match$1)
                throw caml_maybe_attach_backtrace
                       ([0, Stop, [1, s$0, arg$2, cst_an_integer$0]], 1);
               var x$0 = match$1[1];
               r$2[1] = x$0;
               return consume_arg$0(0);
              case 8:
               var
                f$3 = param[1],
                arg$3 = get_arg$0(0),
                match$2 = float_of_string_opt(arg$3);
               if(! match$2)
                throw caml_maybe_attach_backtrace
                       ([0, Stop, [1, s$0, arg$3, cst_a_float]], 1);
               var x$1 = match$2[1];
               caml_call1(f$3, x$1);
               return consume_arg$0(0);
              case 9:
               var
                r$3 = param[1],
                arg$4 = get_arg$0(0),
                match$3 = float_of_string_opt(arg$4);
               if(! match$3)
                throw caml_maybe_attach_backtrace
                       ([0, Stop, [1, s$0, arg$4, cst_a_float$0]], 1);
               var x$2 = match$3[1];
               r$3[1] = x$2;
               return consume_arg$0(0);
              case 10:
               var specs = param[1];
               no_arg$0(0);
               return caml_call2(Stdlib_list[17], treat_action$0, specs);
              case 11:
               var f$4 = param[2], symb = param[1], arg$5 = get_arg$0(0);
               if(caml_call2(Stdlib_list[36], arg$5, symb)){
                caml_call1(f$4, arg$5);
                return consume_arg$0(0);
               }
               var _aa_ = make_symlist(cst$5, cst$4, cst$3, symb);
               throw caml_maybe_attach_backtrace
                      ([0,
                        Stop,
                        [1, s$0, arg$5, caml_call2(Stdlib[28], cst_one_of, _aa_)]],
                       1);
              case 12:
               var f$5 = param[1];
               no_arg$0(0);
               for(;;){
                if(current[1] >= (argv[1].length - 2 | 0)) return 0;
                var _ab_ = current[1] + 1 | 0;
                caml_call1(f$5, caml_check_bound(argv[1], _ab_)[1 + _ab_]);
                consume_arg$0(0);
               }
               break;
              case 13:
               var f$6 = param[1];
               no_arg$0(0);
               var acc = [0, 0];
               for(;;){
                if(current[1] >= (argv[1].length - 2 | 0))
                 return caml_call1(f$6, caml_call1(Stdlib_list[9], acc[1]));
                var _ad_ = current[1] + 1 | 0, _ac_ = acc[1];
                acc[1] = [0, caml_check_bound(argv[1], _ad_)[1 + _ad_], _ac_];
                consume_arg$0(0);
               }
               break;
              default:
               var f$7 = param[1];
               if(1 - allow_expand)
                throw caml_maybe_attach_backtrace
                       ([0, Stdlib[6], cst_Arg_Expand_is_is_only_allo], 1);
               var arg$6 = get_arg$0(0), newarg = caml_call1(f$7, arg$6);
               consume_arg$0(0);
               var
                before =
                  caml_call3(Stdlib_array[7], argv[1], 0, current[1] + 1 | 0),
                after =
                  caml_call3
                   (Stdlib_array[7],
                    argv[1],
                    current[1] + 1 | 0,
                    (argv[1].length - 1 - current[1] | 0) - 1 | 0);
               argv[1] =
                caml_call1
                 (Stdlib_array[6], [0, before, [0, newarg, [0, after, 0]]]);
               return 0;
            }
           };
        let
         no_arg$0 = no_arg,
         get_arg$0 = get_arg,
         consume_arg$0 = consume_arg,
         treat_action$0 = treat_action;
        treat_action(action);
        break a;
       }
       caml_call1(anonfun, s);
      }
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] === Bad){
       var m = exn[2];
       throw caml_maybe_attach_backtrace(convert_error([3, m]), 1);
      }
      if(exn[1] !== Stop) throw caml_maybe_attach_backtrace(exn, 0);
      var e = exn[2];
      throw caml_maybe_attach_backtrace(convert_error(e), 1);
     }
     current[1]++;
    }
   }
   function parse_and_expand_argv_dynamic
   (current, argv, speclist, anonfun, errmsg){
    return parse_and_expand_argv_dynamic_
            (1, current, argv, speclist, anonfun, errmsg);
   }
   function parse_argv_dynamic(opt, argv, speclist, anonfun, errmsg){
    if(opt) var sth = opt[1], current$0 = sth; else var current$0 = current;
    return parse_and_expand_argv_dynamic_
            (0, current$0, [0, argv], speclist, anonfun, errmsg);
   }
   function parse_argv(opt, argv, speclist, anonfun, errmsg){
    if(opt) var sth = opt[1], current$0 = sth; else var current$0 = current;
    return parse_argv_dynamic
            ([0, current$0], argv, [0, speclist], anonfun, errmsg);
   }
   function parse(l, f, msg){
    try{var _U_ = parse_argv(0, caml_sys_argv(0), l, f, msg); return _U_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Bad){
      var msg$0 = exn[2];
      caml_call2(Stdlib_printf[3], _l_, msg$0);
      return caml_call1(Stdlib[99], 2);
     }
     if(exn[1] !== Help) throw caml_maybe_attach_backtrace(exn, 0);
     var msg$1 = exn[2];
     caml_call2(Stdlib_printf[2], _m_, msg$1);
     return caml_call1(Stdlib[99], 0);
    }
   }
   function parse_dynamic(l, f, msg){
    try{
     var _T_ = parse_argv_dynamic(0, caml_sys_argv(0), l, f, msg);
     return _T_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Bad){
      var msg$0 = exn[2];
      caml_call2(Stdlib_printf[3], _n_, msg$0);
      return caml_call1(Stdlib[99], 2);
     }
     if(exn[1] !== Help) throw caml_maybe_attach_backtrace(exn, 0);
     var msg$1 = exn[2];
     caml_call2(Stdlib_printf[2], _o_, msg$1);
     return caml_call1(Stdlib[99], 0);
    }
   }
   function parse_expand(l, f, msg){
    try{
     var
      argv = [0, caml_sys_argv(0)],
      spec = [0, l],
      current$0 = [0, current[1]],
      _S_ = parse_and_expand_argv_dynamic(current$0, argv, spec, f, msg);
     return _S_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Bad){
      var msg$0 = exn[2];
      caml_call2(Stdlib_printf[3], _p_, msg$0);
      return caml_call1(Stdlib[99], 2);
     }
     if(exn[1] !== Help) throw caml_maybe_attach_backtrace(exn, 0);
     var msg$1 = exn[2];
     caml_call2(Stdlib_printf[2], _q_, msg$1);
     return caml_call1(Stdlib[99], 0);
    }
   }
   function second_word(s){
    var len = caml_ml_string_length(s);
    function loop(n){
     var n$0 = n;
     for(;;){
      if(len <= n$0) return len;
      if(32 !== caml_string_get(s, n$0)) return n$0;
      var n$1 = n$0 + 1 | 0;
      n$0 = n$1;
     }
    }
    try{var n$0 = caml_call2(Stdlib_string[25], s, 9);}
    catch(_Q_){
     var _O_ = caml_wrap_exception(_Q_);
     if(_O_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_O_, 0);
     try{var n = caml_call2(Stdlib_string[25], s, 32);}
     catch(_R_){
      var _P_ = caml_wrap_exception(_R_);
      if(_P_ === Stdlib[8]) return len;
      throw caml_maybe_attach_backtrace(_P_, 0);
     }
     return loop(n + 1 | 0);
    }
    return loop(n$0 + 1 | 0);
   }
   function max_arg_len(cur, param){
    var doc = param[3], spec = param[2], kwd = param[1];
    if(11 === spec[0])
     return caml_call2(Stdlib[17], cur, caml_ml_string_length(kwd));
    var _N_ = caml_ml_string_length(kwd) + second_word(doc) | 0;
    return caml_call2(Stdlib[17], cur, _N_);
   }
   function replace_leading_tab(s){
    var seen = [0, 0];
    return caml_call2
            (Stdlib_string[11],
             function(c){
              if(9 === c && ! seen[1]){seen[1] = 1; return 32;}
              return c;
             },
             s);
   }
   function align(opt, speclist){
    if(opt) var sth = opt[1], limit = sth; else var limit = Stdlib[19];
    var
     completed = add_help(speclist),
     len = caml_call3(Stdlib_list[25], max_arg_len, 0, completed),
     len$0 = caml_call2(Stdlib[16], len, limit);
    return caml_call2
            (Stdlib_list[19],
             function(ksd){
              var kwd = ksd[1], spec = ksd[2];
              if(ksd[3] === cst$7) return ksd;
              if(11 === spec[0]){
               var
                msg$0 = ksd[3],
                cutcol$0 = second_word(msg$0),
                _K_ = caml_call2(Stdlib[17], 0, len$0 - cutcol$0 | 0) + 3 | 0,
                spaces$0 = caml_call2(Stdlib_string[1], _K_, 32),
                _L_ = replace_leading_tab(msg$0),
                _M_ = caml_call2(Stdlib[28], spaces$0, _L_);
               return [0, kwd, spec, caml_call2(Stdlib[28], cst$6, _M_)];
              }
              var
               msg = ksd[3],
               spec$0 = ksd[2],
               cutcol = second_word(msg),
               kwd_len = caml_ml_string_length(kwd),
               diff = (len$0 - kwd_len | 0) - cutcol | 0;
              if(0 >= diff) return [0, kwd, spec$0, replace_leading_tab(msg)];
              var
               spaces = caml_call2(Stdlib_string[1], diff, 32),
               _I_ = replace_leading_tab(msg),
               prefix = caml_call3(Stdlib_string[9], _I_, 0, cutcol),
               suffix =
                 caml_call3
                  (Stdlib_string[9],
                   msg,
                   cutcol,
                   caml_ml_string_length(msg) - cutcol | 0),
               _J_ = caml_call2(Stdlib[28], spaces, suffix);
              return [0, kwd, spec$0, caml_call2(Stdlib[28], prefix, _J_)];
             },
             completed);
   }
   function read_aux(trim, sep, file){
    var
     ic = caml_call1(Stdlib[80], file),
     buf = caml_call1(Stdlib_buffer[1], 200),
     words = [0, 0];
    function stash(param){
     var word = caml_call1(Stdlib_buffer[2], buf);
     if(trim){
      var len = caml_ml_string_length(word);
      a:
      {
       if(0 < len && 13 === caml_string_get(word, len - 1 | 0)){
        var _H_ = caml_call3(Stdlib_string[9], word, 0, len - 1 | 0);
        break a;
       }
       var _H_ = word;
      }
      var word$0 = _H_;
     }
     else
      var word$0 = word;
     words[1] = [0, word$0, words[1]];
     return caml_call1(Stdlib_buffer[8], buf);
    }
    try{
     for(;;){
      var c = caml_call1(Stdlib[82], ic);
      if(c === sep) stash(0); else caml_call2(Stdlib_buffer[10], buf, c);
     }
    }
    catch(_G_){
     var _E_ = caml_wrap_exception(_G_);
     if(_E_ !== Stdlib[12]) throw caml_maybe_attach_backtrace(_E_, 0);
     if(0 < caml_call1(Stdlib_buffer[7], buf)) stash(0);
     caml_call1(Stdlib[93], ic);
     var _F_ = caml_call1(Stdlib_list[9], words[1]);
     return caml_call1(Stdlib_array[12], _F_);
    }
   }
   var _r_ = 10, _s_ = 1;
   function read_arg(_D_){return read_aux(_s_, _r_, _D_);}
   var _t_ = 0, _u_ = 0, _v_ = [0, [2, 0, [0, 0]], "%s%c"];
   function read_arg0(_C_){return read_aux(_u_, _t_, _C_);}
   function write_aux(sep, file, args){
    var oc = caml_call1(Stdlib[61], file);
    caml_call2
     (Stdlib_array[13],
      function(s){return caml_call4(Stdlib_printf[1], oc, _v_, s, sep);},
      args);
    return caml_call1(Stdlib[76], oc);
   }
   var _w_ = 10;
   function write_arg(_A_, _B_){return write_aux(_w_, _A_, _B_);}
   var _x_ = 0;
   function write_arg0(_y_, _z_){return write_aux(_x_, _y_, _z_);}
   var
    Stdlib_arg =
      [0,
       parse,
       parse_dynamic,
       parse_argv,
       parse_argv_dynamic,
       parse_and_expand_argv_dynamic,
       parse_expand,
       Help,
       Bad,
       usage,
       usage_string,
       align,
       current,
       read_arg,
       read_arg0,
       write_arg,
       write_arg0];
   runtime.caml_register_global(53, Stdlib_arg, "Stdlib__arg");
   return;
  }
  (globalThis));

//# 15201 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    CamlinternalAtomic = global_data.CamlinternalAtomic,
    make = CamlinternalAtomic[1],
    get = CamlinternalAtomic[2],
    set = CamlinternalAtomic[3],
    exchange = CamlinternalAtomic[4],
    compare_and_set = CamlinternalAtomic[5],
    fetch_and_add = CamlinternalAtomic[6],
    incr = CamlinternalAtomic[7],
    decr = CamlinternalAtomic[8],
    Stdlib_atomic =
      [0,
       make,
       get,
       set,
       exchange,
       compare_and_set,
       fetch_and_add,
       incr,
       decr];
   runtime.caml_register_global(1, Stdlib_atomic, "Stdlib__atomic");
   return;
  }
  (globalThis));

//# 15233 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst_s = "%s\n",
    cst_Program_not_linked_with_g_$0 =
      "(Program not linked with -g, cannot print stack backtrace)\n",
    cst_characters = ", characters ",
    cst_Fatal_error_exception = "Fatal error: exception ",
    cst_Fatal_error_exception_s = "Fatal error: exception %s\n",
    cst_Uncaught_exception = "Uncaught exception: ",
    cst_Uncaught_exception_s = "Uncaught exception: %s\n",
    caml_check_bound = runtime.caml_check_bound,
    caml_get_exception_raw_backtra = runtime.caml_get_exception_raw_backtrace,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$4,
    cst$3 = cst$4,
    partial = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]],
    cst$1 = cst$4,
    cst$2 = cst$4,
    cst = "_",
    locfmt =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            cst_characters,
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]]]]]],
       'File "%s", line %d, characters %d-%d: %s'],
    Stdlib_printf = global_data.Stdlib__printf,
    Stdlib_atomic = global_data.Stdlib__atomic,
    Stdlib = global_data.Stdlib,
    Stdlib_buffer = global_data.Stdlib__buffer,
    Stdlib_obj = global_data.Stdlib__obj,
    printers = caml_call1(Stdlib_atomic[1], 0),
    _a_ = [0, [3, 0, 0], "%S"],
    _b_ = [0, [4, 0, 0, 0, 0], "%d"],
    _c_ = [0, [11, ", ", [2, 0, [2, 0, 0]]], ", %s%s"],
    _d_ = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], "(%s%s)"],
    _e_ = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    cst_Out_of_memory = "Out of memory",
    cst_Stack_overflow = "Stack overflow",
    cst_Pattern_matching_failed = "Pattern matching failed",
    cst_Assertion_failed = "Assertion failed",
    cst_Undefined_recursive_module = "Undefined recursive module",
    _f_ =
      [0,
       [11, cst_Uncaught_exception, [2, 0, [12, 10, 0]]],
       cst_Uncaught_exception_s],
    _g_ =
      [0,
       [11, cst_Uncaught_exception, [2, 0, [12, 10, 0]]],
       cst_Uncaught_exception_s],
    cst_Raised_at = "Raised at",
    cst_Re_raised_at = "Re-raised at",
    cst_Raised_by_primitive_operat = "Raised by primitive operation at",
    cst_Called_from = "Called from",
    cst_inlined = " (inlined)",
    _h_ =
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           ' in file "',
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11, ", line ", [4, 0, 0, 0, [11, cst_characters, partial]]]]]]]]]],
       '%s %s in file "%s"%s, line %d, characters %d-%d'],
    _i_ = [0, [2, 0, [11, " unknown location", 0]], "%s unknown location"],
    _j_ = [0, [2, 0, [12, 10, 0]], cst_s],
    _k_ =
      [0,
       [11, cst_Program_not_linked_with_g_$0, 0],
       cst_Program_not_linked_with_g_$0],
    _l_ = [0, [2, 0, [12, 10, 0]], cst_s],
    cst_Program_not_linked_with_g_ = cst_Program_not_linked_with_g_$0;
   function field(x, i){
    var f = x[1 + i];
    if(! caml_call1(Stdlib_obj[1], f))
     return caml_call2(Stdlib_printf[4], _b_, f);
    var _ag_ = Stdlib_obj[13];
    if(caml_obj_tag(f) === _ag_) return caml_call2(Stdlib_printf[4], _a_, f);
    var _ah_ = Stdlib_obj[14];
    return caml_obj_tag(f) === _ah_ ? caml_call1(Stdlib[35], f) : cst;
   }
   function other_fields(x, i){
    if(x.length - 1 <= i) return cst$0;
    var _ae_ = other_fields(x, i + 1 | 0), _af_ = field(x, i);
    return caml_call3(Stdlib_printf[4], _c_, _af_, _ae_);
   }
   function use_printers(x){
    var param = caml_call1(Stdlib_atomic[2], printers);
    for(;;){
     if(! param) return 0;
     var tl = param[2], hd = param[1];
     a:
     {
      try{var val = caml_call1(hd, x);}catch(_ad_){break a;}
      if(val){var s = val[1]; return [0, s];}
     }
     param = tl;
    }
   }
   function to_string_default(x){
    if(x === Stdlib[9]) return cst_Out_of_memory;
    if(x === Stdlib[10]) return cst_Stack_overflow;
    if(x[1] === Stdlib[4]){
     var
      match$0 = x[2],
      char$0 = match$0[3],
      line = match$0[2],
      file = match$0[1];
     return caml_call6
             (Stdlib_printf[4],
              locfmt,
              file,
              line,
              char$0,
              char$0 + 5 | 0,
              cst_Pattern_matching_failed);
    }
    if(x[1] === Stdlib[5]){
     var
      match$1 = x[2],
      char$1 = match$1[3],
      line$0 = match$1[2],
      file$0 = match$1[1];
     return caml_call6
             (Stdlib_printf[4],
              locfmt,
              file$0,
              line$0,
              char$1,
              char$1 + 6 | 0,
              cst_Assertion_failed);
    }
    if(x[1] === Stdlib[15]){
     var
      match$2 = x[2],
      char$2 = match$2[3],
      line$1 = match$2[2],
      file$1 = match$2[1];
     return caml_call6
             (Stdlib_printf[4],
              locfmt,
              file$1,
              line$1,
              char$2,
              char$2 + 6 | 0,
              cst_Undefined_recursive_module);
    }
    if(0 !== caml_obj_tag(x)) return x[1];
    var constructor = x[1][1], match = x.length - 1;
    if(2 < match >>> 0)
     var
      _$_ = other_fields(x, 2),
      _aa_ = field(x, 1),
      _ac_ = caml_call3(Stdlib_printf[4], _d_, _aa_, _$_);
    else
     switch(match){
       case 0:
        var _ac_ = cst$1; break;
       case 1:
        var _ac_ = cst$2; break;
       default:
        var
         _ab_ = field(x, 1),
         _ac_ = caml_call2(Stdlib_printf[4], _e_, _ab_);
     }
    return caml_call2(Stdlib[28], constructor, _ac_);
   }
   function to_string(e){
    var match = use_printers(e);
    if(! match) return to_string_default(e);
    var s = match[1];
    return s;
   }
   function print(fct, arg){
    try{var ___ = caml_call1(fct, arg); return ___;}
    catch(x$0){
     var x = caml_wrap_exception(x$0), _Z_ = to_string(x);
     caml_call2(Stdlib_printf[3], _f_, _Z_);
     caml_call1(Stdlib[63], Stdlib[40]);
     throw caml_maybe_attach_backtrace(x, 0);
    }
   }
   function catch$0(fct, arg){
    try{var _Y_ = caml_call1(fct, arg); return _Y_;}
    catch(x$0){
     var x = caml_wrap_exception(x$0);
     caml_call1(Stdlib[63], Stdlib[39]);
     var _X_ = to_string(x);
     caml_call2(Stdlib_printf[3], _g_, _X_);
     return caml_call1(Stdlib[99], 2);
    }
   }
   function raw_backtrace_entries(bt){return bt;}
   function convert_raw_backtrace(bt){
    return [0, runtime.caml_convert_raw_backtrace(bt)];
   }
   function format_backtrace_slot(pos, slot){
    function info(is_raise){
     return is_raise
             ? 0 === pos ? cst_Raised_at : cst_Re_raised_at
             : 0 === pos ? cst_Raised_by_primitive_operat : cst_Called_from;
    }
    if(0 === slot[0]){
     var
      _P_ = slot[5],
      _Q_ = slot[4],
      _R_ = slot[3],
      _S_ = slot[6] ? cst_inlined : cst$3,
      _T_ = slot[2],
      _U_ = slot[7],
      _V_ = info(slot[1]);
     return [0,
             caml_call8
              (Stdlib_printf[4], _h_, _V_, _U_, _T_, _S_, _R_, _Q_, _P_)];
    }
    if(slot[1]) return 0;
    var _W_ = info(0);
    return [0, caml_call2(Stdlib_printf[4], _i_, _W_)];
   }
   function print_raw_backtrace(outchan, raw_backtrace){
    var backtrace = convert_raw_backtrace(raw_backtrace);
    if(! backtrace) return caml_call2(Stdlib_printf[1], outchan, _k_);
    var a = backtrace[1], _N_ = a.length - 2 | 0, _M_ = 0;
    if(_N_ >= 0){
     var i = _M_;
     for(;;){
      var match = format_backtrace_slot(i, caml_check_bound(a, i)[1 + i]);
      if(match){
       var str = match[1];
       caml_call3(Stdlib_printf[1], outchan, _j_, str);
      }
      var _O_ = i + 1 | 0;
      if(_N_ === i) break;
      i = _O_;
     }
    }
    return 0;
   }
   function print_backtrace(outchan){
    return print_raw_backtrace(outchan, caml_get_exception_raw_backtra(0));
   }
   function raw_backtrace_to_string(raw_backtrace){
    var backtrace = convert_raw_backtrace(raw_backtrace);
    if(! backtrace) return cst_Program_not_linked_with_g_;
    var
     a = backtrace[1],
     b = caml_call1(Stdlib_buffer[1], 1024),
     _K_ = a.length - 2 | 0,
     _J_ = 0;
    if(_K_ >= 0){
     var i = _J_;
     for(;;){
      var match = format_backtrace_slot(i, caml_check_bound(a, i)[1 + i]);
      if(match){
       var str = match[1];
       caml_call3(Stdlib_printf[5], b, _l_, str);
      }
      var _L_ = i + 1 | 0;
      if(_K_ === i) break;
      i = _L_;
     }
    }
    return caml_call1(Stdlib_buffer[2], b);
   }
   function backtrace_slot_is_raise(param){
    return 0 === param[0] ? param[1] : param[1];
   }
   function backtrace_slot_is_inline(param){return 0 === param[0] ? param[6] : 0;
   }
   function backtrace_slot_location(param){
    return 0 === param[0]
            ? [0, [0, param[2], param[3], param[4], param[5]]]
            : 0;
   }
   function backtrace_slot_defname(param){
    if(0 === param[0] && param[7] !== cst$4) return [0, param[7]];
    return 0;
   }
   function backtrace_slots(raw_backtrace){
    var match = convert_raw_backtrace(raw_backtrace);
    if(! match) return 0;
    var backtrace = match[1], i$1 = backtrace.length - 2 | 0, i = i$1;
    for(;;){
     if(-1 === i)
      var _I_ = 0;
     else{
      var _H_ = 0 === caml_check_bound(backtrace, i)[1 + i][0] ? 1 : 0;
      if(! _H_){var i$0 = i - 1 | 0; i = i$0; continue;}
      var _I_ = _H_;
     }
     return _I_ ? [0, backtrace] : 0;
    }
   }
   function backtrace_slots_of_raw_entry(entry){return backtrace_slots([0, entry]);
   }
   function raw_backtrace_length(bt){return bt.length - 1;}
   function get_backtrace(param){
    return raw_backtrace_to_string(caml_get_exception_raw_backtra(0));
   }
   function register_printer(fn){
    for(;;){
     var
      old_printers = caml_call1(Stdlib_atomic[2], printers),
      new_printers = [0, fn, old_printers],
      success =
        caml_call3(Stdlib_atomic[5], printers, old_printers, new_printers),
      _G_ = 1 - success;
     if(! _G_) return _G_;
    }
   }
   function exn_slot(x){return 0 === caml_obj_tag(x) ? x[1] : x;}
   function exn_slot_id(x){var slot = exn_slot(x); return slot[2];}
   function exn_slot_name(x){var slot = exn_slot(x); return slot[1];}
   var
    errors =
      [0,
        cst$4,
        "(Cannot print locations:\n bytecode executable program file not found)",
        "(Cannot print locations:\n bytecode executable program file appears to be corrupt)",
        "(Cannot print locations:\n bytecode executable program file has wrong magic number)",
        "(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"].slice
       (),
    _m_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s];
   function default_uncaught_exception_han(exn, raw_backtrace){
    var _D_ = to_string(exn);
    caml_call2(Stdlib_printf[3], _m_, _D_);
    print_raw_backtrace(Stdlib[40], raw_backtrace);
    var status = runtime.caml_ml_debug_info_status(0);
    if(status < 0){
     var
      _E_ = caml_call1(Stdlib[18], status),
      _F_ = caml_check_bound(errors, _E_)[1 + _E_];
     caml_call1(Stdlib[53], _F_);
    }
    return caml_call1(Stdlib[63], Stdlib[40]);
   }
   var uncaught_exception_handler = [0, default_uncaught_exception_han];
   function set_uncaught_exception_handler(fn){
    uncaught_exception_handler[1] = fn;
    return 0;
   }
   var
    empty_backtrace = [0],
    cst_Fatal_error_out_of_memory_ =
      "Fatal error: out of memory in uncaught exception handler",
    _n_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _o_ =
      [0,
       [11,
        "Fatal error in uncaught exception handler: exception ",
        [2, 0, [12, 10, 0]]],
       "Fatal error in uncaught exception handler: exception %s\n"];
   function handle_uncaught_exception(exn$0, debugger_in_use){
    try{
     try{
      var
       raw_backtrace =
         debugger_in_use ? empty_backtrace : caml_get_exception_raw_backtra(0);
      try{caml_call1(Stdlib[103], 0);}catch(_C_){}
      try{
       var
        _y_ = caml_call2(uncaught_exception_handler[1], exn$0, raw_backtrace),
        _x_ = _y_;
      }
      catch(exn$1){
       var
        exn = caml_wrap_exception(exn$1),
        raw_backtrace$0 = caml_get_exception_raw_backtra(0),
        _v_ = to_string(exn$0);
       caml_call2(Stdlib_printf[3], _n_, _v_);
       print_raw_backtrace(Stdlib[40], raw_backtrace);
       var _w_ = to_string(exn);
       caml_call2(Stdlib_printf[3], _o_, _w_);
       print_raw_backtrace(Stdlib[40], raw_backtrace$0);
       var _x_ = caml_call1(Stdlib[63], Stdlib[40]);
      }
      var _z_ = _x_;
     }
     catch(_B_){
      var _u_ = caml_wrap_exception(_B_);
      if(_u_ !== Stdlib[9]) throw caml_maybe_attach_backtrace(_u_, 0);
      var _z_ = caml_call1(Stdlib[53], cst_Fatal_error_out_of_memory_);
     }
     return _z_;
    }
    catch(_A_){return 0;}
   }
   runtime.caml_register_named_value
    ("Printexc.handle_uncaught_exception", handle_uncaught_exception);
   var
    Stdlib_printexc =
      [0,
       to_string,
       to_string_default,
       print,
       catch$0,
       print_backtrace,
       get_backtrace,
       runtime.caml_record_backtrace,
       runtime.caml_backtrace_status,
       register_printer,
       use_printers,
       raw_backtrace_entries,
       function(_t_){return caml_get_exception_raw_backtra(_t_);},
       print_raw_backtrace,
       raw_backtrace_to_string,
       default_uncaught_exception_han,
       set_uncaught_exception_handler,
       backtrace_slots,
       backtrace_slots_of_raw_entry,
       [0,
        backtrace_slot_is_raise,
        backtrace_slot_is_inline,
        backtrace_slot_location,
        backtrace_slot_defname,
        format_backtrace_slot],
       raw_backtrace_length,
       function(_s_, _r_){return runtime.caml_raw_backtrace_slot(_s_, _r_);},
       function(_q_){return runtime.caml_convert_raw_backtrace_slot(_q_);},
       function(_p_){return runtime.caml_raw_backtrace_next_slot(_p_);},
       exn_slot_id,
       exn_slot_name];
   runtime.caml_register_global(42, Stdlib_printexc, "Stdlib__printexc");
   return;
  }
  (globalThis));

//# 17669 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$17 = "",
    cst$18 = ">",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$15 = cst$17,
    cst$16 = cst$17,
    cst$14 = ".",
    cst$11 = cst$18,
    cst$12 = "<\/",
    cst$13 = cst$17,
    cst$8 = cst$18,
    cst$9 = "<",
    cst$10 = cst$17,
    cst$7 = "\n",
    cst$3 = cst$17,
    cst$4 = cst$17,
    cst$5 = cst$17,
    cst$6 = cst$17,
    cst = cst$17,
    cst$0 = cst$17,
    cst$1 = cst$17,
    cst$2 = cst$17,
    _a_ = [0, cst$17, 0, cst$17],
    Stdlib_queue = global_data.Stdlib__queue,
    CamlinternalFormat = global_data.CamlinternalFormat,
    Stdlib = global_data.Stdlib,
    Stdlib_string = global_data.Stdlib__string,
    Stdlib_buffer = global_data.Stdlib__buffer,
    Stdlib_list = global_data.Stdlib__list,
    Stdlib_stack = global_data.Stdlib__stack,
    Stdlib_int = global_data.Stdlib__int;
   function id(x){return x;}
   var
    zero = 0,
    unknown = -1,
    String_tag =
      [248, "Stdlib.Format.String_tag", runtime.caml_fresh_oo_id(0)];
   function pp_enqueue(state, token){
    state[13] = state[13] + token[3] | 0;
    return caml_call2(Stdlib_queue[3], token, state[28]);
   }
   var
    pp_infinity = 1000000010,
    _b_ = [0, cst$17],
    _c_ = [1, "margin <= max_indent"],
    _d_ = [0, 0],
    _e_ = [1, "max_indent < 2"],
    cst_Format_pp_set_geometry = "Format.pp_set_geometry: ";
   function pp_output_string(state, s){
    return caml_call3(state[17], s, 0, caml_ml_string_length(s));
   }
   function pp_output_newline(state){return caml_call1(state[19], 0);}
   function format_pp_text(state, size, text){
    state[9] = state[9] - size | 0;
    pp_output_string(state, text);
    state[11] = 0;
   }
   function format_string(state, s){
    var _bG_ = s !== cst$17 ? 1 : 0;
    return _bG_ ? format_pp_text(state, caml_ml_string_length(s), s) : _bG_;
   }
   function break_new_line(state, param, width){
    var after = param[3], offset = param[2], before = param[1];
    format_string(state, before);
    pp_output_newline(state);
    state[11] = 1;
    var
     indent = (state[6] - width | 0) + offset | 0,
     real_indent = caml_call2(Stdlib[16], state[8], indent);
    state[10] = real_indent;
    state[9] = state[6] - state[10] | 0;
    var n = state[10];
    caml_call1(state[21], n);
    return format_string(state, after);
   }
   function break_same_line(state, param){
    var after = param[3], width = param[2], before = param[1];
    format_string(state, before);
    state[9] = state[9] - width | 0;
    caml_call1(state[20], width);
    return format_string(state, after);
   }
   function format_pp_token(state, size$0, param){
    if(typeof param === "number")
     switch(param){
       case 0:
        var match$3 = caml_call1(Stdlib_stack[7], state[3]);
        if(! match$3) return;
        var
         tabs = match$3[1][1],
         add_tab =
           function(n, ls){
            if(! ls) return [0, n, 0];
            var l = ls[2], x = ls[1];
            return runtime.caml_lessthan(n, x)
                    ? [0, n, ls]
                    : [0, x, add_tab(n, l)];
           };
        tabs[1] = add_tab(state[6] - state[9] | 0, tabs[1]);
        return;
       case 1:
        caml_call1(Stdlib_stack[5], state[2]); return;
       case 2:
        caml_call1(Stdlib_stack[5], state[3]); return;
       case 3:
        var match$4 = caml_call1(Stdlib_stack[7], state[2]);
        if(! match$4) return pp_output_newline(state);
        var width$0 = match$4[1][2];
        return break_new_line(state, _a_, width$0);
       case 4:
        var _bE_ = state[10] !== (state[6] - state[9] | 0) ? 1 : 0;
        if(! _bE_) return _bE_;
        var match$1 = caml_call1(Stdlib_queue[6], state[28]);
        if(! match$1) return;
        var match$2 = match$1[1], size = match$2[1], length = match$2[3];
        state[12] = state[12] - length | 0;
        state[9] = state[9] + size | 0;
        return;
       default:
        var match$5 = caml_call1(Stdlib_stack[5], state[5]);
        if(! match$5) return;
        var tag_name = match$5[1], marker = caml_call1(state[25], tag_name);
        return pp_output_string(state, marker);
     }
    switch(param[0]){
      case 0:
       var s = param[1]; return format_pp_text(state, size$0, s);
      case 1:
       var
        breaks = param[2],
        fits = param[1],
        off = breaks[2],
        before = breaks[1],
        match$6 = caml_call1(Stdlib_stack[7], state[2]);
       if(! match$6) return;
       var
        match$7 = match$6[1],
        width$1 = match$7[2],
        box_type$0 = match$7[1];
       switch(box_type$0){
         case 0:
          return break_same_line(state, fits);
         case 1:
          return break_new_line(state, breaks, width$1);
         case 2:
          return break_new_line(state, breaks, width$1);
         case 3:
          return state[9] < (size$0 + caml_ml_string_length(before) | 0)
                  ? break_new_line(state, breaks, width$1)
                  : break_same_line(state, fits);
         case 4:
          return state[11]
                  ? break_same_line(state, fits)
                  : state
                     [9]
                    < (size$0 + caml_ml_string_length(before) | 0)
                    ? break_new_line(state, breaks, width$1)
                    : ((state
                       [6]
                      - width$1
                      | 0)
                      + off
                      | 0)
                      < state[10]
                      ? break_new_line(state, breaks, width$1)
                      : break_same_line(state, fits);
         default: return break_same_line(state, fits);
       }
      case 2:
       var
        off$0 = param[2],
        n = param[1],
        insertion_point = state[6] - state[9] | 0,
        match$8 = caml_call1(Stdlib_stack[7], state[3]);
       if(! match$8) return;
       var tabs$0 = match$8[1][1], match$9 = tabs$0[1];
       if(match$9){
        var first = match$9[1], param$0 = tabs$0[1];
        for(;;){
         if(param$0){
          var tail = param$0[2], head = param$0[1];
          if(insertion_point > head){param$0 = tail; continue;}
          var _bF_ = head;
         }
         else
          var _bF_ = first;
         var tab = _bF_;
         break;
        }
       }
       else
        var tab = insertion_point;
       var offset = tab - insertion_point | 0;
       return 0 <= offset
               ? break_same_line(state, [0, cst$0, offset + n | 0, cst])
               : break_new_line
                 (state, [0, cst$2, tab + off$0 | 0, cst$1], state[6]);
      case 3:
       var
        ty = param[2],
        off$1 = param[1],
        insertion_point$0 = state[6] - state[9] | 0;
       if(state[8] < insertion_point$0){
        var match = caml_call1(Stdlib_stack[7], state[2]);
        if(match){
         var match$0 = match[1], width = match$0[2], box_type = match$0[1];
         if(state[9] < width && 3 >= box_type - 1 >>> 0)
          break_new_line(state, _a_, width);
        }
        else
         pp_output_newline(state);
       }
       var
        width$2 = state[9] - off$1 | 0,
        box_type$1 = 1 === ty ? 1 : state[9] < size$0 ? ty : 5;
       return caml_call2(Stdlib_stack[3], [0, box_type$1, width$2], state[2]);
      case 4:
       var tbox = param[1];
       return caml_call2(Stdlib_stack[3], tbox, state[3]);
      default:
       var
        tag_name$0 = param[1],
        marker$0 = caml_call1(state[24], tag_name$0);
       pp_output_string(state, marker$0);
       return caml_call2(Stdlib_stack[3], tag_name$0, state[5]);
    }
   }
   function advance_left(state){
    for(;;){
     var match = caml_call1(Stdlib_queue[9], state[28]);
     if(! match) return 0;
     var
      match$0 = match[1],
      size = match$0[1],
      length = match$0[3],
      token = match$0[2],
      pending_count = state[13] - state[12] | 0,
      _bC_ = 0 <= size ? 1 : 0,
      _bD_ = _bC_ || (state[9] <= pending_count ? 1 : 0);
     if(! _bD_) return _bD_;
     caml_call1(Stdlib_queue[5], state[28]);
     var size$0 = 0 <= size ? size : pp_infinity;
     format_pp_token(state, size$0, token);
     state[12] = length + state[12] | 0;
    }
   }
   function enqueue_advance(state, tok){
    pp_enqueue(state, tok);
    return advance_left(state);
   }
   function enqueue_string_as(state, size, s){
    return enqueue_advance(state, [0, size, [0, s], size]);
   }
   function initialize_scan_stack(stack){
    caml_call1(Stdlib_stack[8], stack);
    var queue_elem = [0, unknown, _b_, 0];
    return caml_call2(Stdlib_stack[3], [0, -1, queue_elem], stack);
   }
   function set_size(state, ty){
    var match = caml_call1(Stdlib_stack[7], state[1]);
    if(! match) return;
    var
     match$0 = match[1],
     queue_elem = match$0[2],
     left_total = match$0[1],
     size = queue_elem[1];
    if(left_total < state[12]) return initialize_scan_stack(state[1]);
    var _bA_ = queue_elem[2];
    if(typeof _bA_ !== "number")
     switch(_bA_[0]){
       case 3:
        var _bB_ = 1 - ty;
        if(! _bB_) return _bB_;
        var x$0 = state[13] + size | 0;
        queue_elem[1] = x$0;
        caml_call1(Stdlib_stack[5], state[1]);
        return;
       case 1:
       case 2:
        if(! ty) return ty;
        var x = state[13] + size | 0;
        queue_elem[1] = x;
        caml_call1(Stdlib_stack[5], state[1]);
        return;
     }
   }
   function scan_push(state, b, token){
    pp_enqueue(state, token);
    if(b) set_size(state, 1);
    var elem = [0, state[13], token];
    return caml_call2(Stdlib_stack[3], elem, state[1]);
   }
   function pp_open_box_gen(state, indent, br_ty){
    state[14] = state[14] + 1 | 0;
    if(state[14] < state[15]){
     var size = - state[13] | 0, elem = [0, size, [3, indent, br_ty], 0];
     return scan_push(state, 0, elem);
    }
    var _bz_ = state[14] === state[15] ? 1 : 0;
    if(! _bz_) return _bz_;
    var s = state[16], x = caml_ml_string_length(s);
    return enqueue_string_as(state, x, s);
   }
   function pp_close_box(state, param){
    var _bx_ = 1 < state[14] ? 1 : 0;
    if(_bx_){
     if(state[14] < state[15]){
      pp_enqueue(state, [0, zero, 1, 0]);
      set_size(state, 1);
      set_size(state, 0);
     }
     state[14] = state[14] - 1 | 0;
     var _by_ = 0;
    }
    else
     var _by_ = _bx_;
    return _by_;
   }
   function pp_open_stag(state, tag_name){
    if(state[22]){
     caml_call2(Stdlib_stack[3], tag_name, state[4]);
     caml_call1(state[26], tag_name);
    }
    var _bw_ = state[23];
    if(! _bw_) return _bw_;
    var token = [5, tag_name];
    return pp_enqueue(state, [0, zero, token, 0]);
   }
   function pp_close_stag(state, param){
    if(state[23]) pp_enqueue(state, [0, zero, 5, 0]);
    var _bu_ = state[22];
    if(_bu_){
     var match = caml_call1(Stdlib_stack[5], state[4]);
     if(match){
      var tag_name = match[1];
      return caml_call1(state[27], tag_name);
     }
     var _bv_ = 0;
    }
    else
     var _bv_ = _bu_;
    return _bv_;
   }
   function pp_open_tag(state, s){
    return pp_open_stag(state, [0, String_tag, s]);
   }
   function pp_close_tag(state, param){return pp_close_stag(state, 0);}
   function pp_set_print_tags(state, b){state[22] = b; return 0;}
   function pp_set_mark_tags(state, b){state[23] = b; return 0;}
   function pp_get_print_tags(state, param){return state[22];}
   function pp_get_mark_tags(state, param){return state[23];}
   function pp_set_tags(state, b){
    pp_set_print_tags(state, b);
    return pp_set_mark_tags(state, b);
   }
   function pp_get_formatter_stag_function(state, param){
    return [0, state[24], state[25], state[26], state[27]];
   }
   function pp_set_formatter_stag_function(state, param){
    var pct = param[4], pot = param[3], mct = param[2], mot = param[1];
    state[24] = mot;
    state[25] = mct;
    state[26] = pot;
    state[27] = pct;
    return 0;
   }
   function pp_rinit(state){
    state[12] = 1;
    state[13] = 1;
    caml_call1(Stdlib_queue[11], state[28]);
    initialize_scan_stack(state[1]);
    caml_call1(Stdlib_stack[8], state[2]);
    caml_call1(Stdlib_stack[8], state[3]);
    caml_call1(Stdlib_stack[8], state[4]);
    caml_call1(Stdlib_stack[8], state[5]);
    state[10] = 0;
    state[14] = 0;
    state[9] = state[6];
    return pp_open_box_gen(state, 0, 3);
   }
   function pp_flush_queue(state, b){
    caml_call2
     (Stdlib_stack[12],
      function(param){return pp_close_tag(state, 0);},
      state[4]);
    for(;;){
     if(1 >= state[14]){
      state[13] = pp_infinity;
      advance_left(state);
      if(b) pp_output_newline(state);
      return pp_rinit(state);
     }
     pp_close_box(state, 0);
    }
   }
   function pp_print_as_size(state, size, s){
    var _bt_ = state[14] < state[15] ? 1 : 0;
    return _bt_ ? enqueue_string_as(state, size, s) : _bt_;
   }
   function pp_print_as(state, isize, s){
    return pp_print_as_size(state, isize, s);
   }
   function pp_print_string(state, s){
    var isize = caml_ml_string_length(s);
    return pp_print_as_size(state, isize, s);
   }
   function pp_print_int(state, i){
    return pp_print_string(state, caml_call1(Stdlib_int[10], i));
   }
   function pp_print_float(state, f){
    return pp_print_string(state, caml_call1(Stdlib[35], f));
   }
   function pp_print_bool(state, b){
    return pp_print_string(state, caml_call1(Stdlib[30], b));
   }
   function pp_print_char(state, c){
    var s = caml_call2(Stdlib_string[1], 1, c);
    return pp_print_as_size(state, 1, s);
   }
   function pp_open_hbox(state, param){return pp_open_box_gen(state, 0, 0);}
   function pp_open_vbox(state, indent){
    return pp_open_box_gen(state, indent, 1);
   }
   function pp_open_hvbox(state, indent){
    return pp_open_box_gen(state, indent, 2);
   }
   function pp_open_hovbox(state, indent){
    return pp_open_box_gen(state, indent, 3);
   }
   function pp_open_box(state, indent){
    return pp_open_box_gen(state, indent, 4);
   }
   function pp_print_newline(state, param){
    pp_flush_queue(state, 1);
    return caml_call1(state[18], 0);
   }
   function pp_print_flush(state, param){
    pp_flush_queue(state, 0);
    return caml_call1(state[18], 0);
   }
   function pp_force_newline(state, param){
    var _bs_ = state[14] < state[15] ? 1 : 0;
    return _bs_ ? enqueue_advance(state, [0, zero, 3, 0]) : _bs_;
   }
   function pp_print_if_newline(state, param){
    var _br_ = state[14] < state[15] ? 1 : 0;
    return _br_ ? enqueue_advance(state, [0, zero, 4, 0]) : _br_;
   }
   function pp_print_custom_break(state, fits, breaks){
    var
     after = fits[3],
     width = fits[2],
     before = fits[1],
     _bq_ = state[14] < state[15] ? 1 : 0;
    if(! _bq_) return _bq_;
    var
     size = - state[13] | 0,
     token = [1, fits, breaks],
     length =
       (caml_ml_string_length(before) + width | 0)
       + caml_ml_string_length(after)
       | 0,
     elem = [0, size, token, length];
    return scan_push(state, 1, elem);
   }
   function pp_print_break(state, width, offset){
    return pp_print_custom_break
            (state, [0, cst$6, width, cst$5], [0, cst$4, offset, cst$3]);
   }
   function pp_print_space(state, param){return pp_print_break(state, 1, 0);}
   function pp_print_cut(state, param){return pp_print_break(state, 0, 0);}
   function pp_open_tbox(state, param){
    state[14] = state[14] + 1 | 0;
    var _bp_ = state[14] < state[15] ? 1 : 0;
    if(! _bp_) return _bp_;
    var elem = [0, zero, [4, [0, [0, 0]]], 0];
    return enqueue_advance(state, elem);
   }
   function pp_close_tbox(state, param){
    var _bm_ = 1 < state[14] ? 1 : 0;
    if(_bm_){
     var _bn_ = state[14] < state[15] ? 1 : 0;
     if(_bn_){
      var elem = [0, zero, 2, 0];
      enqueue_advance(state, elem);
      state[14] = state[14] - 1 | 0;
      var _bo_ = 0;
     }
     else
      var _bo_ = _bn_;
    }
    else
     var _bo_ = _bm_;
    return _bo_;
   }
   function pp_print_tbreak(state, width, offset){
    var _bl_ = state[14] < state[15] ? 1 : 0;
    if(! _bl_) return _bl_;
    var size = - state[13] | 0, elem = [0, size, [2, width, offset], width];
    return scan_push(state, 1, elem);
   }
   function pp_print_tab(state, param){return pp_print_tbreak(state, 0, 0);}
   function pp_set_tab(state, param){
    var _bk_ = state[14] < state[15] ? 1 : 0;
    if(! _bk_) return _bk_;
    var elem = [0, zero, 0, 0];
    return enqueue_advance(state, elem);
   }
   function pp_set_max_boxes(state, n){
    var _bi_ = 1 < n ? 1 : 0, _bj_ = _bi_ ? (state[15] = n, 0) : _bi_;
    return _bj_;
   }
   function pp_get_max_boxes(state, param){return state[15];}
   function pp_over_max_boxes(state, param){return state[14] === state[15] ? 1 : 0;
   }
   function pp_set_ellipsis_text(state, s){state[16] = s; return 0;}
   function pp_get_ellipsis_text(state, param){return state[16];}
   function pp_limit(n){return n < 1000000010 ? n : 1000000009;}
   function pp_set_max_indent(state, n$0){
    var _bh_ = 1 < n$0 ? 1 : 0;
    if(! _bh_) return _bh_;
    var n$1 = state[6] - n$0 | 0, _bg_ = 1 <= n$1 ? 1 : 0;
    if(! _bg_) return _bg_;
    var n = pp_limit(n$1);
    state[7] = n;
    state[8] = state[6] - state[7] | 0;
    return pp_rinit(state);
   }
   function pp_get_max_indent(state, param){return state[8];}
   function pp_set_margin(state, n){
    var _be_ = 1 <= n ? 1 : 0;
    if(! _be_) return _be_;
    var n$0 = pp_limit(n);
    state[6] = n$0;
    if(state[8] <= state[6])
     var new_max_indent = state[8];
    else
     var
      _bf_ = caml_call2(Stdlib[17], state[6] - state[7] | 0, state[6] / 2 | 0),
      new_max_indent = caml_call2(Stdlib[17], _bf_, 1);
    return pp_set_max_indent(state, new_max_indent);
   }
   function validate_geometry(param){
    var margin = param[2], max_indent = param[1];
    return 2 <= max_indent ? margin <= max_indent ? _c_ : _d_ : _e_;
   }
   function check_geometry(geometry){
    return 0 === validate_geometry(geometry)[0] ? 1 : 0;
   }
   function pp_get_margin(state, param){return state[6];}
   function pp_set_full_geometry(state, param){
    var margin = param[2], max_indent = param[1];
    pp_set_margin(state, margin);
    pp_set_max_indent(state, max_indent);
    return 0;
   }
   function pp_set_geometry(state, max_indent, margin){
    var
     geometry = [0, max_indent, margin],
     match = validate_geometry(geometry);
    if(0 === match[0]) return pp_set_full_geometry(state, geometry);
    var
     msg = match[1],
     _bd_ = caml_call2(Stdlib[28], cst_Format_pp_set_geometry, msg);
    throw caml_maybe_attach_backtrace([0, Stdlib[6], _bd_], 1);
   }
   function pp_safe_set_geometry(state, max_indent, margin){
    var geometry = [0, max_indent, margin];
    return 0 === validate_geometry(geometry)[0]
            ? pp_set_full_geometry(state, geometry)
            : 0;
   }
   function pp_get_geometry(state, param){return [0, state[8], state[6]];}
   function pp_update_geometry(state, update){
    var geometry = pp_get_geometry(state, 0);
    return pp_set_full_geometry(state, caml_call1(update, geometry));
   }
   function pp_set_formatter_out_functions(state, param){
    var j = param[5], i = param[4], h = param[3], g = param[2], f = param[1];
    state[17] = f;
    state[18] = g;
    state[19] = h;
    state[20] = i;
    state[21] = j;
    return 0;
   }
   function pp_get_formatter_out_functions(state, param){
    return [0, state[17], state[18], state[19], state[20], state[21]];
   }
   function pp_set_formatter_output_functi(state, f, g){state[17] = f; state[18] = g; return 0;
   }
   function pp_get_formatter_output_functi(state, param){return [0, state[17], state[18]];
   }
   function display_newline(state, param){
    return caml_call3(state[17], cst$7, 0, 1);
   }
   var blank_line = caml_call2(Stdlib_string[1], 80, 32), _f_ = [3, 0, 3];
   function display_blanks(state, n){
    var n$0 = n;
    for(;;){
     var _bc_ = 0 < n$0 ? 1 : 0;
     if(! _bc_) return _bc_;
     if(80 >= n$0) return caml_call3(state[17], blank_line, 0, n$0);
     caml_call3(state[17], blank_line, 0, 80);
     var n$1 = n$0 - 80 | 0;
     n$0 = n$1;
    }
   }
   function pp_set_formatter_out_channel(state, oc){
    state[17] = caml_call1(Stdlib[69], oc);
    state[18] = function(param){return caml_call1(Stdlib[63], oc);};
    state[19] = function(_bb_){return display_newline(state, _bb_);};
    state[20] = function(_ba_){return display_blanks(state, _ba_);};
    state[21] = function(_a$_){return display_blanks(state, _a$_);};
    return 0;
   }
   function default_pp_mark_open_tag(param){
    if(param[1] !== String_tag) return cst$10;
    var s = param[2], _a__ = caml_call2(Stdlib[28], s, cst$8);
    return caml_call2(Stdlib[28], cst$9, _a__);
   }
   function default_pp_mark_close_tag(param){
    if(param[1] !== String_tag) return cst$13;
    var s = param[2], _a9_ = caml_call2(Stdlib[28], s, cst$11);
    return caml_call2(Stdlib[28], cst$12, _a9_);
   }
   function default_pp_print_open_tag(_a8_){return 0;}
   function default_pp_print_close_tag(_a7_){return 0;}
   function pp_make_formatter(f, g, h, i, j){
    var
     pp_queue = caml_call1(Stdlib_queue[2], 0),
     sys_tok = [0, unknown, _f_, 0];
    caml_call2(Stdlib_queue[3], sys_tok, pp_queue);
    var scan_stack = caml_call1(Stdlib_stack[2], 0);
    initialize_scan_stack(scan_stack);
    caml_call2(Stdlib_stack[3], [0, 1, sys_tok], scan_stack);
    var
     pp_margin = 78,
     _a3_ = Stdlib[19],
     _a4_ = caml_call1(Stdlib_stack[2], 0),
     _a5_ = caml_call1(Stdlib_stack[2], 0),
     _a6_ = caml_call1(Stdlib_stack[2], 0);
    return [0,
            scan_stack,
            caml_call1(Stdlib_stack[2], 0),
            _a6_,
            _a5_,
            _a4_,
            pp_margin,
            10,
            68,
            pp_margin,
            0,
            1,
            1,
            1,
            1,
            _a3_,
            cst$14,
            f,
            g,
            h,
            i,
            j,
            0,
            0,
            default_pp_mark_open_tag,
            default_pp_mark_close_tag,
            default_pp_print_open_tag,
            default_pp_print_close_tag,
            pp_queue];
   }
   function formatter_of_out_functions(out_funs){
    return pp_make_formatter
            (out_funs[1], out_funs[2], out_funs[3], out_funs[4], out_funs[5]);
   }
   function make_formatter(output, flush){
    var
     ppf =
       pp_make_formatter
        (output,
         flush,
         function(_a2_){return 0;},
         function(_a1_){return 0;},
         function(_a0_){return 0;});
    ppf[19] = function(_aZ_){return display_newline(ppf, _aZ_);};
    ppf[20] = function(_aY_){return display_blanks(ppf, _aY_);};
    ppf[21] = function(_aX_){return display_blanks(ppf, _aX_);};
    return ppf;
   }
   function formatter_of_out_channel(oc){
    return make_formatter
            (caml_call1(Stdlib[69], oc),
             function(param){return caml_call1(Stdlib[63], oc);});
   }
   function formatter_of_buffer(b){
    return make_formatter
            (caml_call1(Stdlib_buffer[16], b), function(_aW_){return 0;});
   }
   var pp_buffer_size = 512;
   function pp_make_buffer(param){
    return caml_call1(Stdlib_buffer[1], pp_buffer_size);
   }
   var
    stdbuf = pp_make_buffer(0),
    std_formatter = formatter_of_out_channel(Stdlib[39]),
    err_formatter = formatter_of_out_channel(Stdlib[40]),
    str_formatter = formatter_of_buffer(stdbuf);
   function flush_buffer_formatter(buf, ppf){
    pp_flush_queue(ppf, 0);
    var s = caml_call1(Stdlib_buffer[2], buf);
    caml_call1(Stdlib_buffer[9], buf);
    return s;
   }
   function flush_str_formatter(param){
    return flush_buffer_formatter(stdbuf, str_formatter);
   }
   function make_symbolic_output_buffer(param){return [0, 0];}
   function clear_symbolic_output_buffer(sob){sob[1] = 0; return 0;}
   function get_symbolic_output_buffer(sob){
    return caml_call1(Stdlib_list[9], sob[1]);
   }
   function flush_symbolic_output_buffer(sob){
    var items = get_symbolic_output_buffer(sob);
    clear_symbolic_output_buffer(sob);
    return items;
   }
   function add_symbolic_output_item(sob, item){sob[1] = [0, item, sob[1]]; return 0;
   }
   function formatter_of_symbolic_output_b(sob){
    function f(s, i, n){
     return add_symbolic_output_item
             (sob, [0, caml_call3(Stdlib_string[9], s, i, n)]);
    }
    function g(_aV_){return add_symbolic_output_item(sob, 0);}
    function h(_aU_){return add_symbolic_output_item(sob, 1);}
    function i(n){return add_symbolic_output_item(sob, [1, n]);}
    function j(n){return add_symbolic_output_item(sob, [2, n]);}
    return pp_make_formatter(f, g, h, i, j);
   }
   function open_hbox(_aT_){return pp_open_hbox(std_formatter, _aT_);}
   function open_vbox(_aS_){return pp_open_vbox(std_formatter, _aS_);}
   function open_hvbox(_aR_){return pp_open_hvbox(std_formatter, _aR_);}
   function open_hovbox(_aQ_){return pp_open_hovbox(std_formatter, _aQ_);}
   function open_box(_aP_){return pp_open_box(std_formatter, _aP_);}
   function close_box(_aO_){return pp_close_box(std_formatter, _aO_);}
   function open_tag(_aN_){return pp_open_tag(std_formatter, _aN_);}
   function close_tag(_aM_){return pp_close_tag(std_formatter, _aM_);}
   function open_stag(_aL_){return pp_open_stag(std_formatter, _aL_);}
   function close_stag(_aK_){return pp_close_stag(std_formatter, _aK_);}
   function print_as(isize, s){
    return pp_print_as_size(std_formatter, isize, s);
   }
   function print_string(_aJ_){return pp_print_string(std_formatter, _aJ_);}
   function print_int(_aI_){return pp_print_int(std_formatter, _aI_);}
   function print_float(_aH_){return pp_print_float(std_formatter, _aH_);}
   function print_char(_aG_){return pp_print_char(std_formatter, _aG_);}
   function print_bool(_aF_){return pp_print_bool(std_formatter, _aF_);}
   function print_break(_aD_, _aE_){
    return pp_print_break(std_formatter, _aD_, _aE_);
   }
   function print_cut(_aC_){return pp_print_cut(std_formatter, _aC_);}
   function print_space(_aB_){return pp_print_space(std_formatter, _aB_);}
   function force_newline(_aA_){return pp_force_newline(std_formatter, _aA_);}
   function print_flush(_az_){return pp_print_flush(std_formatter, _az_);}
   function print_newline(_ay_){return pp_print_newline(std_formatter, _ay_);}
   function print_if_newline(_ax_){
    return pp_print_if_newline(std_formatter, _ax_);
   }
   function open_tbox(_aw_){return pp_open_tbox(std_formatter, _aw_);}
   function close_tbox(_av_){return pp_close_tbox(std_formatter, _av_);}
   function print_tbreak(_at_, _au_){
    return pp_print_tbreak(std_formatter, _at_, _au_);
   }
   function set_tab(_as_){return pp_set_tab(std_formatter, _as_);}
   function print_tab(_ar_){return pp_print_tab(std_formatter, _ar_);}
   function set_margin(_aq_){return pp_set_margin(std_formatter, _aq_);}
   function get_margin(_ap_){return std_formatter[6];}
   function set_max_indent(_ao_){
    return pp_set_max_indent(std_formatter, _ao_);
   }
   function get_max_indent(_an_){return std_formatter[8];}
   function set_geometry(_al_, _am_){
    return pp_set_geometry(std_formatter, _al_, _am_);
   }
   function safe_set_geometry(_aj_, _ak_){
    return pp_safe_set_geometry(std_formatter, _aj_, _ak_);
   }
   function get_geometry(_ai_){return pp_get_geometry(std_formatter, _ai_);}
   function update_geometry(_ah_){
    return pp_update_geometry(std_formatter, _ah_);
   }
   function set_max_boxes(_ag_){return pp_set_max_boxes(std_formatter, _ag_);}
   function get_max_boxes(_af_){return std_formatter[15];}
   function over_max_boxes(_ae_){
    return pp_over_max_boxes(std_formatter, _ae_);
   }
   function set_ellipsis_text(_ad_){
    return pp_set_ellipsis_text(std_formatter, _ad_);
   }
   function get_ellipsis_text(_ac_){return std_formatter[16];}
   function set_formatter_out_channel(_ab_){
    return pp_set_formatter_out_channel(std_formatter, _ab_);
   }
   function set_formatter_out_functions(_aa_){
    return pp_set_formatter_out_functions(std_formatter, _aa_);
   }
   function get_formatter_out_functions(_$_){
    return pp_get_formatter_out_functions(std_formatter, _$_);
   }
   function set_formatter_output_functions(_Z_, ___){
    return pp_set_formatter_output_functi(std_formatter, _Z_, ___);
   }
   function get_formatter_output_functions(_Y_){
    return pp_get_formatter_output_functi(std_formatter, _Y_);
   }
   function set_formatter_stag_functions(_X_){
    return pp_set_formatter_stag_function(std_formatter, _X_);
   }
   function get_formatter_stag_functions(_W_){
    return pp_get_formatter_stag_function(std_formatter, _W_);
   }
   function set_print_tags(_V_){return pp_set_print_tags(std_formatter, _V_);}
   function get_print_tags(_U_){return std_formatter[22];}
   function set_mark_tags(_T_){return pp_set_mark_tags(std_formatter, _T_);}
   function get_mark_tags(_S_){return std_formatter[23];}
   function set_tags(_R_){return pp_set_tags(std_formatter, _R_);}
   function pp_print_list(opt, pp_v, ppf, param){
    var opt$0 = opt, param$0 = param;
    for(;;){
     if(opt$0)
      var sth = opt$0[1], pp_sep = sth;
     else
      var pp_sep = pp_print_cut;
     if(! param$0) return 0;
     var v = param$0[1];
     if(! param$0[2]) return caml_call2(pp_v, ppf, v);
     var vs = param$0[2];
     caml_call2(pp_v, ppf, v);
     caml_call2(pp_sep, ppf, 0);
     var opt$1 = [0, pp_sep];
     opt$0 = opt$1;
     param$0 = vs;
    }
   }
   function pp_print_seq(opt, pp_v, ppf, seq$1){
    if(opt) var sth = opt[1], pp_sep = sth; else var pp_sep = pp_print_cut;
    var match$0 = caml_call1(seq$1, 0);
    if(! match$0) return 0;
    var seq$2 = match$0[2], v$0 = match$0[1];
    caml_call2(pp_v, ppf, v$0);
    var seq = seq$2;
    for(;;){
     var match = caml_call1(seq, 0);
     if(! match) return 0;
     var seq$0 = match[2], v = match[1];
     caml_call2(pp_sep, ppf, 0);
     caml_call2(pp_v, ppf, v);
     seq = seq$0;
    }
   }
   function pp_print_text(ppf, s){
    var len = caml_ml_string_length(s), left = [0, 0], right = [0, 0];
    function flush(param){
     pp_print_string
      (ppf, caml_call3(Stdlib_string[9], s, left[1], right[1] - left[1] | 0));
     right[1]++;
     left[1] = right[1];
     return 0;
    }
    for(;;){
     if(right[1] === len){
      var _Q_ = left[1] !== len ? 1 : 0;
      return _Q_ ? flush(0) : _Q_;
     }
     var match = runtime.caml_string_get(s, right[1]);
     if(10 === match){
      flush(0);
      pp_force_newline(ppf, 0);
     }
     else if(32 === match){flush(0); pp_print_space(ppf, 0);} else right[1]++;
    }
   }
   function pp_print_option(opt, pp_v, ppf, param){
    if(opt)
     var sth = opt[1], none = sth;
    else
     var none = function(param, _P_){return 0;};
    if(! param) return caml_call2(none, ppf, 0);
    var v = param[1];
    return caml_call2(pp_v, ppf, v);
   }
   function pp_print_result(ok, error, ppf, param){
    if(0 === param[0]){var v = param[1]; return caml_call2(ok, ppf, v);}
    var e = param[1];
    return caml_call2(error, ppf, e);
   }
   function compute_tag(output, tag_acc){
    var
     buf = caml_call1(Stdlib_buffer[1], 16),
     ppf = formatter_of_buffer(buf);
    caml_call2(output, ppf, tag_acc);
    pp_print_flush(ppf, 0);
    var len = caml_call1(Stdlib_buffer[7], buf);
    return 2 <= len
            ? caml_call3(Stdlib_buffer[4], buf, 1, len - 2 | 0)
            : caml_call1(Stdlib_buffer[2], buf);
   }
   function output_formatting_lit(ppf, fmting_lit){
    if(typeof fmting_lit === "number")
     switch(fmting_lit){
       case 0:
        return pp_close_box(ppf, 0);
       case 1:
        return pp_close_tag(ppf, 0);
       case 2:
        return pp_print_flush(ppf, 0);
       case 3:
        return pp_force_newline(ppf, 0);
       case 4:
        return pp_print_newline(ppf, 0);
       case 5:
        return pp_print_char(ppf, 64);
       default: return pp_print_char(ppf, 37);
     }
    switch(fmting_lit[0]){
      case 0:
       var offset = fmting_lit[3], width = fmting_lit[2];
       return pp_print_break(ppf, width, offset);
      case 1:
       return 0;
      default:
       var c = fmting_lit[1];
       pp_print_char(ppf, 64);
       return pp_print_char(ppf, c);
    }
   }
   function output_acc(ppf, acc){
    if(typeof acc === "number") return 0;
    a:
    {
     b:
     {
      c:
      {
       switch(acc[0]){
         case 0:
          var f = acc[2], p = acc[1];
          output_acc(ppf, p);
          return output_formatting_lit(ppf, f);
         case 1:
          var match = acc[2], p$0 = acc[1];
          if(0 === match[0]){
           var acc$0 = match[1];
           output_acc(ppf, p$0);
           return pp_open_stag
                   (ppf, [0, String_tag, compute_tag(output_acc, acc$0)]);
          }
          var acc$1 = match[1];
          output_acc(ppf, p$0);
          var
           _G_ = compute_tag(output_acc, acc$1),
           match$0 = caml_call1(CamlinternalFormat[20], _G_),
           bty = match$0[2],
           indent = match$0[1];
          return pp_open_box_gen(ppf, indent, bty);
         case 2:
          var _H_ = acc[1];
          if(typeof _H_ !== "number" && 0 === _H_[0]){
           var _I_ = _H_[2];
           if(typeof _I_ !== "number" && 1 === _I_[0]){
            var s$0 = acc[2], size = _I_[2], p$2 = _H_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _H_;
          break a;
         case 3:
          var _J_ = acc[1];
          if(typeof _J_ !== "number" && 0 === _J_[0]){
           var _K_ = _J_[2];
           if(typeof _K_ !== "number" && 1 === _K_[0]){
            var c$0 = acc[2], size$0 = _K_[2], p$4 = _J_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _J_;
          break c;
         case 4:
          var _L_ = acc[1];
          if(typeof _L_ !== "number" && 0 === _L_[0]){
           var _M_ = _L_[2];
           if(typeof _M_ !== "number" && 1 === _M_[0]){
            var s$0 = acc[2], size = _M_[2], p$2 = _L_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _L_;
          break a;
         case 5:
          var _N_ = acc[1];
          if(typeof _N_ !== "number" && 0 === _N_[0]){
           var _O_ = _N_[2];
           if(typeof _O_ !== "number" && 1 === _O_[0]){
            var c$0 = acc[2], size$0 = _O_[2], p$4 = _N_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _N_;
          break c;
         case 6:
          var f$0 = acc[2], p$5 = acc[1];
          output_acc(ppf, p$5);
          return caml_call1(f$0, ppf);
         case 7:
          var p$6 = acc[1];
          output_acc(ppf, p$6);
          return pp_print_flush(ppf, 0);
         default:
          var msg = acc[2], p$7 = acc[1];
          output_acc(ppf, p$7);
          return caml_call1(Stdlib[1], msg);
       }
       output_acc(ppf, p$4);
       return pp_print_as_size
               (ppf, size$0, caml_call2(Stdlib_string[1], 1, c$0));
      }
      output_acc(ppf, p$3);
      return pp_print_char(ppf, c);
     }
     output_acc(ppf, p$2);
     return pp_print_as_size(ppf, size, s$0);
    }
    output_acc(ppf, p$1);
    return pp_print_string(ppf, s);
   }
   function strput_acc(ppf, acc){
    if(typeof acc === "number") return 0;
    a:
    {
     b:
     {
      c:
      {
       switch(acc[0]){
         case 0:
          var f = acc[2], p = acc[1];
          strput_acc(ppf, p);
          return output_formatting_lit(ppf, f);
         case 1:
          var match = acc[2], p$0 = acc[1];
          if(0 === match[0]){
           var acc$0 = match[1];
           strput_acc(ppf, p$0);
           return pp_open_stag
                   (ppf, [0, String_tag, compute_tag(strput_acc, acc$0)]);
          }
          var acc$1 = match[1];
          strput_acc(ppf, p$0);
          var
           _x_ = compute_tag(strput_acc, acc$1),
           match$0 = caml_call1(CamlinternalFormat[20], _x_),
           bty = match$0[2],
           indent = match$0[1];
          return pp_open_box_gen(ppf, indent, bty);
         case 2:
          var _y_ = acc[1];
          if(typeof _y_ !== "number" && 0 === _y_[0]){
           var _z_ = _y_[2];
           if(typeof _z_ !== "number" && 1 === _z_[0]){
            var s$0 = acc[2], size = _z_[2], p$2 = _y_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _y_;
          break a;
         case 3:
          var _A_ = acc[1];
          if(typeof _A_ !== "number" && 0 === _A_[0]){
           var _B_ = _A_[2];
           if(typeof _B_ !== "number" && 1 === _B_[0]){
            var c$0 = acc[2], size$0 = _B_[2], p$4 = _A_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _A_;
          break c;
         case 4:
          var _C_ = acc[1];
          if(typeof _C_ !== "number" && 0 === _C_[0]){
           var _D_ = _C_[2];
           if(typeof _D_ !== "number" && 1 === _D_[0]){
            var s$0 = acc[2], size = _D_[2], p$2 = _C_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _C_;
          break a;
         case 5:
          var _E_ = acc[1];
          if(typeof _E_ !== "number" && 0 === _E_[0]){
           var _F_ = _E_[2];
           if(typeof _F_ !== "number" && 1 === _F_[0]){
            var c$0 = acc[2], size$0 = _F_[2], p$4 = _E_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _E_;
          break c;
         case 6:
          var p$5 = acc[1];
          if(typeof p$5 !== "number" && 0 === p$5[0]){
           var match$1 = p$5[2];
           if(typeof match$1 !== "number" && 1 === match$1[0]){
            var f$1 = acc[2], size$1 = match$1[2], p$6 = p$5[1];
            strput_acc(ppf, p$6);
            return pp_print_as_size(ppf, size$1, caml_call1(f$1, 0));
           }
          }
          var f$0 = acc[2];
          strput_acc(ppf, p$5);
          return pp_print_string(ppf, caml_call1(f$0, 0));
         case 7:
          var p$7 = acc[1];
          strput_acc(ppf, p$7);
          return pp_print_flush(ppf, 0);
         default:
          var msg = acc[2], p$8 = acc[1];
          strput_acc(ppf, p$8);
          return caml_call1(Stdlib[1], msg);
       }
       strput_acc(ppf, p$4);
       return pp_print_as_size
               (ppf, size$0, caml_call2(Stdlib_string[1], 1, c$0));
      }
      strput_acc(ppf, p$3);
      return pp_print_char(ppf, c);
     }
     strput_acc(ppf, p$2);
     return pp_print_as_size(ppf, size, s$0);
    }
    strput_acc(ppf, p$1);
    return pp_print_string(ppf, s);
   }
   function kfprintf(k, ppf, param){
    var fmt = param[1];
    return caml_call3
            (CamlinternalFormat[7],
             function(acc){output_acc(ppf, acc); return caml_call1(k, ppf);},
             0,
             fmt);
   }
   function ikfprintf(k, ppf, param){
    var fmt = param[1];
    return caml_call3(CamlinternalFormat[8], k, ppf, fmt);
   }
   function ifprintf(ppf, param){
    var fmt = param[1];
    return caml_call3(CamlinternalFormat[8], function(_w_){return 0;}, 0, fmt);
   }
   function fprintf(ppf){
    function _t_(_v_){return 0;}
    return function(_u_){return kfprintf(_t_, ppf, _u_);};
   }
   function printf(fmt){return fprintf(std_formatter)(fmt);}
   function eprintf(fmt){return fprintf(err_formatter)(fmt);}
   function kdprintf(k, param){
    var fmt = param[1];
    return caml_call3
            (CamlinternalFormat[7],
             function(acc){
              return caml_call1
                      (k, function(ppf){return output_acc(ppf, acc);});
             },
             0,
             fmt);
   }
   function dprintf(fmt){return kdprintf(function(i){return i;}, fmt);}
   function ksprintf(k, param){
    var fmt = param[1], b = pp_make_buffer(0), ppf = formatter_of_buffer(b);
    function k$0(acc){
     strput_acc(ppf, acc);
     return caml_call1(k, flush_buffer_formatter(b, ppf));
    }
    return caml_call3(CamlinternalFormat[7], k$0, 0, fmt);
   }
   function sprintf(fmt){return ksprintf(id, fmt);}
   function kasprintf(k, param){
    var fmt = param[1], b = pp_make_buffer(0), ppf = formatter_of_buffer(b);
    function k$0(acc){
     output_acc(ppf, acc);
     return caml_call1(k, flush_buffer_formatter(b, ppf));
    }
    return caml_call3(CamlinternalFormat[7], k$0, 0, fmt);
   }
   function asprintf(fmt){return kasprintf(id, fmt);}
   function flush_standard_formatters(param){
    pp_print_flush(std_formatter, 0);
    return pp_print_flush(err_formatter, 0);
   }
   caml_call1(Stdlib[100], flush_standard_formatters);
   function pp_set_all_formatter_output_fu(state, f, g, h, i){
    pp_set_formatter_output_functi(state, f, g);
    state[19] = h;
    state[20] = i;
    return 0;
   }
   function pp_get_all_formatter_output_fu(state, param){
    return [0, state[17], state[18], state[19], state[20]];
   }
   function set_all_formatter_output_funct(_p_, _q_, _r_, _s_){
    return pp_set_all_formatter_output_fu(std_formatter, _p_, _q_, _r_, _s_);
   }
   function get_all_formatter_output_funct(_o_){
    return pp_get_all_formatter_output_fu(std_formatter, _o_);
   }
   function bprintf(b, param){
    var fmt = param[1], ppf = formatter_of_buffer(b);
    function k(acc){output_acc(ppf, acc); return pp_flush_queue(ppf, 0);}
    return caml_call3(CamlinternalFormat[7], k, 0, fmt);
   }
   function pp_set_formatter_tag_functions(state, param){
    var pct = param[4], pot = param[3], mct = param[2], mot = param[1];
    function stringify(f, e, param){
     if(param[1] !== String_tag) return e;
     var s = param[2];
     return caml_call1(f, s);
    }
    state[24] = function(_n_){return stringify(mot, cst$15, _n_);};
    state[25] = function(_m_){return stringify(mct, cst$16, _m_);};
    var _i_ = 0;
    state[26] = function(_l_){return stringify(pot, _i_, _l_);};
    var _j_ = 0;
    state[27] = function(_k_){return stringify(pct, _j_, _k_);};
    return 0;
   }
   function pp_get_formatter_tag_functions(fmt, param){
    var funs = pp_get_formatter_stag_function(fmt, 0);
    function mark_open_tag(s){return caml_call1(funs[1], [0, String_tag, s]);}
    function mark_close_tag(s){
     return caml_call1(funs[2], [0, String_tag, s]);
    }
    function print_open_tag(s){
     return caml_call1(funs[3], [0, String_tag, s]);
    }
    function print_close_tag(s){
     return caml_call1(funs[4], [0, String_tag, s]);
    }
    return [0, mark_open_tag, mark_close_tag, print_open_tag, print_close_tag];
   }
   function set_formatter_tag_functions(_h_){
    return pp_set_formatter_tag_functions(std_formatter, _h_);
   }
   function get_formatter_tag_functions(_g_){
    return pp_get_formatter_tag_functions(std_formatter, _g_);
   }
   var
    Stdlib_format =
      [0,
       pp_open_box,
       open_box,
       pp_close_box,
       close_box,
       pp_open_hbox,
       open_hbox,
       pp_open_vbox,
       open_vbox,
       pp_open_hvbox,
       open_hvbox,
       pp_open_hovbox,
       open_hovbox,
       pp_print_string,
       print_string,
       pp_print_as,
       print_as,
       pp_print_int,
       print_int,
       pp_print_float,
       print_float,
       pp_print_char,
       print_char,
       pp_print_bool,
       print_bool,
       pp_print_space,
       print_space,
       pp_print_cut,
       print_cut,
       pp_print_break,
       print_break,
       pp_print_custom_break,
       pp_force_newline,
       force_newline,
       pp_print_if_newline,
       print_if_newline,
       pp_print_flush,
       print_flush,
       pp_print_newline,
       print_newline,
       pp_set_margin,
       set_margin,
       pp_get_margin,
       get_margin,
       pp_set_max_indent,
       set_max_indent,
       pp_get_max_indent,
       get_max_indent,
       check_geometry,
       pp_set_geometry,
       set_geometry,
       pp_safe_set_geometry,
       safe_set_geometry,
       pp_update_geometry,
       update_geometry,
       pp_get_geometry,
       get_geometry,
       pp_set_max_boxes,
       set_max_boxes,
       pp_get_max_boxes,
       get_max_boxes,
       pp_over_max_boxes,
       over_max_boxes,
       pp_open_tbox,
       open_tbox,
       pp_close_tbox,
       close_tbox,
       pp_set_tab,
       set_tab,
       pp_print_tab,
       print_tab,
       pp_print_tbreak,
       print_tbreak,
       pp_set_ellipsis_text,
       set_ellipsis_text,
       pp_get_ellipsis_text,
       get_ellipsis_text,
       String_tag,
       pp_open_stag,
       open_stag,
       pp_close_stag,
       close_stag,
       pp_set_tags,
       set_tags,
       pp_set_print_tags,
       set_print_tags,
       pp_set_mark_tags,
       set_mark_tags,
       pp_get_print_tags,
       get_print_tags,
       pp_get_mark_tags,
       get_mark_tags,
       pp_set_formatter_out_channel,
       set_formatter_out_channel,
       pp_set_formatter_output_functi,
       set_formatter_output_functions,
       pp_get_formatter_output_functi,
       get_formatter_output_functions,
       pp_set_formatter_out_functions,
       set_formatter_out_functions,
       pp_get_formatter_out_functions,
       get_formatter_out_functions,
       pp_set_formatter_stag_function,
       set_formatter_stag_functions,
       pp_get_formatter_stag_function,
       get_formatter_stag_functions,
       formatter_of_out_channel,
       std_formatter,
       err_formatter,
       formatter_of_buffer,
       stdbuf,
       str_formatter,
       flush_str_formatter,
       make_formatter,
       formatter_of_out_functions,
       make_symbolic_output_buffer,
       clear_symbolic_output_buffer,
       get_symbolic_output_buffer,
       flush_symbolic_output_buffer,
       add_symbolic_output_item,
       formatter_of_symbolic_output_b,
       pp_print_list,
       pp_print_seq,
       pp_print_text,
       pp_print_option,
       pp_print_result,
       fprintf,
       printf,
       eprintf,
       sprintf,
       asprintf,
       dprintf,
       ifprintf,
       kfprintf,
       kdprintf,
       ikfprintf,
       ksprintf,
       kasprintf,
       bprintf,
       ksprintf,
       set_all_formatter_output_funct,
       get_all_formatter_output_funct,
       pp_set_all_formatter_output_fu,
       pp_get_all_formatter_output_fu,
       pp_open_tag,
       open_tag,
       pp_close_tag,
       close_tag,
       pp_set_formatter_tag_functions,
       set_formatter_tag_functions,
       pp_get_formatter_tag_functions,
       get_formatter_tag_functions];
   runtime.caml_register_global(35, Stdlib_format, "Stdlib__format");
   return;
  }
  (globalThis));

//# 20884 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_register_named_value = runtime.caml_register_named_value,
    global_data = runtime.caml_get_global_data(),
    Stdlib_obj = global_data.Stdlib__obj,
    register = caml_register_named_value;
   function register_exception(name, exn){
    var
     _a_ = Stdlib_obj[8],
     slot = runtime.caml_obj_tag(exn) === _a_ ? exn : exn[1];
    return caml_register_named_value(name, slot);
   }
   var Stdlib_callback = [0, register, register_exception];
   runtime.caml_register_global(1, Stdlib_callback, "Stdlib__callback");
   return;
  }
  (globalThis));

//# 20907 "../.js/default/stdlib/stdlib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_camlinternalOO_ml = "camlinternalOO.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_div = runtime.caml_div,
    caml_get_public_method = runtime.caml_get_public_method,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_block = runtime.caml_obj_block,
    caml_set_oo_id = runtime.caml_set_oo_id,
    caml_string_compare = runtime.caml_string_compare,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Stdlib_sys = global_data.Stdlib__sys,
    Stdlib_obj = global_data.Stdlib__obj,
    Stdlib = global_data.Stdlib,
    Stdlib_array = global_data.Stdlib__array,
    Stdlib_list = global_data.Stdlib__list,
    Stdlib_map = global_data.Stdlib__map;
   function copy(o){var o$0 = o.slice(); return caml_set_oo_id(o$0);}
   var params = [0, 1, 1, 1, 3, 16];
   function public_method_label(s){
    var
     accu = [0, 0],
     _al_ = runtime.caml_ml_string_length(s) - 1 | 0,
     _ak_ = 0;
    if(_al_ >= 0){
     var i = _ak_;
     for(;;){
      var _am_ = runtime.caml_string_get(s, i);
      accu[1] = (223 * accu[1] | 0) + _am_ | 0;
      var _an_ = i + 1 | 0;
      if(_al_ === i) break;
      i = _an_;
     }
    }
    accu[1] = accu[1] & 2147483647;
    var tag = 1073741823 < accu[1] ? accu[1] + 2147483648 | 0 : accu[1];
    return tag;
   }
   var
    compare = caml_string_compare,
    Vars = caml_call1(Stdlib_map[1], [0, compare]),
    compare$0 = caml_string_compare,
    Meths = caml_call1(Stdlib_map[1], [0, compare$0]),
    compare$1 = runtime.caml_int_compare,
    Labs = caml_call1(Stdlib_map[1], [0, compare$1]),
    dummy_table = [0, 0, [0, 0], Meths[1], Labs[1], 0, 0, Vars[1], 0],
    table_count = [0, 0],
    dummy_met = caml_obj_block(0, 0),
    initial_object_size = 2;
   function fit_size(n){
    return 2 < n ? fit_size((n + 1 | 0) / 2 | 0) * 2 | 0 : n;
   }
   function new_table(pub_labels){
    table_count[1]++;
    var
     len = pub_labels.length - 1,
     methods = caml_make_vect((len * 2 | 0) + 2 | 0, dummy_met);
    caml_check_bound(methods, 0)[1] = len;
    var
     _ad_ = Stdlib_sys[9],
     _ae_ = (runtime.caml_mul(fit_size(len), _ad_) / 8 | 0) - 1 | 0;
    caml_check_bound(methods, 1)[2] = _ae_;
    var _ag_ = len - 1 | 0, _af_ = 0;
    if(_ag_ >= 0){
     var i = _af_;
     for(;;){
      var
       _ai_ = (i * 2 | 0) + 3 | 0,
       _ah_ = caml_check_bound(pub_labels, i)[1 + i];
      caml_check_bound(methods, _ai_)[1 + _ai_] = _ah_;
      var _aj_ = i + 1 | 0;
      if(_ag_ === i) break;
      i = _aj_;
     }
    }
    return [0,
            initial_object_size,
            methods,
            Meths[1],
            Labs[1],
            0,
            0,
            Vars[1],
            0];
   }
   function resize(array, new_size){
    var old_size = array[2].length - 1, _ab_ = old_size < new_size ? 1 : 0;
    if(_ab_){
     var new_buck = caml_make_vect(new_size, dummy_met);
     caml_call5(Stdlib_array[10], array[2], 0, new_buck, 0, old_size);
     array[2] = new_buck;
     var _ac_ = 0;
    }
    else
     var _ac_ = _ab_;
    return _ac_;
   }
   var
    method_count = [0, 0],
    inst_var_count = [0, 0],
    _a_ = [0, cst_camlinternalOO_ml, 281, 50],
    _b_ = [0, cst_camlinternalOO_ml, 408, 13],
    _c_ = [0, cst_camlinternalOO_ml, 411, 13],
    _d_ = [0, cst_camlinternalOO_ml, 414, 13],
    _e_ = [0, cst_camlinternalOO_ml, 417, 13],
    _f_ = [0, cst_camlinternalOO_ml, 420, 13],
    _g_ = [0, cst_camlinternalOO_ml, 438, 17];
   function new_method(table){
    var index = table[2].length - 1;
    resize(table, index + 1 | 0);
    return index;
   }
   function get_method_label(table, name){
    try{var _$_ = caml_call2(Meths[28], name, table[3]); return _$_;}
    catch(_aa_){
     var ___ = caml_wrap_exception(_aa_);
     if(___ !== Stdlib[8]) throw caml_maybe_attach_backtrace(___, 0);
     var label = new_method(table);
     table[3] = caml_call3(Meths[4], name, label, table[3]);
     table[4] = caml_call3(Labs[4], label, 1, table[4]);
     return label;
    }
   }
   function get_method_labels(table, names){
    return caml_call2
            (Stdlib_array[15],
             function(_Z_){return get_method_label(table, _Z_);},
             names);
   }
   function set_method(table, label, element){
    method_count[1]++;
    return caml_call2(Labs[28], label, table[4])
            ? (resize
               (table, label + 1 | 0),
              caml_check_bound(table[2], label)[1 + label] = element,
              0)
            : (table[6] = [0, [0, label, element], table[6]], 0);
   }
   function get_method(table, label){
    try{var _X_ = caml_call2(Stdlib_list[46], label, table[6]); return _X_;}
    catch(_Y_){
     var _W_ = caml_wrap_exception(_Y_);
     if(_W_ === Stdlib[8])
      return caml_check_bound(table[2], label)[1 + label];
     throw caml_maybe_attach_backtrace(_W_, 0);
    }
   }
   function to_list(arr){
    return 0 === arr ? 0 : caml_call1(Stdlib_array[11], arr);
   }
   function narrow(table, vars, virt_meths, concr_meths){
    var
     vars$0 = to_list(vars),
     virt_meths$0 = to_list(virt_meths),
     concr_meths$0 = to_list(concr_meths),
     virt_meth_labs =
       caml_call2
        (Stdlib_list[19],
         function(_V_){return get_method_label(table, _V_);},
         virt_meths$0),
     concr_meth_labs =
       caml_call2
        (Stdlib_list[19],
         function(_U_){return get_method_label(table, _U_);},
         concr_meths$0);
    table[5] =
     [0,
      [0, table[3], table[4], table[6], table[7], virt_meth_labs, vars$0],
      table[5]];
    table[7] =
     caml_call3
      (Vars[13],
       function(lab, info, tvars){
        return caml_call2(Stdlib_list[36], lab, vars$0)
                ? caml_call3(Vars[4], lab, info, tvars)
                : tvars;
       },
       table[7],
       Vars[1]);
    var by_name = [0, Meths[1]], by_label = [0, Labs[1]];
    caml_call3
     (Stdlib_list[27],
      function(met, label){
       by_name[1] = caml_call3(Meths[4], met, label, by_name[1]);
       var _P_ = by_label[1];
       try{var _S_ = caml_call2(Labs[28], label, table[4]), _R_ = _S_;}
       catch(_T_){
        var _Q_ = caml_wrap_exception(_T_);
        if(_Q_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_Q_, 0);
        var _R_ = 1;
       }
       by_label[1] = caml_call3(Labs[4], label, _R_, _P_);
       return 0;
      },
      concr_meths$0,
      concr_meth_labs);
    caml_call3
     (Stdlib_list[27],
      function(met, label){
       by_name[1] = caml_call3(Meths[4], met, label, by_name[1]);
       by_label[1] = caml_call3(Labs[4], label, 0, by_label[1]);
       return 0;
      },
      virt_meths$0,
      virt_meth_labs);
    table[3] = by_name[1];
    table[4] = by_label[1];
    table[6] =
     caml_call3
      (Stdlib_list[26],
       function(met, hm){
        var lab = met[1];
        return caml_call2(Stdlib_list[36], lab, virt_meth_labs)
                ? hm
                : [0, met, hm];
       },
       table[6],
       0);
    return 0;
   }
   function widen(table){
    var
     match = caml_call1(Stdlib_list[5], table[5]),
     vars = match[6],
     virt_meths = match[5],
     saved_vars = match[4],
     saved_hidden_meths = match[3],
     by_label = match[2],
     by_name = match[1];
    table[5] = caml_call1(Stdlib_list[6], table[5]);
    table[7] =
     caml_call3
      (Stdlib_list[25],
       function(s, v){
        var _O_ = caml_call2(Vars[28], v, table[7]);
        return caml_call3(Vars[4], v, _O_, s);
       },
       saved_vars,
       vars);
    table[3] = by_name;
    table[4] = by_label;
    table[6] =
     caml_call3
      (Stdlib_list[26],
       function(met, hm){
        var lab = met[1];
        return caml_call2(Stdlib_list[36], lab, virt_meths)
                ? hm
                : [0, met, hm];
       },
       table[6],
       saved_hidden_meths);
    return 0;
   }
   function new_variable(table, name){
    try{var _M_ = caml_call2(Vars[28], name, table[7]); return _M_;}
    catch(_N_){
     var _L_ = caml_wrap_exception(_N_);
     if(_L_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_L_, 0);
     var index = table[1];
     table[1] = index + 1 | 0;
     if(name !== "") table[7] = caml_call3(Vars[4], name, index, table[7]);
     return index;
    }
   }
   function to_array(arr){return runtime.caml_equal(arr, 0) ? [0] : arr;}
   function new_methods_variables(table, meths, vals){
    var
     meths$0 = to_array(meths),
     nmeths = meths$0.length - 1,
     nvals = vals.length - 1,
     res = caml_make_vect(nmeths + nvals | 0, 0),
     _D_ = nmeths - 1 | 0,
     _C_ = 0;
    if(_D_ >= 0){
     var i$0 = _C_;
     for(;;){
      var
       _J_ = get_method_label(table, caml_check_bound(meths$0, i$0)[1 + i$0]);
      caml_check_bound(res, i$0)[1 + i$0] = _J_;
      var _K_ = i$0 + 1 | 0;
      if(_D_ === i$0) break;
      i$0 = _K_;
     }
    }
    var _F_ = nvals - 1 | 0, _E_ = 0;
    if(_F_ >= 0){
     var i = _E_;
     for(;;){
      var
       _H_ = i + nmeths | 0,
       _G_ = new_variable(table, caml_check_bound(vals, i)[1 + i]);
      caml_check_bound(res, _H_)[1 + _H_] = _G_;
      var _I_ = i + 1 | 0;
      if(_F_ === i) break;
      i = _I_;
     }
    }
    return res;
   }
   function get_variable(table, name){
    try{var _A_ = caml_call2(Vars[28], name, table[7]); return _A_;}
    catch(_B_){
     var _z_ = caml_wrap_exception(_B_);
     if(_z_ === Stdlib[8])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     throw caml_maybe_attach_backtrace(_z_, 0);
    }
   }
   function get_variables(table, names){
    return caml_call2
            (Stdlib_array[15],
             function(_y_){return get_variable(table, _y_);},
             names);
   }
   function add_initializer(table, f){table[8] = [0, f, table[8]]; return 0;}
   function create_table(public_methods){
    if(0 === public_methods) return new_table([0]);
    var
     tags = caml_call2(Stdlib_array[15], public_method_label, public_methods),
     table = new_table(tags);
    caml_call2
     (Stdlib_array[14],
      function(i, met){
       var lab = (i * 2 | 0) + 2 | 0;
       table[3] = caml_call3(Meths[4], met, lab, table[3]);
       table[4] = caml_call3(Labs[4], lab, 1, table[4]);
       return 0;
      },
      public_methods);
    return table;
   }
   function init_class(table){
    inst_var_count[1] = (inst_var_count[1] + table[1] | 0) - 1 | 0;
    table[8] = caml_call1(Stdlib_list[9], table[8]);
    var _x_ = Stdlib_sys[9];
    return resize
            (table,
             3 + caml_div(caml_check_bound(table[2], 1)[2] * 16 | 0, _x_) | 0);
   }
   function inherits(cla, vals, virt_meths, concr_meths, param, top){
    var env = param[4], super$0 = param[2];
    narrow(cla, vals, virt_meths, concr_meths);
    var init = top ? caml_call2(super$0, cla, env) : caml_call1(super$0, cla);
    widen(cla);
    var
     _s_ = to_array(concr_meths),
     _t_ =
       [0,
        caml_call2
         (Stdlib_array[15],
          function(nm){return get_method(cla, get_method_label(cla, nm));},
          _s_),
        0],
     _u_ = to_array(vals),
     _v_ =
       [0,
        [0, init],
        [0,
         caml_call2
          (Stdlib_array[15],
           function(_w_){return get_variable(cla, _w_);},
           _u_),
         _t_]];
    return caml_call1(Stdlib_array[6], _v_);
   }
   function make_class(pub_meths, class_init){
    var
     table = create_table(pub_meths),
     env_init = caml_call1(class_init, table);
    init_class(table);
    return [0, caml_call1(env_init, 0), class_init, env_init, 0];
   }
   function make_class_store(pub_meths, class_init, init_table){
    var
     table = create_table(pub_meths),
     env_init = caml_call1(class_init, table);
    init_class(table);
    init_table[2] = class_init;
    init_table[1] = env_init;
    return 0;
   }
   function dummy_class(loc){
    function undef(param){
     throw caml_maybe_attach_backtrace([0, Stdlib[15], loc], 1);
    }
    return [0, undef, undef, undef, 0];
   }
   function create_object(table){
    var obj = caml_obj_block(Stdlib_obj[8], table[1]);
    obj[1] = table[2];
    return caml_set_oo_id(obj);
   }
   function create_object_opt(obj_0, table){
    if(obj_0) return obj_0;
    var obj = caml_obj_block(Stdlib_obj[8], table[1]);
    obj[1] = table[2];
    return caml_set_oo_id(obj);
   }
   function iter_f(obj, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], f = param$0[1];
     caml_call1(f, obj);
     param$0 = l;
    }
   }
   function run_initializers(obj, table){
    var inits = table[8], _r_ = 0 !== inits ? 1 : 0;
    return _r_ ? iter_f(obj, inits) : _r_;
   }
   function run_initializers_opt(obj_0, obj, table){
    if(obj_0) return obj;
    var inits = table[8];
    if(0 !== inits) iter_f(obj, inits);
    return obj;
   }
   function create_object_and_run_initiali(obj_0, table){
    if(obj_0) return obj_0;
    var obj = create_object(table);
    run_initializers(obj, table);
    return obj;
   }
   function get_data(param){
    if(param) return param[2];
    throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
   }
   function build_path(n, keys, tables){
    var res = [0, 0, 0, 0], r = [0, res], _o_ = 0;
    if(n >= 0){
     var i = _o_;
     for(;;){
      var _p_ = r[1];
      r[1] = [0, caml_check_bound(keys, i)[1 + i], _p_, 0];
      var _q_ = i + 1 | 0;
      if(n === i) break;
      i = _q_;
     }
    }
    var v = r[1];
    if(! tables)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    tables[2] = v;
    return res;
   }
   function lookup_tables(root, keys){
    var root_data = get_data(root);
    if(! root_data) return build_path(keys.length - 2 | 0, keys, root);
    var i$1 = keys.length - 2 | 0, i = i$1, tables$0 = root_data;
    for(;;){
     if(0 > i) return tables$0;
     var key = caml_check_bound(keys, i)[1 + i], tables$1 = tables$0;
     for(;;){
      if(! tables$1)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
      if(tables$1[1] === key) break;
      if(! tables$1)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
      var tables = tables$1[3];
      if(! tables){
       var next = [0, key, 0, 0];
       if(! tables$1)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
       tables$1[3] = next;
       return build_path(i - 1 | 0, keys, next);
      }
      tables$1 = tables;
     }
     var tables_data = get_data(tables$1);
     if(! tables_data)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
     var i$0 = i - 1 | 0;
     i = i$0;
     tables$0 = tables_data;
    }
   }
   function new_cache(table){
    var n = new_method(table);
    a:
    {
     if(0 !== (n % 2 | 0)){
      var _n_ = Stdlib_sys[9];
      if
       ((2 + caml_div(caml_check_bound(table[2], 1)[2] * 16 | 0, _n_) | 0)
        >= n){
       var n$0 = new_method(table);
       break a;
      }
     }
     var n$0 = n;
    }
    caml_check_bound(table[2], n$0)[1 + n$0] = 0;
    return n$0;
   }
   function set_methods(table, methods){
    var len = methods.length - 1, i = [0, 0];
    for(;;){
     if(i[1] >= len) return 0;
     var
      _h_ = i[1],
      label = caml_check_bound(methods, _h_)[1 + _h_],
      next =
        function(param){
         i[1]++;
         var _m_ = i[1];
         return caml_check_bound(methods, _m_)[1 + _m_];
        },
      clo = next(0);
     if(typeof clo === "number")
      switch(clo){
        case 0:
         var x = next(0);
         let x$20 = x;
         var clo$0 = function(obj){return x$20;};
         break;
        case 1:
         var n = next(0);
         let n$38 = n;
         var clo$0 = function(obj){return obj[1 + n$38];};
         break;
        case 2:
         var e = next(0), n$0 = next(0);
         let e$10 = e, n$37 = n$0;
         var clo$0 = function(obj){return obj[1 + e$10][1 + n$37];};
         break;
        case 3:
         var n$1 = next(0);
         let n$36 = n$1;
         var clo$0 = function(obj){return caml_call1(obj[1][1 + n$36], obj);};
         break;
        case 4:
         var n$2 = next(0);
         let n$35 = n$2;
         var clo$0 = function(obj, x){obj[1 + n$35] = x; return 0;};
         break;
        case 5:
         var f = next(0), x$0 = next(0);
         let f$20 = f, x$19 = x$0;
         var clo$0 = function(obj){return caml_call1(f$20, x$19);};
         break;
        case 6:
         var f$0 = next(0), n$3 = next(0);
         let f$19 = f$0, n$34 = n$3;
         var clo$0 = function(obj){return caml_call1(f$19, obj[1 + n$34]);};
         break;
        case 7:
         var f$1 = next(0), e$0 = next(0), n$4 = next(0);
         let f$18 = f$1, e$9 = e$0, n$33 = n$4;
         var
          clo$0 =
            function(obj){return caml_call1(f$18, obj[1 + e$9][1 + n$33]);};
         break;
        case 8:
         var f$2 = next(0), n$5 = next(0);
         let f$17 = f$2, n$32 = n$5;
         var
          clo$0 =
            function(obj){
             return caml_call1(f$17, caml_call1(obj[1][1 + n$32], obj));
            };
         break;
        case 9:
         var f$3 = next(0), x$1 = next(0), y = next(0);
         let f$16 = f$3, x$18 = x$1, y$0 = y;
         var clo$0 = function(obj){return caml_call2(f$16, x$18, y$0);};
         break;
        case 10:
         var f$4 = next(0), x$2 = next(0), n$6 = next(0);
         let f$15 = f$4, x$17 = x$2, n$31 = n$6;
         var
          clo$0 = function(obj){return caml_call2(f$15, x$17, obj[1 + n$31]);};
         break;
        case 11:
         var f$5 = next(0), x$3 = next(0), e$1 = next(0), n$7 = next(0);
         let f$14 = f$5, x$16 = x$3, e$8 = e$1, n$30 = n$7;
         var
          clo$0 =
            function(obj){
             return caml_call2(f$14, x$16, obj[1 + e$8][1 + n$30]);
            };
         break;
        case 12:
         var f$6 = next(0), x$4 = next(0), n$8 = next(0);
         let f$13 = f$6, x$15 = x$4, n$29 = n$8;
         var
          clo$0 =
            function(obj){
             return caml_call2(f$13, x$15, caml_call1(obj[1][1 + n$29], obj));
            };
         break;
        case 13:
         var f$7 = next(0), n$9 = next(0), x$5 = next(0);
         let f$12 = f$7, n$28 = n$9, x$14 = x$5;
         var
          clo$0 = function(obj){return caml_call2(f$12, obj[1 + n$28], x$14);};
         break;
        case 14:
         var f$8 = next(0), e$2 = next(0), n$10 = next(0), x$6 = next(0);
         let f$11 = f$8, e$7 = e$2, n$27 = n$10, x$13 = x$6;
         var
          clo$0 =
            function(obj){
             return caml_call2(f$11, obj[1 + e$7][1 + n$27], x$13);
            };
         break;
        case 15:
         var f$9 = next(0), n$11 = next(0), x$7 = next(0);
         let f$10 = f$9, n$26 = n$11, x$12 = x$7;
         var
          clo$0 =
            function(obj){
             return caml_call2(f$10, caml_call1(obj[1][1 + n$26], obj), x$12);
            };
         break;
        case 16:
         var n$12 = next(0), x$8 = next(0);
         let n$25 = n$12, x$11 = x$8;
         var
          clo$0 =
            function(obj){return caml_call2(obj[1][1 + n$25], obj, x$11);};
         break;
        case 17:
         var n$13 = next(0), m = next(0);
         let n$24 = n$13, m$12 = m;
         var
          clo$0 =
            function(obj){
             return caml_call2(obj[1][1 + n$24], obj, obj[1 + m$12]);
            };
         break;
        case 18:
         var n$14 = next(0), e$3 = next(0), m$0 = next(0);
         let n$23 = n$14, e$6 = e$3, m$11 = m$0;
         var
          clo$0 =
            function(obj){
             return caml_call2(obj[1][1 + n$23], obj, obj[1 + e$6][1 + m$11]);
            };
         break;
        case 19:
         var n$15 = next(0), m$1 = next(0);
         let n$22 = n$15, m$10 = m$1;
         var
          clo$0 =
            function(obj){
             var _l_ = caml_call1(obj[1][1 + m$10], obj);
             return caml_call2(obj[1][1 + n$22], obj, _l_);
            };
         break;
        case 20:
         var m$2 = next(0), x$9 = next(0), c = new_cache(table);
         let m$9 = m$2, x$10 = x$9, c$6 = c;
         var
          clo$0 =
            function(obj){
             return caml_call2
                     (caml_get_public_method(x$10, m$9, 0), x$10, c$6);
            };
         break;
        case 21:
         var m$3 = next(0), n$16 = next(0), c$0 = new_cache(table);
         let m$8 = m$3, n$21 = n$16, c$5 = c$0;
         var
          clo$0 =
            function(obj){
             var _k_ = obj[1 + n$21];
             return caml_call2(caml_get_public_method(_k_, m$8, 0), _k_, c$5);
            };
         break;
        case 22:
         var
          m$4 = next(0),
          e$4 = next(0),
          n$17 = next(0),
          c$1 = new_cache(table);
         let m$7 = m$4, e$5 = e$4, n$20 = n$17, c$4 = c$1;
         var
          clo$0 =
            function(obj){
             var _j_ = obj[1 + e$5][1 + n$20];
             return caml_call2(caml_get_public_method(_j_, m$7, 0), _j_, c$4);
            };
         break;
        default:
         var m$5 = next(0), n$18 = next(0), c$2 = new_cache(table);
         let m$6 = m$5, n$19 = n$18, c$3 = c$2;
         var
          clo$0 =
            function(obj){
             var _i_ = caml_call1(obj[1][1 + n$19], obj);
             return caml_call2(caml_get_public_method(_i_, m$6, 0), _i_, c$3);
            };
      }
     else
      var clo$0 = clo;
     set_method(table, label, clo$0);
     i[1]++;
    }
   }
   function stats(param){
    return [0, table_count[1], method_count[1], inst_var_count[1]];
   }
   var
    CamlinternalOO =
      [0,
       public_method_label,
       new_method,
       new_variable,
       new_methods_variables,
       get_variable,
       get_variables,
       get_method_label,
       get_method_labels,
       get_method,
       set_method,
       set_methods,
       narrow,
       widen,
       add_initializer,
       dummy_table,
       create_table,
       init_class,
       inherits,
       make_class,
       make_class_store,
       dummy_class,
       copy,
       create_object,
       create_object_opt,
       run_initializers,
       run_initializers_opt,
       create_object_and_run_initiali,
       lookup_tables,
       params,
       stats];
   runtime.caml_register_global(17, CamlinternalOO, "CamlinternalOO");
   return;
  }
  (globalThis));

//# 5 "../.js/default/ppx_deriving.runtime/ppx_deriving_runtime.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    invalid_arg = Stdlib[1],
    failwith = Stdlib[2],
    Exit = Stdlib[3],
    Match_failure = Stdlib[4],
    Assert_failure = Stdlib[5],
    Invalid_argument = Stdlib[6],
    Failure = Stdlib[7],
    Not_found = Stdlib[8],
    Out_of_memory = Stdlib[9],
    Stack_overflow = Stdlib[10],
    Sys_error = Stdlib[11],
    End_of_file = Stdlib[12],
    Division_by_zero = Stdlib[13],
    Sys_blocked_io = Stdlib[14],
    Undefined_recursive_module = Stdlib[15],
    min = Stdlib[16],
    max = Stdlib[17],
    abs = Stdlib[18],
    max_int = Stdlib[19],
    min_int = Stdlib[20],
    lnot = Stdlib[21],
    infinity = Stdlib[22],
    neg_infinity = Stdlib[23],
    nan = Stdlib[24],
    max_float = Stdlib[25],
    min_float = Stdlib[26],
    epsilon_float = Stdlib[27],
    symbol_concat = Stdlib[28],
    char_of_int = Stdlib[29],
    string_of_bool = Stdlib[30],
    bool_of_string_opt = Stdlib[31],
    bool_of_string = Stdlib[32],
    string_of_int = Stdlib[33],
    int_of_string_opt = Stdlib[34],
    string_of_float = Stdlib[35],
    float_of_string_opt = Stdlib[36],
    symbol = Stdlib[37],
    stdin = Stdlib[38],
    stdout = Stdlib[39],
    stderr = Stdlib[40],
    print_char = Stdlib[41],
    print_string = Stdlib[42],
    print_bytes = Stdlib[43],
    print_int = Stdlib[44],
    print_float = Stdlib[45],
    print_endline = Stdlib[46],
    print_newline = Stdlib[47],
    prerr_char = Stdlib[48],
    prerr_string = Stdlib[49],
    prerr_bytes = Stdlib[50],
    prerr_int = Stdlib[51],
    prerr_float = Stdlib[52],
    prerr_endline = Stdlib[53],
    prerr_newline = Stdlib[54],
    read_line = Stdlib[55],
    read_int_opt = Stdlib[56],
    read_int = Stdlib[57],
    read_float_opt = Stdlib[58],
    read_float = Stdlib[59],
    open_out = Stdlib[60],
    open_out_bin = Stdlib[61],
    open_out_gen = Stdlib[62],
    flush = Stdlib[63],
    flush_all = Stdlib[64],
    output_char = Stdlib[65],
    output_string = Stdlib[66],
    output_bytes = Stdlib[67],
    output = Stdlib[68],
    output_substring = Stdlib[69],
    output_byte = Stdlib[70],
    output_binary_int = Stdlib[71],
    output_value = Stdlib[72],
    seek_out = Stdlib[73],
    pos_out = Stdlib[74],
    out_channel_length = Stdlib[75],
    close_out = Stdlib[76],
    close_out_noerr = Stdlib[77],
    set_binary_mode_out = Stdlib[78],
    open_in = Stdlib[79],
    open_in_bin = Stdlib[80],
    open_in_gen = Stdlib[81],
    input_char = Stdlib[82],
    input_line = Stdlib[83],
    input = Stdlib[84],
    really_input = Stdlib[85],
    really_input_string = Stdlib[86],
    input_byte = Stdlib[87],
    input_binary_int = Stdlib[88],
    input_value = Stdlib[89],
    seek_in = Stdlib[90],
    pos_in = Stdlib[91],
    in_channel_length = Stdlib[92],
    close_in = Stdlib[93],
    close_in_noerr = Stdlib[94],
    set_binary_mode_in = Stdlib[95],
    string_of_format = Stdlib[97],
    symbol$0 = Stdlib[98],
    exit = Stdlib[99],
    at_exit = Stdlib[100],
    valid_float_lexem = Stdlib[101],
    unsafe_really_input = Stdlib[102],
    do_at_exit = Stdlib[103],
    Result = [0],
    Ppx_deriving_runtime =
      [0,
       invalid_arg,
       failwith,
       Exit,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       symbol_concat,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       symbol,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       string_of_format,
       symbol$0,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       Result];
   runtime.caml_register_global
    (1, Ppx_deriving_runtime, "Ppx_deriving_runtime");
   return;
  }
  (globalThis));

//# 5 "../.js/default/ppx_deriving_yojson.runtime/ppx_deriving_yojson_runtime.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_list = global_data.Stdlib__list,
    Ppx_deriving_runtime = global_data.Ppx_deriving_runtime,
    Stdlib_array = global_data.Stdlib__array,
    Stdlib_nativeint = global_data.Stdlib__nativeint,
    Stdlib_int64 = global_data.Stdlib__int64,
    Stdlib_int32 = global_data.Stdlib__int32,
    Stdlib_bytes = global_data.Stdlib__bytes,
    Stdlib_string = global_data.Stdlib__string,
    Result = Ppx_deriving_runtime[103];
   function symbol_bind(x, f){
    if(0 !== x[0]) return x;
    var x$0 = x[1];
    return caml_call1(f, x$0);
   }
   function symbol(x, f){
    if(1 === x[0]) return x;
    var x$0 = x[1];
    return [0, caml_call1(f, x$0)];
   }
   function map_bind(f, acc, xs){
    var acc$0 = acc, xs$0 = xs;
    for(;;){
     if(! xs$0) return [0, caml_call1(Stdlib_list[9], acc$0)];
     var xs$1 = xs$0[2], x = xs$0[1], err = caml_call1(f, x);
     if(0 !== err[0]) return err;
     var x$0 = err[1], acc$1 = [0, x$0, acc$0];
     acc$0 = acc$1;
     xs$0 = xs$1;
    }
   }
   function safe_map(f, l){
    var _a_ = caml_call2(Stdlib_list[21], f, l);
    return caml_call1(Stdlib_list[9], _a_);
   }
   var
    Ppx_deriving_yojson_runtime =
      [0,
       symbol_bind,
       symbol,
       map_bind,
       safe_map,
       runtime.caml_equal,
       Stdlib_list,
       Stdlib_string,
       Stdlib_bytes,
       Stdlib_int32,
       Stdlib_int64,
       Stdlib_nativeint,
       Stdlib_array,
       Result];
   runtime.caml_register_global
    (8, Ppx_deriving_yojson_runtime, "Ppx_deriving_yojson_runtime");
   return;
  }
  (globalThis));

//# 15 "../.js/default/yojson/yojson.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_buffer = global_data.Stdlib__buffer,
    Stdlib_char = global_data.Stdlib__char,
    Assert_failure = global_data.Assert_failure,
    _a_ = [0, "lib/codec.ml", 32, 4];
   function utf8_of_code(buf, x){
    var add = Stdlib_buffer[10];
    function maxbits(n, x){return 0 === (x >>> n | 0) ? 1 : 0;}
    if(maxbits(7, x))
     return caml_call2(add, buf, caml_call1(Stdlib_char[1], x));
    if(maxbits(11, x)){
     caml_call2
      (add, buf, caml_call1(Stdlib_char[1], 192 | (x >>> 6 | 0) & 31));
     return caml_call2(add, buf, caml_call1(Stdlib_char[1], 128 | x & 63));
    }
    if(maxbits(16, x)){
     caml_call2
      (add, buf, caml_call1(Stdlib_char[1], 224 | (x >>> 12 | 0) & 15));
     caml_call2
      (add, buf, caml_call1(Stdlib_char[1], 128 | (x >>> 6 | 0) & 63));
     return caml_call2(add, buf, caml_call1(Stdlib_char[1], 128 | x & 63));
    }
    if(maxbits(21, x)){
     caml_call2
      (add, buf, caml_call1(Stdlib_char[1], 240 | (x >>> 18 | 0) & 7));
     caml_call2
      (add, buf, caml_call1(Stdlib_char[1], 128 | (x >>> 12 | 0) & 63));
     caml_call2
      (add, buf, caml_call1(Stdlib_char[1], 128 | (x >>> 6 | 0) & 63));
     return caml_call2(add, buf, caml_call1(Stdlib_char[1], 128 | x & 63));
    }
    if(maxbits(26, x)){
     caml_call2
      (add, buf, caml_call1(Stdlib_char[1], 248 | (x >>> 24 | 0) & 3));
     caml_call2
      (add, buf, caml_call1(Stdlib_char[1], 128 | (x >>> 18 | 0) & 63));
     caml_call2
      (add, buf, caml_call1(Stdlib_char[1], 128 | (x >>> 12 | 0) & 63));
     caml_call2
      (add, buf, caml_call1(Stdlib_char[1], 128 | (x >>> 6 | 0) & 63));
     return caml_call2(add, buf, caml_call1(Stdlib_char[1], 128 | x & 63));
    }
    if(! maxbits(31, x))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    caml_call2(add, buf, caml_call1(Stdlib_char[1], 252 | (x >>> 30 | 0) & 1));
    caml_call2
     (add, buf, caml_call1(Stdlib_char[1], 128 | (x >>> 24 | 0) & 63));
    caml_call2
     (add, buf, caml_call1(Stdlib_char[1], 128 | (x >>> 18 | 0) & 63));
    caml_call2
     (add, buf, caml_call1(Stdlib_char[1], 128 | (x >>> 12 | 0) & 63));
    caml_call2(add, buf, caml_call1(Stdlib_char[1], 128 | (x >>> 6 | 0) & 63));
    return caml_call2(add, buf, caml_call1(Stdlib_char[1], 128 | x & 63));
   }
   function utf8_of_surrogate_pair(buf, i, j){
    var high10 = i - 55296 | 0, low10 = j - 56320 | 0;
    return utf8_of_code(buf, 65536 + (high10 << 10 | low10) | 0);
   }
   var Yojson_Codec = [0, utf8_of_code, utf8_of_surrogate_pair];
   runtime.caml_register_global(4, Yojson_Codec, "Yojson__Codec");
   return;
  }
  (globalThis));

//# 98 "../.js/default/yojson/yojson.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    version = "2.2.2",
    Stdlib_buffer = global_data.Stdlib__buffer,
    Json_error = [248, "Yojson__Common.Json_error", caml_fresh_oo_id(0)];
   function json_error(s){
    throw caml_maybe_attach_backtrace([0, Json_error, s], 1);
   }
   var
    End_of_array = [248, "Yojson__Common.End_of_array", caml_fresh_oo_id(0)],
    End_of_object = [248, "Yojson__Common.End_of_object", caml_fresh_oo_id(0)],
    End_of_tuple = [248, "Yojson__Common.End_of_tuple", caml_fresh_oo_id(0)],
    End_of_input = [248, "Yojson__Common.End_of_input", caml_fresh_oo_id(0)],
    Lexer_state = [0];
   function init_lexer(buf, fname, opt, param){
    if(opt) var sth = opt[1], lnum = sth; else var lnum = 1;
    if(buf)
     var buf$0 = buf[1], buf$1 = buf$0;
    else
     var buf$1 = caml_call1(Stdlib_buffer[1], 256);
    return [0, buf$1, lnum, 0, fname];
   }
   var
    Yojson_Common =
      [0,
       version,
       Json_error,
       json_error,
       Lexer_state,
       init_lexer,
       End_of_array,
       End_of_object,
       End_of_tuple,
       End_of_input];
   runtime.caml_register_global(7, Yojson_Common, "Yojson__Common");
   return;
  }
  (globalThis));

//# 151 "../.js/default/yojson/yojson.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    ocaml_lex_tables =
      [0,
       "\0\0\xfe\xff\xff\xff",
       "\xff\xff\xff\xff\xff\xff",
       "\x01\0\0\0\0\0",
x02\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0",
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_lexing = global_data.Stdlib__lexing,
    Stdlib_buffer = global_data.Stdlib__buffer;
   function read_junk$0(counter, buf, n, lexbuf){
    var _c_ = 0;
    if(counter >= 50)
     return caml_trampoline_return
             (ocaml_lex_read_junk_rec$0, [0, buf, n, lexbuf, _c_]);
    var counter$0 = counter + 1 | 0;
    return ocaml_lex_read_junk_rec$0(counter$0, buf, n, lexbuf, _c_);
   }
   function read_junk(buf, n, lexbuf){
    return caml_trampoline(read_junk$0(0, buf, n, lexbuf));
   }
   function ocaml_lex_read_junk_rec$0
   (counter, buf, n, lexbuf, ocaml_lex_state){
    var ocaml_lex_state$0 = ocaml_lex_state;
    for(;;){
     var
      ocaml_lex_state$1 =
        caml_call3
         (Stdlib_lexing[20], ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
     if(0 === ocaml_lex_state$1) return 0;
     if(1 === ocaml_lex_state$1){
      if(0 >= n) return 0;
      var _a_ = caml_call2(Stdlib_lexing[9], lexbuf, 0);
      caml_call2(Stdlib_buffer[10], buf, _a_);
      var _b_ = n - 1 | 0;
      if(counter >= 50)
       return caml_trampoline_return(read_junk$0, [0, buf, _b_, lexbuf]);
      var counter$0 = counter + 1 | 0;
      return read_junk$0(counter$0, buf, _b_, lexbuf);
     }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state$0 = ocaml_lex_state$1;
    }
   }
   function ocaml_lex_read_junk_rec(buf, n, lexbuf, ocaml_lex_state){
    return caml_trampoline
            (ocaml_lex_read_junk_rec$0(0, buf, n, lexbuf, ocaml_lex_state));
   }
   function read_junk_without_positions(buf, n, lexbuf){
    var lex_abs_pos = lexbuf[4], lex_start_pos = lexbuf[5];
    read_junk(buf, n, lexbuf);
    lexbuf[5] = lex_start_pos + 1 | 0;
    lexbuf[4] = lex_abs_pos;
    return 0;
   }
   var
    Yojson_Lexer_utils =
      [0,
       ocaml_lex_tables,
       read_junk,
       ocaml_lex_read_junk_rec,
       read_junk_without_positions];
   runtime.caml_register_global(3, Yojson_Lexer_utils, "Yojson__Lexer_utils");
   return;
  }
  (globalThis));

//# 7267 "../.js/default/yojson/yojson.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$23 = "",
    cst$34 = "\n",
    cst$30 = " '",
    cst_16g = "%.16g",
    cst_17g = "%.17g",
    cst_S = "%S",
    cst_a = "%a",
    cst$24 = "(@[",
    cst$31 = ",",
    cst$25 = ",@ ",
    cst_Infinity$4 = "-Infinity",
    cst_Infinity_value_not_allowed$4 =
      "-Infinity value not allowed in standard JSON",
    cst_0$2 = ".0",
    cst$29 = "/*",
    cst$33 = ": ",
    cst$22 = ";@ ",
    cst_2 = "<2>",
    cst_hov2 = "<hov2>",
    cst_hov = "<hov>",
    cst_hv2 = "<hv2>",
    cst_hv = "<hv>",
    cst$21 = "@ ",
    cst$27 = "@,",
    cst$28 = "@,]@]",
    cst_1_2 = "@;<1 -2>",
    cst_1_0 = "@;<1 0>",
    cst_2$0 = "@[<2>[",
    cst_hv2$0 = "@[<hv2>",
    cst$32 = "@]",
    cst$26 = "@])",
    cst_Blank_input_data$1 = "Blank input data",
    cst_Expected_but_found$17 = "Expected ')' but found",
    cst_Expected_or_but_found$17 = "Expected ',' or ')' but found",
    cst_Expected_or_but_found$16 = "Expected ',' or ']' but found",
    cst_Expected_or_but_found$18 = "Expected ',' or '}' but found",
    cst_Expected_but_found$19 = "Expected ':' but found",
    cst_Expected_or_but_found$15 = "Expected ':' or '>' but found",
    cst_Expected_but_found$15 = "Expected '>' but found",
    cst_Expected_but_found$16 = "Expected '[' but found",
    cst_Expected_but_found$18 = "Expected '{' but found",
    cst_Expected_string_or_identif$3 =
      "Expected string or identifier but found",
    cst_Infinity$3 = "Infinity",
    cst_Infinity_value_not_allowed$3 =
      "Infinity value not allowed in standard JSON",
    cst_Int_overflow$1 = "Int overflow",
    cst_Int32_overflow$1 = "Int32 overflow",
    cst_Invalid_string_literal$2 = "Invalid string literal",
    cst_Invalid_token$2 = "Invalid token",
    cst_NaN$1 = "NaN",
    cst_NaN_value_not_allowed_in_s$1 =
      "NaN value not allowed in standard JSON",
    cst_Unexpected_end_of_input$47 = "Unexpected end of input",
    cst_Unterminated_comment$1 = "Unterminated comment",
    cst_null$2 = "null",
    caml_bytes_get = runtime.caml_bytes_get,
    caml_classify_float = runtime.caml_classify_float,
    caml_equal = runtime.caml_equal,
    caml_float_of_string = runtime.caml_float_of_string,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_int64_of_string = runtime.caml_int64_of_string,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_lex_engine = runtime.caml_lex_engine,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$17 = ")",
    cst$18 = cst$29,
    cst$19 = cst$29,
    cst$20 = "*/",
    stream = [0, 1],
    cst$12 = cst$31,
    cst$13 = "{}",
    cst$14 = cst$31,
    cst$15 = cst$31,
    cst$16 = "[]",
    cst$10 = "()",
    cst$11 = cst$31,
    cst$9 = cst$34,
    cst$8 = cst$34,
    cst$7 = cst$34,
    cst$6 = cst$34,
    cst$5 = cst$34,
    cst$4 = cst$23,
    cst$3 = cst$23,
    cst$2 = cst$23,
    cst$1 = cst$23,
    cst$0 = '\\"',
    cst = "\\\\",
    ocaml_lex_tables =
      [0,
       "\0\0\xec\xff\xed\xff\x03\0\xef\xff\x10\0\xf2\xff\xf3\xff\xf4\xff\xf5\xff\0\0\x1f\0\xf9\xffU\0\x01\0\0\0\0\0\x01\0\0\0\x01\0\x02\0\xff\xff\0\0\0\0\x03\0\xfe\xff\x01\0\x04\0\xfd\xff\v\0\xfc\xff\x03\0\x01\0\x03\0\x02\0\x03\0\0\0\xfb\xff\x15\0a\0\n\0\x16\0\x14\0\x10\0\x16\0\f\0\b\0\xfa\xffw\0\x81\0\x8b\0\xa1\0\xab\0\xb5\0\xc1\0\xd1\0\xf0\xff\v\0&\0\xfc\xffA\0\xfe\xff\xff\xffn\0\xfc\xff\xa3\0\xfe\xff\xff\xff\xea\0\xf7\xff\xf8\xff0\x01\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xffG\x01~\x01\x95\x01\xf9\xff'\0\xfd\xff\xfe\xff&\0\xbb\x01\xd2\x01\xf8\x01\x0f\x02\xff\xff\xdc\0\xfd\xff\xff\xff\xf5\0'\x02m\x02\x0e\x01X\x02\xa4\x02\xbb\x02\xe1\x02\r\0\xfc\xff\xfd\xff\xfe\xff\xff\xff\x0e\0\xfd\xff\xfe\xff\xff\xff\x1e\0\xfd\xff\xfe\xff\xff\xff\x0f\0\xfd\xff\xfe\xff\xff\xff\x11\x01\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xff\x13\0\xfc\xff\xfd\xff\xfe\xff\x0f\0\xff\xff\x10\0\xff\xff\b\x01\x05\0\xfd\xff\x17\0\xfe\xff\x14\0\xff\xff.\0\xfd\xff\xfe\xff*\x004\x005\0\xff\xff5\x000\0[\0\\\0\xff\xff\x1b\x01\xfa\xff\xfb\xff\x89\0h\0Y\0X\0j\0\xff\xff\x8f\0\x89\0\xb1\0\xfe\xff\xb7\0\xa8\0\xa6\0\xb7\0\x02\0\xfd\xff\xb1\0\xac\0\xbb\0\x04\0\xfc\xff5\x02\xfb\xff\xfc\xff\xfd\xffg\x01\xff\xff\xf8\x02\xfe\xff\x06\x03\x1e\x03\xfc\xff\xfd\xff\xfe\xff\xff\xff(\x032\x03J\x03\xfc\xff\xfd\xff\xfe\xff\xff\xff=\x03T\x03l\x03\xf9\xff\xfa\xff\xfb\xff\xf4\0x\x03\x8e\x03\xb3\0\xc2\0\x0f\0\xff\xff\xbe\0\xbc\0\xbb\0\xc1\0\xb7\0\xb3\0\xfe\xff\xbf\0\xc9\0\xc8\0\xc4\0\xcb\0\xc1\0\xbd\0\xfd\xff\x9d\x03_\x03\xae\x03\xc4\x03\xce\x03\xd8\x03\xe4\x03\xef\x03<\0\xfd\xff\xfe\xff\xff\xff\f\x04\xfc\xff\xfd\xffW\x04\xff\xff\x91\x04\xfc\xff\xfd\xff\xdd\x04\xff\xff\xe5\0\xfd\xff\xfe\xff\xff\xff\xe7\0\xfd\xff\xfe\xff\xff\xff\x02\0\xff\xff\x12\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff\"\x01\xfd\xff\xfe\xff\xff\xff\0\0\xff\xff\x03\0\xfe\xff\xff\xff&\x01\xfc\xff\xfd\xff\xfe\xff\xff\xffx\x01\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xff\xd0\0\xfd\xff\xfe\xff\xff\xff\xd3\0\xfd\xff\xfe\xff\xff\xff\xbd\0\xff\xff\x8f\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff\r\x01\xfd\xff\xfe\xff\xff\xff_\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff2\x01\xfd\xff\xfe\xff\xff\xff\x1a\x01\xfd\xff\xfe\xff\xff\xff\xe9\0\xfd\xff\xfe\xff\xff\xff\xde\0\xfd\xff\xfe\xff\xff\xffO\x05\xed\xff\xee\xff\n\0\xf0\xff,\x01\xf3\xff\xf4\xff\xf5\xff\xf6\xff=\x01\x02\x04\xf9\xff-\x05\xd1\0\xe4\0\xd3\0\xe8\0\xe1\0\xdf\0\xf0\0\xff\xff\xeb\0\xea\0\b\x01\xfe\xff\x04\x01\x17\x01\xfd\xff6\x01\xfc\xff\x1f\x01\x1d\x01 \x01'\x011\x01-\x01\xfb\xff9\x01R\x01P\x01N\x01T\x01J\x01V\x01\xfa\xffn\x05\f\x04{\x05\x9b\x05\xa5\x05\xb1\x05\xbb\x05\xc5\x05\xf1\xff\xc7\x01M\x02\xfd\xff\xff\xff\x9a\x02\xde\x05\xd1\x05\x9b\x02\xef\x055\x06L\x06r\x06\x10\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\x98\x06\xfc\xff\xfd\xff\xe3\x06\xff\xffU\x07\xf4\xff\xf5\xff\v\0\xf7\xffL\x02\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff\x1f\x02\xf3\x053\x07d\x01s\x01h\x01\x85\x01v\x01\x9a\x01\xab\x01\xff\xff\xad\x01\xb0\x01\xbf\x01\xb9\x01\xbb\x01\xfd\x01\xe6\x01\xe6\x01\xea\x01\xf7\x01\xed\x01\xea\x01\t\x02\x13\x02\x13\x02\x0f\x02\x15\x02\v\x02\x07\x02\x8e\x06\x98\x06t\x07\xaa\x07\xb4\x07\xbe\x07\xc8\x07\xd2\x07\xf8\xffx\x02\xa7\x02\xfd\xff\xff\xff\xd8\x02R\x07\xdc\x07\xec\x02\xf4\x07:\bQ\bw\bL\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\x9d\b\xfc\xff\xfd\xff\xe8\b\xff\xff\x87\x02x\x02\xfd\xffd\x02\xfe\xff\xb6\x02\xff\xff\v\x02\xff\xff\xcc\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff.\x02\xff\xff\xb2\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\x17\0\xff\xff\xb7\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\xbb\x02\xfd\xff\xfe\xff\xff\xffy\x02\xfd\xff\xfe\xff\xff\xff\xb8\x02\xfc\xff\xfd\xff\xfe\xff\x13\0\xff\xff",
       "\xff\xff\xff\xff\xff\xff\x11\0\xff\xff\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\xff\xff\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\t\0\xff\xff\t\0\xff\xff\xff\xff\x0e\0\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x01\0\xff\xff\x04\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\0\0\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x03\0\x05\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x03\0\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\0\xff\xff\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\xff\xff\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\xff\xff\b\0\xff\xff\b\0\xff\xff\xff\xff\r\0\xff\xff\xff\xff\xff\xff\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\v\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\v\0\v\0\v\0\v\0\v\0\v\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\x04\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff",
       "\x01\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\x009\0<\0\0\0<\0\0\0\0\0A\0\0\0A\0\0\0\0\0F\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0T\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0^\0\0\0\0\0a\0\xff\xff\xff\xffa\0\xff\xff\xff\xff\xff\xff\xff\xffh\0\0\0\0\0\0\0\0\0m\0\0\0\0\0\0\0q\0\0\0\0\0\0\0u\0\0\0\0\0\0\0y\0\0\0\0\0\0\0\0\0\0\0~\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\x8a\0\0\0\x8e\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x9a\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xb2\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xbb\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xc2\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xc9\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xeb\0\0\0\0\0\0\0\xef\0\0\0\0\0\xff\xff\0\0\xf4\0\0\0\0\0\xff\xff\0\0\xf9\0\0\0\0\0\0\0\xfd\0\0\0\0\0\0\0\xff\xff\0\0\x03\x01\0\0\0\0\0\0\0\0\b\x01\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\x11\x01\0\0\0\0\0\0\0\0\x16\x01\0\0\0\0\0\0\0\0\0\0\x1c\x01\0\0\0\0\0\0 \x01\0\0\0\0\0\0\xff\xff\0\0&\x01\0\0\0\0\0\0\0\0+\x01\0\0\0\0\0\0/\x01\0\0\0\0\0\0\0\x004\x01\0\0\0\0\0\x008\x01\0\0\0\0\0\0<\x01\0\0\0\0\0\0@\x01\0\0\0\0\0\0C\x01\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0y\x01}\x01\0\0\0\0\x80\x01\xff\xff\xff\xff\x80\x01\xff\xff\xff\xff\xff\xff\xff\xff\x87\x01\0\0\0\0\0\0\0\0\x8c\x01\0\0\0\0\xff\xff\0\0\x90\x01\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xc1\x01\xc5\x01\0\0\0\0\xc8\x01\xff\xff\xff\xff\xc8\x01\xff\xff\xff\xff\xff\xff\xff\xff\xcf\x01\0\0\0\0\0\0\0\0\xd4\x01\0\0\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xdc\x01\0\0\xff\xff\0\0\xe2\x01\0\0\0\0\0\0\0\0\xff\xff\0\0\xe9\x01\0\0\0\0\0\0\0\0\xff\xff\0\0\xf0\x01\0\0\0\0\0\0\0\0\xf5\x01\0\0\0\0\0\0\xf9\x01\0\0\0\0\0\0\xfc\x01\0\0\0\0\0\0\xff\xff\0\0",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\x03\0\x03\0\x86\0\0\0\x03\0\0\0\x86\0E\x01\x92\x01\xff\xff\0\0E\x01\x92\x01\0\0\0\0\0\0\0\0\x7f\0\x8b\0\0\0\x03\0\0\0\f\0\x03\0\xaa\0\x86\0\xaf\0\0\0\x07\0\v\x01E\x01\x92\x01\x0e\x01\r\x001\0\x05\0\n\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\x008\0v\0\x06\0\x81\0\x82\x009\0\xed\x01\x89\0\0\x021\0\0\x000\0\x8a\0j\0>\0\x0e\0n\0i\0\0\x001\0\x0f\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\x1e\x000\0\b\0r\0\xd1\0\xec\0\0\x01\r\x01\x1d\0\x16\0\xff\xff0\x000\0\x11\0\x15\0\x19\0 \0!\0#\0\x17\0\x1b\0\x10\0\x1f\0\x1c\0\"\0\x13\0\x18\0\x12\0\x1a\0\x14\0$\0)\0%\x000\0\t\0*\0+\0,\0-\0.\0/\0=\0U\x000\0&\0'\0'\0'\0'\0'\0'\0'\0'\0'\x001\0C\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0V\0\x8f\0\xff\xff(\0\x90\0\x91\0\x92\x007\0\x94\x007\0\x95\x000\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\xff\xff0\0\x96\0\x97\0\xa1\0B\0\x9e\x005\0\x9f\x005\0\xa0\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xa5\x003\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xa2\0\xa3\0\xa6\0]\0\xff\xff\x02\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xff\xffM\0g\0l\0t\0\x84\0\x86\0\x87\0\x80\0\x8b\0\x86\0\xa4\0]\0\xab\0M\0\xa7\0\xa8\0\xa9\0\xac\0p\0\xad\0\xae\0\xd2\0\xe2\0\xd0\0\xd3\0\xd4\0;\0S\0\x86\0\xd5\0\xd6\0\xd7\0\xd8\0\xda\0\x8d\0\xdb\0]\0\xdc\0\xdd\0{\0\xde\0\xdf\0\xe0\0\x88\0_\0\xe1\0#\x01A\x01\xea\0\x9b\0\x05\x01a\x01\xfa\0\xff\xff\xfe\x009\x01=\x01_\x01M\0,\x01\\\x01X\x01\t\x01\x1d\x01L\0|\0!\x01\x12\x01K\0b\0\x13\x01U\x01V\x01W\x01x\x01Y\x01J\0\xe1\x005\x01y\x01I\0Z\x01H\0G\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0b\0q\x01z\0[\x01@\0\x04\x01]\x01N\0N\0N\0N\0N\0N\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0\x9c\0p\x01^\x01`\x01b\x01c\x011\x01O\0O\0O\0O\0O\0O\0d\x01\x9d\0e\x01N\0N\0N\0N\0N\0N\0\xb7\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\x18\x01p\x01\xff\xff\x19\x01f\x01g\x01i\x01O\0O\0O\0O\0O\0O\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0j\x01k\x010\x01(\x01l\x01m\x01n\x01P\0P\0P\0P\0P\0P\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0o\x01\x1b\x01\xff\xff\xab\x01\x1f\x01\xaa\x01\x17\x01Q\0Q\0Q\0Q\0Q\0Q\0\\\0\xa8\x01?\x01P\0P\0P\0P\0P\0P\0\xf8\0\xa5\x01\xfc\0\xa2\x01;\x01E\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0\xff\xffQ\0Q\0Q\0Q\0Q\0Q\0W\0W\0W\0W\0W\0W\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0'\x01*\x01\xff\xff\xa3\x01\xa4\x01x\0\x02\x01X\0X\0X\0X\0X\0X\0\xa6\x017\x01\x99\0W\0W\0W\0W\0W\0W\0\x07\x01\xa7\x01\xa4\x01\xa9\x01\x10\x01\xa4\x01Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\x003\x01X\0X\0X\0X\0X\0X\0Y\0Y\0Y\0Y\0Y\0Y\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0a\0\x89\x01\xa4\x01\xac\x01\xb9\x01\x88\x01\xad\x01Z\0Z\0Z\0Z\0Z\0Z\0a\0\xb3\0\xae\x01Y\0Y\0Y\0Y\0Y\0Y\0.\x01\xaf\x01\xb0\x01\xb4\0\xa4\x01\xb8\x01\xb5\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0|\x01Z\0Z\0Z\0Z\0Z\0Z\0\xc0\x01\xb2\x01\x15\x01\xb3\x01a\0\xc1\x01\xb4\x01\xb5\x01\xb6\x01\xb7\x01\xa4\x01\xd8\x01\xff\xffa\0\xb8\x01\xd8\x01\xd1\x01a\0\xdf\x01a\0\xd0\x01\xe6\x01\0\0a\0\xdb\x01%\x01\xd8\x01\xd9\x01\0\0\xdc\x01\xd8\x01a\0\0\0\0\0\xd8\x01a\0\0\0a\0`\0c\0c\0c\0c\0c\0c\0c\0c\0c\0c\0\xd8\x01\0\0~\x01\0\0\0\0\0\0\0\0c\0c\0c\0c\0c\0c\0a\0\0\0\xda\x01\xfa\x01\0\0\0\0a\0\0\0|\x01|\x01a\0\0\0\xdd\x01\0\0\xfd\x01\0\0\0\0\0\0a\0\xff\xff\0\0\xc4\x01a\0\0\0a\0`\0c\0c\0c\0c\0c\0c\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0\xeb\x01\0\0\xf1\x01\0\0\xff\x01\xf2\x01\0\0d\0d\0d\0d\0d\0d\0e\0e\0e\0e\0e\0e\0e\0e\0e\0e\0\xf6\x01\x81\x01\x81\x01\xe4\x01\0\0\xc4\x01\0\0e\0e\0e\0e\0e\0e\0\0\0\xc6\x01\0\0d\0d\0d\0d\0d\0d\0\0\0\0\0\0\0\xc4\x01\xea\x01\x86\x01a\0a\0a\0a\0a\0a\0a\0a\0a\0a\0\0\0e\0e\0e\0e\0e\0e\0a\0a\0a\0a\0a\0a\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\0\0\0\0\xc9\x01\xb1\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xbc\0\0\0a\0a\0a\0a\0a\0a\0\xc9\x01\xe3\x01\0\0\xbf\0\xce\x01{\x01\xbd\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbd\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xc3\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc6\0\xff\xff\xf8\x01\xc4\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc4\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xca\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xcd\0\xff\xff\xff\xff\xcb\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe2\0\xc3\x01\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe8\x01\0\0\0\0\xce\0\xdd\x01\xef\x01\xfe\x01\0\0\xcf\0\xf4\x01\0\0\xe1\0\xcb\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe8\0\0\0\xe8\0\0\0\xe1\x01\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xd9\0\xff\xff\0\0\0\0\0\0\0\0\xe1\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\xe6\0\0\0\xe6\0\0\0\xe4\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\0\0\xe4\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xba\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\0\0\0\0\0\0\0\0\0\0\xf1\0\0\0q\x01\0\0M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01\0\0p\x01\0\0\0\0\xc1\0\0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0p\x01\0\0\0\0\0\0\xf0\0\xc8\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\0\0\xf6\0\0\0\0\0\xf0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\xf5\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xee\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\xf5\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0E\x01F\x01\0\0\0\0E\x01L\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0E\x01\0\0N\x01\0\0\0\0\0\0\0\0h\x01I\x01\0\0\0\0\0\0\0\0O\x01\0\0G\x01L\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01\0\0\0\0H\x01\0\0\0\0\0\0\0\0\0\0\xf3\0\0\0\0\0\0\0\0\0\0\0\0\0P\x01w\x01\0\0w\x01\0\0Q\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01\0\0\0\0J\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01S\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0R\x01\0\0\0\0s\x01\0\0\0\0T\x01\0\0\0\0u\x01\0\0u\x01\0\0K\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01\0\0s\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01\0\0\x80\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\xb9\x01\0\0\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\0\0\0\0\0\0\0\0\0\0\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\xb8\x01\0\0\x80\x01\0\0\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\x80\x01\0\0\0\0D\x01\x80\x01\x80\x01\x80\x01\x7f\x01\0\0\x80\x01\0\0\0\0\xb8\x01\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\0\0\x80\x01\x7f\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\0\0\0\0\0\0\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\0\0\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\xbf\x01\x8e\x01\xbf\x01\0\0\0\0\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\0\0\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\x8d\x01\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\x8d\x01\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x92\x01\x93\x01\0\0\0\0\x92\x01\x9a\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\x92\x01\0\0\x99\x01\0\0\0\0\0\0\0\0\xb1\x01\x96\x01\0\0\0\0\0\0\xc8\x01\x9c\x01\0\0\x94\x01\x9a\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\0\0\0\0\x95\x01\0\0\0\0\0\0\0\0\0\0\0\0\x8b\x01\0\0\0\0\0\0\0\0\0\0\x9d\x01\0\0\0\0\0\0\0\0\x9e\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xc8\x01\0\0\x97\x01\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\xc8\x01\xbb\x01\0\0\xa0\x01\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\x9f\x01\xc8\x01\0\0\xc8\x01\xc7\x01\0\0\xa1\x01\0\0\0\0\0\0\0\0\0\0\0\0\x98\x01\0\0\0\0\0\0\0\0\xbd\x01\0\0\xbd\x01\0\0\xbb\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\0\0\x91\x01\xc8\x01\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\xc8\x01\0\0\xc8\x01\xc7\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\0\0\0\0\0\0\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\0\0\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\0\0\xd6\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\xd5\x01\0\0\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\xd5\x01\0\0\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd3\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\x03\0\0\0\x86\0\xff\xff\x03\0\xff\xff\x86\0E\x01\x92\x019\0\xff\xffE\x01\x92\x01\xff\xff\xff\xff\xff\xff\xff\xff}\0\x8a\0\xff\xff\0\0\xff\xff\0\0\x03\0\xa9\0\x86\0\xae\0\xff\xff\0\0\n\x01E\x01\x92\x01\f\x01\0\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0s\0\0\0}\0\x81\0\x05\0\xec\x01\x88\0\xff\x01&\0\xff\xff\n\0\x88\0f\0:\0\0\0k\0f\0\xff\xff\v\0\0\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\x1d\0&\0\0\0o\0\xd0\0\xe9\0\xff\0\f\x01\x0f\0\x11\0<\0\v\0\n\0\0\0\x14\0\x18\0\x1f\0 \0\"\0\x16\0\x1a\0\0\0\x0e\0\x1b\0!\0\x12\0\x17\0\0\0\x10\0\x13\0#\0(\0$\0&\0\0\0)\0*\0+\0,\0-\0.\0:\0R\0\v\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0'\0?\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0U\0\x8c\0<\0\r\0\x8f\0\x90\0\x91\x000\0\x93\x000\0\x94\0'\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0A\0'\0\x95\0\x96\0\x9c\0?\0\x9d\x003\0\x9e\x003\0\x9f\x002\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\0\x9b\x002\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xa1\0\xa2\0\x9b\0[\0A\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x009\0D\0f\0k\0s\0\x83\0\x85\0\x85\0}\0\x8a\0\x85\0\xa3\0^\0\xa5\0D\0\xa6\0\xa7\0\xa8\0\xab\0o\0\xac\0\xad\0\xce\0\xcb\0\xcf\0\xd2\0\xd3\0:\0R\0\x85\0\xd4\0\xd5\0\xd6\0\xd7\0\xd9\0\x8c\0\xda\0a\0\xdb\0\xdc\0w\0\xdd\0\xde\0\xdf\0\x85\0[\0\xcb\0\"\x01>\x01\xe9\0\x98\0\x01\x01P\x01\xf7\0<\0\xfb\x006\x01:\x01Q\x01D\0)\x01R\x01S\x01\x06\x01\x1a\x01D\0w\0\x1e\x01\x0f\x01D\0^\0\x0f\x01T\x01U\x01V\x01G\x01X\x01D\0\xcb\x002\x01G\x01D\0Y\x01D\0D\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0a\0L\x01w\0Z\x01?\0\x01\x01\\\x01G\0G\0G\0G\0G\0G\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0\x98\0L\x01]\x01_\x01a\x01b\x01-\x01N\0N\0N\0N\0N\0N\0c\x01\x98\0d\x01G\0G\0G\0G\0G\0G\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\x14\x01L\x01A\0\x14\x01e\x01f\x01h\x01N\0N\0N\0N\0N\0N\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0i\x01j\x01-\x01$\x01k\x01l\x01m\x01O\0O\0O\0O\0O\0O\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0n\x01\x1a\x01y\x01\x9d\x01\x1e\x01\x9e\x01\x14\x01P\0P\0P\0P\0P\0P\0[\0\x9f\x01>\x01O\0O\0O\0O\0O\0O\0\xf7\0\xa0\x01\xfb\0\xa1\x01:\x01D\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0^\0P\0P\0P\0P\0P\0P\0V\0V\0V\0V\0V\0V\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0$\x01)\x01a\0\xa2\x01\xa3\x01w\0\x01\x01W\0W\0W\0W\0W\0W\0\xa5\x016\x01\x98\0V\0V\0V\0V\0V\0V\0\x06\x01\xa6\x01\xa7\x01\xa8\x01\x0f\x01\xa9\x01X\0X\0X\0X\0X\0X\0X\0X\0X\0X\x002\x01W\0W\0W\0W\0W\0W\0X\0X\0X\0X\0X\0X\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0_\0\x85\x01\xaa\x01\xab\x01\x9a\x01\x85\x01\xac\x01Y\0Y\0Y\0Y\0Y\0Y\0_\0\xb0\0\xad\x01X\0X\0X\0X\0X\0X\0-\x01\xae\x01\xaf\x01\xb0\0\xb0\x01\x9a\x01\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0z\x01Y\0Y\0Y\0Y\0Y\0Y\0\x94\x01\xb1\x01\x14\x01\xb2\x01b\0\x94\x01\xb3\x01\xb4\x01\xb5\x01\xb6\x01\xb7\x01\xd8\x01\xc1\x01_\0\x9a\x01\xd8\x01\xcd\x01b\0\xde\x01_\0\xcd\x01\xe5\x01\xff\xff_\0\xda\x01$\x01\xd7\x01\xd7\x01\xff\xff\xda\x01\xd7\x01_\0\xff\xff\xff\xff\xd8\x01_\0\xff\xff_\0_\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0\xd7\x01\xff\xffz\x01\xff\xff\xff\xff\xff\xff\xff\xff`\0`\0`\0`\0`\0`\0b\0\xff\xff\xd7\x01\xf7\x01\xff\xff\xff\xffb\0\xff\xff}\x01\x80\x01b\0\xff\xff\xdc\x01\xff\xff\xfb\x01\xff\xff\xff\xff\xff\xffb\0y\x01\xff\xff\xc2\x01b\0\xff\xffb\0b\0`\0`\0`\0`\0`\0`\0c\0c\0c\0c\0c\0c\0c\0c\0c\0c\0\xe7\x01\xff\xff\xee\x01\xff\xff\xfb\x01\xee\x01\xff\xffc\0c\0c\0c\0c\0c\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0\xf3\x01}\x01\x80\x01\xe0\x01\xff\xff\xc5\x01\xff\xffd\0d\0d\0d\0d\0d\0\xff\xff\xc2\x01\xff\xffc\0c\0c\0c\0c\0c\0\xff\xff\xff\xff\xff\xff\xc8\x01\xe7\x01\x85\x01e\0e\0e\0e\0e\0e\0e\0e\0e\0e\0\xff\xffd\0d\0d\0d\0d\0d\0e\0e\0e\0e\0e\0e\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xff\xff\xff\xff\xc5\x01\xb0\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb9\0\xff\xffe\0e\0e\0e\0e\0e\0\xc8\x01\xe0\x01\xff\xff\xb9\0\xcd\x01z\x01\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xc0\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc0\0\xc1\x01\xf7\x01\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc7\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xc7\0}\x01\x80\x01\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xcc\0\xc2\x01\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe7\x01\xff\xff\xff\xff\xc7\0\xdc\x01\xee\x01\xfb\x01\xff\xff\xc7\0\xf3\x01\xff\xff\xcc\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xe1\0\xff\xff\xe1\0\xff\xff\xe0\x01\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xcd\0\xc5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xcc\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xff\xff\xff\xff\xff\xff\xff\xff\xc8\x01\xff\xff\xff\xff\xe4\0\xff\xff\xe4\0\xff\xff\xe3\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xff\xff\xe3\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xb9\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xed\0\xff\xffM\x01\xff\xffM\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01\xff\xffM\x01\xff\xff\xff\xff\xc0\0\xff\xff\xff\xff\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0M\x01\xff\xff\xff\xff\xff\xff\xed\0\xc7\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xff\xff\xf2\0\xff\xff\xff\xff\xf0\0\xff\xff\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xff\xff\xff\xff\xff\xff\xff\xff\xf2\0\xff\xff\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xed\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xff\xff\xff\xff\xff\xff\xff\xff\xf5\0\xff\xff\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0B\x01B\x01\xff\xff\xff\xffB\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xffB\x01\xff\xff\xff\xff\xff\xff\xff\xffO\x01B\x01\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xffB\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01\xff\xff\xff\xffB\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf2\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01p\x01\xff\xffp\x01\xff\xffB\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01\xff\xff\xff\xffB\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01B\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xff\xff\xffr\x01\xff\xff\xff\xffB\x01\xff\xff\xff\xffs\x01\xff\xffs\x01\xff\xffB\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01\xff\xffr\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01\xff\xff~\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff\x81\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\xff\xff\x9b\x01\xff\xff\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x9b\x01\xff\xff~\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01~\x01\xff\xff\xff\xffB\x01~\x01\x81\x01~\x01~\x01\xff\xff\x81\x01\xff\xff\xff\xff\x9b\x01\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\x81\x01\x81\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\xff\xff\xff\xff\xff\xff\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\xff\xff\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\xb8\x01\x8a\x01\xb8\x01\xff\xff\xff\xff\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xff\xff\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8a\x01\xff\xff\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8d\x01\xff\xff\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8f\x01\x8f\x01\xff\xff\xff\xff\x8f\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc6\x01\x8f\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\x9c\x01\x8f\x01\xff\xff\xff\xff\xff\xff\xc6\x01\x8f\x01\xff\xff\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\xff\xff\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8a\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xc6\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xc6\x01\xff\xff\xff\xff\xff\xff\xc6\x01\xba\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xc6\x01\xff\xff\xff\xff\x8f\x01\xc6\x01\xff\xff\xc6\x01\xc6\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xbb\x01\xff\xff\xbb\x01\xff\xff\xba\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xc9\x01\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xc9\x01\xc9\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xff\xff\xff\xff\xff\xff\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xff\xff\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xff\xff\xd2\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xff\xff\xff\xff\xff\xff\xff\xff\xd2\x01\xff\xff\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x01\xff\xff\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd2\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       cst$23,
       cst$23,
       cst$23,
       cst$23,
       cst$23,
       cst$23],
    Stdlib_list = global_data.Stdlib__list,
    Stdlib = global_data.Stdlib,
    Stdlib_buffer = global_data.Stdlib__buffer,
    Stdlib_string = global_data.Stdlib__string,
    Stdlib_format = global_data.Stdlib__format,
    Assert_failure = global_data.Assert_failure,
    Yojson_Common = global_data.Yojson__Common,
    Yojson_Codec = global_data.Yojson__Codec,
    Stdlib_bytes = global_data.Stdlib__bytes,
    Yojson_Lexer_utils = global_data.Yojson__Lexer_utils,
    Stdlib_printf = global_data.Stdlib__printf,
    Stdlib_seq = global_data.Stdlib__seq,
    Stdlib_char = global_data.Stdlib__char,
    Stdlib_lexing = global_data.Stdlib__lexing,
    cst_u00 = "\\u00",
    _a_ =
      [0,
       [11,
        "src=",
        [3,
         0,
         [11,
          " start=",
          [4, 3, 0, 0, [11, " len=", [4, 3, 0, 0, [12, 10, [10, 0]]]]]]]],
       "src=%S start=%i len=%i\n%!"],
    cst_b = "\\b",
    cst_t = "\\t",
    cst_n = "\\n",
    cst_f = "\\f",
    cst_r = "\\r",
    cst_null = cst_null$2,
    cst_true = "true",
    cst_false = "false",
    cst_Infinity = cst_Infinity$3,
    cst_Infinity$0 = cst_Infinity$4,
    cst_NaN = cst_NaN$1,
    _b_ = [0, [8, [0, 0, 3], 0, [0, 16], 0], cst_16g],
    cst_0 = cst_0$2,
    _c_ = [0, [8, [0, 0, 3], 0, [0, 17], 0], cst_17g],
    _d_ = [0, [8, [0, 0, 3], 0, [0, 17], 0], cst_17g],
    cst_0$0 = cst_0$2,
    _e_ = [0, [8, [0, 0, 3], 0, [0, 1], 0], "%.1g"],
    _f_ = [0, [8, [0, 0, 3], 0, [0, 2], 0], "%.2g"],
    _g_ = [0, [8, [0, 0, 3], 0, [0, 3], 0], "%.3g"],
    _h_ = [0, [8, [0, 0, 3], 0, [0, 4], 0], "%.4g"],
    _i_ = [0, [8, [0, 0, 3], 0, [0, 5], 0], "%.5g"],
    _j_ = [0, [8, [0, 0, 3], 0, [0, 6], 0], "%.6g"],
    _k_ = [0, [8, [0, 0, 3], 0, [0, 7], 0], "%.7g"],
    _l_ = [0, [8, [0, 0, 3], 0, [0, 8], 0], "%.8g"],
    _m_ = [0, [8, [0, 0, 3], 0, [0, 9], 0], "%.9g"],
    _n_ = [0, [8, [0, 0, 3], 0, [0, 10], 0], "%.10g"],
    _o_ = [0, [8, [0, 0, 3], 0, [0, 11], 0], "%.11g"],
    _p_ = [0, [8, [0, 0, 3], 0, [0, 12], 0], "%.12g"],
    _q_ = [0, [8, [0, 0, 3], 0, [0, 13], 0], "%.13g"],
    _r_ = [0, [8, [0, 0, 3], 0, [0, 14], 0], "%.14g"],
    _s_ = [0, [8, [0, 0, 3], 0, [0, 15], 0], "%.15g"],
    _t_ = [0, [8, [0, 0, 3], 0, [0, 16], 0], cst_16g],
    cst_Infinity$1 = cst_Infinity$3,
    cst_Infinity$2 = cst_Infinity$4,
    cst_NaN$0 = cst_NaN$1,
    cst_Infinity_value_not_allowed = cst_Infinity_value_not_allowed$3,
    cst_Infinity_value_not_allowed$0 = cst_Infinity_value_not_allowed$4,
    cst_NaN_value_not_allowed_in_s = cst_NaN_value_not_allowed_in_s$1,
    _u_ = [0, [8, [0, 0, 3], 0, [0, 16], 0], cst_16g],
    cst_0$1 = cst_0$2,
    _v_ = [0, [8, [0, 0, 3], 0, [0, 17], 0], cst_17g],
    cst_Infinity_value_not_allowed$1 = cst_Infinity_value_not_allowed$3,
    cst_Infinity_value_not_allowed$2 = cst_Infinity_value_not_allowed$4,
    cst_NaN_value_not_allowed_in_s$0 = cst_NaN_value_not_allowed_in_s$1;
   function to_basic(x){
    if(typeof x !== "number"){
     var _dW_ = x[1];
     if(726928360 <= _dW_){
      if(737456202 !== _dW_){
       if(963043957 <= _dW_){
        var
         l = x[2],
         _dX_ =
           caml_call2
            (Stdlib_list[21],
             function(param){
              var v = param[2], k = param[1];
              return [0, k, to_basic(v)];
             },
             l);
        return [0, 963043957, caml_call1(Stdlib_list[9], _dX_)];
       }
       var l$0 = x[2], _dY_ = caml_call2(Stdlib_list[21], to_basic, l$0);
       return [0, 848054398, caml_call1(Stdlib_list[9], _dY_)];
      }
     }
     else{
      if(-752863768 === _dW_){var s = x[2]; return [0, -976970511, s];}
      if(708012133 <= _dW_){
       var _dZ_ = x[2], match = _dZ_[2], k = _dZ_[1];
       if(! match) return [0, -976970511, k];
       var v = match[1];
       return [0, 848054398, [0, [0, -976970511, k], [0, to_basic(v), 0]]];
      }
     }
    }
    return x;
   }
   function hex(n){
    var _dV_ = 10 <= n ? n + 87 | 0 : n + 48 | 0;
    return caml_call1(Stdlib_char[1], _dV_);
   }
   function write_special(src, start, stop, ob, str){
    caml_call4(Stdlib_buffer[16], ob, src, start[1], stop - start[1] | 0);
    caml_call2(Stdlib_buffer[14], ob, str);
    start[1] = stop + 1 | 0;
   }
   function write_string(ob, src){
    caml_call2(Stdlib_buffer[10], ob, 34);
    var start = [0, 0], _dT_ = caml_ml_string_length(src) - 1 | 0, _dS_ = 0;
    if(_dT_ >= 0){
     var stop = _dS_;
     for(;;){
      var c = caml_string_get(src, stop);
      a:
      if(92 === c)
       write_special(src, start, stop, ob, cst);
      else{
       b:
       {
        c:
        {
         if(35 > c){
          if(8 > c) break b;
          switch(c - 8 | 0){
            case 0:
             write_special(src, start, stop, ob, cst_b); break;
            case 1:
             write_special(src, start, stop, ob, cst_t); break;
            case 2:
             write_special(src, start, stop, ob, cst_n); break;
            case 4:
             write_special(src, start, stop, ob, cst_f); break;
            case 5:
             write_special(src, start, stop, ob, cst_r); break;
            case 26:
             write_special(src, start, stop, ob, cst$0); break;
            case 24:
            case 25:
             break c;
            default: break b;
          }
          break a;
         }
         if(127 === c) break b;
        }
        break a;
       }
       caml_call4(Stdlib_buffer[16], ob, src, start[1], stop - start[1] | 0);
       caml_call2(Stdlib_buffer[14], ob, cst_u00);
       var _dQ_ = hex(c >>> 4 | 0);
       caml_call2(Stdlib_buffer[10], ob, _dQ_);
       var _dR_ = hex(c & 15);
       caml_call2(Stdlib_buffer[10], ob, _dR_);
       start[1] = stop + 1 | 0;
      }
      var _dU_ = stop + 1 | 0;
      if(_dT_ === stop) break;
      stop = _dU_;
     }
    }
    try{
     caml_call4
      (Stdlib_buffer[16],
       ob,
       src,
       start[1],
       caml_ml_string_length(src) - start[1] | 0);
    }
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0);
     caml_call4
      (Stdlib_printf[3],
       _a_,
       src,
       start[1],
       caml_ml_string_length(src) - start[1] | 0);
     throw caml_maybe_attach_backtrace(exc, 0);
    }
    return caml_call2(Stdlib_buffer[10], ob, 34);
   }
   function json_string_of_string(s){
    var ob = caml_call1(Stdlib_buffer[1], 10);
    write_string(ob, s);
    return caml_call1(Stdlib_buffer[2], ob);
   }
   function write_null(ob, param){
    return caml_call2(Stdlib_buffer[14], ob, cst_null);
   }
   function write_bool(ob, x){
    var _dP_ = x ? cst_true : cst_false;
    return caml_call2(Stdlib_buffer[14], ob, _dP_);
   }
   function write_digits(s, x){
    if(0 === x) return 0;
    var d = x % 10 | 0;
    write_digits(s, x / 10 | 0);
    var
     n = caml_call1(Stdlib[18], d),
     _dO_ = caml_call1(Stdlib_char[1], n + 48 | 0);
    return caml_call2(Stdlib_buffer[10], s, _dO_);
   }
   function write_int(ob, x){
    return 0 < x
            ? write_digits(ob, x)
            : 0
              <= x
              ? caml_call2(Stdlib_buffer[10], ob, 48)
              : (caml_call2(Stdlib_buffer[10], ob, 45), write_digits(ob, x));
   }
   function float_needs_period(s){
    try{
     var _dK_ = caml_ml_string_length(s) - 1 | 0, _dJ_ = 0;
     if(_dK_ >= 0){
      var i = _dJ_;
      for(;;){
       var match = caml_string_get(s, i);
       a:
       {
        if(48 <= match){
         if(58 > match) break a;
        }
        else if(45 === match) break a;
        throw caml_maybe_attach_backtrace(Stdlib[3], 1);
       }
       var _dM_ = i + 1 | 0;
       if(_dK_ === i) break;
       i = _dM_;
      }
     }
     var _dL_ = 1;
     return _dL_;
    }
    catch(_dN_){
     var _dI_ = caml_wrap_exception(_dN_);
     if(_dI_ === Stdlib[3]) return 0;
     throw caml_maybe_attach_backtrace(_dI_, 0);
    }
   }
   function write_float(ob, x){
    var match = caml_classify_float(x);
    if(3 === match){
     var _dG_ = 0. < x ? cst_Infinity : cst_Infinity$0;
     return caml_call2(Stdlib_buffer[14], ob, _dG_);
    }
    if(4 <= match) return caml_call2(Stdlib_buffer[14], ob, cst_NaN);
    var
     s1 = caml_call2(Stdlib_printf[4], _b_, x),
     s =
       caml_float_of_string(s1) === x
        ? s1
        : caml_call2(Stdlib_printf[4], _c_, x);
    caml_call2(Stdlib_buffer[14], ob, s);
    var _dH_ = float_needs_period(s);
    return _dH_ ? caml_call2(Stdlib_buffer[14], ob, cst_0) : _dH_;
   }
   function write_normal_float_prec(significant_figures, ob, x){
    var sprintf = Stdlib_printf[4], switcher = significant_figures - 1 | 0;
    if(15 < switcher >>> 0)
     var s = caml_call2(sprintf, _d_, x);
    else
     switch(switcher){
       case 0:
        var s = caml_call2(sprintf, _e_, x); break;
       case 1:
        var s = caml_call2(sprintf, _f_, x); break;
       case 2:
        var s = caml_call2(sprintf, _g_, x); break;
       case 3:
        var s = caml_call2(sprintf, _h_, x); break;
       case 4:
        var s = caml_call2(sprintf, _i_, x); break;
       case 5:
        var s = caml_call2(sprintf, _j_, x); break;
       case 6:
        var s = caml_call2(sprintf, _k_, x); break;
       case 7:
        var s = caml_call2(sprintf, _l_, x); break;
       case 8:
        var s = caml_call2(sprintf, _m_, x); break;
       case 9:
        var s = caml_call2(sprintf, _n_, x); break;
       case 10:
        var s = caml_call2(sprintf, _o_, x); break;
       case 11:
        var s = caml_call2(sprintf, _p_, x); break;
       case 12:
        var s = caml_call2(sprintf, _q_, x); break;
       case 13:
        var s = caml_call2(sprintf, _r_, x); break;
       case 14:
        var s = caml_call2(sprintf, _s_, x); break;
       default: var s = caml_call2(sprintf, _t_, x);
     }
    caml_call2(Stdlib_buffer[14], ob, s);
    var _dF_ = float_needs_period(s);
    return _dF_ ? caml_call2(Stdlib_buffer[14], ob, cst_0$0) : _dF_;
   }
   function write_float_prec(significant_figures, ob, x){
    var match = caml_classify_float(x);
    if(3 !== match)
     return 4 <= match
             ? caml_call2(Stdlib_buffer[14], ob, cst_NaN$0)
             : write_normal_float_prec(significant_figures, ob, x);
    var _dE_ = 0. < x ? cst_Infinity$1 : cst_Infinity$2;
    return caml_call2(Stdlib_buffer[14], ob, _dE_);
   }
   function write_std_float(ob, x){
    var match = caml_classify_float(x);
    if(3 === match){
     var
      _dC_ =
        0. < x
         ? cst_Infinity_value_not_allowed
         : cst_Infinity_value_not_allowed$0;
     return caml_call1(Yojson_Common[3], _dC_);
    }
    if(4 <= match)
     return caml_call1(Yojson_Common[3], cst_NaN_value_not_allowed_in_s);
    var
     s1 = caml_call2(Stdlib_printf[4], _u_, x),
     s =
       caml_float_of_string(s1) === x
        ? s1
        : caml_call2(Stdlib_printf[4], _v_, x);
    caml_call2(Stdlib_buffer[14], ob, s);
    var _dD_ = float_needs_period(s);
    return _dD_ ? caml_call2(Stdlib_buffer[14], ob, cst_0$1) : _dD_;
   }
   function write_std_float_prec(significant_figures, ob, x){
    var match = caml_classify_float(x);
    if(3 !== match)
     return 4 <= match
             ? caml_call1(Yojson_Common[3], cst_NaN_value_not_allowed_in_s$0)
             : write_normal_float_prec(significant_figures, ob, x);
    var
     _dB_ =
       0. < x
        ? cst_Infinity_value_not_allowed$1
        : cst_Infinity_value_not_allowed$2;
    return caml_call1(Yojson_Common[3], _dB_);
   }
   var
    write_intlit = Stdlib_buffer[14],
    _w_ = [0, [2, 0, [17, [0, cst$21, 1, 0], 0]], "%s@ "],
    cst_null$0 = cst_null$2,
    _x_ = [0, [18, [1, [0, [11, cst_hov2, 0], cst_hov2]], 0], "@[<hov2>"],
    _y_ =
      [0,
       [12,
        40,
        [17,
         [0, cst$27, 0, 0],
         [15, [17, [0, "@;<0 -2>", 0, -2], [12, 41, 0]]]]],
       "(@,%a@;<0 -2>)"],
    _z_ = [0, [17, 0, 0], cst$32],
    _A_ = [0, [18, [1, [0, [11, cst_hv2, 0], cst_hv2]], 0], cst_hv2$0],
    _B_ =
      [0,
       [12,
        123,
        [17,
         [0, cst_1_0, 1, 0],
         [15, [17, [0, cst_1_2, 1, -2], [12, 125, 0]]]]],
       "{@;<1 0>%a@;<1 -2>}"],
    _C_ = [0, [17, 0, 0], cst$32],
    _D_ = [0, [18, [1, [0, [11, cst_hv2, 0], cst_hv2]], 0], cst_hv2$0],
    _E_ =
      [0,
       [12,
        91,
        [17,
         [0, cst_1_0, 1, 0],
         [18,
          [1, [0, [11, cst_hov, 0], cst_hov]],
          [15, [17, 0, [17, [0, cst_1_2, 1, -2], [12, 93, 0]]]]]]],
       "[@;<1 0>@[<hov>%a@]@;<1 -2>]"],
    _F_ = [0, [17, 0, 0], cst$32],
    _G_ =
      [0,
       [12,
        91,
        [17,
         [0, cst_1_0, 1, 0],
         [18,
          [1, [0, [11, cst_hv, 0], cst_hv]],
          [15, [17, 0, [17, [0, cst_1_2, 1, -2], [12, 93, 0]]]]]]],
       "[@;<1 0>@[<hv>%a@]@;<1 -2>]"],
    _H_ =
      [0,
       [12,
        60,
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [2, 0, [11, cst$33, [15, [17, 0, [12, 62, 0]]]]]]],
       "<@[<hv2>%s: %a@]>"],
    _I_ = [0, [12, 60, [2, 0, [12, 62, 0]]], "<%s>"],
    _J_ =
      [0,
       [18,
        [1, [0, [11, cst_hv2, 0], cst_hv2]],
        [2, 0, [11, cst$33, [15, [17, 0, 0]]]]],
       "@[<hv2>%s: %a@]"],
    _K_ =
      [0,
       [18, [1, [0, [11, cst_hv2, 0], cst_hv2]], [15, [17, 0, 0]]],
       "@[<hv2>%a@]"],
    _L_ = [0, [15, 0], cst_a],
    _M_ = [0, [15, [17, 2, 0]], "%a@?"],
    cst_Null = "`Null",
    _N_ =
      [0,
       [11, "`Tuple (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Tuple (@[<hov>"],
    _O_ = [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [12, 91, 0]], cst_2$0],
    _P_ = [0, [12, 59, [17, [0, cst$21, 1, 0], 0]], cst$22],
    _Q_ = [0, [17, [0, cst$27, 0, 0], [12, 93, [17, 0, 0]]], cst$28],
    _R_ = [0, [17, 0, [12, 41, 0]], cst$26],
    _S_ =
      [0,
       [11, "`Assoc (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Assoc (@[<hov>"],
    _T_ = [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [12, 91, 0]], cst_2$0],
    _U_ = [0, [12, 59, [17, [0, cst$21, 1, 0], 0]], cst$22],
    _V_ = [0, [12, 40, [18, [1, [0, 0, cst$23]], 0]], cst$24],
    _W_ = [0, [3, 0, 0], cst_S],
    _X_ = [0, [12, 44, [17, [0, cst$21, 1, 0], 0]], cst$25],
    _Y_ = [0, [17, 0, [12, 41, 0]], cst$26],
    _Z_ = [0, [17, [0, cst$27, 0, 0], [12, 93, [17, 0, 0]]], cst$28],
    ___ = [0, [17, 0, [12, 41, 0]], cst$26],
    _$_ =
      [0,
       [11, "`List (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`List (@[<hov>"],
    _aa_ = [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [12, 91, 0]], cst_2$0],
    _ab_ = [0, [12, 59, [17, [0, cst$21, 1, 0], 0]], cst$22],
    _ac_ = [0, [17, [0, cst$27, 0, 0], [12, 93, [17, 0, 0]]], cst$28],
    _ad_ = [0, [17, 0, [12, 41, 0]], cst$26],
    _ae_ =
      [0,
       [11, "`Bool (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Bool (@[<hov>"],
    _af_ = [0, [9, 0, 0], "%B"],
    _ag_ = [0, [17, 0, [12, 41, 0]], cst$26],
    _ah_ =
      [0,
       [11, "`Variant (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Variant (@[<hov>"],
    _ai_ = [0, [12, 40, [18, [1, [0, 0, cst$23]], 0]], cst$24],
    _aj_ = [0, [3, 0, 0], cst_S],
    _ak_ = [0, [12, 44, [17, [0, cst$21, 1, 0], 0]], cst$25],
    cst_Some = "(Some ",
    _al_ = [0, [17, 0, [12, 41, 0]], cst$26],
    _am_ = [0, [17, 0, [12, 41, 0]], cst$26],
    cst_None = "None",
    _an_ =
      [0,
       [11, "`Float (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Float (@[<hov>"],
    _ao_ = [0, [8, [0, 0, 5], 0, 0, 0], "%F"],
    _ap_ = [0, [17, 0, [12, 41, 0]], cst$26],
    _aq_ =
      [0,
       [11, "`Int (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Int (@[<hov>"],
    _ar_ = [0, [4, 0, 0, 0, 0], "%d"],
    _as_ = [0, [17, 0, [12, 41, 0]], cst$26],
    _at_ =
      [0,
       [11, "`Intlit (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`Intlit (@[<hov>"],
    _au_ = [0, [3, 0, 0], cst_S],
    _av_ = [0, [17, 0, [12, 41, 0]], cst$26],
    _aw_ =
      [0,
       [11, "`String (", [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "`String (@[<hov>"],
    _ax_ = [0, [3, 0, 0], cst_S],
    _ay_ = [0, [17, 0, [12, 41, 0]], cst$26],
    _az_ = [0, [15, 0], cst_a];
   function iter2(f_elt, f_sep, x, param$0){
    if(! param$0) return;
    var l$0 = param$0[2], y$0 = param$0[1];
    caml_call2(f_elt, x, y$0);
    var param = l$0;
    for(;;){
     if(! param) return;
     var l = param[2], y = param[1];
     caml_call1(f_sep, x);
     caml_call2(f_elt, x, y);
     param = l;
    }
   }
   function f_sep(ob){return caml_call2(Stdlib_buffer[10], ob, 44);}
   function write_json(ob, x){
    if(typeof x === "number") return write_null(ob, 0);
    var _dA_ = x[1];
    if(708012133 <= _dA_){
     if(726928360 === _dA_){var l = x[2]; return write_tuple(ob, l);}
     if(848054398 <= _dA_){
      if(963043957 <= _dA_){var l$0 = x[2]; return write_assoc(ob, l$0);}
      var l$1 = x[2];
      return write_list(ob, l$1);
     }
     if(737456202 <= _dA_){var b = x[2]; return write_bool(ob, b);}
     var match = x[2], o = match[2], s = match[1];
     return write_variant(ob, s, o);
    }
    if(3654863 <= _dA_){
     if(365180284 <= _dA_){var f = x[2]; return write_float(ob, f);}
     var i = x[2];
     return write_int(ob, i);
    }
    if(-752863768 <= _dA_){
     var s$0 = x[2];
     return caml_call2(Stdlib_buffer[14], ob, s$0);
    }
    var s$1 = x[2];
    return write_string(ob, s$1);
   }
   function write_assoc(ob, l){
    function f_elt(ob, param){
     var x = param[2], s = param[1];
     write_string(ob, s);
     caml_call2(Stdlib_buffer[10], ob, 58);
     return write_json(ob, x);
    }
    caml_call2(Stdlib_buffer[10], ob, 123);
    iter2(f_elt, f_sep, ob, l);
    return caml_call2(Stdlib_buffer[10], ob, 125);
   }
   function write_list(ob, l){
    caml_call2(Stdlib_buffer[10], ob, 91);
    iter2(write_json, f_sep, ob, l);
    return caml_call2(Stdlib_buffer[10], ob, 93);
   }
   function write_tuple(ob, l){
    caml_call2(Stdlib_buffer[10], ob, 40);
    iter2(write_json, f_sep, ob, l);
    return caml_call2(Stdlib_buffer[10], ob, 41);
   }
   function write_variant(ob, s, o){
    caml_call2(Stdlib_buffer[10], ob, 60);
    write_string(ob, s);
    if(o){
     var x = o[1];
     caml_call2(Stdlib_buffer[10], ob, 58);
     write_json(ob, x);
    }
    return caml_call2(Stdlib_buffer[10], ob, 62);
   }
   function write_std_json(ob, x){
    if(typeof x === "number") return write_null(ob, 0);
    var _dz_ = x[1];
    if(708012133 <= _dz_){
     if(726928360 === _dz_){var l = x[2]; return write_std_tuple(ob, l);}
     if(848054398 <= _dz_){
      if(963043957 <= _dz_){
       var
        l$0 = x[2],
        f_elt =
          function(ob, param){
           var x = param[2], s = param[1];
           write_string(ob, s);
           caml_call2(Stdlib_buffer[10], ob, 58);
           return write_std_json(ob, x);
          };
       caml_call2(Stdlib_buffer[10], ob, 123);
       iter2(f_elt, f_sep, ob, l$0);
       return caml_call2(Stdlib_buffer[10], ob, 125);
      }
      var l$1 = x[2];
      caml_call2(Stdlib_buffer[10], ob, 91);
      iter2(write_std_json, f_sep, ob, l$1);
      return caml_call2(Stdlib_buffer[10], ob, 93);
     }
     if(737456202 <= _dz_){var b = x[2]; return write_bool(ob, b);}
     var match = x[2], o = match[2], s = match[1];
     return write_std_variant(ob, s, o);
    }
    if(3654863 <= _dz_){
     if(365180284 <= _dz_){var f = x[2]; return write_std_float(ob, f);}
     var i = x[2];
     return write_int(ob, i);
    }
    if(-752863768 <= _dz_){
     var s$0 = x[2];
     return caml_call2(Stdlib_buffer[14], ob, s$0);
    }
    var s$1 = x[2];
    return write_string(ob, s$1);
   }
   function write_std_tuple(ob, l){
    caml_call2(Stdlib_buffer[10], ob, 91);
    iter2(write_std_json, f_sep, ob, l);
    return caml_call2(Stdlib_buffer[10], ob, 93);
   }
   function write_std_variant(ob, s, o){
    if(! o) return write_string(ob, s);
    var x = o[1];
    caml_call2(Stdlib_buffer[10], ob, 91);
    write_string(ob, s);
    caml_call2(Stdlib_buffer[10], ob, 44);
    write_std_json(ob, x);
    return caml_call2(Stdlib_buffer[10], ob, 93);
   }
   function to_buffer(opt, _dy_, ob, x){
    if(opt) var sth = opt[1], suf = sth; else var suf = cst$1;
    if(_dy_) var sth$0 = _dy_[1], std = sth$0; else var std = 0;
    if(std) write_std_json(ob, x); else write_json(ob, x);
    return caml_call2(Stdlib_buffer[14], ob, suf);
   }
   function to_string(buf, opt, _dx_, std, x){
    if(opt) var sth = opt[1], len = sth; else var len = 256;
    if(_dx_) var sth$0 = _dx_[1], suf = sth$0; else var suf = cst$2;
    if(buf){
     var ob = buf[1];
     caml_call1(Stdlib_buffer[8], ob);
     var ob$0 = ob;
    }
    else
     var ob$0 = caml_call1(Stdlib_buffer[1], len);
    to_buffer([0, suf], std, ob$0, x);
    var s = caml_call1(Stdlib_buffer[2], ob$0);
    caml_call1(Stdlib_buffer[8], ob$0);
    return s;
   }
   function to_channel(buf, opt, _dw_, std, oc, x){
    if(opt) var sth = opt[1], len = sth; else var len = 4096;
    if(_dw_) var sth$0 = _dw_[1], suf = sth$0; else var suf = cst$3;
    if(buf){
     var ob = buf[1];
     caml_call1(Stdlib_buffer[8], ob);
     var ob$0 = ob;
    }
    else
     var ob$0 = caml_call1(Stdlib_buffer[1], len);
    to_buffer([0, suf], std, ob$0, x);
    caml_call2(Stdlib_buffer[21], oc, ob$0);
    return caml_call1(Stdlib_buffer[8], ob$0);
   }
   function to_output(buf, opt, _du_, std, out, x){
    if(opt) var sth = opt[1], len = sth; else var len = 4096;
    if(_du_) var sth$0 = _du_[1], suf = sth$0; else var suf = cst$4;
    if(buf){
     var ob = buf[1];
     caml_call1(Stdlib_buffer[8], ob);
     var ob$0 = ob;
    }
    else
     var ob$0 = caml_call1(Stdlib_buffer[1], len);
    to_buffer([0, suf], std, ob$0, x);
    var _dv_ = caml_call1(Stdlib_buffer[7], ob$0);
    caml_call4
     (runtime.caml_get_public_method(out, 209784577, 3),
      out,
      caml_call1(Stdlib_buffer[2], ob$0),
      0,
      _dv_);
    return caml_call1(Stdlib_buffer[8], ob$0);
   }
   function to_file(len, std, opt, file, x){
    if(opt) var sth = opt[1], suf = sth; else var suf = cst$5;
    var oc = caml_call1(Stdlib[60], file);
    try{
     to_channel(0, len, [0, suf], std, oc, x);
     var _dt_ = caml_call1(Stdlib[76], oc);
     return _dt_;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[77], oc);
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function seq_to_buffer(opt, std, ob, st){
    if(opt) var sth = opt[1], suf = sth; else var suf = cst$6;
    var _dr_ = [0, suf];
    return caml_call2
            (Stdlib_seq[10],
             function(_ds_){return to_buffer(_dr_, std, ob, _ds_);},
             st);
   }
   function seq_to_string(buf, opt, _dq_, std, st){
    if(opt) var sth = opt[1], len = sth; else var len = 256;
    if(_dq_) var sth$0 = _dq_[1], suf = sth$0; else var suf = cst$7;
    if(buf){
     var ob = buf[1];
     caml_call1(Stdlib_buffer[8], ob);
     var ob$0 = ob;
    }
    else
     var ob$0 = caml_call1(Stdlib_buffer[1], len);
    seq_to_buffer([0, suf], std, ob$0, st);
    var s = caml_call1(Stdlib_buffer[2], ob$0);
    caml_call1(Stdlib_buffer[8], ob$0);
    return s;
   }
   function seq_to_channel(buf, opt, _dp_, std, oc, seq){
    if(opt) var sth = opt[1], len = sth; else var len = 2096;
    if(_dp_) var sth$0 = _dp_[1], suf = sth$0; else var suf = cst$8;
    if(buf){
     var ob = buf[1];
     caml_call1(Stdlib_buffer[8], ob);
     var ob$0 = ob;
    }
    else
     var ob$0 = caml_call1(Stdlib_buffer[1], len);
    return caml_call2
            (Stdlib_seq[10],
             function(json){
              to_buffer([0, suf], std, ob$0, json);
              caml_call2(Stdlib_buffer[21], oc, ob$0);
              return caml_call1(Stdlib_buffer[8], ob$0);
             },
             seq);
   }
   function seq_to_file(len, opt, std, file, st){
    if(opt) var sth = opt[1], suf = sth; else var suf = cst$9;
    var oc = caml_call1(Stdlib[60], file);
    try{
     seq_to_channel(0, len, [0, suf], std, oc, st);
     var _do_ = caml_call1(Stdlib[76], oc);
     return _do_;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[77], oc);
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function sort(x){
    if(typeof x !== "number"){
     var _di_ = x[1];
     if(726928361 <= _di_){
      if(848054398 === _di_){
       var l = x[2], _dj_ = caml_call2(Stdlib_list[21], sort, l);
       return [0, 848054398, caml_call1(Stdlib_list[9], _dj_)];
      }
      if(963043957 === _di_){
       var
        l$0 = x[2],
        _dk_ =
          caml_call2
           (Stdlib_list[21],
            function(param){
             var v = param[2], k = param[1];
             return [0, k, sort(v)];
            },
            l$0),
        l$1 = caml_call1(Stdlib_list[9], _dk_);
       return [0,
               963043957,
               caml_call2
                (Stdlib_list[57],
                 function(param, _dn_){
                  var b = _dn_[1], a = param[1];
                  return caml_call2(Stdlib_string[5], a, b);
                 },
                 l$1)];
      }
     }
     else if(708012133 === _di_){
      var _dl_ = x[2], match = _dl_[2];
      if(match){
       var v = match[1], k = _dl_[1], v$0 = sort(v);
       return v === v$0 ? x : [0, 708012133, [0, k, [0, v$0]]];
      }
     }
     else if(726928360 <= _di_){
      var l$2 = x[2], _dm_ = caml_call2(Stdlib_list[21], sort, l$2);
      return [0, 726928360, caml_call1(Stdlib_list[9], _dm_)];
     }
    }
    return x;
   }
   function pp_list(sep, ppx, out, l){
    function pp_sep(out, param){
     return caml_call3(Stdlib_format[126], out, _w_, sep);
    }
    return caml_call4(Stdlib_format[121], [0, pp_sep], ppx, out, l);
   }
   function is_atom(x){
    a:
    if(typeof x !== "number"){
     var _dh_ = x[1];
     if(737456202 <= _dh_){
      if(848054398 === _dh_){if(! x[2]) break a;}
      else if(963043957 > _dh_ || ! x[2]) break a;
     }
     else
      if(708012133 === _dh_){
       if(! x[2][2]) break a;
      }
      else if(726928360 > _dh_ || ! x[2]) break a;
     return 0;
    }
    return 1;
   }
   function format(inside_box, std, out, x){
    var x$0 = x;
    for(;;){
     if(typeof x$0 === "number")
      return caml_call2(Stdlib_format[13], out, cst_null$0);
     var _cK_ = x$0[1];
     if(708012133 > _cK_){
      if(3654863 <= _cK_){
       if(365180284 > _cK_){
        var x$6 = x$0[2], _cJ_ = caml_call1(Stdlib[33], x$6);
        return caml_call2(Stdlib_format[13], out, _cJ_);
       }
       var x$5 = x$0[2];
       if(std){
        var ob$0 = caml_call1(Stdlib_buffer[1], 20);
        write_std_float(ob$0, x$5);
        var s$0 = caml_call1(Stdlib_buffer[2], ob$0);
       }
       else{
        var ob = caml_call1(Stdlib_buffer[1], 20);
        write_float(ob, x$5);
        var s$0 = caml_call1(Stdlib_buffer[2], ob);
       }
       return caml_call2(Stdlib_format[13], out, s$0);
      }
      if(-752863768 <= _cK_){
       var s$1 = x$0[2];
       return caml_call2(Stdlib_format[13], out, s$1);
      }
      var s$2 = x$0[2], _cY_ = json_string_of_string(s$2);
      return caml_call2(Stdlib_format[13], out, _cY_);
     }
     if(726928360 === _cK_){
      var l = x$0[2];
      if(! std){
       if(0 === l) return caml_call2(Stdlib_format[13], out, cst$10);
       if(1 - inside_box) caml_call2(Stdlib_format[126], out, _x_);
       var
        _cL_ = 0,
        _cM_ = function(_c1_, _c2_){return format(_cL_, std, _c1_, _c2_);};
       caml_call4
        (Stdlib_format[126],
         out,
         _y_,
         function(_cZ_, _c0_){return pp_list(cst$11, _cM_, _cZ_, _c0_);},
         l);
       var _cN_ = 1 - inside_box;
       return _cN_ ? caml_call2(Stdlib_format[126], out, _z_) : _cN_;
      }
      var x$1 = [0, 848054398, l];
      x$0 = x$1;
     }
     else{
      if(848054398 <= _cK_){
       if(963043957 <= _cK_){
        var l$0 = x$0[2];
        if(! l$0) return caml_call2(Stdlib_format[13], out, cst$13);
        if(1 - inside_box) caml_call2(Stdlib_format[126], out, _A_);
        var
         _cO_ =
           function(out, param){
            var
             x = param[2],
             name = param[1],
             _dd_ = 1,
             _de_ = json_string_of_string(name);
            return caml_call5
                    (Stdlib_format[126],
                     out,
                     _J_,
                     _de_,
                     function(_df_, _dg_){return format(_dd_, std, _df_, _dg_);},
                     x);
           };
        caml_call4
         (Stdlib_format[126],
          out,
          _B_,
          function(_db_, _dc_){return pp_list(cst$12, _cO_, _db_, _dc_);},
          l$0);
        var _cP_ = 1 - inside_box;
        return _cP_ ? caml_call2(Stdlib_format[126], out, _C_) : _cP_;
       }
       var l$1 = x$0[2];
       if(! l$1) return caml_call2(Stdlib_format[13], out, cst$16);
       if(1 - inside_box) caml_call2(Stdlib_format[126], out, _D_);
       if(caml_call2(Stdlib_list[32], is_atom, l$1)){
        var
         _cQ_ = 0,
         _cR_ = function(_c7_, _c8_){return format(_cQ_, std, _c7_, _c8_);};
        caml_call4
         (Stdlib_format[126],
          out,
          _E_,
          function(_c5_, _c6_){return pp_list(cst$14, _cR_, _c5_, _c6_);},
          l$1);
       }
       else{
        var
         _cT_ = 0,
         _cU_ = function(_c$_, _da_){return format(_cT_, std, _c$_, _da_);};
        caml_call4
         (Stdlib_format[126],
          out,
          _G_,
          function(_c9_, _c__){return pp_list(cst$15, _cU_, _c9_, _c__);},
          l$1);
       }
       var _cS_ = 1 - inside_box;
       return _cS_ ? caml_call2(Stdlib_format[126], out, _F_) : _cS_;
      }
      if(737456202 <= _cK_){
       var x$2 = x$0[2];
       return caml_call2(Stdlib_format[23], out, x$2);
      }
      var _cV_ = x$0[2], match = _cV_[2], s = _cV_[1];
      if(match){
       var x$3 = match[1];
       if(! std){
        var op = json_string_of_string(s), _cW_ = 1;
        return caml_call5
                (Stdlib_format[126],
                 out,
                 _H_,
                 op,
                 function(_c3_, _c4_){return format(_cW_, std, _c3_, _c4_);},
                 x$3);
       }
       var
        representation = [0, -976970511, s],
        x$4 = [0, 848054398, [0, representation, [0, x$3, 0]]];
       x$0 = x$4;
      }
      else{
       if(! std){
        var _cX_ = json_string_of_string(s);
        return caml_call3(Stdlib_format[126], out, _I_, _cX_);
       }
       var representation$0 = [0, -976970511, s];
       x$0 = representation$0;
      }
     }
    }
   }
   function pp(opt, out, x){
    if(opt) var sth = opt[1], std = sth; else var std = 0;
    var _cG_ = 1;
    return caml_call4
            (Stdlib_format[126],
             out,
             _K_,
             function(_cH_, _cI_){return format(_cG_, std, _cH_, _cI_);},
             x);
   }
   function to_string$0(std, x){
    return caml_call3
            (Stdlib_format[130],
             _L_,
             function(_cE_, _cF_){return pp(std, _cE_, _cF_);},
             x);
   }
   function pp$0(fmt, param){
    if(typeof param === "number")
     return caml_call2(Stdlib_format[13], fmt, cst_Null);
    var _cD_ = param[1];
    if(708012133 <= _cD_){
     if(726928360 === _cD_){
      var tup = param[2];
      caml_call2(Stdlib_format[126], fmt, _N_);
      caml_call2(Stdlib_format[126], fmt, _O_);
      caml_call3
       (Stdlib_list[25],
        function(sep, e){
         if(sep) caml_call2(Stdlib_format[126], fmt, _P_);
         pp$0(fmt, e);
         return 1;
        },
        0,
        tup);
      caml_call2(Stdlib_format[126], fmt, _Q_);
      return caml_call2(Stdlib_format[126], fmt, _R_);
     }
     if(848054398 <= _cD_){
      if(963043957 <= _cD_){
       var xs = param[2];
       caml_call2(Stdlib_format[126], fmt, _S_);
       caml_call2(Stdlib_format[126], fmt, _T_);
       caml_call3
        (Stdlib_list[25],
         function(sep, param){
          var value = param[2], key = param[1];
          if(sep) caml_call2(Stdlib_format[126], fmt, _U_);
          caml_call2(Stdlib_format[126], fmt, _V_);
          caml_call3(Stdlib_format[126], fmt, _W_, key);
          caml_call2(Stdlib_format[126], fmt, _X_);
          pp$0(fmt, value);
          caml_call2(Stdlib_format[126], fmt, _Y_);
          return 1;
         },
         0,
         xs);
       caml_call2(Stdlib_format[126], fmt, _Z_);
       return caml_call2(Stdlib_format[126], fmt, ___);
      }
      var xs$0 = param[2];
      caml_call2(Stdlib_format[126], fmt, _$_);
      caml_call2(Stdlib_format[126], fmt, _aa_);
      caml_call3
       (Stdlib_list[25],
        function(sep, x){
         if(sep) caml_call2(Stdlib_format[126], fmt, _ab_);
         pp$0(fmt, x);
         return 1;
        },
        0,
        xs$0);
      caml_call2(Stdlib_format[126], fmt, _ac_);
      return caml_call2(Stdlib_format[126], fmt, _ad_);
     }
     if(737456202 <= _cD_){
      var x = param[2];
      caml_call2(Stdlib_format[126], fmt, _ae_);
      caml_call3(Stdlib_format[126], fmt, _af_, x);
      return caml_call2(Stdlib_format[126], fmt, _ag_);
     }
     var match = param[2], value = match[2], name = match[1];
     caml_call2(Stdlib_format[126], fmt, _ah_);
     caml_call2(Stdlib_format[126], fmt, _ai_);
     caml_call3(Stdlib_format[126], fmt, _aj_, name);
     caml_call2(Stdlib_format[126], fmt, _ak_);
     if(value){
      var x$0 = value[1];
      caml_call2(Stdlib_format[13], fmt, cst_Some);
      pp$0(fmt, x$0);
      caml_call2(Stdlib_format[13], fmt, cst$17);
     }
     else
      caml_call2(Stdlib_format[13], fmt, cst_None);
     caml_call2(Stdlib_format[126], fmt, _al_);
     return caml_call2(Stdlib_format[126], fmt, _am_);
    }
    if(3654863 <= _cD_){
     if(365180284 <= _cD_){
      var x$1 = param[2];
      caml_call2(Stdlib_format[126], fmt, _an_);
      caml_call3(Stdlib_format[126], fmt, _ao_, x$1);
      return caml_call2(Stdlib_format[126], fmt, _ap_);
     }
     var x$2 = param[2];
     caml_call2(Stdlib_format[126], fmt, _aq_);
     caml_call3(Stdlib_format[126], fmt, _ar_, x$2);
     return caml_call2(Stdlib_format[126], fmt, _as_);
    }
    if(-752863768 <= _cD_){
     var x$3 = param[2];
     caml_call2(Stdlib_format[126], fmt, _at_);
     caml_call3(Stdlib_format[126], fmt, _au_, x$3);
     return caml_call2(Stdlib_format[126], fmt, _av_);
    }
    var x$4 = param[2];
    caml_call2(Stdlib_format[126], fmt, _aw_);
    caml_call3(Stdlib_format[126], fmt, _ax_, x$4);
    return caml_call2(Stdlib_format[126], fmt, _ay_);
   }
   function show(x){return caml_call3(Stdlib_format[130], _az_, pp$0, x);}
   function equal(a, b){
    var a$0 = a, b$0 = b;
    for(;;){
     a:
     if(typeof a$0 === "number"){
      if(870828711 === a$0 && 870828711 === b$0) return 1;
     }
     else{
      var _cv_ = a$0[1];
      if(708012133 <= _cv_){
       if(737456203 <= _cv_){
        if(848054398 !== _cv_){
         if(963043957 !== _cv_) break a;
         if(typeof b$0 === "number") break a;
         if(963043957 !== b$0[1]) break a;
         var
          ys$0 = b$0[2],
          xs$0 = a$0[2],
          compare_keys =
            function(param, _cC_){
             var key = _cC_[1], key$0 = param[1];
             return caml_call2(Stdlib_string[5], key$0, key);
            },
          xs$1 = caml_call2(Stdlib_list[57], compare_keys, xs$0),
          ys$1 = caml_call2(Stdlib_list[57], compare_keys, ys$0);
         try{
          var
           result$0 =
             caml_call3
              (Stdlib_list[34],
               function(param, _cB_){
                var
                 value = _cB_[2],
                 key = _cB_[1],
                 value$0 = param[2],
                 key$0 = param[1];
                return key$0 === key ? equal(value$0, value) : 0;
               },
               xs$1,
               ys$1);
          return result$0;
         }
         catch(_cA_){
          var _cx_ = caml_wrap_exception(_cA_);
          if(_cx_[1] === Stdlib[6]) return 0;
          throw caml_maybe_attach_backtrace(_cx_, 0);
         }
        }
        if(typeof b$0 === "number") break a;
        if(848054398 !== b$0[1]) break a;
        var ys = b$0[2], xs = a$0[2];
       }
       else{
        if(726928360 !== _cv_){
         if(708012134 <= _cv_){
          if(737456202 > _cv_) break a;
          if(typeof b$0 === "number") break a;
          if(737456202 !== b$0[1]) break a;
          var b$1 = b$0[2], a$1 = a$0[2];
          return caml_equal(a$1, b$1);
         }
         if(typeof b$0 === "number") break a;
         if(708012133 !== b$0[1]) break a;
         var
          _cy_ = b$0[2],
          value = _cy_[2],
          name = _cy_[1],
          match = a$0[2],
          value$0 = match[2],
          name$0 = match[1];
         if(! caml_equal(name$0, name)) return 0;
         if(value$0){
          if(value){
           var y = value[1], x = value$0[1];
           a$0 = x;
           b$0 = y;
           continue;
          }
         }
         else if(! value) return 1;
         return 0;
        }
        if(typeof b$0 === "number") break a;
        if(726928360 !== b$0[1]) break a;
        var ys = b$0[2], xs = a$0[2];
       }
       try{
        var result = caml_call3(Stdlib_list[34], equal, xs, ys);
        return result;
       }
       catch(_cz_){
        var _cw_ = caml_wrap_exception(_cz_);
        if(_cw_[1] === Stdlib[6]) return 0;
        throw caml_maybe_attach_backtrace(_cw_, 0);
       }
      }
      if(-752863767 <= _cv_){
       if(3654863 === _cv_){
        if(typeof b$0 !== "number" && 3654863 === b$0[1]){
         var b$2 = b$0[2], a$2 = a$0[2];
         return caml_equal(a$2, b$2);
        }
       }
       else if
        (365180284 === _cv_ && typeof b$0 !== "number" && 365180284 === b$0[1]){var b$3 = b$0[2], a$3 = a$0[2]; return caml_equal(a$3, b$3);}
      }
      else
       if(-976970511 === _cv_){
        if(typeof b$0 !== "number" && -976970511 === b$0[1]){
         var b$4 = b$0[2], a$4 = a$0[2];
         return caml_equal(a$4, b$4);
        }
       }
       else if
        (-752863768 <= _cv_
         && typeof b$0 !== "number" && -752863768 === b$0[1]){
        var b$5 = b$0[2], a$5 = a$0[2];
        return caml_equal(a$5, b$5);
       }
     }
     return 0;
    }
   }
   function pretty_print(std, out, x){return pp(std, out, x);}
   function pretty_to_string(std, x){return to_string$0(std, x);}
   function pretty_to_channel(std, oc, x){
    var fmt = caml_call1(Stdlib_format[106], oc);
    return caml_call4
            (Stdlib_format[126],
             fmt,
             _M_,
             function(_ct_, _cu_){return pp(std, _ct_, _cu_);},
             x);
   }
   var
    from_channel = Stdlib_lexing[2],
    from_string = Stdlib_lexing[3],
    lexeme = Stdlib_lexing[8],
    sub_lexeme = Stdlib_lexing[16],
    sub_lexeme_char = Stdlib_lexing[18],
    _aA_ = [0, "lib/read.mll", 41, 13],
    _aB_ = [0, [11, "File ", [2, 0, [11, ", line", 0]]], "File %s, line"],
    _aC_ = [0, [11, "byte ", [4, 3, 0, 0, 0]], "byte %i"],
    _aD_ =
      [0,
       [2,
        0,
        [12, 32, [4, 3, 0, 0, [11, ", ", [2, 0, [11, ":\n", [2, 0, 0]]]]]]],
       "%s %i, %s:\n%s"],
    _aE_ =
      [0,
       [11, "bytes ", [4, 3, 0, 0, [12, 45, [4, 3, 0, 0, 0]]]],
       "bytes %i-%i"],
    cst_Line = "Line",
    _aF_ = [0, [2, 0, [11, cst$30, [2, 0, [12, 39, 0]]]], "%s '%s'"],
    _aG_ = [0, [2, 0, [11, cst$30, [2, 0, [2, 0, [12, 39, 0]]]]], "%s '%s%s'"];
   function hex$0(c){
    if(65 <= c){
     if(97 <= c){
      if(103 > c) return (c - 97 | 0) + 10 | 0;
     }
     else if(71 > c) return (c - 65 | 0) + 10 | 0;
    }
    else if(9 >= c - 48 >>> 0) return c - 48 | 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _aA_], 1);
   }
   function custom_error(descr, v, lexbuf){
    var
     offs = lexbuf[4] - 1 | 0,
     bol = v[3],
     pos1 = ((offs + lexbuf[5] | 0) - bol | 0) - 1 | 0,
     pos2 = caml_call2(Stdlib[17], pos1, (offs + lexbuf[6] | 0) - bol | 0),
     match = v[4];
    if(match)
     var s = match[1], file_line = caml_call2(Stdlib_printf[4], _aB_, s);
    else
     var file_line = cst_Line;
    var
     bytes =
       pos1 === pos2
        ? caml_call2(Stdlib_printf[4], _aC_, pos1 + 1 | 0)
        : caml_call3(Stdlib_printf[4], _aE_, pos1 + 1 | 0, pos2 + 1 | 0),
     msg = caml_call5(Stdlib_printf[4], _aD_, file_line, v[2], bytes, descr);
    return caml_call1(Yojson_Common[3], msg);
   }
   function lexer_error(descr, v, lexbuf){
    var _cs_ = caml_call1(lexeme, lexbuf);
    return custom_error
            (caml_call3(Stdlib_printf[4], _aF_, descr, _cs_), v, lexbuf);
   }
   function long_error(descr, v, lexbuf){
    var
     junk = caml_call1(lexeme, lexbuf),
     buf_size = 32,
     buf = caml_call1(Stdlib_buffer[1], buf_size);
    caml_call3(Yojson_Lexer_utils[4], buf, buf_size, lexbuf);
    var extra_junk = caml_call1(Stdlib_buffer[2], buf);
    return custom_error
            (caml_call4(Stdlib_printf[4], _aG_, descr, junk, extra_junk),
             v,
             lexbuf);
   }
   var
    _aJ_ = [0, 737456202, 1],
    _aK_ = [0, 737456202, 0],
    cst_Unexpected_end_of_input = cst_Unexpected_end_of_input$47,
    cst_Invalid_token = cst_Invalid_token$2,
    cst_Unexpected_end_of_input$0 = cst_Unexpected_end_of_input$47,
    cst_Unexpected_end_of_input$1 = cst_Unexpected_end_of_input$47,
    cst_Invalid_escape_sequence = "Invalid escape sequence",
    cst_Unexpected_end_of_input$2 = cst_Unexpected_end_of_input$47,
    cst_Invalid_low_surrogate_for_ =
      "Invalid low surrogate for code point beyond U+FFFF",
    cst_Missing_escape_sequence_re =
      "Missing escape sequence representing low surrogate for code point beyond U+FFFF",
    cst_Unexpected_end_of_input$3 = cst_Unexpected_end_of_input$47,
    cst_Invalid_string_literal = cst_Invalid_string_literal$2,
    cst_Unexpected_end_of_input$4 = cst_Unexpected_end_of_input$47,
    cst_Expected_or_but_found = cst_Expected_or_but_found$15,
    cst_Unexpected_end_of_input$5 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found = "Expected '<' but found",
    cst_Unexpected_end_of_input$6 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$0 = cst_Expected_but_found$15,
    cst_Unexpected_end_of_input$7 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$1 = "Expected ',' but found",
    cst_Unexpected_end_of_input$8 = cst_Unexpected_end_of_input$47,
    cst_Expected_or_but_found$0 = "Expected '<', '\"' or '[' but found",
    cst_Unexpected_end_of_input$9 = cst_Unexpected_end_of_input$47,
    cst_Unterminated_comment = cst_Unterminated_comment$1,
    cst_Expected_null_but_found = "Expected 'null' but found",
    cst_Unexpected_end_of_input$10 = cst_Unexpected_end_of_input$47,
    cst_Expected_true_or_false_but = "Expected 'true' or 'false' but found",
    cst_Unexpected_end_of_input$11 = cst_Unexpected_end_of_input$47,
    cst_Int_overflow = cst_Int_overflow$1,
    cst_Int_overflow$0 = cst_Int_overflow$1,
    cst_Expected_an_integer_but_fo =
      "Expected an integer but found a string that doesn't even represent an integer",
    cst_Expected_integer_but_found = "Expected integer but found",
    cst_Unexpected_end_of_input$12 = cst_Unexpected_end_of_input$47,
    cst_Int32_overflow = cst_Int32_overflow$1,
    cst_Expected_an_int32_but_foun =
      "Expected an int32 but found a string that doesn't even represent an integer",
    cst_Expected_int32_but_found = "Expected int32 but found",
    cst_Unexpected_end_of_input$13 = cst_Unexpected_end_of_input$47,
    cst_Int32_overflow$0 = cst_Int32_overflow$1,
    cst_Expected_an_int64_but_foun =
      "Expected an int64 but found a string that doesn't even represent an integer",
    cst_Expected_int64_but_found = "Expected int64 but found",
    cst_Unexpected_end_of_input$14 = cst_Unexpected_end_of_input$47,
    cst_Expected_a_number_but_foun =
      "Expected a number but found a string that doesn't even represent a number",
    cst_Expected_number_but_found = "Expected number but found",
    cst_Unexpected_end_of_input$15 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$2 = "Expected '\"' but found",
    cst_Unexpected_end_of_input$16 = cst_Unexpected_end_of_input$47,
    cst_Expected_string_or_identif = cst_Expected_string_or_identif$3,
    cst_Unexpected_end_of_input$17 = cst_Unexpected_end_of_input$47,
    cst_Expected_string_or_identif$0 = cst_Expected_string_or_identif$3,
    cst_Unexpected_end_of_input$18 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$3 = cst_Expected_but_found$16,
    cst_Unexpected_end_of_input$19 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$4 = cst_Expected_but_found$16,
    cst_Unexpected_end_of_input$20 = cst_Unexpected_end_of_input$47,
    cst_Expected_or_but_found$1 = cst_Expected_or_but_found$16,
    cst_Unexpected_end_of_input$21 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$5 = cst_Expected_but_found$17,
    cst_Unexpected_end_of_input$22 = cst_Unexpected_end_of_input$47,
    cst_Expected_or_but_found$2 = "Expected ')' or '' but found",
    cst_Expected_or_but_found$3 = "Expected ']' or '' but found",
    cst_Expected_or_but_found$4 = cst_Expected_or_but_found$17,
    cst_Unexpected_end_of_input$23 = cst_Unexpected_end_of_input$47,
    cst_Expected_or_but_found$5 = cst_Expected_or_but_found$16,
    cst_Expected_or_but_found$6 = cst_Expected_or_but_found$17,
    cst_Expected_or_but_found$7 = cst_Expected_or_but_found$17,
    cst_Unexpected_end_of_input$24 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$6 = cst_Expected_but_found$18,
    cst_Unexpected_end_of_input$25 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$7 = cst_Expected_but_found$18,
    cst_Unexpected_end_of_input$26 = cst_Unexpected_end_of_input$47,
    cst_Expected_or_but_found$8 = cst_Expected_or_but_found$18,
    cst_Unexpected_end_of_input$27 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$8 = cst_Expected_but_found$19,
    cst_Unexpected_end_of_input$28 = cst_Unexpected_end_of_input$47,
    cst_Expected_or_but_found$9 = "Expected '(' or '[' but found",
    cst_Unexpected_end_of_input$29 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$9 = "Expected '(' but found",
    cst_Unexpected_end_of_input$30 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$10 = cst_Expected_but_found$17,
    cst_Unexpected_end_of_input$31 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$11 = cst_Expected_but_found$16,
    cst_Unexpected_end_of_input$32 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$12 = "Expected ']' but found",
    cst_Unexpected_end_of_input$33 = cst_Unexpected_end_of_input$47,
    cst_Unexpected_end_of_input$34 = cst_Unexpected_end_of_input$47,
    cst_Invalid_token$0 = cst_Invalid_token$2,
    cst_Invalid_string_literal$0 = cst_Invalid_string_literal$2,
    cst_Unexpected_end_of_input$35 = cst_Unexpected_end_of_input$47,
    cst_Expected_or_but_found$10 = cst_Expected_or_but_found$15,
    cst_Unexpected_end_of_input$36 = cst_Unexpected_end_of_input$47,
    cst_Expected_string_or_identif$1 = cst_Expected_string_or_identif$3,
    cst_Unexpected_end_of_input$37 = cst_Unexpected_end_of_input$47,
    cst_Unexpected_end_of_input$38 = cst_Unexpected_end_of_input$47,
    cst_Invalid_token$1 = cst_Invalid_token$2,
    cst_Invalid_string_literal$1 = cst_Invalid_string_literal$2,
    cst_Unexpected_end_of_input$39 = cst_Unexpected_end_of_input$47,
    cst_Expected_or_but_found$11 = cst_Expected_or_but_found$15,
    cst_Unexpected_end_of_input$40 = cst_Unexpected_end_of_input$47,
    cst_Expected_string_or_identif$2 = cst_Expected_string_or_identif$3,
    cst_Unexpected_end_of_input$41 = cst_Unexpected_end_of_input$47,
    cst_Expected_or_but_found$12 = cst_Expected_or_but_found$18,
    cst_Unexpected_end_of_input$42 = cst_Unexpected_end_of_input$47,
    cst_Expected_or_but_found$13 = cst_Expected_or_but_found$16,
    cst_Unexpected_end_of_input$43 = cst_Unexpected_end_of_input$47,
    cst_Expected_or_but_found$14 = cst_Expected_or_but_found$17,
    cst_Unexpected_end_of_input$44 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$13 = cst_Expected_but_found$19,
    cst_Unexpected_end_of_input$45 = cst_Unexpected_end_of_input$47,
    cst_Expected_but_found$14 = cst_Expected_but_found$15,
    cst_Unexpected_end_of_input$46 = cst_Unexpected_end_of_input$47,
    cst_Unterminated_comment$0 = cst_Unterminated_comment$1,
    cst_Expected_two_objects_check = "Expected two objects, check inputs",
    cst_Can_t_convert_each_element =
      "Can't convert each element of non-array type ",
    cst_Expected_string_or_null_go = "Expected string or null, got ",
    cst_Expected_string_got = "Expected string, got ",
    cst_Expected_array_got = "Expected array, got ",
    cst_Expected_int_or_null_got = "Expected int or null, got ",
    cst_Expected_int_got = "Expected int, got ",
    cst_Expected_float_or_null_got = "Expected float or null, got ",
    cst_Expected_float_got = "Expected float, got ",
    cst_Expected_number_or_null_go = "Expected number or null, got ",
    cst_Expected_number_got = "Expected number, got ",
    cst_Expected_bool_or_null_got = "Expected bool or null, got ",
    cst_Expected_bool_got = "Expected bool, got ",
    cst_Expected_object_got = "Expected object, got ",
    cst_Can_t_map_function_over_no = "Can't map function over non-array type ",
    cst_out_of_bounds = " out of bounds",
    cst_Index = "Index ",
    cst_of_non_array_type = " of non-array type ",
    cst_Can_t_get_index = "Can't get index ",
    cst_of_non_object_type = "' of non-object type ",
    cst_Can_t_get_member = "Can't get member '",
    cst_null$1 = cst_null$2,
    cst_object = "object",
    cst_floatlit = "floatlit",
    cst_array = "array",
    cst_tuple = "tuple",
    cst_bool = "bool",
    cst_variant = "variant",
    cst_float = "float",
    cst_int = "int",
    cst_string = "string",
    cst_intlit = "intlit",
    cst_Blank_input_data$0 = cst_Blank_input_data$1,
    cst_Blank_input_data = cst_Blank_input_data$1,
    cst_Junk_after_end_of_JSON_val = "Junk after end of JSON value:",
    cst_Int8_overflow = "Int8 overflow",
    cst_Yojson_Safe_Int_overflow = "Yojson__Safe.Int_overflow",
    cst_Yojson_Safe_Finally = "Yojson__Safe.Finally",
    cst_Yojson_Safe_Util_Type_erro = "Yojson__Safe.Util.Type_error",
    cst_Yojson_Safe_Util_Undefined = "Yojson__Safe.Util.Undefined",
    _aH_ = 0 === (Stdlib[20] % 10 | 0) ? 0 : 1,
    min10 = (Stdlib[20] / 10 | 0) - _aH_ | 0,
    _aI_ = 0 === (Stdlib[19] % 10 | 0) ? 0 : 1,
    max10 = (Stdlib[19] / 10 | 0) + _aI_ | 0,
    Int_overflow = [248, cst_Yojson_Safe_Int_overflow, caml_fresh_oo_id(0)];
   function extract_positive_int(lexbuf){
    var
     start = lexbuf[5],
     stop = lexbuf[6],
     s = lexbuf[2],
     n = [0, 0],
     _cq_ = stop - 1 | 0;
    if(_cq_ >= start){
     var i = start;
     for(;;){
      if(max10 <= n[1]) throw caml_maybe_attach_backtrace(Int_overflow, 1);
      var c = caml_bytes_get(s, i);
      n[1] = (10 * n[1] | 0) + (c - 48 | 0) | 0;
      var _cr_ = i + 1 | 0;
      if(_cq_ === i) break;
      i = _cr_;
     }
    }
    if(0 <= n[1]) return n[1];
    throw caml_maybe_attach_backtrace(Int_overflow, 1);
   }
   function extract_negative_int(lexbuf){
    var
     start = lexbuf[5] + 1 | 0,
     stop = lexbuf[6],
     s = lexbuf[2],
     n = [0, 0],
     _co_ = stop - 1 | 0;
    if(_co_ >= start){
     var i = start;
     for(;;){
      if(n[1] <= min10) throw caml_maybe_attach_backtrace(Int_overflow, 1);
      var c = caml_bytes_get(s, i);
      n[1] = (10 * n[1] | 0) - (c - 48 | 0) | 0;
      var _cp_ = i + 1 | 0;
      if(_co_ === i) break;
      i = _cp_;
     }
    }
    if(0 < n[1]) throw caml_maybe_attach_backtrace(Int_overflow, 1);
    return n[1];
   }
   function newline(v, lexbuf){
    v[2] = v[2] + 1 | 0;
    v[3] = lexbuf[4] + lexbuf[6] | 0;
   }
   function add_lexeme(buf, lexbuf){
    var len = lexbuf[6] - lexbuf[5] | 0;
    return caml_call4(Stdlib_buffer[17], buf, lexbuf[2], lexbuf[5], len);
   }
   function read_json(v, lexbuf){
    for(;;){
     var ocaml_lex_state = 0;
     for(;;){
      var
       ocaml_lex_state$0 =
         caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
      if(19 >= ocaml_lex_state$0 >>> 0) break;
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state = ocaml_lex_state$0;
     }
     switch(ocaml_lex_state$0){
       case 0:
        return _aJ_;
       case 1:
        return _aK_;
       case 2:
        return 870828711;
       case 3:
        return [0, 365180284, Stdlib[24]];
       case 4:
        return [0, 365180284, Stdlib[22]];
       case 5:
        return [0, 365180284, Stdlib[23]];
       case 6:
        caml_call1(Stdlib_buffer[8], v[1]);
        return [0, -976970511, finish_string(v, lexbuf)];
       case 7:
        try{
         var _b9_ = [0, 3654863, extract_positive_int(lexbuf)];
         return _b9_;
        }
        catch(_cn_){
         var _b8_ = caml_wrap_exception(_cn_);
         if(_b8_ === Int_overflow)
          return [0, -752863768, caml_call1(lexeme, lexbuf)];
         throw caml_maybe_attach_backtrace(_b8_, 0);
        }
       case 8:
        try{
         var _b$_ = [0, 3654863, extract_negative_int(lexbuf)];
         return _b$_;
        }
        catch(_cm_){
         var _b__ = caml_wrap_exception(_cm_);
         if(_b__ === Int_overflow)
          return [0, -752863768, caml_call1(lexeme, lexbuf)];
         throw caml_maybe_attach_backtrace(_b__, 0);
        }
       case 9:
        return [0,
                365180284,
                caml_float_of_string(caml_call1(lexeme, lexbuf))];
       case 10:
        var acc = [0, 0];
        try{
         read_space(v, lexbuf);
         read_object_end(lexbuf);
         var field_name = read_ident(v, lexbuf);
         read_space(v, lexbuf);
         read_colon(v, lexbuf);
         read_space(v, lexbuf);
         var _cb_ = acc[1];
         acc[1] = [0, [0, field_name, read_json(v, lexbuf)], _cb_];
         for(;;){
          read_space(v, lexbuf);
          read_object_sep(v, lexbuf);
          read_space(v, lexbuf);
          var field_name$0 = read_ident(v, lexbuf);
          read_space(v, lexbuf);
          read_colon(v, lexbuf);
          read_space(v, lexbuf);
          var _cc_ = acc[1];
          acc[1] = [0, [0, field_name$0, read_json(v, lexbuf)], _cc_];
         }
        }
        catch(_cl_){
         var _ca_ = caml_wrap_exception(_cl_);
         if(_ca_ === Yojson_Common[7])
          return [0, 963043957, caml_call1(Stdlib_list[9], acc[1])];
         throw caml_maybe_attach_backtrace(_ca_, 0);
        }
        break;
       case 11:
        var acc$0 = [0, 0];
        try{
         read_space(v, lexbuf);
         read_array_end(lexbuf);
         var _ce_ = acc$0[1];
         acc$0[1] = [0, read_json(v, lexbuf), _ce_];
         for(;;){
          read_space(v, lexbuf);
          read_array_sep(v, lexbuf);
          read_space(v, lexbuf);
          var _cf_ = acc$0[1];
          acc$0[1] = [0, read_json(v, lexbuf), _cf_];
         }
        }
        catch(_ck_){
         var _cd_ = caml_wrap_exception(_ck_);
         if(_cd_ === Yojson_Common[6])
          return [0, 848054398, caml_call1(Stdlib_list[9], acc$0[1])];
         throw caml_maybe_attach_backtrace(_cd_, 0);
        }
        break;
       case 12:
        var acc$1 = [0, 0];
        try{
         read_space(v, lexbuf);
         read_tuple_end(lexbuf);
         var _ch_ = acc$1[1];
         acc$1[1] = [0, read_json(v, lexbuf), _ch_];
         for(;;){
          read_space(v, lexbuf);
          read_tuple_sep(v, lexbuf);
          read_space(v, lexbuf);
          var _ci_ = acc$1[1];
          acc$1[1] = [0, read_json(v, lexbuf), _ci_];
         }
        }
        catch(_cj_){
         var _cg_ = caml_wrap_exception(_cj_);
         if(_cg_ === Yojson_Common[8])
          return [0, 726928360, caml_call1(Stdlib_list[9], acc$1[1])];
         throw caml_maybe_attach_backtrace(_cg_, 0);
        }
        break;
       case 13:
        read_space(v, lexbuf);
        var cons = read_ident(v, lexbuf);
        read_space(v, lexbuf);
        return [0, 708012133, [0, cons, finish_variant(v, lexbuf)]];
       case 14: break;
       case 15:
        finish_comment(v, lexbuf); break;
       case 16:
        newline(v, lexbuf); break;
       case 17: break;
       case 18:
        return custom_error(cst_Unexpected_end_of_input, v, lexbuf);
       default: return long_error(cst_Invalid_token, v, lexbuf);
     }
    }
   }
   function finish_string(v, lexbuf){
    for(;;){
     var ocaml_lex_state = 58;
     for(;;){
      var
       ocaml_lex_state$0 =
         caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
      if(3 >= ocaml_lex_state$0 >>> 0) break;
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state = ocaml_lex_state$0;
     }
     switch(ocaml_lex_state$0){
       case 0:
        return caml_call1(Stdlib_buffer[2], v[1]);
       case 1:
        finish_escaped_char(v, lexbuf); break;
       case 2:
        add_lexeme(v[1], lexbuf); break;
       default: return custom_error(cst_Unexpected_end_of_input$0, v, lexbuf);
     }
    }
   }
   function map_string(v, f, lexbuf){
    for(;;){
     var ocaml_lex_state = 63;
     for(;;){
      var
       ocaml_lex_state$0 =
         caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
      if(3 >= ocaml_lex_state$0 >>> 0) break;
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state = ocaml_lex_state$0;
     }
     switch(ocaml_lex_state$0){
       case 0:
        var b = v[1], _b7_ = caml_call1(Stdlib_buffer[7], b);
        return caml_call3(f, caml_call1(Stdlib_buffer[2], b), 0, _b7_);
       case 1:
        finish_escaped_char(v, lexbuf); break;
       case 2:
        add_lexeme(v[1], lexbuf); break;
       default: return custom_error(cst_Unexpected_end_of_input$1, v, lexbuf);
     }
    }
   }
   function finish_escaped_char(v, lexbuf){
    var ocaml_lex_state = 68;
    for(;;){
     var
      ocaml_lex_state$1 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(8 >= ocaml_lex_state$1 >>> 0) break;
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$1;
    }
    switch(ocaml_lex_state$1){
      case 0:
       var c = caml_call2(sub_lexeme_char, lexbuf, lexbuf[5]);
       return caml_call2(Stdlib_buffer[10], v[1], c);
      case 1:
       return caml_call2(Stdlib_buffer[10], v[1], 8);
      case 2:
       return caml_call2(Stdlib_buffer[10], v[1], 12);
      case 3:
       return caml_call2(Stdlib_buffer[10], v[1], 10);
      case 4:
       return caml_call2(Stdlib_buffer[10], v[1], 13);
      case 5:
       return caml_call2(Stdlib_buffer[10], v[1], 9);
      case 6:
       var
        a = caml_call2(sub_lexeme_char, lexbuf, lexbuf[5] + 1 | 0),
        b = caml_call2(sub_lexeme_char, lexbuf, lexbuf[5] + 2 | 0),
        c$0 = caml_call2(sub_lexeme_char, lexbuf, lexbuf[5] + 3 | 0),
        d = caml_call2(sub_lexeme_char, lexbuf, lexbuf[5] + 4 | 0),
        _b1_ = hex$0(d),
        _b2_ = hex$0(c$0) << 4,
        _b3_ = hex$0(b) << 8,
        x = hex$0(a) << 12 | _b3_ | _b2_ | _b1_;
       if(55296 <= x && 56319 >= x){
        var ocaml_lex_state$0 = 82;
        for(;;){
         var
          ocaml_lex_state$2 =
            caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
         if(2 >= ocaml_lex_state$2 >>> 0) break;
         caml_call1(lexbuf[1], lexbuf);
         ocaml_lex_state$0 = ocaml_lex_state$2;
        }
        switch(ocaml_lex_state$2){
          case 0:
           var
            a$0 = caml_call2(sub_lexeme_char, lexbuf, lexbuf[5] + 2 | 0),
            b$0 = caml_call2(sub_lexeme_char, lexbuf, lexbuf[5] + 3 | 0),
            c$1 = caml_call2(sub_lexeme_char, lexbuf, lexbuf[5] + 4 | 0),
            d$0 = caml_call2(sub_lexeme_char, lexbuf, lexbuf[5] + 5 | 0),
            _b4_ = hex$0(d$0),
            _b5_ = hex$0(c$1) << 4,
            _b6_ = hex$0(b$0) << 8,
            y = hex$0(a$0) << 12 | _b6_ | _b5_ | _b4_;
           if(56320 <= y && 57343 >= y)
            return caml_call3(Yojson_Codec[2], v[1], x, y);
           return long_error(cst_Invalid_low_surrogate_for_, v, lexbuf);
          case 1:
           return long_error(cst_Missing_escape_sequence_re, v, lexbuf);
          default:
           return custom_error(cst_Unexpected_end_of_input$3, v, lexbuf);
        }
       }
       return caml_call2(Yojson_Codec[1], v[1], x);
      case 7:
       return long_error(cst_Invalid_escape_sequence, v, lexbuf);
      default: return custom_error(cst_Unexpected_end_of_input$2, v, lexbuf);
    }
   }
   function finish_stringlit(v, lexbuf){
    var ocaml_lex_state = 91;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         var
          len = lexbuf[6] - lexbuf[5] | 0,
          s = runtime.caml_create_bytes(len + 1 | 0);
         runtime.caml_bytes_set(s, 0, 34);
         caml_call5(Stdlib_bytes[11], lexbuf[2], lexbuf[5], s, 1, len);
         return caml_call1(Stdlib_bytes[6], s);
        case 1:
         return long_error(cst_Invalid_string_literal, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$4, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function finish_variant(v, lexbuf){
    var ocaml_lex_state = 102;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         var x = read_json(v, lexbuf);
         read_space(v, lexbuf);
         read_gt(v, lexbuf);
         return [0, x];
        case 1:
         return 0;
        case 2:
         return long_error(cst_Expected_or_but_found, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$5, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_lt(v, lexbuf){
    var ocaml_lex_state = 107;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return long_error(cst_Expected_but_found, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$6, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_gt(v, lexbuf){
    var ocaml_lex_state = 111;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return long_error(cst_Expected_but_found$0, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$7, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_comma(v, lexbuf){
    var ocaml_lex_state = 115;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return long_error(cst_Expected_but_found$1, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$8, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function start_any_variant(v, lexbuf){
    var ocaml_lex_state = 119;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(4 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return -154522342;
        case 1:
         caml_call1(Stdlib_buffer[8], v[1]); return -589953938;
        case 2:
         return -124528282;
        case 3:
         return long_error(cst_Expected_or_but_found$0, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$9, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function finish_comment(v, lexbuf){
    for(;;){
     var ocaml_lex_state = 125;
     for(;;){
      var
       ocaml_lex_state$0 =
         caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
      if(3 >= ocaml_lex_state$0 >>> 0) break;
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state = ocaml_lex_state$0;
     }
     switch(ocaml_lex_state$0){
       case 0:
        return 0;
       case 1:
        return long_error(cst_Unterminated_comment, v, lexbuf);
       case 2:
        newline(v, lexbuf); break;
     }
    }
   }
   function read_eof(lexbuf){
    var ocaml_lex_state = 131;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(0 === ocaml_lex_state$0) return 1;
     if(1 === ocaml_lex_state$0) return 0;
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_space(v, lexbuf){
    for(;;){
     var ocaml_lex_state = 133;
     for(;;){
      var
       ocaml_lex_state$0 =
         caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
      if(4 >= ocaml_lex_state$0 >>> 0) break;
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state = ocaml_lex_state$0;
     }
     switch(ocaml_lex_state$0){
       case 0:
        newline(v, lexbuf); break;
       case 1:
        finish_comment(v, lexbuf); break;
       case 2:
        newline(v, lexbuf); break;
       case 3: break;
       default: return 0;
     }
    }
   }
   function read_null(v, lexbuf){
    var ocaml_lex_state = 140;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return long_error(cst_Expected_null_but_found, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$10, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_null_if_possible(v, lexbuf){
    var ocaml_lex_state = 147;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(0 === ocaml_lex_state$0) return 1;
     if(1 === ocaml_lex_state$0) return 0;
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_bool(v, lexbuf){
    var ocaml_lex_state = 152;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(5 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 1;
        case 1:
         return 0;
        case 2:
         return 1;
        case 3:
         return 0;
        case 4:
         return long_error(cst_Expected_true_or_false_but, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$11, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_int(v, lexbuf){
    var ocaml_lex_state = 176;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(4 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         try{var _bU_ = extract_positive_int(lexbuf); return _bU_;}
         catch(_b0_){
          var _bT_ = caml_wrap_exception(_b0_);
          if(_bT_ === Int_overflow)
           return lexer_error(cst_Int_overflow, v, lexbuf);
          throw caml_maybe_attach_backtrace(_bT_, 0);
         }
        case 1:
         try{var _bW_ = extract_negative_int(lexbuf); return _bW_;}
         catch(_bZ_){
          var _bV_ = caml_wrap_exception(_bZ_);
          if(_bV_ === Int_overflow)
           return lexer_error(cst_Int_overflow$0, v, lexbuf);
          throw caml_maybe_attach_backtrace(_bV_, 0);
         }
        case 2:
         caml_call1(Stdlib_buffer[8], v[1]);
         var s = finish_string(v, lexbuf);
         try{var _bX_ = caml_int_of_string(s); return _bX_;}
         catch(_bY_){
          return custom_error(cst_Expected_an_integer_but_fo, v, lexbuf);
         }
        case 3:
         return long_error(cst_Expected_integer_but_found, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$12, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_int32(v, lexbuf){
    var ocaml_lex_state = 185;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         try{
          var _bP_ = caml_int_of_string(caml_call1(lexeme, lexbuf));
          return _bP_;
         }
         catch(_bS_){return lexer_error(cst_Int32_overflow, v, lexbuf);}
        case 1:
         caml_call1(Stdlib_buffer[8], v[1]);
         var s = finish_string(v, lexbuf);
         try{var _bQ_ = caml_int_of_string(s); return _bQ_;}
         catch(_bR_){
          return custom_error(cst_Expected_an_int32_but_foun, v, lexbuf);
         }
        case 2:
         return long_error(cst_Expected_int32_but_found, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$13, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_int64(v, lexbuf){
    var ocaml_lex_state = 192;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         try{
          var _bL_ = caml_int64_of_string(caml_call1(lexeme, lexbuf));
          return _bL_;
         }
         catch(_bO_){return lexer_error(cst_Int32_overflow$0, v, lexbuf);}
        case 1:
         caml_call1(Stdlib_buffer[8], v[1]);
         var s = finish_string(v, lexbuf);
         try{var _bM_ = caml_int64_of_string(s); return _bM_;}
         catch(_bN_){
          return custom_error(cst_Expected_an_int64_but_foun, v, lexbuf);
         }
        case 2:
         return long_error(cst_Expected_int64_but_found, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$14, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_number(v, lexbuf){
    var ocaml_lex_state = 199;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(6 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return Stdlib[24];
        case 1:
         return Stdlib[22];
        case 2:
         return Stdlib[23];
        case 3:
         return caml_float_of_string(caml_call1(lexeme, lexbuf));
        case 4:
         caml_call1(Stdlib_buffer[8], v[1]);
         var s = finish_string(v, lexbuf);
         try{var _bJ_ = caml_float_of_string(s); return _bJ_;}
         catch(_bK_){
          return s !== cst_Infinity$4
                  ? s
                    !== cst_Infinity$3
                    ? s
                      !== cst_NaN$1
                      ? custom_error(cst_Expected_a_number_but_foun, v, lexbuf)
                      : Stdlib[24]
                    : Stdlib[22]
                  : Stdlib[23];
         }
        case 5:
         return long_error(cst_Expected_number_but_found, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$15, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_string(v, lexbuf){
    var ocaml_lex_state = 233;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         caml_call1(Stdlib_buffer[8], v[1]); return finish_string(v, lexbuf);
        case 1:
         return long_error(cst_Expected_but_found$2, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$16, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_ident(v, lexbuf){
    var ocaml_lex_state = 237;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         caml_call1(Stdlib_buffer[8], v[1]); return finish_string(v, lexbuf);
        case 1:
         var s = caml_call3(sub_lexeme, lexbuf, lexbuf[5], lexbuf[6]);
         return s;
        case 2:
         return long_error(cst_Expected_string_or_identif, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$17, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function map_ident(v, f, lexbuf){
    var ocaml_lex_state = 242;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         caml_call1(Stdlib_buffer[8], v[1]); return map_string(v, f, lexbuf);
        case 1:
         var len = lexbuf[6] - lexbuf[5] | 0;
         return caml_call3
                 (f,
                  caml_call3(Stdlib_bytes[8], lexbuf[2], lexbuf[5], len),
                  0,
                  len);
        case 2:
         return long_error(cst_Expected_string_or_identif$0, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$18, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_sequence(read_cell, init_acc, v, lexbuf){
    var ocaml_lex_state = 247;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0) break;
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
    switch(ocaml_lex_state$0){
      case 0:
       var acc = [0, init_acc];
       try{
        read_space(v, lexbuf);
        read_array_end(lexbuf);
        acc[1] = caml_call3(read_cell, acc[1], v, lexbuf);
        for(;;){
         read_space(v, lexbuf);
         read_array_sep(v, lexbuf);
         read_space(v, lexbuf);
         acc[1] = caml_call3(read_cell, acc[1], v, lexbuf);
        }
       }
       catch(_bI_){
        var _bH_ = caml_wrap_exception(_bI_);
        if(_bH_ === Yojson_Common[6]) return acc[1];
        throw caml_maybe_attach_backtrace(_bH_, 0);
       }
       break;
      case 1:
       return long_error(cst_Expected_but_found$3, v, lexbuf);
      default: return custom_error(cst_Unexpected_end_of_input$19, v, lexbuf);
    }
   }
   function read_list_rev(read_cell, v, lexbuf){
    var ocaml_lex_state = 251;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0) break;
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
    switch(ocaml_lex_state$0){
      case 0:
       var acc = [0, 0];
       try{
        read_space(v, lexbuf);
        read_array_end(lexbuf);
        var _bE_ = acc[1];
        acc[1] = [0, caml_call2(read_cell, v, lexbuf), _bE_];
        for(;;){
         read_space(v, lexbuf);
         read_array_sep(v, lexbuf);
         read_space(v, lexbuf);
         var _bF_ = acc[1];
         acc[1] = [0, caml_call2(read_cell, v, lexbuf), _bF_];
        }
       }
       catch(_bG_){
        var _bD_ = caml_wrap_exception(_bG_);
        if(_bD_ === Yojson_Common[6]) return acc[1];
        throw caml_maybe_attach_backtrace(_bD_, 0);
       }
       break;
      case 1:
       return long_error(cst_Expected_but_found$4, v, lexbuf);
      default: return custom_error(cst_Unexpected_end_of_input$20, v, lexbuf);
    }
   }
   function read_array_end(lexbuf){
    var ocaml_lex_state = 255;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(0 === ocaml_lex_state$0)
      throw caml_maybe_attach_backtrace(Yojson_Common[6], 1);
     if(1 === ocaml_lex_state$0) return 0;
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_array_sep(v, lexbuf){
    var ocaml_lex_state = 257;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         throw caml_maybe_attach_backtrace(Yojson_Common[6], 1);
        case 2:
         return long_error(cst_Expected_or_but_found$1, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$21, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_tuple(read_cell, init_acc, v, lexbuf){
    var ocaml_lex_state = 262;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0) break;
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
    switch(ocaml_lex_state$0){
      case 0:
       var pos = [0, 0], acc = [0, init_acc];
       try{
        read_space(v, lexbuf);
        read_tuple_end(lexbuf);
        acc[1] = caml_call4(read_cell, pos[1], acc[1], v, lexbuf);
        pos[1]++;
        for(;;){
         read_space(v, lexbuf);
         read_tuple_sep(v, lexbuf);
         read_space(v, lexbuf);
         acc[1] = caml_call4(read_cell, pos[1], acc[1], v, lexbuf);
         pos[1]++;
        }
       }
       catch(_bC_){
        var _bB_ = caml_wrap_exception(_bC_);
        if(_bB_ === Yojson_Common[8]) return acc[1];
        throw caml_maybe_attach_backtrace(_bB_, 0);
       }
       break;
      case 1:
       return long_error(cst_Expected_but_found$5, v, lexbuf);
      default: return custom_error(cst_Unexpected_end_of_input$22, v, lexbuf);
    }
   }
   function read_tuple_end(lexbuf){
    var ocaml_lex_state = 266;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(0 === ocaml_lex_state$0)
      throw caml_maybe_attach_backtrace(Yojson_Common[8], 1);
     if(1 === ocaml_lex_state$0) return 0;
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_tuple_end2(v, std, lexbuf){
    var ocaml_lex_state = 268;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         if(std) return long_error(cst_Expected_or_but_found$2, v, lexbuf);
         throw caml_maybe_attach_backtrace(Yojson_Common[8], 1);
        case 1:
         if(std) throw caml_maybe_attach_backtrace(Yojson_Common[8], 1);
         return long_error(cst_Expected_or_but_found$3, v, lexbuf);
        default: return 0;
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_tuple_sep(v, lexbuf){
    var ocaml_lex_state = 271;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         throw caml_maybe_attach_backtrace(Yojson_Common[8], 1);
        case 2:
         return long_error(cst_Expected_or_but_found$4, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$23, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_tuple_sep2(v, std, lexbuf){
    var ocaml_lex_state = 276;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(4 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         if(std) return long_error(cst_Expected_or_but_found$5, v, lexbuf);
         throw caml_maybe_attach_backtrace(Yojson_Common[8], 1);
        case 2:
         if(std) throw caml_maybe_attach_backtrace(Yojson_Common[8], 1);
         return long_error(cst_Expected_or_but_found$6, v, lexbuf);
        case 3:
         return long_error(cst_Expected_or_but_found$7, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$24, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_abstract_fields(read_key, read_field, init_acc, v, lexbuf){
    var ocaml_lex_state = 282;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0) break;
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
    switch(ocaml_lex_state$0){
      case 0:
       var acc = [0, init_acc];
       try{
        read_space(v, lexbuf);
        read_object_end(lexbuf);
        var field_name = caml_call2(read_key, v, lexbuf);
        read_space(v, lexbuf);
        read_colon(v, lexbuf);
        read_space(v, lexbuf);
        acc[1] = caml_call4(read_field, acc[1], field_name, v, lexbuf);
        for(;;){
         read_space(v, lexbuf);
         read_object_sep(v, lexbuf);
         read_space(v, lexbuf);
         var field_name$0 = caml_call2(read_key, v, lexbuf);
         read_space(v, lexbuf);
         read_colon(v, lexbuf);
         read_space(v, lexbuf);
         acc[1] = caml_call4(read_field, acc[1], field_name$0, v, lexbuf);
        }
       }
       catch(_bA_){
        var _bz_ = caml_wrap_exception(_bA_);
        if(_bz_ === Yojson_Common[7]) return acc[1];
        throw caml_maybe_attach_backtrace(_bz_, 0);
       }
       break;
      case 1:
       return long_error(cst_Expected_but_found$6, v, lexbuf);
      default: return custom_error(cst_Unexpected_end_of_input$25, v, lexbuf);
    }
   }
   function read_lcurl(v, lexbuf){
    var ocaml_lex_state = 286;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return long_error(cst_Expected_but_found$7, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$26, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_object_end(lexbuf){
    var ocaml_lex_state = 290;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(0 === ocaml_lex_state$0)
      throw caml_maybe_attach_backtrace(Yojson_Common[7], 1);
     if(1 === ocaml_lex_state$0) return 0;
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_object_sep(v, lexbuf){
    var ocaml_lex_state = 292;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         throw caml_maybe_attach_backtrace(Yojson_Common[7], 1);
        case 2:
         return long_error(cst_Expected_or_but_found$8, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$27, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_colon(v, lexbuf){
    var ocaml_lex_state = 297;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return long_error(cst_Expected_but_found$8, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$28, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function start_any_tuple(v, lexbuf){
    var ocaml_lex_state = 301;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return 1;
        case 2:
         return long_error(cst_Expected_or_but_found$9, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$29, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_lpar(v, lexbuf){
    var ocaml_lex_state = 306;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return long_error(cst_Expected_but_found$9, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$30, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_rpar(v, lexbuf){
    var ocaml_lex_state = 310;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return long_error(cst_Expected_but_found$10, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$31, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_lbr(v, lexbuf){
    var ocaml_lex_state = 314;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return long_error(cst_Expected_but_found$11, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$32, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_rbr(v, lexbuf){
    var ocaml_lex_state = 318;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return long_error(cst_Expected_but_found$12, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$33, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function skip_json(v, lexbuf){
    for(;;){
     var ocaml_lex_state = 322;
     for(;;){
      var
       ocaml_lex_state$0 =
         caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
      if(18 >= ocaml_lex_state$0 >>> 0) break;
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state = ocaml_lex_state$0;
     }
     switch(ocaml_lex_state$0){
       case 0:
        return 0;
       case 1:
        return 0;
       case 2:
        return 0;
       case 3:
        return 0;
       case 4:
        return 0;
       case 5:
        return 0;
       case 6:
        return finish_skip_stringlit(v, lexbuf);
       case 7:
        return 0;
       case 8:
        return 0;
       case 9:
        try{
         read_space(v, lexbuf);
         read_object_end(lexbuf);
         skip_ident(v, lexbuf);
         read_space(v, lexbuf);
         read_colon(v, lexbuf);
         read_space(v, lexbuf);
         skip_json(v, lexbuf);
         for(;;){
          read_space(v, lexbuf);
          read_object_sep(v, lexbuf);
          read_space(v, lexbuf);
          skip_ident(v, lexbuf);
          read_space(v, lexbuf);
          read_colon(v, lexbuf);
          read_space(v, lexbuf);
          skip_json(v, lexbuf);
         }
        }
        catch(_by_){
         var _bt_ = caml_wrap_exception(_by_);
         if(_bt_ === Yojson_Common[7]) return 0;
         throw caml_maybe_attach_backtrace(_bt_, 0);
        }
        break;
       case 10:
        try{
         read_space(v, lexbuf);
         read_array_end(lexbuf);
         skip_json(v, lexbuf);
         for(;;){
          read_space(v, lexbuf);
          read_array_sep(v, lexbuf);
          read_space(v, lexbuf);
          skip_json(v, lexbuf);
         }
        }
        catch(_bx_){
         var _bu_ = caml_wrap_exception(_bx_);
         if(_bu_ === Yojson_Common[6]) return 0;
         throw caml_maybe_attach_backtrace(_bu_, 0);
        }
        break;
       case 11:
        try{
         read_space(v, lexbuf);
         read_tuple_end(lexbuf);
         skip_json(v, lexbuf);
         for(;;){
          read_space(v, lexbuf);
          read_tuple_sep(v, lexbuf);
          read_space(v, lexbuf);
          skip_json(v, lexbuf);
         }
        }
        catch(_bw_){
         var _bv_ = caml_wrap_exception(_bw_);
         if(_bv_ === Yojson_Common[8]) return 0;
         throw caml_maybe_attach_backtrace(_bv_, 0);
        }
        break;
       case 12:
        read_space(v, lexbuf);
        skip_ident(v, lexbuf);
        read_space(v, lexbuf);
        return finish_skip_variant(v, lexbuf);
       case 13: break;
       case 14:
        finish_comment(v, lexbuf); break;
       case 15:
        newline(v, lexbuf); break;
       case 16: break;
       case 17:
        return custom_error(cst_Unexpected_end_of_input$34, v, lexbuf);
       default: return long_error(cst_Invalid_token$0, v, lexbuf);
     }
    }
   }
   function finish_skip_stringlit(v, lexbuf){
    var ocaml_lex_state = 378;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return long_error(cst_Invalid_string_literal$0, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$35, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function finish_skip_variant(v, lexbuf){
    var ocaml_lex_state = 389;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         skip_json(v, lexbuf);
         read_space(v, lexbuf);
         return read_gt(v, lexbuf);
        case 1:
         return 0;
        case 2:
         return long_error(cst_Expected_or_but_found$10, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$36, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function skip_ident(v, lexbuf){
    var ocaml_lex_state = 394;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return finish_skip_stringlit(v, lexbuf);
        case 1:
         return 0;
        case 2:
         return long_error(cst_Expected_string_or_identif$1, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$37, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function buffer_json(v, lexbuf){
    for(;;){
     var ocaml_lex_state = 399;
     for(;;){
      var
       ocaml_lex_state$8 =
         caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
      if(11 >= ocaml_lex_state$8 >>> 0) break;
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state = ocaml_lex_state$8;
     }
     switch(ocaml_lex_state$8){
       case 0:
        return add_lexeme(v[1], lexbuf);
       case 1:
        return finish_buffer_stringlit(v, lexbuf);
       case 2:
        try{
         caml_call2(Stdlib_buffer[10], v[1], 123);
         buffer_space(v, lexbuf);
         var ocaml_lex_state$1 = 478;
         for(;;){
          var
           ocaml_lex_state$11 =
             caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$1, lexbuf);
          if(0 === ocaml_lex_state$11){
           caml_call2(Stdlib_buffer[10], v[1], 125);
           throw caml_maybe_attach_backtrace(Yojson_Common[7], 1);
          }
          if(1 === ocaml_lex_state$11) break;
          caml_call1(lexbuf[1], lexbuf);
          ocaml_lex_state$1 = ocaml_lex_state$11;
         }
         buffer_ident(v, lexbuf);
         buffer_space(v, lexbuf);
         buffer_colon(v, lexbuf);
         buffer_space(v, lexbuf);
         buffer_json(v, lexbuf);
         for(;;){
          buffer_space(v, lexbuf);
          var ocaml_lex_state$2 = 480;
          for(;;){
           var
            ocaml_lex_state$10 =
              caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$2, lexbuf);
           if(3 >= ocaml_lex_state$10 >>> 0) break;
           caml_call1(lexbuf[1], lexbuf);
           ocaml_lex_state$2 = ocaml_lex_state$10;
          }
          switch(ocaml_lex_state$10){
            case 0:
             caml_call2(Stdlib_buffer[10], v[1], 44); break;
            case 1:
             caml_call2(Stdlib_buffer[10], v[1], 125);
             throw caml_maybe_attach_backtrace(Yojson_Common[7], 1);
            case 2:
             long_error(cst_Expected_or_but_found$12, v, lexbuf); break;
            default: custom_error(cst_Unexpected_end_of_input$42, v, lexbuf);
          }
          buffer_space(v, lexbuf);
          buffer_ident(v, lexbuf);
          buffer_space(v, lexbuf);
          buffer_colon(v, lexbuf);
          buffer_space(v, lexbuf);
          buffer_json(v, lexbuf);
         }
        }
        catch(_bs_){
         var _bn_ = caml_wrap_exception(_bs_);
         if(_bn_ === Yojson_Common[7]) return 0;
         throw caml_maybe_attach_backtrace(_bn_, 0);
        }
        break;
       case 3:
        try{
         caml_call2(Stdlib_buffer[10], v[1], 91);
         buffer_space(v, lexbuf);
         var ocaml_lex_state$3 = 485;
         for(;;){
          var
           ocaml_lex_state$13 =
             caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$3, lexbuf);
          if(0 === ocaml_lex_state$13){
           caml_call2(Stdlib_buffer[10], v[1], 93);
           throw caml_maybe_attach_backtrace(Yojson_Common[6], 1);
          }
          if(1 === ocaml_lex_state$13) break;
          caml_call1(lexbuf[1], lexbuf);
          ocaml_lex_state$3 = ocaml_lex_state$13;
         }
         buffer_json(v, lexbuf);
         for(;;){
          buffer_space(v, lexbuf);
          var ocaml_lex_state$4 = 487;
          for(;;){
           var
            ocaml_lex_state$12 =
              caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$4, lexbuf);
           if(3 >= ocaml_lex_state$12 >>> 0) break;
           caml_call1(lexbuf[1], lexbuf);
           ocaml_lex_state$4 = ocaml_lex_state$12;
          }
          switch(ocaml_lex_state$12){
            case 0:
             caml_call2(Stdlib_buffer[10], v[1], 44); break;
            case 1:
             caml_call2(Stdlib_buffer[10], v[1], 93);
             throw caml_maybe_attach_backtrace(Yojson_Common[6], 1);
            case 2:
             long_error(cst_Expected_or_but_found$13, v, lexbuf); break;
            default: custom_error(cst_Unexpected_end_of_input$43, v, lexbuf);
          }
          buffer_space(v, lexbuf);
          buffer_json(v, lexbuf);
         }
        }
        catch(_br_){
         var _bo_ = caml_wrap_exception(_br_);
         if(_bo_ === Yojson_Common[6]) return 0;
         throw caml_maybe_attach_backtrace(_bo_, 0);
        }
        break;
       case 4:
        try{
         caml_call2(Stdlib_buffer[10], v[1], 40);
         buffer_space(v, lexbuf);
         var ocaml_lex_state$5 = 492;
         for(;;){
          var
           ocaml_lex_state$15 =
             caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$5, lexbuf);
          if(0 === ocaml_lex_state$15){
           caml_call2(Stdlib_buffer[10], v[1], 41);
           throw caml_maybe_attach_backtrace(Yojson_Common[8], 1);
          }
          if(1 === ocaml_lex_state$15) break;
          caml_call1(lexbuf[1], lexbuf);
          ocaml_lex_state$5 = ocaml_lex_state$15;
         }
         buffer_json(v, lexbuf);
         for(;;){
          buffer_space(v, lexbuf);
          var ocaml_lex_state$6 = 494;
          for(;;){
           var
            ocaml_lex_state$14 =
              caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$6, lexbuf);
           if(3 >= ocaml_lex_state$14 >>> 0) break;
           caml_call1(lexbuf[1], lexbuf);
           ocaml_lex_state$6 = ocaml_lex_state$14;
          }
          switch(ocaml_lex_state$14){
            case 0:
             caml_call2(Stdlib_buffer[10], v[1], 44); break;
            case 1:
             caml_call2(Stdlib_buffer[10], v[1], 41);
             throw caml_maybe_attach_backtrace(Yojson_Common[8], 1);
            case 2:
             long_error(cst_Expected_or_but_found$14, v, lexbuf); break;
            default: custom_error(cst_Unexpected_end_of_input$44, v, lexbuf);
          }
          buffer_space(v, lexbuf);
          buffer_json(v, lexbuf);
         }
        }
        catch(_bq_){
         var _bp_ = caml_wrap_exception(_bq_);
         if(_bp_ === Yojson_Common[8]) return 0;
         throw caml_maybe_attach_backtrace(_bp_, 0);
        }
        break;
       case 5:
        caml_call2(Stdlib_buffer[10], v[1], 60);
        buffer_space(v, lexbuf);
        buffer_ident(v, lexbuf);
        buffer_space(v, lexbuf);
        var ocaml_lex_state$0 = 461;
        for(;;){
         var
          ocaml_lex_state$9 =
            caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
         if(3 >= ocaml_lex_state$9 >>> 0) break;
         caml_call1(lexbuf[1], lexbuf);
         ocaml_lex_state$0 = ocaml_lex_state$9;
        }
        switch(ocaml_lex_state$9){
          case 0:
           caml_call2(Stdlib_buffer[10], v[1], 58);
           buffer_json(v, lexbuf);
           buffer_space(v, lexbuf);
           var ocaml_lex_state$7 = 503;
           for(;;){
            var
             ocaml_lex_state$16 =
               caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$7, lexbuf);
            if(2 >= ocaml_lex_state$16 >>> 0)
             switch(ocaml_lex_state$16){
               case 0:
                return caml_call2(Stdlib_buffer[10], v[1], 62);
               case 1:
                return long_error(cst_Expected_but_found$14, v, lexbuf);
               default:
                return custom_error(cst_Unexpected_end_of_input$46, v, lexbuf);
             }
            caml_call1(lexbuf[1], lexbuf);
            ocaml_lex_state$7 = ocaml_lex_state$16;
           }
           break;
          case 1:
           return caml_call2(Stdlib_buffer[10], v[1], 62);
          case 2:
           return long_error(cst_Expected_or_but_found$11, v, lexbuf);
          default:
           return custom_error(cst_Unexpected_end_of_input$40, v, lexbuf);
        }
        break;
       case 6:
        add_lexeme(v[1], lexbuf); break;
       case 7:
        caml_call2(Stdlib_buffer[14], v[1], cst$18);
        finish_buffer_comment(v, lexbuf);
        break;
       case 8:
        caml_call2(Stdlib_buffer[10], v[1], 10); newline(v, lexbuf); break;
       case 9:
        add_lexeme(v[1], lexbuf); break;
       case 10:
        return custom_error(cst_Unexpected_end_of_input$38, v, lexbuf);
       default: return long_error(cst_Invalid_token$1, v, lexbuf);
     }
    }
   }
   function finish_buffer_stringlit(v, lexbuf){
    var ocaml_lex_state = 450;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         caml_call2(Stdlib_buffer[10], v[1], 34);
         return add_lexeme(v[1], lexbuf);
        case 1:
         return long_error(cst_Invalid_string_literal$1, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$39, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function buffer_ident(v, lexbuf){
    var ocaml_lex_state = 466;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return finish_buffer_stringlit(v, lexbuf);
        case 1:
         return add_lexeme(v[1], lexbuf);
        case 2:
         return long_error(cst_Expected_string_or_identif$2, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$41, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function buffer_space(v, lexbuf){
    for(;;){
     var ocaml_lex_state = 471;
     for(;;){
      var
       ocaml_lex_state$0 =
         caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
      if(4 >= ocaml_lex_state$0 >>> 0) break;
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state = ocaml_lex_state$0;
     }
     switch(ocaml_lex_state$0){
       case 0:
        add_lexeme(v[1], lexbuf); newline(v, lexbuf); break;
       case 1:
        caml_call2(Stdlib_buffer[14], v[1], cst$19);
        finish_buffer_comment(v, lexbuf);
        break;
       case 2:
        caml_call2(Stdlib_buffer[10], v[1], 10); newline(v, lexbuf); break;
       case 3:
        add_lexeme(v[1], lexbuf); break;
       default: return;
     }
    }
   }
   function buffer_colon(v, lexbuf){
    var ocaml_lex_state = 499;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return caml_call2(Stdlib_buffer[10], v[1], 58);
        case 1:
         return long_error(cst_Expected_but_found$13, v, lexbuf);
        default:
         return custom_error(cst_Unexpected_end_of_input$45, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function finish_buffer_comment(v, lexbuf){
    for(;;){
     var ocaml_lex_state$0 = 507;
     for(;;){
      var
       ocaml_lex_state =
         caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
      if(3 >= ocaml_lex_state >>> 0) break;
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state$0 = ocaml_lex_state;
     }
     switch(ocaml_lex_state){
       case 0:
        return caml_call2(Stdlib_buffer[14], v[1], cst$20);
       case 1:
        return long_error(cst_Unterminated_comment$0, v, lexbuf);
       case 2:
        caml_call2(Stdlib_buffer[10], v[1], 10); newline(v, lexbuf); break;
       default: add_lexeme(v[1], lexbuf);
     }
    }
   }
   function read_int8(v, lexbuf){
    var n = read_int(v, lexbuf);
    if(0 <= n && 255 >= n) return caml_call1(Stdlib[29], n);
    return lexer_error(cst_Int8_overflow, v, lexbuf);
   }
   function read_list(read_cell, v, lexbuf){
    var _bm_ = read_list_rev(read_cell, v, lexbuf);
    return caml_call1(Stdlib_list[9], _bm_);
   }
   function read_array(read_cell, v, lexbuf){
    var l = read_list_rev(read_cell, v, lexbuf);
    if(! l) return [0];
    var
     tl = l[2],
     x = l[1],
     len = caml_call1(Stdlib_list[1], l),
     a = runtime.caml_make_vect(len, x),
     r = [0, tl],
     _bj_ = len - 2 | 0;
    if(_bj_ >= 0){
     var i = _bj_;
     for(;;){
      var _bk_ = caml_call1(Stdlib_list[5], r[1]);
      runtime.caml_check_bound(a, i)[1 + i] = _bk_;
      r[1] = caml_call1(Stdlib_list[6], r[1]);
      var _bl_ = i - 1 | 0;
      if(0 === i) break;
      i = _bl_;
     }
    }
    return a;
   }
   function read_fields(read_field, init_acc, v){
    return function(_bi_){
     return read_abstract_fields(read_ident, read_field, init_acc, v, _bi_);};
   }
   var init_lexer = Yojson_Common[5];
   function from_lexbuf(v, opt, lexbuf){
    if(opt) var sth = opt[1], stream = sth; else var stream = 0;
    read_space(v, lexbuf);
    if(read_eof(lexbuf))
     throw caml_maybe_attach_backtrace(Yojson_Common[9], 1);
    var x = read_json(v, lexbuf);
    if(1 - stream){
     read_space(v, lexbuf);
     if(1 - read_eof(lexbuf))
      long_error(cst_Junk_after_end_of_JSON_val, v, lexbuf);
    }
    return x;
   }
   function from_string$0(buf, fname, lnum, s){
    try{
     var
      lexbuf = caml_call2(from_string, 0, s),
      v = caml_call4(init_lexer, buf, fname, lnum, 0),
      _bg_ = from_lexbuf(v, 0, lexbuf);
     return _bg_;
    }
    catch(_bh_){
     var _bf_ = caml_wrap_exception(_bh_);
     if(_bf_ === Yojson_Common[9])
      return caml_call1(Yojson_Common[3], cst_Blank_input_data);
     throw caml_maybe_attach_backtrace(_bf_, 0);
    }
   }
   function from_channel$0(buf, fname, lnum, ic){
    try{
     var
      lexbuf = caml_call2(from_channel, 0, ic),
      v = caml_call4(init_lexer, buf, fname, lnum, 0),
      _bd_ = from_lexbuf(v, 0, lexbuf);
     return _bd_;
    }
    catch(_be_){
     var _bc_ = caml_wrap_exception(_be_);
     if(_bc_ === Yojson_Common[9])
      return caml_call1(Yojson_Common[3], cst_Blank_input_data$0);
     throw caml_maybe_attach_backtrace(_bc_, 0);
    }
   }
   function from_file(buf, fname, lnum, file){
    var ic = caml_call1(Stdlib[79], file);
    try{
     var x = from_channel$0(buf, fname, lnum, ic);
     caml_call1(Stdlib[93], ic);
     return x;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_call1(Stdlib[94], ic);
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   var Finally = [248, cst_Yojson_Safe_Finally, caml_fresh_oo_id(0)];
   function seq_from_lexbuf(v, opt, lexbuf){
    if(opt) var sth = opt[1], fin = sth; else var fin = function(param){};
    function f(param){
     try{var _bb_ = [0, from_lexbuf(v, stream, lexbuf), f]; return _bb_;}
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      if(e === Yojson_Common[9]){caml_call1(fin, 0); return 0;}
      try{caml_call1(fin, 0);}
      catch(fin_e$0){
       var fin_e = caml_wrap_exception(fin_e$0);
       throw caml_maybe_attach_backtrace([0, Finally, e, fin_e], 1);
      }
      throw caml_maybe_attach_backtrace(e, 0);
     }
    }
    return f;
   }
   function seq_from_string(buf, fname, lnum, s){
    var v = caml_call4(init_lexer, buf, fname, lnum, 0);
    return seq_from_lexbuf(v, 0, caml_call2(from_string, 0, s));
   }
   function seq_from_channel(buf, fin, fname, lnum, ic){
    var
     lexbuf = caml_call2(from_channel, 0, ic),
     v = caml_call4(init_lexer, buf, fname, lnum, 0);
    return seq_from_lexbuf(v, fin, lexbuf);
   }
   function seq_from_file(buf, fname, lnum, file){
    var ic = caml_call1(Stdlib[79], file);
    function fin(param){return caml_call1(Stdlib[93], ic);}
    var
     fname$0 = fname || [0, file],
     lexbuf = caml_call2(from_channel, 0, ic),
     v = caml_call4(init_lexer, buf, fname$0, lnum, 0);
    return seq_from_lexbuf(v, [0, fin], lexbuf);
   }
   function lineseq_from_channel(buf, opt, fname, _a6_, ic){
    if(opt) var sth = opt[1], fin = sth; else var fin = function(param){};
    if(_a6_) var sth$0 = _a6_[1], lnum0 = sth$0; else var lnum0 = 1;
    var buf$0 = buf || [0, caml_call1(Stdlib_buffer[1], 256)];
    function f(lnum, param){
     try{
      var
       line = caml_call1(Stdlib[83], ic),
       _a9_ = lnum + 1 | 0,
       _a__ =
         [0,
          [0, 826371656, from_string$0(buf$0, fname, [0, lnum], line)],
          function(_ba_){return f(_a9_, _ba_);}];
      return _a__;
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      if(e === Stdlib[12]){caml_call1(fin, 0); return 0;}
      var _a8_ = lnum + 1 | 0;
      return [0, [0, 3458171, e], function(_a$_){return f(_a8_, _a$_);}];
     }
    }
    return function(_a7_){return f(lnum0, _a7_);};
   }
   function lineseq_from_file(buf, fname, lnum, file){
    var ic = caml_call1(Stdlib[79], file);
    function fin(param){return caml_call1(Stdlib[93], ic);}
    var fname$0 = fname || [0, file];
    return lineseq_from_channel(buf, [0, fin], fname$0, lnum, ic);
   }
   function prettify(std, s){
    var x = from_string$0(0, 0, 0, s);
    return to_string$0(std, x);
   }
   function compact(param, s){
    return to_string(0, 0, 0, 0, from_string$0(0, 0, 0, s));
   }
   var
    Type_error = [248, cst_Yojson_Safe_Util_Type_erro, caml_fresh_oo_id(0)];
   function typerr(msg, js){
    if(typeof js === "number")
     var _a5_ = cst_null$1;
    else
     var
      _a4_ = js[1],
      _a5_ =
        726928360 <= _a4_
         ? 737456202
           === _a4_
           ? cst_bool
           : 928231259
             <= _a4_
             ? 963043957 <= _a4_ ? cst_object : cst_floatlit
             : 848054398 <= _a4_ ? cst_array : cst_tuple
         : -752863768
           === _a4_
           ? cst_intlit
           : 365180284
             <= _a4_
             ? 708012133 <= _a4_ ? cst_variant : cst_float
             : 3654863 <= _a4_ ? cst_int : cst_string;
    throw caml_maybe_attach_backtrace
           ([0, Type_error, caml_call2(Stdlib[28], msg, _a5_), js], 1);
   }
   var Undefined = [248, cst_Yojson_Safe_Util_Undefined, caml_fresh_oo_id(0)];
   function member(name, js){
    if(typeof js !== "number" && 963043957 === js[1]){
     var obj = js[2];
     try{var _a1_ = caml_call2(Stdlib_list[46], name, obj); return _a1_;}
     catch(_a3_){
      var _a0_ = caml_wrap_exception(_a3_);
      if(_a0_ === Stdlib[8]) return 870828711;
      throw caml_maybe_attach_backtrace(_a0_, 0);
     }
    }
    var _a2_ = caml_call2(Stdlib[28], name, cst_of_non_object_type);
    return typerr(caml_call2(Stdlib[28], cst_Can_t_get_member, _a2_), js);
   }
   function path(l, obj){
    var l$0 = l, obj$0 = obj;
    for(;;){
     if(! l$0) return [0, obj$0];
     var l$1 = l$0[2], key = l$0[1];
     if(typeof obj$0 !== "number" && 963043957 === obj$0[1]){
      var assoc = obj$0[2];
      try{var obj$1 = caml_call2(Stdlib_list[46], key, assoc);}
      catch(_aZ_){
       var _aY_ = caml_wrap_exception(_aZ_);
       if(_aY_ === Stdlib[8]) return 0;
       throw caml_maybe_attach_backtrace(_aY_, 0);
      }
      l$0 = l$1;
      obj$0 = obj$1;
      continue;
     }
     return 0;
    }
   }
   function index(i, js){
    if(typeof js !== "number" && 848054398 === js[1]){
     var
      l = js[2],
      len = caml_call1(Stdlib_list[1], l),
      wrapped_index = 0 <= i ? i : len + i | 0;
     if(0 <= wrapped_index && len > wrapped_index)
      return caml_call2(Stdlib_list[7], l, wrapped_index);
     var
      _aW_ = caml_call1(Stdlib[33], i),
      _aX_ = caml_call2(Stdlib[28], _aW_, cst_out_of_bounds);
     throw caml_maybe_attach_backtrace
            ([0, Undefined, caml_call2(Stdlib[28], cst_Index, _aX_), js], 1);
    }
    var
     _aU_ = caml_call1(Stdlib[33], i),
     _aV_ = caml_call2(Stdlib[28], _aU_, cst_of_non_array_type);
    return typerr(caml_call2(Stdlib[28], cst_Can_t_get_index, _aV_), js);
   }
   function map(f, js){
    if(typeof js !== "number" && 848054398 === js[1]){
     var l = js[2];
     return [0, 848054398, caml_call2(Stdlib_list[19], f, l)];
    }
    return typerr(cst_Can_t_map_function_over_no, js);
   }
   function to_assoc(js){
    if(typeof js !== "number" && 963043957 === js[1]){var obj = js[2]; return obj;}
    return typerr(cst_Expected_object_got, js);
   }
   function to_option(f, x){
    return 870828711 === x ? 0 : [0, caml_call1(f, x)];
   }
   function to_bool(js){
    if(typeof js !== "number" && 737456202 === js[1]){var b = js[2]; return b;}
    return typerr(cst_Expected_bool_got, js);
   }
   function to_bool_option(js){
    if(typeof js === "number"){
     if(870828711 === js) return 0;
    }
    else if(737456202 === js[1]){var b = js[2]; return [0, b];}
    return typerr(cst_Expected_bool_or_null_got, js);
   }
   function to_number(js){
    if(typeof js !== "number"){
     var _aT_ = js[1];
     if(3654863 === _aT_){var i = js[2]; return i;}
     if(365180284 === _aT_){var f = js[2]; return f;}
    }
    return typerr(cst_Expected_number_got, js);
   }
   function to_number_option(js){
    if(typeof js === "number"){
     if(870828711 === js) return 0;
    }
    else{
     var _aS_ = js[1];
     if(3654863 === _aS_){var i = js[2]; return [0, i];}
     if(365180284 === _aS_){var f = js[2]; return [0, f];}
    }
    return typerr(cst_Expected_number_or_null_go, js);
   }
   function to_float(js){
    if(typeof js !== "number" && 365180284 === js[1]){var f = js[2]; return f;}
    return typerr(cst_Expected_float_got, js);
   }
   function to_float_option(js){
    if(typeof js === "number"){
     if(870828711 === js) return 0;
    }
    else if(365180284 === js[1]){var f = js[2]; return [0, f];}
    return typerr(cst_Expected_float_or_null_got, js);
   }
   function to_int(js){
    if(typeof js !== "number" && 3654863 === js[1]){var i = js[2]; return i;}
    return typerr(cst_Expected_int_got, js);
   }
   function to_int_option(js){
    if(typeof js === "number"){
     if(870828711 === js) return 0;
    }
    else if(3654863 === js[1]){var i = js[2]; return [0, i];}
    return typerr(cst_Expected_int_or_null_got, js);
   }
   function to_list(js){
    if(typeof js !== "number" && 848054398 === js[1]){var l = js[2]; return l;}
    return typerr(cst_Expected_array_got, js);
   }
   function to_string$1(js){
    if(typeof js !== "number" && -976970511 === js[1]){var s = js[2]; return s;}
    return typerr(cst_Expected_string_got, js);
   }
   function to_string_option(js){
    if(typeof js === "number"){
     if(870828711 === js) return 0;
    }
    else if(-976970511 === js[1]){var s = js[2]; return [0, s];}
    return typerr(cst_Expected_string_or_null_go, js);
   }
   function convert_each(f, js){
    if(typeof js !== "number" && 848054398 === js[1]){
     var l = js[2];
     return caml_call2(Stdlib_list[19], f, l);
    }
    return typerr(cst_Can_t_convert_each_element, js);
   }
   function filter_map(f, l$0){
    var acc = 0, l = l$0;
    for(;;){
     if(! l) return caml_call1(Stdlib_list[9], acc);
     var tl = l[2], x = l[1], match = caml_call1(f, x);
     if(match){
      var y = match[1], acc$0 = [0, y, acc];
      acc = acc$0;
      l = tl;
     }
     else
      l = tl;
    }
   }
   function flatten(l$0){
    var acc = 0, l = l$0;
    for(;;){
     if(! l) return caml_call1(Stdlib_list[9], acc);
     var tl = l[2], x = l[1];
     if(typeof x !== "number" && 848054398 === x[1]){
      var l2 = x[2], acc$0 = caml_call2(Stdlib_list[12], l2, acc);
      acc = acc$0;
      l = tl;
      continue;
     }
     l = tl;
    }
   }
   function filter_index(i, l){
    return filter_map
            (function(param){
              if(typeof param !== "number" && 848054398 === param[1]){
               var l = param[2];
               try{
                var _aQ_ = [0, caml_call2(Stdlib_list[7], l, i)];
                return _aQ_;
               }
               catch(_aR_){return 0;}
              }
              return 0;
             },
             l);
   }
   function filter_list(l){
    return filter_map
            (function(param){
              if(typeof param !== "number" && 848054398 === param[1]){var l = param[2]; return [0, l];}
              return 0;
             },
             l);
   }
   function filter_member(k, l){
    return filter_map
            (function(param){
              if(typeof param !== "number" && 963043957 === param[1]){
               var l = param[2];
               try{
                var _aO_ = [0, caml_call2(Stdlib_list[46], k, l)];
                return _aO_;
               }
               catch(_aP_){return 0;}
              }
              return 0;
             },
             l);
   }
   function filter_assoc(l){
    return filter_map
            (function(param){
              if(typeof param !== "number" && 963043957 === param[1]){var l = param[2]; return [0, l];}
              return 0;
             },
             l);
   }
   function filter_bool(l){
    return filter_map
            (function(param){
              if(typeof param !== "number" && 737456202 === param[1]){var x = param[2]; return [0, x];}
              return 0;
             },
             l);
   }
   function filter_int(l){
    return filter_map
            (function(param){
              if(typeof param !== "number" && 3654863 === param[1]){var x = param[2]; return [0, x];}
              return 0;
             },
             l);
   }
   function filter_float(l){
    return filter_map
            (function(param){
              if(typeof param !== "number" && 365180284 === param[1]){var x = param[2]; return [0, x];}
              return 0;
             },
             l);
   }
   function filter_number(l){
    return filter_map
            (function(param){
              if(typeof param !== "number"){
               var _aN_ = param[1];
               if(3654863 === _aN_){var x = param[2]; return [0, x];}
               if(365180284 === _aN_){var x$0 = param[2]; return [0, x$0];}
              }
              return 0;
             },
             l);
   }
   function filter_string(l){
    return filter_map
            (function(param){
              if(typeof param !== "number" && -976970511 === param[1]){var x = param[2]; return [0, x];}
              return 0;
             },
             l);
   }
   function keys(o){
    var _aM_ = to_assoc(o);
    return caml_call2
            (Stdlib_list[19],
             function(param){var key = param[1]; return key;},
             _aM_);
   }
   function values(o){
    var _aL_ = to_assoc(o);
    return caml_call2
            (Stdlib_list[19],
             function(param){var value = param[2]; return value;},
             _aL_);
   }
   function combine(first, second){
    if
     (typeof first !== "number"
      &&
       963043957 === first[1]
       && typeof second !== "number" && 963043957 === second[1]){
     var b = second[2], a = first[2];
     return [0, 963043957, caml_call2(Stdlib[37], a, b)];
    }
    throw caml_maybe_attach_backtrace
           ([0, Stdlib[6], cst_Expected_two_objects_check], 1);
   }
   var
    Yojson_Safe =
      [0,
       pp$0,
       show,
       equal,
       to_basic,
       to_string,
       to_channel,
       to_output,
       to_file,
       to_buffer,
       seq_to_string,
       seq_to_channel,
       seq_to_file,
       seq_to_buffer,
       write_json,
       sort,
       write_null,
       write_bool,
       write_int,
       write_float,
       write_std_float,
       write_float_prec,
       write_std_float_prec,
       write_string,
       write_intlit,
       write_assoc,
       write_list,
       write_tuple,
       write_std_tuple,
       write_variant,
       write_std_variant,
       write_json,
       write_std_json,
       pretty_print,
       pretty_to_string,
       pretty_to_channel,
       prettify,
       compact,
       Finally,
       from_string$0,
       from_channel$0,
       from_file,
       init_lexer,
       from_lexbuf,
       seq_from_string,
       seq_from_channel,
       seq_from_file,
       seq_from_lexbuf,
       lineseq_from_channel,
       lineseq_from_file,
       read_json,
       finish_string,
       read_string,
       read_ident,
       map_string,
       map_ident,
       start_any_variant,
       finish_variant,
       finish_skip_variant,
       read_lt,
       read_gt,
       read_comma,
       finish_stringlit,
       finish_skip_stringlit,
       finish_escaped_char,
       finish_comment,
       read_space,
       read_eof,
       read_null,
       read_null_if_possible,
       read_bool,
       read_int,
       read_int8,
       read_int32,
       read_int64,
       read_number,
       skip_ident,
       read_sequence,
       read_list,
       read_list_rev,
       read_array_end,
       read_array_sep,
       read_array,
       read_tuple,
       start_any_tuple,
       read_lpar,
       read_rpar,
       read_tuple_end,
       read_tuple_end2,
       read_tuple_sep,
       read_tuple_sep2,
       read_lbr,
       read_rbr,
       read_fields,
       read_abstract_fields,
       read_lcurl,
       read_object_end,
       read_object_sep,
       read_colon,
       read_json,
       skip_json,
       buffer_json,
       [0,
        Type_error,
        Undefined,
        keys,
        values,
        combine,
        member,
        path,
        index,
        map,
        to_assoc,
        to_option,
        to_bool,
        to_bool_option,
        to_number,
        to_number_option,
        to_float,
        to_float_option,
        to_int,
        to_int_option,
        to_list,
        to_string$1,
        to_string_option,
        convert_each,
        filter_map,
        flatten,
        filter_index,
        filter_list,
        filter_member,
        filter_assoc,
        filter_bool,
        filter_int,
        filter_float,
        filter_number,
        filter_string]];
   runtime.caml_register_global(325, Yojson_Safe, "Yojson__Safe");
   return;
  }
  (globalThis));

//# 15 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_format = global_data.Stdlib__format,
    Error = [248, "Slanglib.Errors.Error", runtime.caml_fresh_oo_id(0)];
   function complain(s){throw caml_maybe_attach_backtrace([0, Error, s], 1);}
   function complainf(fmt){
    return caml_call2(Stdlib_format[137], complain, fmt);
   }
   var Slanglib_Errors = [0, Error, complain, complainf];
   runtime.caml_register_global(2, Slanglib_Errors, "Slanglib__Errors");
   return;
  }
  (globalThis));

//# 122 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$35 = "",
    cst$34 = " -> ",
    cst$38 = " : ",
    cst$42 = " =",
    cst_end = " end",
    cst$32 = "(",
    cst$33 = ")",
    cst$39 = ") -> ",
    cst$41 = ") : ",
    cst$36 = ", ",
    cst$43 = "-",
    cst$40 = "; ",
    cst_2 = "<2>",
    cst$37 = "@ ",
    cst_end$0 = "end",
    cst_in = "in ",
    cst_let = "let ";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) === 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) === 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   function caml_call16
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15){
    return (f.l >= 0 ? f.l : f.l = f.length) === 16
            ? f
              (a0,
               a1,
               a2,
               a3,
               a4,
               a5,
               a6,
               a7,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14,
               a15)
            : runtime.caml_call_gen
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14,
                a15]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$32,
    cst$1 = cst$33,
    cst$2 = cst$34,
    cst$3 = cst$32,
    cst$4 = cst$33,
    cst$5 = " * ",
    cst$6 = cst$32,
    cst$7 = cst$33,
    cst$8 = " + ",
    cst$9 = cst$32,
    cst$20 = "()",
    cst$21 = "?",
    partial =
      [15,
       [12,
        32,
        [17,
         [0, cst$37, 1, 0],
         [11,
          "| inr(",
          [15,
           [11, cst$38, [15, [11, cst$39, [15, [11, cst_end, [17, 0, 0]]]]]]]]]]],
    partial$0 = [17, 0, 0],
    partial$1 =
      [17,
       [0, cst$37, 1, 0],
       [15,
        [12,
         32,
         [17,
          [0, cst$37, 1, 0],
          [11,
           cst_in,
           [15,
            [12, 32, [17, [0, cst$37, 1, 0], [11, cst_end$0, [17, 0, 0]]]]]]]]]],
    partial$2 =
      [17,
       [0, cst$37, 1, 0],
       [15,
        [12,
         32,
         [17,
          [0, cst$37, 1, 0],
          [11,
           cst_in,
           [15,
            [12, 32, [17, [0, cst$37, 1, 0], [11, cst_end$0, [17, 0, 0]]]]]]]]]],
    cst$26 = cst$35,
    cst$27 = cst$35,
    cst$28 = cst$35,
    cst$29 = cst$35,
    cst$30 = cst$40,
    cst$31 = cst$35,
    cst$22 = cst$36,
    cst$23 = cst$33,
    cst$24 = cst$33,
    cst$25 = cst$32,
    cst$12 = "+",
    cst$13 = "*",
    cst$14 = "/",
    cst$15 = cst$43,
    cst$16 = "<",
    cst$17 = "&&",
    cst$18 = "||",
    cst$19 = "=",
    cst$10 = "~",
    cst$11 = cst$43,
    cst = cst$36,
    Stdlib = global_data.Stdlib,
    Stdlib_format = global_data.Stdlib__format,
    cst_position = "position ",
    cst_line = "line ",
    cst_int = "int",
    cst_bool = "bool",
    cst_unit = "unit",
    cst_ref = " ref)",
    cst_eqb = "eqb",
    cst_eqi = "eqi",
    _a_ = [0, [2, 0, 0], "%s"],
    _b_ = [0, [15, [12, 40, [15, [12, 41, 0]]]], "%a(%a)"],
    _c_ =
      [0,
       [12, 40, [15, [12, 32, [15, [12, 32, [15, [12, 41, 0]]]]]]],
       "(%a %a %a)"],
    _d_ =
      [0,
       [18,
        [1, [0, 0, cst$35]],
        [11,
         "if ",
         [15,
          [11, " then ", [15, [11, " else ", [15, [12, 32, [17, 0, 0]]]]]]]]],
       "@[if %a then %a else %a @]"],
    _e_ = [0, [12, 40, [15, [11, cst$36, [15, [12, 41, 0]]]]], "(%a, %a)"],
    _f_ = [0, [11, "fst(", [15, [12, 41, 0]]], "fst(%a)"],
    _g_ = [0, [11, "snd ", [15, 0]], "snd %a"],
    _h_ = [0, [11, "(inl ", [15, [12, 32, [15, [12, 41, 0]]]]], "(inl %a %a)"],
    _i_ = [0, [11, "(inr ", [15, [12, 32, [15, [12, 41, 0]]]]], "(inr %a %a)"],
    _j_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "case ",
         [15,
          [11,
           " of",
           [17,
            [0, cst$37, 1, 0],
            [11, "| inl(", [15, [11, cst$38, [15, [11, cst$39, partial]]]]]]]]]],
       "@[<2>case %a of@ | inl(%a : %a) -> %a @ | inr(%a : %a) -> %a end@]"],
    _k_ =
      [0,
       [11, "while ", [15, [11, " do ", [15, [11, cst_end, 0]]]]],
       "while %a do %a end"],
    _l_ = [0, [15, [11, cst$40, [15, 0]]], "%a; %a"],
    _m_ = [0, [11, "ref ", [15, 0]], "ref %a"],
    _n_ = [0, [12, 33, [15, 0]], "!%a"],
    _o_ = [0, [12, 40, [15, [11, " := ", [15, [12, 41, 0]]]]], "(%a := %a)"],
    _p_ =
      [0,
       [11,
        "(fun ",
        [15, [11, cst$38, [15, [11, cst$34, [15, [12, 41, 0]]]]]]],
       "(fun %a : %a -> %a)"],
    _q_ = [0, [15, [12, 32, [15, 0]]], "%a %a"],
    _r_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_let,
         [15,
          [11,
           cst$38,
           [15,
            [11, " = ", [15, [11, " in ", [15, [11, cst_end, partial$0]]]]]]]]]],
       "@[<2>let %a : %a = %a in %a end@]"],
    _s_ =
      [0,
       [18,
        [1, [0, 0, cst$35]],
        [11,
         cst_let,
         [15,
          [12,
           40,
           [15,
            [11, cst$38, [15, [11, cst$41, [15, [11, cst$42, partial$1]]]]]]]]]],
       "@[let %a(%a : %a) : %a =@ %a @ in %a @ end@]"],
    _t_ =
      [0,
       [18,
        [1, [0, 0, cst$35]],
        [11,
         "letrec ",
         [15,
          [12,
           40,
           [15,
            [11, cst$38, [15, [11, cst$41, [15, [11, cst$42, partial$2]]]]]]]]]],
       "@[letrec %a(%a : %a) : %a =@ %a @ in %a @ end@]"],
    cst_NOT = "NOT",
    cst_NEG = "NEG",
    cst_ADD = "ADD",
    cst_MUL = "MUL",
    cst_DIV = "DIV",
    cst_SUB = "SUB",
    cst_LT = "LT",
    cst_AND = "AND",
    cst_OR = "OR",
    cst_EQ = "EQ",
    cst_EQB = "EQB",
    cst_EQI = "EQI",
    cst_TEint = "TEint",
    cst_TEbool = "TEbool",
    cst_TEunit = "TEunit",
    cst_TEref = "TEref",
    cst_TEarrow = "TEarrow",
    cst_TEproduct = "TEproduct",
    cst_TEunion = "TEunion",
    cst_Unit = "Unit",
    cst_What = "What",
    cst_Var = "Var",
    cst_Integer = "Integer",
    cst_Boolean = "Boolean",
    cst_UnaryOp = "UnaryOp",
    cst_Op = "Op",
    cst_If = "If",
    cst_Pair = "Pair",
    cst_Fst = "Fst",
    cst_Snd = "Snd",
    cst_Inl = "Inl",
    cst_Inr = "Inr",
    cst_Case = "Case",
    cst_While = "While",
    cst_Seq = "Seq",
    cst_Ref = "Ref",
    cst_Deref = "Deref",
    cst_Assign = "Assign",
    cst_Lambda = "Lambda",
    cst_App = "App",
    cst_Let = "Let",
    cst_LetFun = "LetFun",
    cst_LetRecFun = "LetRecFun";
   function loc_of_expr(param){
    switch(param[0]){
      case 0:
       var loc = param[1]; return loc;
      case 1:
       var loc$0 = param[1]; return loc$0;
      case 2:
       var loc$1 = param[1]; return loc$1;
      case 3:
       var loc$2 = param[1]; return loc$2;
      case 4:
       var loc$3 = param[1]; return loc$3;
      case 5:
       var loc$4 = param[1]; return loc$4;
      case 6:
       var loc$5 = param[1]; return loc$5;
      case 7:
       var loc$6 = param[1]; return loc$6;
      case 8:
       var loc$7 = param[1]; return loc$7;
      case 9:
       var loc$8 = param[1]; return loc$8;
      case 10:
       var loc$9 = param[1]; return loc$9;
      case 11:
       var loc$10 = param[1]; return loc$10;
      case 12:
       var loc$11 = param[1]; return loc$11;
      case 13:
       var loc$12 = param[1]; return loc$12;
      case 14:
       var loc$13 = param[1]; return loc$13;
      case 15:
       var loc$14 = param[1]; return loc$14;
      case 16:
       var loc$15 = param[1]; return loc$15;
      case 17:
       var loc$16 = param[1]; return loc$16;
      case 18:
       var loc$17 = param[1]; return loc$17;
      case 19:
       var loc$18 = param[1]; return loc$18;
      case 20:
       var loc$19 = param[1]; return loc$19;
      case 21:
       var loc$20 = param[1]; return loc$20;
      case 22:
       var loc$21 = param[1]; return loc$21;
      default: var loc$22 = param[1]; return loc$22;
    }
   }
   function string_of_loc(loc){
    var
     _ar_ = caml_call1(Stdlib[33], (loc[4] - loc[3] | 0) + 1 | 0),
     _as_ = caml_call2(Stdlib[28], cst_position, _ar_),
     _at_ = caml_call2(Stdlib[28], cst, _as_),
     _au_ = caml_call1(Stdlib[33], loc[2]),
     _av_ = caml_call2(Stdlib[28], _au_, _at_);
    return caml_call2(Stdlib[28], cst_line, _av_);
   }
   function pp_type(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cst_int;
       case 1:
        return cst_bool;
       default: return cst_unit;
     }
    switch(param[0]){
      case 0:
       var
        t = param[1],
        _aa_ = pp_type(t),
        _ab_ = caml_call2(Stdlib[28], _aa_, cst_ref);
       return caml_call2(Stdlib[28], cst$0, _ab_);
      case 1:
       var
        t2 = param[2],
        t1 = param[1],
        _ac_ = pp_type(t2),
        _ad_ = caml_call2(Stdlib[28], _ac_, cst$1),
        _ae_ = caml_call2(Stdlib[28], cst$2, _ad_),
        _af_ = pp_type(t1),
        _ag_ = caml_call2(Stdlib[28], _af_, _ae_);
       return caml_call2(Stdlib[28], cst$3, _ag_);
      case 2:
       var
        t2$0 = param[2],
        t1$0 = param[1],
        _ah_ = pp_type(t2$0),
        _ai_ = caml_call2(Stdlib[28], _ah_, cst$4),
        _aj_ = caml_call2(Stdlib[28], cst$5, _ai_),
        _ak_ = pp_type(t1$0),
        _al_ = caml_call2(Stdlib[28], _ak_, _aj_);
       return caml_call2(Stdlib[28], cst$6, _al_);
      default:
       var
        t2$1 = param[2],
        t1$1 = param[1],
        _am_ = pp_type(t2$1),
        _an_ = caml_call2(Stdlib[28], _am_, cst$7),
        _ao_ = caml_call2(Stdlib[28], cst$8, _an_),
        _ap_ = pp_type(t1$1),
        _aq_ = caml_call2(Stdlib[28], _ap_, _ao_);
       return caml_call2(Stdlib[28], cst$9, _aq_);
    }
   }
   function pp_uop(param){return param ? cst$10 : cst$11;}
   function pp_bop(param){
    switch(param){
      case 0:
       return cst$12;
      case 1:
       return cst$13;
      case 2:
       return cst$14;
      case 3:
       return cst$15;
      case 4:
       return cst$16;
      case 5:
       return cst$17;
      case 6:
       return cst$18;
      case 7:
       return cst$19;
      case 8:
       return cst_eqb;
      default: return cst_eqi;
    }
   }
   function fstring(ppf, s){
    return caml_call3(Stdlib_format[126], ppf, _a_, s);
   }
   function pp_type$0(ppf, t){return fstring(ppf, pp_type(t));}
   function pp_unary(ppf, op){return fstring(ppf, pp_uop(op));}
   function pp_binary(ppf, op){return fstring(ppf, pp_bop(op));}
   function pp_expr(ppf, param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        return fstring(ppf, cst$20);
       case 1:
        return fstring(ppf, cst$21);
       case 2:
        var x = param$0[2]; return fstring(ppf, x);
       case 3:
        var n = param$0[2]; return fstring(ppf, caml_call1(Stdlib[33], n));
       case 4:
        var b = param$0[2]; return fstring(ppf, caml_call1(Stdlib[30], b));
       case 5:
        var e = param$0[3], op = param$0[2];
        return caml_call6
                (Stdlib_format[126], ppf, _b_, pp_unary, op, pp_expr, e);
       case 6:
        var e2 = param$0[4], op$0 = param$0[3], e1 = param$0[2];
        return caml_call8
                (Stdlib_format[126],
                 ppf,
                 _c_,
                 pp_expr,
                 e1,
                 pp_binary,
                 op$0,
                 pp_expr,
                 e2);
       case 7:
        var e3 = param$0[4], e2$0 = param$0[3], e1$0 = param$0[2];
        return caml_call8
                (Stdlib_format[126],
                 ppf,
                 _d_,
                 pp_expr,
                 e1$0,
                 pp_expr,
                 e2$0,
                 pp_expr,
                 e3);
       case 8:
        var e2$1 = param$0[3], e1$1 = param$0[2];
        return caml_call6
                (Stdlib_format[126], ppf, _e_, pp_expr, e1$1, pp_expr, e2$1);
       case 9:
        var e$0 = param$0[2];
        return caml_call4(Stdlib_format[126], ppf, _f_, pp_expr, e$0);
       case 10:
        var e$1 = param$0[2];
        return caml_call4(Stdlib_format[126], ppf, _g_, pp_expr, e$1);
       case 11:
        var e$2 = param$0[3], t = param$0[2];
        return caml_call6
                (Stdlib_format[126], ppf, _h_, pp_type$0, t, pp_expr, e$2);
       case 12:
        var e$3 = param$0[3], t$0 = param$0[2];
        return caml_call6
                (Stdlib_format[126], ppf, _i_, pp_type$0, t$0, pp_expr, e$3);
       case 13:
        var
         ___ = param$0[4],
         e2$2 = ___[3],
         t2 = ___[2],
         x2 = ___[1],
         match = param$0[3],
         e1$2 = match[3],
         t1 = match[2],
         x1 = match[1],
         e$4 = param$0[2];
        return caml_call16
                (Stdlib_format[126],
                 ppf,
                 _j_,
                 pp_expr,
                 e$4,
                 fstring,
                 x1,
                 pp_type$0,
                 t1,
                 pp_expr,
                 e1$2,
                 fstring,
                 x2,
                 pp_type$0,
                 t2,
                 pp_expr,
                 e2$2);
       case 14:
        var e2$3 = param$0[3], e1$3 = param$0[2];
        return caml_call6
                (Stdlib_format[126], ppf, _k_, pp_expr, e1$3, pp_expr, e2$3);
       case 15:
        var _$_ = param$0[2], l = param$0[1];
        if(! _$_) return 0;
        var e$5 = _$_[1];
        if(_$_[2]){
         var rest = _$_[2];
         return caml_call6
                 (Stdlib_format[126],
                  ppf,
                  _l_,
                  pp_expr,
                  e$5,
                  pp_expr,
                  [15, l, rest]);
        }
        param$0 = e$5;
        break;
       case 16:
        var e$6 = param$0[2];
        return caml_call4(Stdlib_format[126], ppf, _m_, pp_expr, e$6);
       case 17:
        var e$7 = param$0[2];
        return caml_call4(Stdlib_format[126], ppf, _n_, pp_expr, e$7);
       case 18:
        var e2$4 = param$0[3], e1$4 = param$0[2];
        return caml_call6
                (Stdlib_format[126], ppf, _o_, pp_expr, e1$4, pp_expr, e2$4);
       case 19:
        var
         match$0 = param$0[2],
         e$8 = match$0[3],
         t$1 = match$0[2],
         x$0 = match$0[1];
        return caml_call8
                (Stdlib_format[126],
                 ppf,
                 _p_,
                 fstring,
                 x$0,
                 pp_type$0,
                 t$1,
                 pp_expr,
                 e$8);
       case 20:
        var e2$5 = param$0[3], e1$5 = param$0[2];
        return caml_call6
                (Stdlib_format[126], ppf, _q_, pp_expr, e1$5, pp_expr, e2$5);
       case 21:
        var
         e2$6 = param$0[5],
         e1$6 = param$0[4],
         t$2 = param$0[3],
         x$1 = param$0[2];
        return caml_call10
                (Stdlib_format[126],
                 ppf,
                 _r_,
                 fstring,
                 x$1,
                 pp_type$0,
                 t$2,
                 pp_expr,
                 e1$6,
                 pp_expr,
                 e2$6);
       case 22:
        var
         e2$7 = param$0[5],
         t2$0 = param$0[4],
         match$1 = param$0[3],
         e1$7 = match$1[3],
         t1$0 = match$1[2],
         x$2 = match$1[1],
         f = param$0[2];
        return caml_call14
                (Stdlib_format[126],
                 ppf,
                 _s_,
                 fstring,
                 f,
                 fstring,
                 x$2,
                 pp_type$0,
                 t1$0,
                 pp_type$0,
                 t2$0,
                 pp_expr,
                 e1$7,
                 pp_expr,
                 e2$7);
       default:
        var
         e2$8 = param$0[5],
         t2$1 = param$0[4],
         match$2 = param$0[3],
         e1$8 = match$2[3],
         t1$1 = match$2[2],
         x$3 = match$2[1],
         f$0 = param$0[2];
        return caml_call14
                (Stdlib_format[126],
                 ppf,
                 _t_,
                 fstring,
                 f$0,
                 fstring,
                 x$3,
                 pp_type$0,
                 t1$1,
                 pp_type$0,
                 t2$1,
                 pp_expr,
                 e1$8,
                 pp_expr,
                 e2$8);
     }
   }
   function print_expr(e){
    pp_expr(Stdlib_format[107], e);
    return caml_call1(Stdlib_format[37], 0);
   }
   function eprint_expr(e){
    pp_expr(Stdlib_format[108], e);
    return caml_call1(Stdlib_format[37], 0);
   }
   function mk_con(con, l){
    var
     carry$1 = caml_call2(Stdlib[28], con, cst$25),
     carry = carry$1,
     param = l;
    for(;;){
     if(! param) return caml_call2(Stdlib[28], carry, cst$24);
     var s = param[1];
     if(! param[2]){
      var _Z_ = caml_call2(Stdlib[28], s, cst$23);
      return caml_call2(Stdlib[28], carry, _Z_);
     }
     var
      rest = param[2],
      _Y_ = caml_call2(Stdlib[28], s, cst$22),
      carry$0 = caml_call2(Stdlib[28], carry, _Y_);
     carry = carry$0;
     param = rest;
    }
   }
   function string_of_type(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cst_TEint;
       case 1:
        return cst_TEbool;
       default: return cst_TEunit;
     }
    switch(param[0]){
      case 0:
       var t = param[1]; return mk_con(cst_TEref, [0, string_of_type(t), 0]);
      case 1:
       var t2 = param[2], t1 = param[1], _V_ = [0, string_of_type(t2), 0];
       return mk_con(cst_TEarrow, [0, string_of_type(t1), _V_]);
      case 2:
       var
        t2$0 = param[2],
        t1$0 = param[1],
        _W_ = [0, string_of_type(t2$0), 0];
       return mk_con(cst_TEproduct, [0, string_of_type(t1$0), _W_]);
      default:
       var
        t2$1 = param[2],
        t1$1 = param[1],
        _X_ = [0, string_of_type(t2$1), 0];
       return mk_con(cst_TEunion, [0, string_of_type(t1$1), _X_]);
    }
   }
   function string_of_expr(param){
    switch(param[0]){
      case 0:
       return cst_Unit;
      case 1:
       return cst_What;
      case 2:
       var x = param[2]; return mk_con(cst_Var, [0, x, 0]);
      case 3:
       var n = param[2];
       return mk_con(cst_Integer, [0, caml_call1(Stdlib[33], n), 0]);
      case 4:
       var b = param[2];
       return mk_con(cst_Boolean, [0, caml_call1(Stdlib[30], b), 0]);
      case 5:
       var
        e = param[3],
        op = param[2],
        _x_ = [0, string_of_expr(e), 0],
        _y_ = op ? cst_NOT : cst_NEG;
       return mk_con(cst_UnaryOp, [0, _y_, _x_]);
      case 6:
       var
        e2 = param[4],
        op$0 = param[3],
        e1 = param[2],
        _z_ = [0, string_of_expr(e2), 0];
       switch(op$0){
         case 0:
          var _A_ = cst_ADD; break;
         case 1:
          var _A_ = cst_MUL; break;
         case 2:
          var _A_ = cst_DIV; break;
         case 3:
          var _A_ = cst_SUB; break;
         case 4:
          var _A_ = cst_LT; break;
         case 5:
          var _A_ = cst_AND; break;
         case 6:
          var _A_ = cst_OR; break;
         case 7:
          var _A_ = cst_EQ; break;
         case 8:
          var _A_ = cst_EQB; break;
         default: var _A_ = cst_EQI;
       }
       return mk_con(cst_Op, [0, string_of_expr(e1), [0, _A_, _z_]]);
      case 7:
       var
        e3 = param[4],
        e2$0 = param[3],
        e1$0 = param[2],
        _B_ = [0, string_of_expr(e3), 0],
        _C_ = [0, string_of_expr(e2$0), _B_];
       return mk_con(cst_If, [0, string_of_expr(e1$0), _C_]);
      case 8:
       var
        e2$1 = param[3],
        e1$1 = param[2],
        _D_ = [0, string_of_expr(e2$1), 0];
       return mk_con(cst_Pair, [0, string_of_expr(e1$1), _D_]);
      case 9:
       var e$0 = param[2];
       return mk_con(cst_Fst, [0, string_of_expr(e$0), 0]);
      case 10:
       var e$1 = param[2];
       return mk_con(cst_Snd, [0, string_of_expr(e$1), 0]);
      case 11:
       var e$2 = param[3];
       return mk_con(cst_Inl, [0, string_of_expr(e$2), 0]);
      case 12:
       var e$3 = param[3];
       return mk_con(cst_Inr, [0, string_of_expr(e$3), 0]);
      case 13:
       var
        _E_ = param[4],
        e2$2 = _E_[3],
        x2 = _E_[1],
        match = param[3],
        e1$2 = match[3],
        t1 = match[2],
        x1 = match[1],
        e$4 = param[2],
        _F_ = [0, string_of_expr(e2$2), 0],
        _G_ = [0, mk_con(cst$26, [0, x2, [0, string_of_type(t1), _F_]]), 0],
        _H_ = [0, string_of_expr(e1$2), 0],
        _I_ = [0, mk_con(cst$27, [0, x1, [0, string_of_type(t1), _H_]]), _G_];
       return mk_con(cst_Case, [0, string_of_expr(e$4), _I_]);
      case 14:
       var
        e2$3 = param[3],
        e1$3 = param[2],
        _J_ = [0, string_of_expr(e2$3), 0];
       return mk_con(cst_While, [0, string_of_expr(e1$3), _J_]);
      case 15:
       var el = param[2];
       return mk_con(cst_Seq, [0, string_of_expr_list(el), 0]);
      case 16:
       var e$5 = param[2];
       return mk_con(cst_Ref, [0, string_of_expr(e$5), 0]);
      case 17:
       var e$6 = param[2];
       return mk_con(cst_Deref, [0, string_of_expr(e$6), 0]);
      case 18:
       var
        e2$4 = param[3],
        e1$4 = param[2],
        _K_ = [0, string_of_expr(e2$4), 0];
       return mk_con(cst_Assign, [0, string_of_expr(e1$4), _K_]);
      case 19:
       var
        match$0 = param[2],
        e$7 = match$0[3],
        t = match$0[2],
        x$0 = match$0[1],
        _L_ = [0, string_of_expr(e$7), 0];
       return mk_con(cst_Lambda, [0, x$0, [0, string_of_type(t), _L_]]);
      case 20:
       var
        e2$5 = param[3],
        e1$5 = param[2],
        _M_ = [0, string_of_expr(e2$5), 0];
       return mk_con(cst_App, [0, string_of_expr(e1$5), _M_]);
      case 21:
       var
        e2$6 = param[5],
        e1$6 = param[4],
        t$0 = param[3],
        x$1 = param[2],
        _N_ = [0, string_of_expr(e2$6), 0],
        _O_ = [0, string_of_expr(e1$6), _N_];
       return mk_con(cst_Let, [0, x$1, [0, string_of_type(t$0), _O_]]);
      case 22:
       var
        e2$7 = param[5],
        t2 = param[4],
        match$1 = param[3],
        e1$7 = match$1[3],
        t1$0 = match$1[2],
        x$2 = match$1[1],
        f = param[2],
        _P_ = [0, string_of_expr(e2$7), 0],
        _Q_ = [0, string_of_type(t2), _P_],
        _R_ = [0, string_of_expr(e1$7), 0];
       return mk_con
               (cst_LetFun,
                [0,
                 f,
                 [0,
                  mk_con(cst$28, [0, x$2, [0, string_of_type(t1$0), _R_]]),
                  _Q_]]);
      default:
       var
        e2$8 = param[5],
        t2$0 = param[4],
        match$2 = param[3],
        e1$8 = match$2[3],
        t1$1 = match$2[2],
        x$3 = match$2[1],
        f$0 = param[2],
        _S_ = [0, string_of_expr(e2$8), 0],
        _T_ = [0, string_of_type(t2$0), _S_],
        _U_ = [0, string_of_expr(e1$8), 0];
       return mk_con
               (cst_LetRecFun,
                [0,
                 f$0,
                 [0,
                  mk_con(cst$29, [0, x$3, [0, string_of_type(t1$1), _U_]]),
                  _T_]]);
    }
   }
   function string_of_expr_list(param){
    if(! param) return cst$31;
    var e = param[1];
    if(! param[2]) return string_of_expr(e);
    var
     rest = param[2],
     _u_ = string_of_expr_list(rest),
     _v_ = caml_call2(Stdlib[28], cst$30, _u_),
     _w_ = string_of_expr(e);
    return caml_call2(Stdlib[28], _w_, _v_);
   }
   var
    Slanglib_Past =
      [0,
       loc_of_expr,
       string_of_loc,
       pp_uop,
       pp_bop,
       string_of_type,
       string_of_expr,
       print_expr,
       eprint_expr];
   runtime.caml_register_global(106, Slanglib_Past, "Slanglib__Past");
   return;
  }
  (globalThis));

//# 1042 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_expression = "\nexpression ",
    cst_has_type = "\nhas type ",
    cst_LetRecFun_found_in_parsed_$1 = "LetRecFun found in parsed AST",
    cst_boolean$6 = "boolean",
    cst_integer$10 = "integer",
    cst_product$1 = "product",
    cst_ref_type$1 = "ref type",
    caml_equal = runtime.caml_equal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    partial = [11, cst_has_type, [2, 0, 0]],
    Slanglib_Past = global_data.Slanglib__Past,
    Slanglib_Errors = global_data.Slanglib__Errors,
    Stdlib_list = global_data.Stdlib__list,
    Stdlib = global_data.Stdlib,
    _a_ = [0, [11, "INTERNAL ERROR: ", [2, 0, 0]], "INTERNAL ERROR: %s"],
    _b_ =
      [0,
       [11,
        "ERROR at location ",
        [2,
         0,
         [11,
          "\nExpression ",
          [2,
           0,
           [11, cst_has_type, [2, 0, [11, ", but expecting ", [2, 0, 0]]]]]]]],
       "ERROR at location %s\nExpression %s\nhas type %s, but expecting %s"],
    _c_ =
      [0,
       [11,
        "Error near location ",
        [2,
         0,
         [11,
          "\nExpecting type ",
          [2, 0, [11, " to be equal to type ", [2, 0, 0]]]]]],
       "Error near location %s\nExpecting type %s to be equal to type %s"],
    _d_ =
      [0,
       [11,
        "ERROR, Type Mismatch: expecting equal types, however\nat location ",
        [2,
         0,
         [11,
          cst_expression,
          [2,
           0,
           [11,
            cst_has_type,
            [2,
             0,
             [11,
              " and at location ",
              [2, 0, [11, cst_expression, [2, 0, partial]]]]]]]]]],
       "ERROR, Type Mismatch: expecting equal types, however\nat location %s\nexpression %s\nhas type %s and at location %s\nexpression %s\nhas type %s"],
    _e_ =
      [0,
       [2, 0, [11, " is not defined at ", [2, 0, 0]]],
       "%s is not defined at %s"],
    cst_boolean = cst_boolean$6,
    cst_function_type = "function type",
    cst_product = cst_product$1,
    cst_product$0 = cst_product$1,
    cst_ref_type = cst_ref_type$1,
    cst_boolean$0 = cst_boolean$6,
    cst_integer = cst_integer$10,
    cst_integer$0 = cst_integer$10,
    cst_integer$1 = cst_integer$10,
    cst_integer$2 = cst_integer$10,
    cst_integer$3 = cst_integer$10,
    cst_integer$4 = cst_integer$10,
    cst_integer$5 = cst_integer$10,
    cst_integer$6 = cst_integer$10,
    cst_integer$7 = cst_integer$10,
    cst_integer$8 = cst_integer$10,
    cst_integer$9 = cst_integer$10,
    cst_boolean$1 = cst_boolean$6,
    cst_boolean$2 = cst_boolean$6,
    cst_boolean$3 = cst_boolean$6,
    cst_boolean$4 = cst_boolean$6,
    cst_EQB_found_in_parsed_AST = "EQB found in parsed AST",
    cst_EQI_found_in_parsed_AST = "EQI found in parsed AST",
    cst_unit_type = "unit type",
    cst_boolean$5 = cst_boolean$6,
    cst_ref_type$0 = cst_ref_type$1,
    cst_disjoint_union = "disjoint union",
    cst_LetRecFun_found_in_parsed_ = cst_LetRecFun_found_in_parsed_$1,
    cst_LetRecFun_found_in_parsed_$0 = cst_LetRecFun_found_in_parsed_$1,
    cst_empty_sequence_found_in_pa = "empty sequence found in parsed AST";
   function internal_error(msg){
    return caml_call2(Slanglib_Errors[3], _a_, msg);
   }
   function report_expecting(e, msg, t){
    var
     loc = caml_call1(Slanglib_Past[1], e),
     _V_ = caml_call1(Slanglib_Past[5], t),
     _W_ = caml_call1(Slanglib_Past[6], e),
     _X_ = caml_call1(Slanglib_Past[2], loc);
    return caml_call5(Slanglib_Errors[3], _b_, _X_, _W_, _V_, msg);
   }
   function report_types_not_equal(loc, t1, t2){
    var
     _S_ = caml_call1(Slanglib_Past[5], t2),
     _T_ = caml_call1(Slanglib_Past[5], t1),
     _U_ = caml_call1(Slanglib_Past[2], loc);
    return caml_call4(Slanglib_Errors[3], _c_, _U_, _T_, _S_);
   }
   function report_type_mismatch(param, _L_){
    var
     t2 = _L_[2],
     e2 = _L_[1],
     t1 = param[2],
     e1 = param[1],
     loc1 = caml_call1(Slanglib_Past[1], e1),
     loc2 = caml_call1(Slanglib_Past[1], e2),
     _M_ = caml_call1(Slanglib_Past[5], t2),
     _N_ = caml_call1(Slanglib_Past[6], e2),
     _O_ = caml_call1(Slanglib_Past[2], loc2),
     _P_ = caml_call1(Slanglib_Past[5], t1),
     _Q_ = caml_call1(Slanglib_Past[6], e1),
     _R_ = caml_call1(Slanglib_Past[2], loc1);
    return caml_call7(Slanglib_Errors[3], _d_, _R_, _Q_, _P_, _O_, _N_, _M_);
   }
   function make_letfun(loc, f, x, t1, t2, param, _K_){
    var t = _K_[2], e = _K_[1], t2$0 = param[2], body = param[1];
    return caml_equal(t2, t2$0)
            ? [0, [22, loc, f, [0, x, t1, body], t2, e], t]
            : report_expecting(body, caml_call1(Slanglib_Past[5], t2), t2$0);
   }
   function make_letrecfun(loc, f, x, t1, t2, param, _J_){
    var t = _J_[2], e = _J_[1], t2$0 = param[2], body = param[1];
    return caml_equal(t2, t2$0)
            ? [0, [23, loc, f, [0, x, t1, body], t2, e], t]
            : report_expecting(body, caml_call1(Slanglib_Past[5], t2), t2$0);
   }
   function fv(bound, param){
    var bound$0 = bound, param$0 = param;
    for(;;){
     a:
     {
      switch(param$0[0]){
        case 0:
         return 0;
        case 1:
         return 0;
        case 2:
         var x = param$0[2];
         if(caml_call2(Stdlib_list[36], x, bound$0)) return 0;
         var x$0 = param$0[2];
         return [0, x$0, 0];
        case 3:
         return 0;
        case 4:
         return 0;
        case 6:
         var e2 = param$0[4], e1 = param$0[2]; break a;
        case 7:
         var
          e3 = param$0[4],
          e2$0 = param$0[3],
          e1$0 = param$0[2],
          _v_ = fv(bound$0, e3),
          _w_ = fv(bound$0, e2$0),
          _x_ = caml_call2(Stdlib[37], _w_, _v_),
          _y_ = fv(bound$0, e1$0);
         return caml_call2(Stdlib[37], _y_, _x_);
        case 13:
         var
          _z_ = param$0[4],
          e2$1 = _z_[3],
          y = _z_[1],
          match = param$0[3],
          e1$1 = match[3],
          x$1 = match[1],
          e$0 = param$0[2],
          _A_ = fv([0, y, bound$0], e2$1),
          _B_ = fv([0, x$1, bound$0], e1$1),
          _C_ = caml_call2(Stdlib[37], _B_, _A_),
          _D_ = fv(bound$0, e$0);
         return caml_call2(Stdlib[37], _D_, _C_);
        case 15:
         var el = param$0[2];
         return caml_call2
                 (Stdlib_list[23],
                  function(_I_){return fv(bound$0, _I_);},
                  el);
        case 19:
         var
          match$0 = param$0[2],
          e$1 = match$0[3],
          x$2 = match$0[1],
          bound$1 = [0, x$2, bound$0];
         bound$0 = bound$1;
         param$0 = e$1;
         continue;
        case 21:
         var
          e2$2 = param$0[5],
          e1$2 = param$0[4],
          x$3 = param$0[2],
          _E_ = fv([0, x$3, bound$0], e2$2),
          _F_ = fv(bound$0, e1$2);
         return caml_call2(Stdlib[37], _F_, _E_);
        case 22:
         var
          e$2 = param$0[5],
          match$1 = param$0[3],
          body = match$1[3],
          x$4 = match$1[1],
          f = param$0[2],
          _G_ = fv([0, f, bound$0], e$2),
          _H_ = fv([0, f, [0, x$4, bound$0]], body);
         return caml_call2(Stdlib[37], _H_, _G_);
        case 23:
         return internal_error(cst_LetRecFun_found_in_parsed_);
        case 5:
        case 11:
        case 12:
         var e = param$0[3]; break;
        case 8:
        case 14:
        case 18:
        case 20:
         var e2 = param$0[3], e1 = param$0[2]; break a;
        default: var e = param$0[2];
      }
      param$0 = e;
      continue;
     }
     var _t_ = fv(bound$0, e2), _u_ = fv(bound$0, e1);
     return caml_call2(Stdlib[37], _u_, _t_);
    }
   }
   function elaborate(env, e$7){
    switch(e$7[0]){
      case 0:
       return [0, e$7, 2];
      case 1:
       return [0, e$7, 0];
      case 2:
       var x = e$7[2], loc = e$7[1], param = env;
       for(;;){
        if(param){
         var match = param[1], v = match[2], y = match[1];
         if(x !== y){var rest = param[2]; param = rest; continue;}
         var _g_ = v;
        }
        else
         var
          _f_ = caml_call1(Slanglib_Past[2], loc),
          _g_ = caml_call3(Slanglib_Errors[3], _e_, x, _f_);
        return [0, e$7, _g_];
       }
      case 3:
       return [0, e$7, 0];
      case 4:
       return [0, e$7, 1];
      case 5:
       var
        e$8 = e$7[3],
        uop = e$7[2],
        loc$0 = e$7[1],
        param$0 = elaborate(env, e$8),
        t$6 = param$0[2],
        e$6 = param$0[1];
       if(uop){
        if(typeof t$6 === "number" && 1 === t$6)
         return [0, [5, loc$0, uop, e$6], t$6];
        return report_expecting(e$6, cst_boolean$0, t$6);
       }
       if(typeof t$6 === "number" && ! t$6)
        return [0, [5, loc$0, uop, e$6], t$6];
       return report_expecting(e$6, cst_integer, t$6);
      case 6:
       var
        e2$7 = e$7[4],
        bop = e$7[3],
        e1$7 = e$7[2],
        loc$1 = e$7[1],
        _h_ = elaborate(env, e2$7),
        param$1 = elaborate(env, e1$7),
        t2$5 = _h_[2],
        e2$3 = _h_[1],
        t1$4 = param$1[2],
        e1$3 = param$1[1];
       switch(bop){
         case 0:
          if(typeof t1$4 === "number" && ! t1$4){
           if(typeof t2$5 === "number" && ! t2$5)
            return [0, [6, loc$1, e1$3, bop, e2$3], t1$4];
           return report_expecting(e2$3, cst_integer$1, t2$5);
          }
          return report_expecting(e1$3, cst_integer$0, t1$4);
         case 1:
          if(typeof t1$4 === "number" && ! t1$4){
           if(typeof t2$5 === "number" && ! t2$5)
            return [0, [6, loc$1, e1$3, bop, e2$3], t1$4];
           return report_expecting(e2$3, cst_integer$3, t2$5);
          }
          return report_expecting(e1$3, cst_integer$2, t1$4);
         case 2:
          if(typeof t1$4 === "number" && ! t1$4){
           if(typeof t2$5 === "number" && ! t2$5)
            return [0, [6, loc$1, e1$3, bop, e2$3], t1$4];
           return report_expecting(e2$3, cst_integer$5, t2$5);
          }
          return report_expecting(e1$3, cst_integer$4, t1$4);
         case 3:
          if(typeof t1$4 === "number" && ! t1$4){
           if(typeof t2$5 === "number" && ! t2$5)
            return [0, [6, loc$1, e1$3, bop, e2$3], t1$4];
           return report_expecting(e2$3, cst_integer$7, t2$5);
          }
          return report_expecting(e1$3, cst_integer$6, t1$4);
         case 4:
          if(typeof t1$4 === "number" && ! t1$4){
           if(typeof t2$5 === "number" && ! t2$5)
            return [0, [6, loc$1, e1$3, bop, e2$3], 1];
           return report_expecting(e2$3, cst_integer$9, t2$5);
          }
          return report_expecting(e1$3, cst_integer$8, t1$4);
         case 5:
          if(typeof t1$4 === "number" && 1 === t1$4){
           if(typeof t2$5 === "number" && 1 === t2$5)
            return [0, [6, loc$1, e1$3, bop, e2$3], t1$4];
           return report_expecting(e2$3, cst_boolean$1, t2$5);
          }
          return report_expecting(e1$3, cst_boolean$2, t1$4);
         case 6:
          if(typeof t1$4 === "number" && 1 === t1$4){
           if(typeof t2$5 === "number" && 1 === t2$5)
            return [0, [6, loc$1, e1$3, bop, e2$3], t1$4];
           return report_expecting(e2$3, cst_boolean$3, t2$5);
          }
          return report_expecting(e1$3, cst_boolean$4, t1$4);
         case 7:
          if(typeof t1$4 === "number")
           switch(t1$4){
             case 0:
              if(typeof t2$5 === "number" && ! t2$5)
               return [0, [6, loc$1, e1$3, 9, e2$3], 1];
              break;
             case 1:
              if(typeof t2$5 === "number" && 1 === t2$5)
               return [0, [6, loc$1, e1$3, 8, e2$3], t1$4];
              break;
           }
          return report_type_mismatch([0, e1$3, t1$4], [0, e2$3, t2$5]);
         case 8:
          return internal_error(cst_EQB_found_in_parsed_AST);
         default: return internal_error(cst_EQI_found_in_parsed_AST);
       }
      case 7:
       var
        e3$1 = e$7[4],
        e2$8 = e$7[3],
        e1$8 = e$7[2],
        loc$2 = e$7[1],
        _i_ = elaborate(env, e3$1),
        _j_ = elaborate(env, e2$8),
        param$2 = elaborate(env, e1$8),
        t3 = _i_[2],
        e3 = _i_[1],
        t2$3 = _j_[2],
        e2$1 = _j_[1],
        t1$2 = param$2[2],
        e1$1 = param$2[1];
       if(typeof t1$2 === "number" && 1 === t1$2)
        return caml_equal(t2$3, t3)
                ? [0, [7, loc$2, e1$1, e2$1, e3], t2$3]
                : report_type_mismatch([0, e2$1, t2$3], [0, e3, t3]);
       return report_expecting(e1$1, cst_boolean, t1$2);
      case 8:
       var
        e2$9 = e$7[3],
        e1$9 = e$7[2],
        loc$3 = e$7[1],
        _k_ = elaborate(env, e2$9),
        param$3 = elaborate(env, e1$9),
        t2 = _k_[2],
        e2 = _k_[1],
        t1 = param$3[2],
        e1 = param$3[1];
       return [0, [8, loc$3, e1, e2], [2, t1, t2]];
      case 9:
       var
        e$9 = e$7[2],
        loc$4 = e$7[1],
        param$4 = elaborate(env, e$9),
        e$3 = param$4[1],
        match$0 = param$4[2];
       if(typeof match$0 !== "number" && 2 === match$0[0]){
        var t$1 = match$0[1];
        return [0, [9, loc$4, e$3], t$1];
       }
       var t$0 = param$4[2];
       return report_expecting(e$3, cst_product, t$0);
      case 10:
       var
        e$10 = e$7[2],
        loc$5 = e$7[1],
        param$5 = elaborate(env, e$10),
        e$4 = param$5[1],
        match$1 = param$5[2];
       if(typeof match$1 !== "number" && 2 === match$1[0]){
        var t$3 = match$1[2];
        return [0, [10, loc$5, e$4], t$3];
       }
       var t$2 = param$5[2];
       return report_expecting(e$4, cst_product$0, t$2);
      case 11:
       var
        e$11 = e$7[3],
        t2$9 = e$7[2],
        loc$6 = e$7[1],
        param$6 = elaborate(env, e$11),
        t1$0 = param$6[2],
        e = param$6[1];
       return [0, [11, loc$6, t2$9, e], [3, t1$0, t2$9]];
      case 12:
       var
        e$12 = e$7[3],
        t1$9 = e$7[2],
        loc$7 = e$7[1],
        param$7 = elaborate(env, e$12),
        t2$0 = param$7[2],
        e$0 = param$7[1];
       return [0, [12, loc$7, t1$9, e$0], [3, t1$9, t2$0]];
      case 13:
       var
        _l_ = e$7[4],
        e2$10 = _l_[3],
        tr$0 = _l_[2],
        x2 = _l_[1],
        match$3 = e$7[3],
        e1$10 = match$3[3],
        t1$10 = match$3[2],
        x1 = match$3[1],
        e$13 = e$7[2],
        loc$8 = e$7[1],
        _m_ = elaborate([0, [0, x2, tr$0], env], e2$10),
        _n_ = elaborate([0, [0, x1, t1$10], env], e1$10),
        param$8 = elaborate(env, e$13),
        t3$1 = _m_[2],
        e3$0 = _m_[1],
        t2$8 = _n_[2],
        e2$6 = _n_[1],
        t1$8 = param$8[2],
        e1$6 = param$8[1];
       if(typeof t1$8 !== "number" && 3 === t1$8[0]){
        var tl = t1$8[1], tr = t1$8[2];
        return caml_equal(t1$10, tl)
                ? caml_equal
                   (tr$0, tr)
                  ? caml_equal
                     (t3$1, t2$8)
                    ? [0,
                      [13, loc$8, e1$6, [0, x1, t1$10, e2$6], [0, x2, tr$0, e3$0]],
                      t2$8]
                    : report_type_mismatch([0, e2$6, t2$8], [0, e3$0, t3$1])
                  : report_types_not_equal(loc$8, tr$0, tr)
                : report_types_not_equal(loc$8, t1$10, tl);
       }
       return report_expecting(e1$6, cst_disjoint_union, t1$8);
      case 14:
       var
        e2$11 = e$7[3],
        e1$11 = e$7[2],
        loc$9 = e$7[1],
        _o_ = elaborate(env, e2$11),
        param$9 = elaborate(env, e1$11),
        t2$6 = _o_[2],
        e2$4 = _o_[1],
        t1$5 = param$9[2],
        e1$4 = param$9[1];
       if(typeof t1$5 === "number" && 1 === t1$5){
        if(typeof t2$6 === "number" && 2 <= t2$6)
         return [0, [14, loc$9, e1$4, e2$4], 2];
        return report_expecting(e2$4, cst_unit_type, t2$6);
       }
       return report_expecting(e1$4, cst_boolean$5, t1$5);
      case 15:
       var el = e$7[2], loc$10 = e$7[1], carry = 0, param$16 = el;
       for(;;){
        if(! param$16) return internal_error(cst_empty_sequence_found_in_pa);
        var e$18 = param$16[1];
        if(! param$16[2]){
         var
          match$6 = elaborate(env, e$18),
          t$7 = match$6[2],
          e$20 = match$6[1];
         return [0,
                 [15, loc$10, caml_call1(Stdlib_list[9], [0, e$20, carry])],
                 t$7];
        }
        var
         rest$0 = param$16[2],
         e$19 = elaborate(env, e$18)[1],
         carry$0 = [0, e$19, carry];
        carry = carry$0;
        param$16 = rest$0;
       }
       break;
      case 16:
       var
        e$14 = e$7[2],
        loc$11 = e$7[1],
        param$10 = elaborate(env, e$14),
        t = param$10[2],
        e$2 = param$10[1];
       return [0, [16, loc$11, e$2], [0, t]];
      case 17:
       var
        e$15 = e$7[2],
        loc$12 = e$7[1],
        param$11 = elaborate(env, e$15),
        e$5 = param$11[1],
        match$2 = param$11[2];
       if(typeof match$2 !== "number" && 0 === match$2[0]){
        var t$5 = match$2[1];
        return [0, [17, loc$12, e$5], t$5];
       }
       var t$4 = param$11[2];
       return report_expecting(e$5, cst_ref_type, t$4);
      case 18:
       var
        e2$12 = e$7[3],
        e1$12 = e$7[2],
        loc$13 = e$7[1],
        _p_ = elaborate(env, e2$12),
        param$12 = elaborate(env, e1$12),
        t2$7 = _p_[2],
        e2$5 = _p_[1],
        t1$6 = param$12[2],
        e1$5 = param$12[1];
       if(typeof t1$6 !== "number" && 0 === t1$6[0]){
        var t1$7 = t1$6[1];
        return caml_equal(t1$7, t2$7)
                ? [0, [18, loc$13, e1$5, e2$5], 2]
                : report_type_mismatch([0, e1$5, t1$7], [0, e2$5, t2$7]);
       }
       return report_expecting(e1$5, cst_ref_type$0, t1$6);
      case 19:
       var
        match$4 = e$7[2],
        e$16 = match$4[3],
        t1$11 = match$4[2],
        x$0 = match$4[1],
        loc$14 = e$7[1],
        param$13 = elaborate([0, [0, x$0, t1$11], env], e$16),
        t2$1 = param$13[2],
        e$1 = param$13[1];
       return [0, [19, loc$14, [0, x$0, t1$11, e$1]], [1, t1$11, t2$1]];
      case 20:
       var
        e2$13 = e$7[3],
        e1$13 = e$7[2],
        loc$15 = e$7[1],
        _q_ = elaborate(env, e2$13),
        param$14 = elaborate(env, e1$13),
        t2$4 = _q_[2],
        e2$2 = _q_[1],
        t1$3 = param$14[2],
        e1$2 = param$14[1];
       if(typeof t1$3 !== "number" && 1 === t1$3[0]){
        var t3$0 = t1$3[1], t4 = t1$3[2];
        return caml_equal(t2$4, t3$0)
                ? [0, [20, loc$15, e1$2, e2$2], t4]
                : report_expecting
                  (e2$2, caml_call1(Slanglib_Past[5], t3$0), t2$4);
       }
       return report_expecting(e1$2, cst_function_type, t1$3);
      case 21:
       var
        e2$14 = e$7[5],
        e1$14 = e$7[4],
        t1$12 = e$7[3],
        x$1 = e$7[2],
        loc$16 = e$7[1],
        _r_ = elaborate([0, [0, x$1, t1$12], env], e2$14),
        param$15 = elaborate(env, e1$14),
        t2$2 = _r_[2],
        e2$0 = _r_[1],
        t1$1 = param$15[2],
        e1$0 = param$15[1];
       return caml_equal(t1$12, t1$1)
               ? [0, [21, loc$16, x$1, t1$12, e1$0, e2$0], t2$2]
               : report_types_not_equal(loc$16, t1$12, t1$1);
      case 22:
       var
        e$17 = e$7[5],
        t2$10 = e$7[4],
        match$5 = e$7[3],
        body = match$5[3],
        t1$13 = match$5[2],
        x$2 = match$5[1],
        f = e$7[2],
        loc$17 = e$7[1],
        env$0 = [0, [0, f, [1, t1$13, t2$10]], env],
        body$0 = elaborate([0, [0, x$2, t1$13], env$0], body),
        bound_vars_except_f =
          [0,
           x$2,
           caml_call2
            (Stdlib_list[22],
             function(param){var z = param[1]; return z === f ? 0 : [0, x$2];},
             env)],
        _s_ = fv(bound_vars_except_f, body),
        make =
          caml_call2(Stdlib_list[36], f, _s_) ? make_letrecfun : make_letfun;
       return make
               (loc$17, f, x$2, t1$13, t2$10, body$0, elaborate(env$0, e$17));
      default: return internal_error(cst_LetRecFun_found_in_parsed_$0);
    }
   }
   var Slanglib_Static = [0, elaborate];
   runtime.caml_register_global(39, Slanglib_Static, "Slanglib__Static");
   return;
  }
  (globalThis));

//# 1701 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "",
    cst$2 = "\n",
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "|- ",
    cst$0 = cst$2,
    cst$1 = cst$2,
    indent_list = [0, cst$3, 0],
    output = cst$3,
    Stdlib_list = global_data.Stdlib__list,
    Stdlib = global_data.Stdlib,
    Stdlib_char = global_data.Stdlib__char,
    Stdlib_string = global_data.Stdlib__string;
   function tail(s){
    return caml_call3
            (Stdlib_string[9], s, 1, caml_ml_string_length(s) - 1 | 0);
   }
   function pp_no_bracket(left){
    var output$0 = output, indent_list$0 = indent_list, left$0 = left;
    for(;;){
     if(left$0 === cst$3) return output$0;
     var c = caml_string_get(left$0, 0), switcher = c - 32 | 0;
     if(12 >= switcher >>> 0)
      switch(switcher){
        case 0:
         var left$2 = tail(left$0); left$0 = left$2; continue;
        case 8:
         var old_indent = caml_call1(Stdlib_list[5], indent_list$0);
         let old_indent$0 = old_indent, c_to = 32;
         var
          char_map =
            function(i){
             return caml_string_get(old_indent$0, i) === 45
                     ? c_to
                     : caml_string_get(old_indent$0, i);
            },
          _a_ =
            caml_call2
             (Stdlib_string[2], caml_ml_string_length(old_indent), char_map),
          new_indent = caml_call2(Stdlib[28], _a_, cst),
          left$3 = tail(left$0),
          indent_list$1 = [0, new_indent, indent_list$0],
          _c_ = caml_call2(Stdlib[28], cst$0, new_indent),
          output$2 = caml_call2(Stdlib[28], output$0, _c_);
         output$0 = output$2;
         indent_list$0 = indent_list$1;
         left$0 = left$3;
         continue;
        case 9:
         var
          left$4 = tail(left$0),
          indent_list$2 = caml_call1(Stdlib_list[6], indent_list$0);
         indent_list$0 = indent_list$2;
         left$0 = left$4;
         continue;
        case 12:
         var
          left$5 = tail(left$0),
          _d_ = caml_call1(Stdlib_list[5], indent_list$0),
          _e_ = caml_call2(Stdlib[28], cst$1, _d_),
          output$3 = caml_call2(Stdlib[28], output$0, _e_);
         output$0 = output$3;
         left$0 = left$5;
         continue;
      }
     var
      left$1 = tail(left$0),
      _b_ = caml_call1(Stdlib_char[2], c),
      output$1 = caml_call2(Stdlib[28], output$0, _b_);
     output$0 = output$1;
     left$0 = left$1;
    }
   }
   var Slanglib_Pptree = [0, pp_no_bracket];
   runtime.caml_register_global(10, Slanglib_Pptree, "Slanglib__Pptree");
   return;
  }
  (globalThis));

//# 1804 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$19 = "",
    cst$22 = " -> ",
    cst_end = " end",
    cst$25 = ")",
    cst$23 = ") =",
    cst$20 = ", ",
    cst$26 = "-",
    cst$24 = "; ",
    cst_2 = "<2>",
    cst$21 = "@ ",
    cst_end$0 = "end",
    cst_in = "in ";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) === 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   function caml_call12(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11){
    return (f.l >= 0 ? f.l : f.l = f.length) === 12
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$8 = "()",
    partial =
      [17,
       [0, cst$21, 1, 0],
       [11, "| inr ", [15, [11, cst$22, [15, [11, cst_end, [17, 0, 0]]]]]]],
    partial$0 =
      [11,
       cst_in,
       [15, [12, 32, [17, [0, cst$21, 1, 0], [11, cst_end$0, [17, 0, 0]]]]]],
    partial$1 = [0, cst$21, 1, 0],
    partial$2 =
      [11,
       cst_in,
       [15, [12, 32, [17, [0, cst$21, 1, 0], [11, cst_end$0, [17, 0, 0]]]]]],
    partial$3 = [0, cst$21, 1, 0],
    cst$13 = cst$19,
    cst$14 = cst$19,
    cst$15 = cst$19,
    cst$16 = cst$19,
    cst$17 = cst$24,
    cst$18 = cst$19,
    cst$9 = cst$20,
    cst$10 = cst$25,
    cst$11 = cst$25,
    cst$12 = "(",
    cst$1 = "+",
    cst$2 = "*",
    cst$3 = "/",
    cst$4 = cst$26,
    cst$5 = "<",
    cst$6 = "&&",
    cst$7 = "||",
    cst = cst$26,
    cst$0 = "~",
    Stdlib = global_data.Stdlib,
    Stdlib_format = global_data.Stdlib__format,
    cst_read = "read",
    cst_eqb = "eqb",
    cst_eqi = "eqi",
    _a_ = [0, [2, 0, 0], "%s"],
    _b_ = [0, [15, [12, 40, [15, [12, 41, 0]]]], "%a(%a)"],
    _c_ =
      [0,
       [12, 40, [15, [12, 32, [15, [12, 32, [15, [12, 41, 0]]]]]]],
       "(%a %a %a)"],
    _d_ =
      [0,
       [18,
        [1, [0, 0, cst$19]],
        [11,
         "if ",
         [15,
          [11, " then ", [15, [11, " else ", [15, [12, 32, [17, 0, 0]]]]]]]]],
       "@[if %a then %a else %a @]"],
    _e_ = [0, [12, 40, [15, [11, cst$20, [15, [12, 41, 0]]]]], "(%a, %a)"],
    _f_ = [0, [11, "fst(", [15, [12, 41, 0]]], "fst(%a)"],
    _g_ = [0, [11, "snd(", [15, [12, 41, 0]]], "snd(%a)"],
    _h_ = [0, [11, "inl(", [15, [12, 41, 0]]], "inl(%a)"],
    _i_ = [0, [11, "inr(", [15, [12, 41, 0]]], "inr(%a)"],
    _j_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "case ",
         [15,
          [11,
           " of",
           [17,
            [0, cst$21, 1, 0],
            [11, "| inl ", [15, [11, cst$22, [15, [12, 32, partial]]]]]]]]]],
       "@[<2>case %a of@ | inl %a -> %a @ | inr %a -> %a end@]"],
    _k_ =
      [0,
       [11, "while ", [15, [11, " do ", [15, [11, cst_end, 0]]]]],
       "while %a do %a end"],
    _l_ = [0, [11, "begin ", [15, [11, cst_end, 0]]], "begin %a end"],
    _m_ = [0, [11, "ref(", [15, [12, 41, 0]]], "ref(%a)"],
    _n_ = [0, [11, "!(", [15, [12, 41, 0]]], "!(%a)"],
    _o_ = [0, [12, 40, [15, [11, " := ", [15, [12, 41, 0]]]]], "(%a := %a)"],
    _p_ =
      [0,
       [11, "(fun ", [15, [11, cst$22, [15, [12, 41, 0]]]]],
       "(fun %a -> %a)"],
    _q_ = [0, [15, [12, 32, [15, 0]]], "%a %a"],
    _r_ =
      [0,
       [18,
        [1, [0, 0, cst$19]],
        [11,
         "let ",
         [15,
          [12,
           40,
           [15,
            [11,
             cst$23,
             [17,
              [0, cst$21, 1, 0],
              [15, [12, 32, [17, partial$1, partial$0]]]]]]]]]],
       "@[let %a(%a) =@ %a @ in %a @ end@]"],
    _s_ =
      [0,
       [18,
        [1, [0, 0, cst$19]],
        [11,
         "letrec ",
         [15,
          [12,
           40,
           [15,
            [11,
             cst$23,
             [17,
              [0, cst$21, 1, 0],
              [15, [12, 32, [17, partial$3, partial$2]]]]]]]]]],
       "@[letrec %a(%a) =@ %a @ in %a @ end@]"],
    _t_ = [0, [15, [11, cst$24, [15, 0]]], "%a; %a"],
    cst_NEG = "NEG",
    cst_NOT = "NOT",
    cst_READ = "READ",
    cst_ADD = "ADD",
    cst_MUL = "MUL",
    cst_DIV = "DIV",
    cst_SUB = "SUB",
    cst_LT = "LT",
    cst_AND = "AND",
    cst_OR = "OR",
    cst_EQB = "EQB",
    cst_EQI = "EQI",
    cst_Unit = "Unit",
    cst_Var = "Var",
    cst_Integer = "Integer",
    cst_Boolean = "Boolean",
    cst_UnaryOp = "UnaryOp",
    cst_Op = "Op",
    cst_If = "If",
    cst_Pair = "Pair",
    cst_Fst = "Fst",
    cst_Snd = "Snd",
    cst_Inl = "Inl",
    cst_Inr = "Inr",
    cst_Case = "Case",
    cst_While = "While",
    cst_Seq = "Seq",
    cst_Ref = "Ref",
    cst_Deref = "Deref",
    cst_Assign = "Assign",
    cst_Lambda = "Lambda",
    cst_App = "App",
    cst_LetFun = "LetFun",
    cst_LetRecFun = "LetRecFun";
   function pp_uop(param){
    switch(param){
      case 0:
       return cst;
      case 1:
       return cst$0;
      default: return cst_read;
    }
   }
   function pp_bop(param){
    switch(param){
      case 0:
       return cst$1;
      case 1:
       return cst$2;
      case 2:
       return cst$3;
      case 3:
       return cst$4;
      case 4:
       return cst$5;
      case 5:
       return cst$6;
      case 6:
       return cst$7;
      case 7:
       return cst_eqb;
      default: return cst_eqi;
    }
   }
   function fstring(ppf, s){
    return caml_call3(Stdlib_format[126], ppf, _a_, s);
   }
   function pp_unary(ppf, t){return fstring(ppf, pp_uop(t));}
   function pp_binary(ppf, t){return fstring(ppf, pp_bop(t));}
   function pp_expr(ppf, param){
    if(typeof param === "number") return fstring(ppf, cst$8);
    switch(param[0]){
      case 0:
       var x = param[1]; return fstring(ppf, x);
      case 1:
       var n = param[1]; return fstring(ppf, caml_call1(Stdlib[33], n));
      case 2:
       var b = param[1]; return fstring(ppf, caml_call1(Stdlib[30], b));
      case 3:
       var e = param[2], op = param[1];
       return caml_call6
               (Stdlib_format[126], ppf, _b_, pp_unary, op, pp_expr, e);
      case 4:
       var e2 = param[3], op$0 = param[2], e1 = param[1];
       return caml_call8
               (Stdlib_format[126],
                ppf,
                _c_,
                pp_expr,
                e1,
                pp_binary,
                op$0,
                pp_expr,
                e2);
      case 5:
       var e3 = param[3], e2$0 = param[2], e1$0 = param[1];
       return caml_call8
               (Stdlib_format[126],
                ppf,
                _d_,
                pp_expr,
                e1$0,
                pp_expr,
                e2$0,
                pp_expr,
                e3);
      case 6:
       var e2$1 = param[2], e1$1 = param[1];
       return caml_call6
               (Stdlib_format[126], ppf, _e_, pp_expr, e1$1, pp_expr, e2$1);
      case 7:
       var e$0 = param[1];
       return caml_call4(Stdlib_format[126], ppf, _f_, pp_expr, e$0);
      case 8:
       var e$1 = param[1];
       return caml_call4(Stdlib_format[126], ppf, _g_, pp_expr, e$1);
      case 9:
       var e$2 = param[1];
       return caml_call4(Stdlib_format[126], ppf, _h_, pp_expr, e$2);
      case 10:
       var e$3 = param[1];
       return caml_call4(Stdlib_format[126], ppf, _i_, pp_expr, e$3);
      case 11:
       var
        _N_ = param[3],
        e2$2 = _N_[2],
        x2 = _N_[1],
        match = param[2],
        e1$2 = match[2],
        x1 = match[1],
        e$4 = param[1];
       return caml_call12
               (Stdlib_format[126],
                ppf,
                _j_,
                pp_expr,
                e$4,
                fstring,
                x1,
                pp_expr,
                e1$2,
                fstring,
                x2,
                pp_expr,
                e2$2);
      case 12:
       var e2$3 = param[2], e1$3 = param[1];
       return caml_call6
               (Stdlib_format[126], ppf, _k_, pp_expr, e1$3, pp_expr, e2$3);
      case 13:
       var el = param[1];
       return caml_call4(Stdlib_format[126], ppf, _l_, pp_expr_list, el);
      case 14:
       var e$5 = param[1];
       return caml_call4(Stdlib_format[126], ppf, _m_, pp_expr, e$5);
      case 15:
       var e$6 = param[1];
       return caml_call4(Stdlib_format[126], ppf, _n_, pp_expr, e$6);
      case 16:
       var e2$4 = param[2], e1$4 = param[1];
       return caml_call6
               (Stdlib_format[126], ppf, _o_, pp_expr, e1$4, pp_expr, e2$4);
      case 17:
       var match$0 = param[1], e$7 = match$0[2], x$0 = match$0[1];
       return caml_call6
               (Stdlib_format[126], ppf, _p_, fstring, x$0, pp_expr, e$7);
      case 18:
       var e2$5 = param[2], e1$5 = param[1];
       return caml_call6
               (Stdlib_format[126], ppf, _q_, pp_expr, e1$5, pp_expr, e2$5);
      case 19:
       var
        e2$6 = param[3],
        match$1 = param[2],
        e1$6 = match$1[2],
        x$1 = match$1[1],
        f = param[1];
       return caml_call10
               (Stdlib_format[126],
                ppf,
                _r_,
                fstring,
                f,
                fstring,
                x$1,
                pp_expr,
                e1$6,
                pp_expr,
                e2$6);
      default:
       var
        e2$7 = param[3],
        match$2 = param[2],
        e1$7 = match$2[2],
        x$2 = match$2[1],
        f$0 = param[1];
       return caml_call10
               (Stdlib_format[126],
                ppf,
                _s_,
                fstring,
                f$0,
                fstring,
                x$2,
                pp_expr,
                e1$7,
                pp_expr,
                e2$7);
    }
   }
   function pp_expr_list(ppf, param){
    if(! param) return 0;
    var e = param[1];
    if(! param[2]) return pp_expr(ppf, e);
    var rest = param[2];
    return caml_call6
            (Stdlib_format[126], ppf, _t_, pp_expr, e, pp_expr_list, rest);
   }
   function print_expr(e){
    pp_expr(Stdlib_format[107], e);
    return caml_call1(Stdlib_format[37], 0);
   }
   function eprint_expr(e){
    pp_expr(Stdlib_format[108], e);
    return caml_call2(Stdlib_format[36], Stdlib_format[108], 0);
   }
   function string_of_uop(param){
    switch(param){
      case 0:
       return cst_NEG;
      case 1:
       return cst_NOT;
      default: return cst_READ;
    }
   }
   function string_of_bop(param){
    switch(param){
      case 0:
       return cst_ADD;
      case 1:
       return cst_MUL;
      case 2:
       return cst_DIV;
      case 3:
       return cst_SUB;
      case 4:
       return cst_LT;
      case 5:
       return cst_AND;
      case 6:
       return cst_OR;
      case 7:
       return cst_EQB;
      default: return cst_EQI;
    }
   }
   function mk_con(con, l){
    var
     carry$1 = caml_call2(Stdlib[28], con, cst$12),
     carry = carry$1,
     param = l;
    for(;;){
     if(! param) return caml_call2(Stdlib[28], carry, cst$11);
     var s = param[1];
     if(! param[2]){
      var _M_ = caml_call2(Stdlib[28], s, cst$10);
      return caml_call2(Stdlib[28], carry, _M_);
     }
     var
      rest = param[2],
      _L_ = caml_call2(Stdlib[28], s, cst$9),
      carry$0 = caml_call2(Stdlib[28], carry, _L_);
     carry = carry$0;
     param = rest;
    }
   }
   function string_of_expr(param){
    if(typeof param === "number") return cst_Unit;
    switch(param[0]){
      case 0:
       var x = param[1]; return mk_con(cst_Var, [0, x, 0]);
      case 1:
       var n = param[1];
       return mk_con(cst_Integer, [0, caml_call1(Stdlib[33], n), 0]);
      case 2:
       var b = param[1];
       return mk_con(cst_Boolean, [0, caml_call1(Stdlib[30], b), 0]);
      case 3:
       var e = param[2], op = param[1], _x_ = [0, string_of_expr(e), 0];
       return mk_con(cst_UnaryOp, [0, string_of_uop(op), _x_]);
      case 4:
       var
        e2 = param[3],
        op$0 = param[2],
        e1 = param[1],
        _y_ = [0, string_of_expr(e2), 0],
        _z_ = [0, string_of_bop(op$0), _y_];
       return mk_con(cst_Op, [0, string_of_expr(e1), _z_]);
      case 5:
       var
        e3 = param[3],
        e2$0 = param[2],
        e1$0 = param[1],
        _A_ = [0, string_of_expr(e3), 0],
        _B_ = [0, string_of_expr(e2$0), _A_];
       return mk_con(cst_If, [0, string_of_expr(e1$0), _B_]);
      case 6:
       var
        e2$1 = param[2],
        e1$1 = param[1],
        _C_ = [0, string_of_expr(e2$1), 0];
       return mk_con(cst_Pair, [0, string_of_expr(e1$1), _C_]);
      case 7:
       var e$0 = param[1];
       return mk_con(cst_Fst, [0, string_of_expr(e$0), 0]);
      case 8:
       var e$1 = param[1];
       return mk_con(cst_Snd, [0, string_of_expr(e$1), 0]);
      case 9:
       var e$2 = param[1];
       return mk_con(cst_Inl, [0, string_of_expr(e$2), 0]);
      case 10:
       var e$3 = param[1];
       return mk_con(cst_Inr, [0, string_of_expr(e$3), 0]);
      case 11:
       var
        _D_ = param[3],
        e2$2 = _D_[2],
        x2 = _D_[1],
        match = param[2],
        e1$2 = match[2],
        x1 = match[1],
        e$4 = param[1],
        _E_ = [0, mk_con(cst$13, [0, x2, [0, string_of_expr(e2$2), 0]]), 0],
        _F_ = [0, mk_con(cst$14, [0, x1, [0, string_of_expr(e1$2), 0]]), _E_];
       return mk_con(cst_Case, [0, string_of_expr(e$4), _F_]);
      case 12:
       var
        e2$3 = param[2],
        e1$3 = param[1],
        _G_ = [0, string_of_expr(e2$3), 0];
       return mk_con(cst_While, [0, string_of_expr(e1$3), _G_]);
      case 13:
       var el = param[1];
       return mk_con(cst_Seq, [0, string_of_expr_list(el), 0]);
      case 14:
       var e$5 = param[1];
       return mk_con(cst_Ref, [0, string_of_expr(e$5), 0]);
      case 15:
       var e$6 = param[1];
       return mk_con(cst_Deref, [0, string_of_expr(e$6), 0]);
      case 16:
       var
        e2$4 = param[2],
        e1$4 = param[1],
        _H_ = [0, string_of_expr(e2$4), 0];
       return mk_con(cst_Assign, [0, string_of_expr(e1$4), _H_]);
      case 17:
       var match$0 = param[1], e$7 = match$0[2], x$0 = match$0[1];
       return mk_con(cst_Lambda, [0, x$0, [0, string_of_expr(e$7), 0]]);
      case 18:
       var
        e2$5 = param[2],
        e1$5 = param[1],
        _I_ = [0, string_of_expr(e2$5), 0];
       return mk_con(cst_App, [0, string_of_expr(e1$5), _I_]);
      case 19:
       var
        e2$6 = param[3],
        match$1 = param[2],
        e1$6 = match$1[2],
        x$1 = match$1[1],
        f = param[1],
        _J_ = [0, string_of_expr(e2$6), 0];
       return mk_con
               (cst_LetFun,
                [0,
                 f,
                 [0,
                  mk_con(cst$15, [0, x$1, [0, string_of_expr(e1$6), 0]]),
                  _J_]]);
      default:
       var
        e2$7 = param[3],
        match$2 = param[2],
        e1$7 = match$2[2],
        x$2 = match$2[1],
        f$0 = param[1],
        _K_ = [0, string_of_expr(e2$7), 0];
       return mk_con
               (cst_LetRecFun,
                [0,
                 f$0,
                 [0,
                  mk_con(cst$16, [0, x$2, [0, string_of_expr(e1$7), 0]]),
                  _K_]]);
    }
   }
   function string_of_expr_list(param){
    if(! param) return cst$18;
    var e = param[1];
    if(! param[2]) return string_of_expr(e);
    var
     rest = param[2],
     _u_ = string_of_expr_list(rest),
     _v_ = caml_call2(Stdlib[28], cst$17, _u_),
     _w_ = string_of_expr(e);
    return caml_call2(Stdlib[28], _w_, _v_);
   }
   var
    Slanglib_Ast =
      [0,
       pp_uop,
       pp_bop,
       string_of_uop,
       string_of_bop,
       print_expr,
       eprint_expr,
       string_of_expr];
   runtime.caml_register_global(79, Slanglib_Ast, "Slanglib__Ast");
   return;
  }
  (globalThis));

//# 2409 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_list = global_data.Stdlib__list,
    Slanglib_Errors = global_data.Slanglib__Errors,
    cst_internal_error_translate_f =
      "internal error, translate found a EQ that should have been resolved to EQI or EQB",
    _a_ = [3, 2, 0];
   function translate_expr(param){
    switch(param[0]){
      case 0:
       return 0;
      case 1:
       return _a_;
      case 2:
       var x = param[2]; return [0, x];
      case 3:
       var n = param[2]; return [1, n];
      case 4:
       var b = param[2]; return [2, b];
      case 5:
       var
        e = param[3],
        op = param[2],
        _b_ = translate_expr(e),
        _c_ = op ? 1 : 0;
       return [3, _c_, _b_];
      case 6:
       var
        e2 = param[4],
        op$0 = param[3],
        e1 = param[2],
        _d_ = translate_expr(e2);
       switch(op$0){
         case 0:
          var _e_ = 0; break;
         case 1:
          var _e_ = 1; break;
         case 2:
          var _e_ = 2; break;
         case 3:
          var _e_ = 3; break;
         case 4:
          var _e_ = 4; break;
         case 5:
          var _e_ = 5; break;
         case 6:
          var _e_ = 6; break;
         case 7:
          var
           _e_ =
             caml_call1(Slanglib_Errors[2], cst_internal_error_translate_f);
          break;
         case 8:
          var _e_ = 7; break;
         default: var _e_ = 8;
       }
       return [4, translate_expr(e1), _e_, _d_];
      case 7:
       var
        e3 = param[4],
        e2$0 = param[3],
        e1$0 = param[2],
        _f_ = translate_expr(e3),
        _g_ = translate_expr(e2$0);
       return [5, translate_expr(e1$0), _g_, _f_];
      case 8:
       var e2$1 = param[3], e1$1 = param[2], _h_ = translate_expr(e2$1);
       return [6, translate_expr(e1$1), _h_];
      case 9:
       var e$0 = param[2]; return [7, translate_expr(e$0)];
      case 10:
       var e$1 = param[2]; return [8, translate_expr(e$1)];
      case 11:
       var e$2 = param[3]; return [9, translate_expr(e$2)];
      case 12:
       var e$3 = param[3]; return [10, translate_expr(e$3)];
      case 13:
       var
        l2 = param[4],
        l1 = param[3],
        e$4 = param[2],
        _i_ = translate_lambda(l2),
        _j_ = translate_lambda(l1);
       return [11, translate_expr(e$4), _j_, _i_];
      case 14:
       var e2$2 = param[3], e1$2 = param[2], _k_ = translate_expr(e2$2);
       return [12, translate_expr(e1$2), _k_];
      case 15:
       var el = param[2];
       return [13, caml_call2(Stdlib_list[19], translate_expr, el)];
      case 16:
       var e$5 = param[2]; return [14, translate_expr(e$5)];
      case 17:
       var e$6 = param[2]; return [15, translate_expr(e$6)];
      case 18:
       var e2$3 = param[3], e1$3 = param[2], _l_ = translate_expr(e2$3);
       return [16, translate_expr(e1$3), _l_];
      case 19:
       var lam = param[2]; return [17, translate_lambda(lam)];
      case 20:
       var e2$4 = param[3], e1$4 = param[2], _m_ = translate_expr(e2$4);
       return [18, translate_expr(e1$4), _m_];
      case 21:
       var
        e2$5 = param[5],
        e1$5 = param[4],
        x$0 = param[2],
        _n_ = translate_expr(e1$5);
       return [18, [17, [0, x$0, translate_expr(e2$5)]], _n_];
      case 22:
       var
        e$7 = param[5],
        lam$0 = param[3],
        f = param[2],
        _o_ = translate_expr(e$7);
       return [19, f, translate_lambda(lam$0), _o_];
      default:
       var
        e$8 = param[5],
        lam$1 = param[3],
        f$0 = param[2],
        _p_ = translate_expr(e$8);
       return [20, f$0, translate_lambda(lam$1), _p_];
    }
   }
   function translate_lambda(param){
    var body = param[3], x = param[1];
    return [0, x, translate_expr(body)];
   }
   var Slanglib_Past_to_ast = [0, translate_expr];
   runtime.caml_register_global
    (4, Slanglib_Past_to_ast, "Slanglib__Past_to_ast");
   return;
  }
  (globalThis));

//# 2561 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    yylhs =
      "\xff\xff\x01\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x06\0\x06\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\0\0",
    yylen =
      "\x02\0\x02\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x03\0\x05\0\x02\0\x02\0\x02\0\x01\0\x02\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x02\0\x01\0\x03\0\x06\0\x04\0\x02\0\x02\0\x03\0\x03\0\b\0\b\0\r\0\x14\0\x01\0\x03\0\x01\0\x01\0\x01\0\x03\0\x03\0\x03\0\x02\0\x03\0\x02\0",
    yydefred =
      "\0\0\0\0\0\0\x03\0\x05\0\0\0\0\0\0\0\x04\0\x02\0\x06\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0/\0\r\0\0\0\0\0\0\0\x0e\0\n\0\0\0\0\0\0\0\0\0\0\0'\0(\0)\0\0\0\0\0\x1d\0\x1e\0\0\0\0\0\f\0\v\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\0\x01\0\b\0\0\0\0\0\0\0\0\0\0\0\x1a\0\0\0\0\0\0\0\0\0-\0\x1f\0 \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&\0.\0-\0\0\0\0\0\0\0\0\0\0\0\x1c\0\t\0\0\0\0\0\0\0\0\0\0\0\x1b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\"\0!\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0$\0",
    yydgoto = "\x02\0\x18\0'\0\x19\0\x1a\0!\0\"\0",
    yysindex =
      "\x04\0\xbc\x01\0\0\0\0\0\0\xbc\x01p\xff\x92\0\0\0\0\0\0\0\0\0\xbc\x01\n\xff\xbc\x012\xff2\xff\xbc\x01\xbc\x01\v\xff\xbc\x01\x92\0\x92\0\xbc\x01\0\0\0\0\xea\xff\r\0\x04\xff\0\0\0\0\xf7\xfe\0\xff\r\xff\xf4\xfe2\xff\0\0\0\0\0\0m\x01m\x01\0\0\0\0\x13\xff\xec\xfe\0\0\0\0\xe9\xfep\xffp\xffp\xffp\xffp\xffp\xffp\xffp\xffp\xff\0\0\0\0\0\0\xbc\x01\xbc\x01\x19\xff2\xff\xbc\x01\0\0\x14\xff2\xff2\xff2\xff\0\0\0\0\0\0\x1b\xff\xf6\xfe\xbc\x01\xeb\x01\xeb\x01>\0>\0>\0>\0>\0>\0\x92\0\x1f\xff\x1e\xff@\xff\x18\xff\0\0\0\0\0\0\xfd\xfe\f\xff\f\xff2\xffF\xff\0\0\0\0\xbc\x012\xff\xbc\x01 \xffL\xff\0\0C\xff<\xff9\xffY\xffZ\xff\xbc\x01\xbc\x012\xff2\xff\0\0\0\0R\xff;\xff?\xff\xbc\x01\xbc\x01G\xffE\xff\xbc\x01A\xff\0\0f\xffj\xffo\xff2\xffM\0N\xff\xbc\x01\0\0",
    yyrindex =
      "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0H\x01\0\0\0\0\0\0\0\0\0\0\0\0_\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1e\x01'\x01+\0U\0\x7f\0\xa9\0\xd3\0\xfd\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9c\x01\x8e\xff\xc0\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
    yygindex = "\0\0\0\0\xfa\xff:\0\xfc\xff\xff\xff8\0",
    yytable =
      "\x1b\0\x17\0\x1d\0>\0\x1c\0\x01\0?\0D\0;\0<\0(\0\x1f\0 \0:\0+\0=\0)\0*\0A\0,\0@\0I\0/\0J\0Z\0K\0`\0W\0C\0B\0D\0E\0C\0_\0D\0b\0k\0e\0G\0H\0C\0[\0D\0\x11\0L\0M\0N\0O\0P\0Q\0R\0S\0T\0#\0E\0c\0[\0X\0E\0U\0V\0\\\0]\0^\0[\0\x1e\0E\0C\0[\0D\0d\0m\0w\0g\0a\0C\0[\0D\0l\0-\0.\0$\0%\0&\x009\0\x12\0v\x009\0n\0f\0C\0o\0D\0E\0i\0p\0q\0x\0h\0{\0j\0E\0~\0[\0|\0\x7f\0t\0u\0\x80\0r\0s\0[\0\x84\0\x03\0\x04\0\x05\0E\0\x81\0y\0z\0Y\0\x06\0}\0\x82\0\x07\0%\0[\0\x14\0-\0\b\0\t\0\x85\0\n\0\v\x009\x009\x009\x009\x009\x009\x009\x009\x009\0+\0+\0+\0+\0\0\0\0\0\0\0+\0+\0+\0\0\0+\0+\0\x15\0\0\0\x16\0+\0+\0\0\0+\0+\0+\0\0\0\0\0\0\0+\0\x13\0\0\0+\0\0\0\0\0\0\0\0\0+\0\0\0+\0+\0+\0+\0+\0\0\0+\0\0\0\0\0\0\0+\0+\0\0\0\0\0\0\0*\0*\0*\0*\0\0\0\0\0\0\0*\0*\0*\0\0\0*\0*\0\0\0\0\0\0\0*\0*\0\x15\0*\0*\0*\0\0\0\0\0\0\0*\0\0\0\0\0*\0\0\0\0\0\0\0\0\0*\0\0\0*\0*\0*\0*\0*\0\0\0*\0\x03\0\x04\0\x05\0*\0*\0\0\0\0\x000\x001\x002\x003\0\x07\x004\x005\x006\x007\0\b\0\t\0\x16\0\n\0\v\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x15\x008\0\x16\0\x17\0\x17\0\0\0\0\0\x17\0\x0f\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x11\0\x11\0\x17\0\x11\0\x11\0\x11\0\x11\0\x11\0\0\0\x11\0\x11\0\x11\0\x11\0\0\0\0\0\0\0\x03\0\x04\0\x05\0\0\0\x11\0\x11\0\0\0\0\0\x11\0\x19\0\x11\0\x07\0\0\0\0\0\0\0\x11\0\b\0\t\0\x83\0\n\0\v\0\0\0C\0\x11\0D\0\0\0\x12\0\x12\0\x11\0\x12\0\x12\0\x12\0\x12\0\x12\0\0\0\x12\0\x12\0\x12\0\x12\0\0\0\0\0\0\0\0\0\x15\x008\0\x16\0\x12\0\x12\0E\0\0\0\x12\0\0\0\x12\0\0\0\0\0\0\0\0\0\x12\0[\0\0\0\0\0\0\0\0\0\0\0\0\0\x12\0\0\0\0\0\x14\0\x14\0\x12\0\x14\0\x14\0\x14\0\x14\0\x14\0\0\0\x14\0\x14\0\x14\0\x14\0\0\0\0\0\0\0\x03\0\x04\0\x05\0\0\0\x14\0\x14\0\0\0\0\0\x14\0\0\0\x14\0\x07\0\0\0\0\0\0\0\x14\0\b\0\t\0\0\0\n\0\v\0\0\0\0\0\x14\0\0\0\0\0\x13\0\x13\0\x14\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\x15\0\0\0\x16\0\x13\0\x13\0\0\0\0\0\x13\0\0\0\x13\0\0\0\0\0\0\0\0\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\0\0\0\0\x15\0\x15\0\x13\0\x15\0\x15\0\x15\0\x15\0\x15\0\0\0\x15\0\x15\0\x15\0\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\x15\0\0\0\0\0\x15\0\0\0\x15\0\0\0\0\0\0\0\0\0\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\0\0\x16\0\x16\0\x15\0\x16\0\x16\0\x16\0\x16\0\x16\0\0\0\x16\0\x16\0\x16\0\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\0\x16\0\0\0\0\0\x16\0\0\0\x16\0\0\0\0\0\0\0\0\0\x16\0\0\0\x0f\0\x0f\0\0\0\x0f\0\x0f\0\x0f\0\x16\0\0\0\0\0\x10\0\x10\0\x16\0\x10\0\x10\0\x10\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\0\0\0\0\x0f\0\0\0\x0f\0\0\0\0\0\x10\0\x10\0\x0f\0\0\0\x10\0\0\0\x10\0\0\0\0\0\0\0\x0f\0\x10\0\0\0\x19\0\x19\0\x0f\0\x19\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x19\0\x19\0\0\0\0\0\x19\0\0\0\x19\0\0\0\0\0\0\0\0\0\x19\0\0\0\0\0\x03\0\x04\0\x05\0\0\0\0\0\x19\0\0\0C\0\x06\0D\0\x19\0\x07\0\0\0\0\0\0\0\0\0\b\0\t\0\0\0\n\0\v\0\f\0\0\0\0\0\0\0\r\0\0\0\0\0\x0e\0\0\0\0\0\0\0\0\0E\0\0\0\x0f\0\x10\0\x11\0\x12\0\x13\0\0\0\x14\0\0\0F\0\0\0\x16\0\x17\0,\0,\0,\0,\0\0\0\0\0\0\0,\0,\0\0\0\0\0,\0,\0\0\0\0\0\0\0,\0,\0\0\0,\0,\0,\0\0\0\0\0\0\0,\0\0\0\0\0,\0\0\0\0\0\0\0\x03\0\x04\0\x05\0,\0,\0,\0,\0,\0\x06\0,\0\0\0\x07\0\0\0,\0,\0\0\0\b\0\t\0\0\0\n\0\v\0\f\0\0\0\0\0\0\0\r\0\0\0\0\0\x0e\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\x10\0\x11\0\x12\0\x13\0\0\0\x14\0\0\0\x15\0\0\0\x16\0\x17\0\x03\0\x04\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\x002\x003\0\x07\x004\x005\x006\x007\0\b\0\t\0\0\0\n\0\v\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\x008\0\x16\0",
    yycheck =
      '\x01\0\0\0\x06\0\x03\x01\x05\0\x01\0\x06\x01\n\x01\x04\x01\x05\x01\x10\0\f\0\x02\x01\0\0\x03\x01\x18\x01\x11\0\x12\0\x1e\x01\x14\0\x07\x01\x02\x01\x17\0+\x01\x04\x010\x01$\x01\x02\x01\b\x01#\0\n\x01"\x01\b\x01\x06\x01\n\x01\x04\x01\x04\x01\r\x01\'\0(\0\b\x01,\x01\n\x01\0\x000\x001\x002\x003\x004\x005\x006\x007\x008\0\x03\x01"\x01\x19\x01,\x01?\0"\x01<\0=\0C\0D\0E\0,\x01\x07\0"\x01\b\x01,\x01\n\x01\x06\x01\x04\x01\r\x01\x03\x01K\0\b\x01,\x01\n\x01\x02\x01\x15\0\x16\0\x1f\x01 \x01!\x01\x1a\0\0\0\x04\x01\x1d\0\x1c\x01_\0\b\x01"\x01\n\x01"\x01d\0\x06\x01\x06\x01"\x01c\0\x1c\x01e\0"\x01%\x01,\x01#\x01\x03\x01p\0q\0\x02\x01n\0o\0,\x01"\x01\x01\x01\x02\x01\x03\x01"\x01\x06\x01w\0x\0@\0\t\x01{\0\x81\0\f\x01\x1e\x01,\x01\0\0F\0\x11\x01\x12\x01\x84\0\x14\x01\x15\x01L\0M\0N\0O\0P\0Q\0R\0S\0T\0\x01\x01\x02\x01\x03\x01\x04\x01\xff\xff\xff\xff\xff\xff\b\x01\t\x01\n\x01\xff\xff\f\x01\r\x01,\x01\xff\xff.\x01\x11\x01\x12\x01\xff\xff\x14\x01\x15\x01\x16\x01\xff\xff\xff\xff\xff\xff\x1a\x01\0\0\xff\xff\x1d\x01\xff\xff\xff\xff\xff\xff\xff\xff"\x01\xff\xff$\x01%\x01&\x01\'\x01(\x01\xff\xff*\x01\xff\xff\xff\xff\xff\xff.\x01/\x01\xff\xff\xff\xff\xff\xff\x01\x01\x02\x01\x03\x01\x04\x01\xff\xff\xff\xff\xff\xff\b\x01\t\x01\n\x01\xff\xff\f\x01\r\x01\xff\xff\xff\xff\xff\xff\x11\x01\x12\x01\0\0\x14\x01\x15\x01\x16\x01\xff\xff\xff\xff\xff\xff\x1a\x01\xff\xff\xff\xff\x1d\x01\xff\xff\xff\xff\xff\xff\xff\xff"\x01\xff\xff$\x01%\x01&\x01\'\x01(\x01\xff\xff*\x01\x01\x01\x02\x01\x03\x01.\x01/\x01\xff\xff\xff\xff\b\x01\t\x01\n\x01\v\x01\f\x01\r\x01\x0e\x01\x0f\x01\x10\x01\x11\x01\x12\x01\0\0\x14\x01\x15\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\x01\x05\x01\xff\xff\x07\x01\b\x01\t\x01\n\x01\v\x01\xff\xff\r\x01\x0e\x01\x0f\x01\x10\x01\xff\xff\xff\xff\xff\xff\xff\xff,\x01-\x01.\x01\x18\x01\x19\x01\xff\xff\xff\xff\x1c\x01\0\0\x1e\x01\xff\xff\xff\xff\xff\xff\xff\xff#\x01\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff+\x01\xff\xff-\x01\x04\x01\x05\x010\x01\x07\x01\b\x01\t\x01\n\x01\v\x01\xff\xff\r\x01\x0e\x01\x0f\x01\x10\x01\xff\xff\xff\xff\xff\xff\x01\x01\x02\x01\x03\x01\xff\xff\x18\x01\x19\x01\xff\xff\xff\xff\x1c\x01\0\0\x1e\x01\f\x01\xff\xff\xff\xff\xff\xff#\x01\x11\x01\x12\x01\x04\x01\x14\x01\x15\x01\xff\xff\b\x01+\x01\n\x01\xff\xff\x04\x01\x05\x010\x01\x07\x01\b\x01\t\x01\n\x01\v\x01\xff\xff\r\x01\x0e\x01\x0f\x01\x10\x01\xff\xff\xff\xff\xff\xff\xff\xff,\x01-\x01.\x01\x18\x01\x19\x01"\x01\xff\xff\x1c\x01\xff\xff\x1e\x01\xff\xff\xff\xff\xff\xff\xff\xff#\x01,\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff+\x01\xff\xff\xff\xff\x04\x01\x05\x010\x01\x07\x01\b\x01\t\x01\n\x01\v\x01\xff\xff\r\x01\x0e\x01\x0f\x01\x10\x01\xff\xff\xff\xff\xff\xff\x01\x01\x02\x01\x03\x01\xff\xff\x18\x01\x19\x01\xff\xff\xff\xff\x1c\x01\xff\xff\x1e\x01\f\x01\xff\xff\xff\xff\xff\xff#\x01\x11\x01\x12\x01\xff\xff\x14\x01\x15\x01\xff\xff\xff\xff+\x01\xff\xff\xff\xff\x04\x01\x05\x010\x01\x07\x01\b\x01\t\x01\n\x01\v\x01\xff\xff\r\x01\x0e\x01\x0f\x01\x10\x01\xff\xff\xff\xff\xff\xff\xff\xff,\x01\xff\xff.\x01\x18\x01\x19\x01\xff\xff\xff\xff\x1c\x01\xff\xff\x1e\x01\xff\xff\xff\xff\xff\xff\xff\xff#\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff+\x01\xff\xff\xff\xff\x04\x01\x05\x010\x01\x07\x01\b\x01\t\x01\n\x01\v\x01\xff\xff\r\x01\x0e\x01\x0f\x01\x10\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x18\x01\x19\x01\xff\xff\xff\xff\x1c\x01\xff\xff\x1e\x01\xff\xff\xff\xff\xff\xff\xff\xff#\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff+\x01\xff\xff\xff\xff\x04\x01\x05\x010\x01\x07\x01\b\x01\t\x01\n\x01\v\x01\xff\xff\r\x01\x0e\x01\x0f\x01\x10\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x18\x01\x19\x01\xff\xff\xff\xff\x1c\x01\xff\xff\x1e\x01\xff\xff\xff\xff\xff\xff\xff\xff#\x01\xff\xff\x04\x01\x05\x01\xff\xff\x07\x01\b\x01\t\x01+\x01\xff\xff\xff\xff\x04\x01\x05\x010\x01\x07\x01\b\x01\t\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x18\x01\x19\x01\xff\xff\xff\xff\x1c\x01\xff\xff\x1e\x01\xff\xff\xff\xff\x18\x01\x19\x01#\x01\xff\xff\x1c\x01\xff\xff\x1e\x01\xff\xff\xff\xff\xff\xff+\x01#\x01\xff\xff\x04\x01\x05\x010\x01\x07\x01\xff\xff\xff\xff+\x01\xff\xff\xff\xff\xff\xff\xff\xff0\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x18\x01\x19\x01\xff\xff\xff\xff\x1c\x01\xff\xff\x1e\x01\xff\xff\xff\xff\xff\xff\xff\xff#\x01\xff\xff\xff\xff\x01\x01\x02\x01\x03\x01\xff\xff\xff\xff+\x01\xff\xff\b\x01\t\x01\n\x010\x01\f\x01\xff\xff\xff\xff\xff\xff\xff\xff\x11\x01\x12\x01\xff\xff\x14\x01\x15\x01\x16\x01\xff\xff\xff\xff\xff\xff\x1a\x01\xff\xff\xff\xff\x1d\x01\xff\xff\xff\xff\xff\xff\xff\xff"\x01\xff\xff$\x01%\x01&\x01\'\x01(\x01\xff\xff*\x01\xff\xff,\x01\xff\xff.\x01/\x01\x01\x01\x02\x01\x03\x01\x04\x01\xff\xff\xff\xff\xff\xff\b\x01\t\x01\xff\xff\xff\xff\f\x01\r\x01\xff\xff\xff\xff\xff\xff\x11\x01\x12\x01\xff\xff\x14\x01\x15\x01\x16\x01\xff\xff\xff\xff\xff\xff\x1a\x01\xff\xff\xff\xff\x1d\x01\xff\xff\xff\xff\xff\xff\x01\x01\x02\x01\x03\x01$\x01%\x01&\x01\'\x01(\x01\t\x01*\x01\xff\xff\f\x01\xff\xff.\x01/\x01\xff\xff\x11\x01\x12\x01\xff\xff\x14\x01\x15\x01\x16\x01\xff\xff\xff\xff\xff\xff\x1a\x01\xff\xff\xff\xff\x1d\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff$\x01%\x01&\x01\'\x01(\x01\xff\xff*\x01\xff\xff,\x01\xff\xff.\x01/\x01\x01\x01\x02\x01\x03\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\n\x01\v\x01\f\x01\r\x01\x0e\x01\x0f\x01\x10\x01\x11\x01\x12\x01\xff\xff\x14\x01\x15\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff,\x01-\x01.\x01',
    yynames_const =
      "EOF\0LPAREN\0RPAREN\0COMMA\0COLON\0SEMICOLON\0ADD\0SUB\0MUL\0DIV\0NOT\0EQUAL\0LT\0ANDOP\0OROP\0WHAT\0UNIT\0AND\0TRUE\0FALSE\0IF\0FI\0THEN\0ELSE\0LET\0REC\0IN\0BEGIN\0END\0BOOL\0INTTYPE\0UNITTYPE\0ARROW\0BAR\0INL\0INR\0FST\0SND\0FUN\0NUF\0CASE\0OF\0REF\0ASSIGN\0BANG\0WHILE\0DO\0OD\0",
    yynames_block = "INT\0IDENT\0",
    Stdlib_parsing = global_data.Stdlib__parsing,
    Stdlib = global_data.Stdlib,
    get_loc = Stdlib_parsing[5],
    yytransl_const =
      [0,
        0,
        259,
        260,
        261,
        262,
        263,
        264,
        265,
        266,
        267,
        268,
        269,
        270,
        271,
        272,
        273,
        274,
        275,
        276,
        277,
        278,
        279,
        280,
        281,
        282,
        283,
        284,
        285,
        286,
        287,
        288,
        289,
        290,
        291,
        292,
        293,
        294,
        295,
        296,
        297,
        298,
        299,
        300,
        301,
        302,
        303,
        304,
        305,
        0].slice
       (),
    yytransl_block = [0, 257, 258, 0],
    cst_parser = "parser",
    yyact =
      [0,
       function(param){return caml_call1(Stdlib[2], cst_parser);},
       function(caml_parser_env){
        var _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 1);
        return _1;
       },
       function(caml_parser_env){return [0, caml_call1(get_loc, 0)];},
       function(caml_parser_env){
        var _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [3, caml_call1(get_loc, 0), _1];
       },
       function(caml_parser_env){return [1, caml_call1(get_loc, 0)];},
       function(caml_parser_env){
        var _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [2, caml_call1(get_loc, 0), _1];
       },
       function(caml_parser_env){return [4, caml_call1(get_loc, 0), 1];},
       function(caml_parser_env){return [4, caml_call1(get_loc, 0), 0];},
       function(caml_parser_env){
        var _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 1);
        return _2;
       },
       function(caml_parser_env){
        var
         _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 3),
         _4 = caml_call2(Stdlib_parsing[14], caml_parser_env, 1);
        return [8, caml_call1(get_loc, 0), _2, _4];
       },
       function(caml_parser_env){
        var _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [5, caml_call1(get_loc, 0), 1, _2];
       },
       function(caml_parser_env){
        var _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [17, caml_call1(get_loc, 0), _2];
       },
       function(caml_parser_env){
        var _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [16, caml_call1(get_loc, 0), _2];
       },
       function(caml_parser_env){
        var _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return _1;
       },
       function(caml_parser_env){
        var _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [5, caml_call1(get_loc, 0), 0, _2];
       },
       function(caml_parser_env){
        var
         _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [6, caml_call1(get_loc, 0), _1, 0, _3];
       },
       function(caml_parser_env){
        var
         _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [6, caml_call1(get_loc, 0), _1, 3, _3];
       },
       function(caml_parser_env){
        var
         _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [6, caml_call1(get_loc, 0), _1, 1, _3];
       },
       function(caml_parser_env){
        var
         _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [6, caml_call1(get_loc, 0), _1, 2, _3];
       },
       function(caml_parser_env){
        var
         _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [6, caml_call1(get_loc, 0), _1, 4, _3];
       },
       function(caml_parser_env){
        var
         _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [6, caml_call1(get_loc, 0), _1, 7, _3];
       },
       function(caml_parser_env){
        var
         _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [6, caml_call1(get_loc, 0), _1, 5, _3];
       },
       function(caml_parser_env){
        var
         _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [6, caml_call1(get_loc, 0), _1, 6, _3];
       },
       function(caml_parser_env){
        var
         _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [18, caml_call1(get_loc, 0), _1, _3];
       },
       function(caml_parser_env){
        var
         _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 1),
         _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [20, caml_call1(get_loc, 0), _1, _2];
       },
       function(caml_parser_env){
        var _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return _1;
       },
       function(caml_parser_env){
        var _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 1);
        return [15, caml_call1(get_loc, 0), _2];
       },
       function(caml_parser_env){
        var
         _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 4),
         _4 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _6 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [7, caml_call1(get_loc, 0), _2, _4, _6];
       },
       function(caml_parser_env){
        var
         _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _4 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [14, caml_call1(get_loc, 0), _2, _4];
       },
       function(caml_parser_env){
        var _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [9, caml_call1(get_loc, 0), _2];
       },
       function(caml_parser_env){
        var _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [10, caml_call1(get_loc, 0), _2];
       },
       function(caml_parser_env){
        var
         _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 1),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [11, caml_call1(get_loc, 0), _2, _3];
       },
       function(caml_parser_env){
        var
         _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 1),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [12, caml_call1(get_loc, 0), _2, _3];
       },
       function(caml_parser_env){
        var
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 5),
         _5 = caml_call2(Stdlib_parsing[14], caml_parser_env, 3),
         _8 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [19, caml_call1(get_loc, 0), [0, _3, _5, _8]];
       },
       function(caml_parser_env){
        var
         _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 6),
         _4 = caml_call2(Stdlib_parsing[14], caml_parser_env, 4),
         _6 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _8 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [21, caml_call1(get_loc, 0), _2, _4, _6, _8];
       },
       function(caml_parser_env){
        var
         _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 11),
         _4 = caml_call2(Stdlib_parsing[14], caml_parser_env, 9),
         _6 = caml_call2(Stdlib_parsing[14], caml_parser_env, 7),
         _9 = caml_call2(Stdlib_parsing[14], caml_parser_env, 4),
         _11 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _13 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [22, caml_call1(get_loc, 0), _2, [0, _4, _6, _11], _9, _13];
       },
       function(caml_parser_env){
        var
         _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 18),
         _6 = caml_call2(Stdlib_parsing[14], caml_parser_env, 14),
         _8 = caml_call2(Stdlib_parsing[14], caml_parser_env, 12),
         _11 = caml_call2(Stdlib_parsing[14], caml_parser_env, 9),
         _15 = caml_call2(Stdlib_parsing[14], caml_parser_env, 5),
         _17 = caml_call2(Stdlib_parsing[14], caml_parser_env, 3),
         _20 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [13,
                caml_call1(get_loc, 0),
                _2,
                [0, _6, _8, _11],
                [0, _15, _17, _20]];
       },
       function(caml_parser_env){
        var _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [0, _1, 0];
       },
       function(caml_parser_env){
        var
         _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [0, _1, _3];
       },
       function(caml_parser_env){return 1;},
       function(caml_parser_env){return 0;},
       function(caml_parser_env){return 2;},
       function(caml_parser_env){
        var
         _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [1, _1, _3];
       },
       function(caml_parser_env){
        var
         _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [2, _1, _3];
       },
       function(caml_parser_env){
        var
         _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 2),
         _3 = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        return [3, _1, _3];
       },
       function(caml_parser_env){
        var _1 = caml_call2(Stdlib_parsing[14], caml_parser_env, 1);
        return [0, _1];
       },
       function(caml_parser_env){
        var _2 = caml_call2(Stdlib_parsing[14], caml_parser_env, 1);
        return _2;
       },
       function(caml_parser_env){
        var _a_ = caml_call2(Stdlib_parsing[14], caml_parser_env, 0);
        throw caml_maybe_attach_backtrace([0, Stdlib_parsing[12], _a_], 1);
       }],
    yytables =
      [0,
       yyact,
       yytransl_const,
       yytransl_block,
       yylhs,
       yylen,
       yydefred,
       yydgoto,
       yysindex,
       yyrindex,
       yygindex,
       793,
       yytable,
       yycheck,
       Stdlib_parsing[16],
       yynames_const,
       yynames_block];
   function start(lexfun, lexbuf){
    return caml_call4(Stdlib_parsing[13], yytables, 1, lexfun, lexbuf);
   }
   var Slanglib_Parser = [0, start];
   runtime.caml_register_global(15, Slanglib_Parser, "Slanglib__Parser");
   return;
  }
  (globalThis));

//# 2922 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    usage_msg = "Usage: slang.byte [options] [<file>]\nOptions are:",
    Stdlib_arg = global_data.Stdlib__arg,
    infile = [0, cst],
    verbose = [0, 0],
    verbose_front = [0, 0],
    verbose_tree = [0, 0],
    run_tests = [0, 0],
    use_i0 = [0, 0],
    use_i1 = [0, 0],
    use_i2 = [0, 0],
    use_i3 = [0, 0],
    use_i4 = [0, 0],
    use_i4x86 = [0, 0];
   function use_all(param){
    use_i0[1] = 1;
    use_i1[1] = 1;
    use_i2[1] = 1;
    use_i3[1] = 1;
    use_i4[1] = 1;
    return 0;
   }
   var show_compiled = [0, 0];
   function set_infile(f){infile[1] = f; return 0;}
   var
    stack_max = [0, 1000],
    heap_max = [0, 1000],
    option_spec =
      [0,
       [0, "-V", [2, verbose_front], "verbose front end"],
       [0,
        [0, "-v", [2, verbose], "verbose interpreter(s)"],
        [0,
         [0,
          "-T",
          [2, verbose_tree],
          "verbose output in the form of tree (currently only frontend)"],
         [0,
          [0,
           "-c",
           [2, show_compiled],
           "show compiled code (but don't run it)"],
          [0,
           [0, "-i0", [2, use_i0], "Interpreter 0"],
           [0,
            [0, "-i1", [2, use_i1], "Interpreter 1"],
            [0,
             [0, "-i2", [2, use_i2], "Interpreter 2"],
             [0,
              [0, "-i3", [2, use_i3], "Interpreter 3"],
              [0,
               [0, "-i4", [2, use_i4], "Jargon VM"],
               [0,
                [0,
                 "-i4x86",
                 [2, use_i4x86],
                 "Jargon code to x86: foo.slang generates x86 code in foo.s and executable in foo"],
                [0,
                 [0, "-all", [0, use_all], "all interpreters"],
                 [0,
                  [0,
                   "-stackmax",
                   [7, stack_max],
                   "set max stack size (default = 1000)"],
                  [0,
                   [0,
                    "-heapmax",
                    [7, heap_max],
                    "set max heap size (default = 1000)"],
                   [0,
                    [0,
                     "-t",
                     [2, run_tests],
                     "run all test/*.slang with each selected interpreter, report unexpected outputs (silent otherwise)"],
                    0]]]]]]]]]]]]]];
   caml_call3(Stdlib_arg[1], option_spec, set_infile, usage_msg);
   var
    infile$0 = infile[1],
    verbose$0 = verbose[1],
    verbose_front$0 = verbose_front[1],
    verbose_tree$0 = verbose_tree[1],
    run_tests$0 = run_tests[1],
    use_i0$0 = use_i0[1],
    use_i1$0 = use_i1[1],
    use_i2$0 = use_i2[1],
    use_i3$0 = use_i3[1],
    use_i4$0 = use_i4[1],
    use_i4x86$0 = use_i4x86[1],
    show_compiled$0 = show_compiled[1],
    stack_max$0 = stack_max[1],
    heap_max$0 = heap_max[1],
    Slanglib_Option =
      [0,
       infile$0,
       verbose$0,
       verbose_front$0,
       verbose_tree$0,
       run_tests$0,
       use_i0$0,
       use_i1$0,
       use_i2$0,
       use_i3$0,
       use_i4$0,
       use_i4x86$0,
       show_compiled$0,
       stack_max$0,
       heap_max$0];
   runtime.caml_register_global(31, Slanglib_Option, "Slanglib__Option");
   return;
  }
  (globalThis));

//# 3047 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    ocaml_lex_tables =
      [0,
       "\0\0\xce\xff\xcf\xff\x01\0\xd0\xffT\0\x9f\0\xc0\0\x14\x01h\x01\xbc\x01\x10\x02d\x02\xb8\x02\f\x03`\x03\xb4\x03\b\x04\\\x04\xb0\x04\x04\x05\xec\xff\xed\xff\x01\0\x01\0\xf2\xff\xf4\xff\xf5\xff\xf6\xff\xf7\xff\0\0\xf9\xff\xfa\xff\x03\0\xfc\xff\xfd\xff2\0\xff\xff\xd1\xff\xeb\xff\xf3\xff\xee\xff\xf1\xff\xf0\xffX\x05\xac\x05\0\x06T\x06\xa8\x06\xfc\x06P\x07\xa4\x07\xf8\x07L\b\xa0\b\xf4\bH\t\x9c\t\xf0\tD\n\x98\n\xec\n@\v\x94\v\xe8\v<\f\x90\f\xe4\f8\r\x8c\r\xe0\r4\x0e\x88\x0e\xdc\x0e0\x0f\x84\x0f\xd8\x0f,\x10\x80\x10\xd4\x10(\x11|\x11\xd0\x11$\x12x\x12\xcc\x12 \x13t\x13\xc8\x13\x1c\x14p\x14\xc4\x14\x18\x15l\x15\xc0\x15\x14\x16\x9f\x15\xfc\xff\x04\0\x02\0\xfe\xff4\0\xff\xff\xfd\xff",
       "\xff\xff\xff\xff\xff\xff1\0\xff\xff-\0,\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0\xff\xff\xff\xff\x10\x001\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\x04\0\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff-\0-\0\x15\0-\0-\0-\0\x16\0-\0 \0-\0-\0-\0-\0-\0\x17\0\x1b\0#\0-\0\x18\0\x1f\0$\0*\0\x1a\0\x19\0-\0\x1c\0-\0-\0\x1d\0\x1e\0-\0-\0-\0!\0&\0-\0\"\0-\0-\0-\0-\0%\0-\0)\0-\0-\0-\0'\0(\0-\0-\0+\0\xff\xff\xff\xff\x03\0\x03\0\xff\xff\x03\0\xff\xff\xff\xff",
       "\x01\0\0\0\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffa\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0%\0\x04\0\x04\0d\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0%\0\x15\0\0\0\0\0\0\0\0\0\x18\0*\0$\0#\0\x1d\0\x1f\0\"\0\x1e\0g\0\x1c\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0!\0 \0\x19\0\x1a\0)\0\x16\0(\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0'\0&\0f\0\0\0\0\0\0\0\x14\0\n\0\x0e\0\b\0\f\0\x12\0\x05\0\x05\0\x10\0\x05\0\x05\0\v\0\x05\0\x05\0\r\0\x05\0\x05\0\x11\0\x0f\0\x13\0\x07\0\x05\0\t\0\x05\0\x05\0\x05\0,\0\x17\0+\0\x1b\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0]\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\\\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0X\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0R\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0Q\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0O\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0K\0\x05\0J\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0I\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0F\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0D\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0?\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0@\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0=\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\x007\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\x006\0\x05\x005\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0/\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\x000\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0-\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0,\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0.\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\x003\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\x001\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\x002\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\x004\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0<\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0;\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\x008\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\x009\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0:\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0>\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0C\0\x05\0\x05\0\x05\0\x05\0\x05\0B\0\x05\0A\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0E\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0G\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0H\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0N\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0L\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0M\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0P\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0V\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0S\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0T\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0U\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0W\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0Y\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0Z\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0[\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0d\0\0\0\0\0c\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0b\0\0\0e\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0^\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0_\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0,\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x03\0c\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1e\0\0\0!\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0$\0$\0e\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x17\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\x05\0\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\b\0\xff\xff\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\n\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\xff\xff\n\0\xff\xff\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\v\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\xff\xff\xff\xff\xff\xff\xff\xff\v\0\xff\xff\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\f\0\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\r\0\xff\xff\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\x0e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\xff\xff\xff\xff\xff\xff\xff\xff\x0e\0\xff\xff\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0e\0\x0f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\xff\xff\xff\xff\xff\xff\xff\xff\x0f\0\xff\xff\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\x10\0\xff\xff\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x11\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\xff\xff\xff\xff\xff\xff\xff\xff\x11\0\xff\xff\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\x12\0\xff\xff\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\x13\0\xff\xff\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\x14\0\xff\xff\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0,\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\xff\xff\xff\xff\xff\xff\xff\xff,\0\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0-\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0\xff\xff\xff\xff\xff\xff\xff\xff-\0\xff\xff-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0.\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0\xff\xff\xff\xff\xff\xff\xff\xff.\0\xff\xff.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0/\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\xff\xff\xff\xff\xff\xff\xff\xff/\0\xff\xff/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\x000\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\xff\xff\xff\xff\xff\xff\xff\xff0\0\xff\xff0\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x001\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff1\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff1\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\xff\xff\xff\xff\xff\xff\xff\xff1\0\xff\xff1\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x002\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff2\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff2\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\xff\xff\xff\xff\xff\xff\xff\xff2\0\xff\xff2\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x003\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff3\0\xff\xff3\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x004\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xff\xff\xff\xff\xff\xff\xff\xff4\0\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x005\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff5\x005\x005\x005\x005\x005\x005\x005\x005\x005\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff5\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\0\xff\xff\xff\xff\xff\xff\xff\xff5\0\xff\xff5\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x006\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff6\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff6\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xff\xff\xff\xff\xff\xff\xff\xff6\0\xff\xff6\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x007\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff7\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff7\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\xff\xff\xff\xff\xff\xff\xff\xff7\0\xff\xff7\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x008\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff8\x008\x008\x008\x008\x008\x008\x008\x008\x008\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff8\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\0\xff\xff\xff\xff\xff\xff\xff\xff8\0\xff\xff8\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x009\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff9\x009\x009\x009\x009\x009\x009\x009\x009\x009\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff9\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\0\xff\xff\xff\xff\xff\xff\xff\xff9\0\xff\xff9\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\0:\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0\xff\xff\xff\xff\xff\xff\xff\xff:\0\xff\xff:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0;\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0\xff\xff\xff\xff\xff\xff\xff\xff;\0\xff\xff;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0<\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0\xff\xff\xff\xff\xff\xff\xff\xff<\0\xff\xff<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0=\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0\xff\xff\xff\xff\xff\xff\xff\xff=\0\xff\xff=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0>\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0\xff\xff\xff\xff\xff\xff\xff\xff>\0\xff\xff>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0?\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0\xff\xff\xff\xff\xff\xff\xff\xff?\0\xff\xff?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0@\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0\xff\xff\xff\xff\xff\xff\xff\xff@\0\xff\xff@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0A\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffA\0A\0A\0A\0A\0A\0A\0A\0A\0A\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffA\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0\xff\xff\xff\xff\xff\xff\xff\xffA\0\xff\xffA\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0B\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\0B\0B\0B\0B\0B\0B\0B\0B\0B\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0\xff\xff\xff\xff\xff\xff\xff\xffB\0\xff\xffB\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0C\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffC\0C\0C\0C\0C\0C\0C\0C\0C\0C\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffC\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0\xff\xff\xff\xff\xff\xff\xff\xffC\0\xff\xffC\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0D\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffD\0D\0D\0D\0D\0D\0D\0D\0D\0D\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffD\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0\xff\xff\xff\xff\xff\xff\xff\xffD\0\xff\xffD\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0E\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffE\0E\0E\0E\0E\0E\0E\0E\0E\0E\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffE\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0\xff\xff\xff\xff\xff\xff\xff\xffE\0\xff\xffE\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0F\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffF\0F\0F\0F\0F\0F\0F\0F\0F\0F\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffF\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0\xff\xff\xff\xff\xff\xff\xff\xffF\0\xff\xffF\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0G\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffG\0G\0G\0G\0G\0G\0G\0G\0G\0G\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffG\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0\xff\xff\xff\xff\xff\xff\xff\xffG\0\xff\xffG\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0H\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffH\0H\0H\0H\0H\0H\0H\0H\0H\0H\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffH\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0\xff\xff\xff\xff\xff\xff\xff\xffH\0\xff\xffH\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0I\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffI\0I\0I\0I\0I\0I\0I\0I\0I\0I\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffI\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0\xff\xff\xff\xff\xff\xff\xff\xffI\0\xff\xffI\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0J\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffJ\0J\0J\0J\0J\0J\0J\0J\0J\0J\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffJ\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0\xff\xff\xff\xff\xff\xff\xff\xffJ\0\xff\xffJ\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0K\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffK\0K\0K\0K\0K\0K\0K\0K\0K\0K\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffK\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0\xff\xff\xff\xff\xff\xff\xff\xffK\0\xff\xffK\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0L\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffL\0L\0L\0L\0L\0L\0L\0L\0L\0L\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffL\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0\xff\xff\xff\xff\xff\xff\xff\xffL\0\xff\xffL\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0M\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffM\0M\0M\0M\0M\0M\0M\0M\0M\0M\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffM\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0\xff\xff\xff\xff\xff\xff\xff\xffM\0\xff\xffM\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0N\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\0N\0N\0N\0N\0N\0N\0N\0N\0N\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0\xff\xff\xff\xff\xff\xff\xff\xffN\0\xff\xffN\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0O\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffO\0O\0O\0O\0O\0O\0O\0O\0O\0O\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffO\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0\xff\xff\xff\xff\xff\xff\xff\xffO\0\xff\xffO\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0P\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffP\0P\0P\0P\0P\0P\0P\0P\0P\0P\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffP\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0\xff\xff\xff\xff\xff\xff\xff\xffP\0\xff\xffP\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0Q\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffQ\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffQ\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0\xff\xff\xff\xff\xff\xff\xff\xffQ\0\xff\xffQ\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0R\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffR\0R\0R\0R\0R\0R\0R\0R\0R\0R\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffR\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0\xff\xff\xff\xff\xff\xff\xff\xffR\0\xff\xffR\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0R\0S\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffS\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffS\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\xff\xff\xff\xff\xff\xff\xff\xffS\0\xff\xffS\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0T\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffT\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffT\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\xff\xff\xff\xff\xff\xff\xff\xffT\0\xff\xffT\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0U\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffU\0U\0U\0U\0U\0U\0U\0U\0U\0U\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffU\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0\xff\xff\xff\xff\xff\xff\xff\xffU\0\xff\xffU\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0V\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffV\0V\0V\0V\0V\0V\0V\0V\0V\0V\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffV\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0\xff\xff\xff\xff\xff\xff\xff\xffV\0\xff\xffV\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0W\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffW\0W\0W\0W\0W\0W\0W\0W\0W\0W\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffW\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0\xff\xff\xff\xff\xff\xff\xff\xffW\0\xff\xffW\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0X\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffX\0X\0X\0X\0X\0X\0X\0X\0X\0X\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffX\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0\xff\xff\xff\xff\xff\xff\xff\xffX\0\xff\xffX\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0Y\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffY\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffY\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0\xff\xff\xff\xff\xff\xff\xff\xffY\0\xff\xffY\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Z\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffZ\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffZ\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0\xff\xff\xff\xff\xff\xff\xff\xffZ\0\xff\xffZ\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0[\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0\xff\xff\xff\xff\xff\xff\xff\xff[\0\xff\xff[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0[\0\\\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\xff\xff\xff\xff\xff\xff\xff\xff\\\0\xff\xff\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0\\\0]\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0\xff\xff\xff\xff\xff\xff`\0\xff\xff\xff\xff`\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0`\0\xff\xff`\0\xff\xff]\0\xff\xff]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0]\0^\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0\xff\xff\xff\xff\xff\xff\xff\xff^\0\xff\xff^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0_\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0\xff\xff\xff\xff\xff\xff\xff\xff_\0\xff\xff_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_lexing = global_data.Stdlib__lexing,
    Stdlib_char = global_data.Stdlib__char,
    Stdlib = global_data.Stdlib,
    Slanglib_Errors = global_data.Slanglib__Errors,
    cst_Lexer_Illegal_character = "Lexer : Illegal character ";
   function next_line(lexbuf){
    var pos = lexbuf[12];
    lexbuf[12] = [0, pos[1], pos[2] + 1 | 0, lexbuf[6], pos[4]];
    return 0;
   }
   function token$0(counter, lexbuf){
    var _e_ = 0;
    if(counter >= 50)
     return caml_trampoline_return(ocaml_lex_token_rec$0, [0, lexbuf, _e_]);
    var counter$0 = counter + 1 | 0;
    return ocaml_lex_token_rec$0(counter$0, lexbuf, _e_);
   }
   function token(lexbuf){return caml_trampoline(token$0(0, lexbuf));}
   function ocaml_lex_token_rec$0(counter, lexbuf, ocaml_lex_state){
    var ocaml_lex_state$0 = ocaml_lex_state;
    for(;;){
     var
      ocaml_lex_state$1 =
        caml_call3
         (Stdlib_lexing[20], ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
     if(49 >= ocaml_lex_state$1 >>> 0)
      switch(ocaml_lex_state$1){
        case 0:
         if(counter >= 50)
          return caml_trampoline_return(token$0, [0, lexbuf]);
         var counter$0 = counter + 1 | 0;
         return token$0(counter$0, lexbuf);
        case 1:
         return 1;
        case 2:
         return 2;
        case 3:
         return 3;
        case 4:
         return 4;
        case 5:
         return 5;
        case 6:
         return 6;
        case 7:
         return 7;
        case 8:
         return 8;
        case 9:
         return 9;
        case 10:
         return 10;
        case 11:
         return 11;
        case 12:
         return 43;
        case 13:
         return 12;
        case 14:
         return 13;
        case 15:
         return 14;
        case 16:
         return 33;
        case 17:
         return 32;
        case 18:
         return 15;
        case 19:
         return 44;
        case 20:
         return 16;
        case 21:
         return 17;
        case 22:
         return 18;
        case 23:
         return 19;
        case 24:
         return 42;
        case 25:
         return 34;
        case 26:
         return 35;
        case 27:
         return 36;
        case 28:
         return 37;
        case 29:
         return 40;
        case 30:
         return 41;
        case 31:
         return 20;
        case 32:
         return 22;
        case 33:
         return 23;
        case 34:
         return 24;
        case 35:
         return 38;
        case 36:
         return 26;
        case 37:
         return 27;
        case 38:
         return 28;
        case 39:
         return 45;
        case 40:
         return 46;
        case 41:
         return 29;
        case 42:
         return 30;
        case 43:
         return 31;
        case 44:
         return [0,
                 runtime.caml_int_of_string
                  (caml_call1(Stdlib_lexing[8], lexbuf))];
        case 45:
         return [1, caml_call1(Stdlib_lexing[8], lexbuf)];
        case 46:
         comment(lexbuf);
         if(counter >= 50)
          return caml_trampoline_return(token$0, [0, lexbuf]);
         var counter$1 = counter + 1 | 0;
         return token$0(counter$1, lexbuf);
        case 47:
         next_line(lexbuf);
         if(counter >= 50)
          return caml_trampoline_return(token$0, [0, lexbuf]);
         var counter$2 = counter + 1 | 0;
         return token$0(counter$2, lexbuf);
        case 48:
         return 0;
        default:
         var
          _b_ = caml_call2(Stdlib_lexing[9], lexbuf, 0),
          _c_ = caml_call1(Stdlib_char[2], _b_),
          _d_ = caml_call2(Stdlib[28], cst_Lexer_Illegal_character, _c_);
         return caml_call1(Slanglib_Errors[2], _d_);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state$0 = ocaml_lex_state$1;
    }
   }
   function ocaml_lex_token_rec(lexbuf, ocaml_lex_state){
    return caml_trampoline(ocaml_lex_token_rec$0(0, lexbuf, ocaml_lex_state));
   }
   function comment$0(counter, lexbuf){
    var _a_ = 96;
    if(counter >= 50)
     return caml_trampoline_return(ocaml_lex_comment_rec$0, [0, lexbuf, _a_]);
    var counter$0 = counter + 1 | 0;
    return ocaml_lex_comment_rec$0(counter$0, lexbuf, _a_);
   }
   function comment(lexbuf){return caml_trampoline(comment$0(0, lexbuf));}
   function ocaml_lex_comment_rec$0(counter, lexbuf, ocaml_lex_state){
    var ocaml_lex_state$0 = ocaml_lex_state;
    for(;;){
     var
      ocaml_lex_state$1 =
        caml_call3
         (Stdlib_lexing[20], ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
     if(3 >= ocaml_lex_state$1 >>> 0)
      switch(ocaml_lex_state$1){
        case 0:
         return 0;
        case 1:
         next_line(lexbuf);
         if(counter >= 50)
          return caml_trampoline_return(comment$0, [0, lexbuf]);
         var counter$0 = counter + 1 | 0;
         return comment$0(counter$0, lexbuf);
        case 2:
         comment(lexbuf);
         if(counter >= 50)
          return caml_trampoline_return(comment$0, [0, lexbuf]);
         var counter$1 = counter + 1 | 0;
         return comment$0(counter$1, lexbuf);
        default:
         if(counter >= 50)
          return caml_trampoline_return(comment$0, [0, lexbuf]);
         var counter$2 = counter + 1 | 0;
         return comment$0(counter$2, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state$0 = ocaml_lex_state$1;
    }
   }
   function ocaml_lex_comment_rec(lexbuf, ocaml_lex_state){
    return caml_trampoline
            (ocaml_lex_comment_rec$0(0, lexbuf, ocaml_lex_state));
   }
   var
    Slanglib_Lexer =
      [0,
       next_line,
       ocaml_lex_tables,
       token,
       ocaml_lex_token_rec,
       comment,
       ocaml_lex_comment_rec];
   runtime.caml_register_global(6, Slanglib_Lexer, "Slanglib__Lexer");
   return;
  }
  (globalThis));

//# 3297 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function inlist(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var rest = param$0[2], y = param$0[1];
     if(runtime.caml_equal(x, y)) return 1;
     param$0 = rest;
    }
   }
   function free_vars(param){
    var exp = param[2], bvars = param[1];
    function aux$0(counter, bound, free, param){
     var bound$0 = bound, free$0 = free, param$0 = param;
     for(;;){
      if(typeof param$0 !== "number")
       switch(param$0[0]){
         case 0:
          var x = param$0[1];
          if(! inlist(x, bound$0) && ! inlist(x, free$0))
           return [0, x, free$0];
          return free$0;
         case 3:
          var e = param$0[2]; param$0 = e; continue;
         case 4:
          var
           e2 = param$0[3],
           e1 = param$0[1],
           free$1 = aux(bound$0, free$0, e1);
          free$0 = free$1;
          param$0 = e2;
          continue;
         case 5:
          var
           e3 = param$0[3],
           e2$0 = param$0[2],
           e1$0 = param$0[1],
           free$2 = aux(bound$0, aux(bound$0, free$0, e1$0), e2$0);
          free$0 = free$2;
          param$0 = e3;
          continue;
         case 6:
          var
           e2$1 = param$0[2],
           e1$1 = param$0[1],
           free$3 = aux(bound$0, free$0, e1$1);
          free$0 = free$3;
          param$0 = e2$1;
          continue;
         case 7:
          var e$0 = param$0[1]; param$0 = e$0; continue;
         case 8:
          var e$1 = param$0[1]; param$0 = e$1; continue;
         case 9:
          var e$2 = param$0[1]; param$0 = e$2; continue;
         case 10:
          var e$3 = param$0[1]; param$0 = e$3; continue;
         case 11:
          var
           l2 = param$0[3],
           l1 = param$0[2],
           e$4 = param$0[1],
           _b_ = lambda(bound$0, aux(bound$0, free$0, e$4), l1);
          if(counter >= 50)
           return caml_trampoline_return(lambda$0, [0, bound$0, _b_, l2]);
          var counter$0 = counter + 1 | 0;
          return lambda$0(counter$0, bound$0, _b_, l2);
         case 12:
          var
           e2$2 = param$0[2],
           e1$2 = param$0[1],
           free$4 = aux(bound$0, free$0, e1$2);
          free$0 = free$4;
          param$0 = e2$2;
          continue;
         case 13:
          var match = param$0[1];
          if(! match) return free$0;
          var
           rest = match[2],
           e$5 = match[1],
           free$5 = aux(bound$0, free$0, e$5);
          free$0 = free$5;
          param$0 = [13, rest];
          continue;
         case 14:
          var e$6 = param$0[1]; param$0 = e$6; continue;
         case 15:
          var e$7 = param$0[1]; param$0 = e$7; continue;
         case 16:
          var
           e2$3 = param$0[2],
           e1$3 = param$0[1],
           free$6 = aux(bound$0, free$0, e1$3);
          free$0 = free$6;
          param$0 = e2$3;
          continue;
         case 17:
          var l = param$0[1];
          if(counter >= 50)
           return caml_trampoline_return(lambda$0, [0, bound$0, free$0, l]);
          var counter$1 = counter + 1 | 0;
          return lambda$0(counter$1, bound$0, free$0, l);
         case 18:
          var
           e2$4 = param$0[2],
           e1$4 = param$0[1],
           free$7 = aux(bound$0, free$0, e1$4);
          free$0 = free$7;
          param$0 = e2$4;
          continue;
         case 19:
          var
           e$8 = param$0[3],
           l$0 = param$0[2],
           f = param$0[1],
           free$8 = lambda(bound$0, free$0, l$0),
           bound$1 = [0, f, bound$0];
          bound$0 = bound$1;
          free$0 = free$8;
          param$0 = e$8;
          continue;
         case 20:
          var
           e$9 = param$0[3],
           l$1 = param$0[2],
           f$0 = param$0[1],
           free$9 = lambda([0, f$0, bound$0], free$0, l$1),
           bound$2 = [0, f$0, bound$0];
          bound$0 = bound$2;
          free$0 = free$9;
          param$0 = e$9;
          continue;
       }
      return free$0;
     }
    }
    function aux(bound, free, param){
     return caml_trampoline(aux$0(0, bound, free, param));
    }
    function lambda$0(counter, bound, free, param){
     var e = param[2], x = param[1], _a_ = [0, x, bound];
     if(counter >= 50)
      return caml_trampoline_return(aux$0, [0, _a_, free, e]);
     var counter$0 = counter + 1 | 0;
     return aux$0(counter$0, _a_, free, e);
    }
    function lambda(bound, free, param){
     return caml_trampoline(lambda$0(0, bound, free, param));
    }
    return aux(bvars, 0, exp);
   }
   var Slanglib_Free_vars = [0, free_vars];
   runtime.caml_register_global(0, Slanglib_Free_vars, "Slanglib__Free_vars");
   return;
  }
  (globalThis));

//# 3462 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$34 = "",
    cst$30 = "\n",
    cst$35 = " -> ",
    cst$31 = "()",
    cst$32 = ")",
    cst$33 = ", ",
    cst$36 = ": ",
    cst_false$1 = "false",
    cst_true$1 = "true",
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$5 = " :",
    cst$6 = cst$30,
    cst$4 = "\n\t",
    cst$7 = cst$30,
    cst$20 = cst$31,
    cst$21 = cst$32,
    cst$22 = cst$33,
    cst$23 = "(",
    cst$24 = cst$32,
    cst$25 = cst$32,
    cst$28 = cst$30,
    cst$29 = " ==========\n",
    saved_fp = [4, 0],
    return_index = [3, 0],
    cst$27 = cst$30,
    header$1 = [4, 2, 2],
    header$0 = [4, 2, 1],
    header = [4, 3, 0],
    cst$26 = cst$31,
    cst$16 = cst$34,
    cst$17 = cst$30,
    cst$18 = cst$30,
    cst$19 = cst$35,
    cst$13 = cst$34,
    cst$14 = cst$30,
    cst$15 = cst$35,
    cst$11 = cst$30,
    cst$12 = cst$36,
    carry = cst$34,
    cst$8 = cst$34,
    cst$9 = cst$30,
    cst$10 = cst$36,
    cst$2 = cst$32,
    cst$3 = cst$33,
    cst$1 = " = ",
    cst = cst$32,
    cst$0 = cst$33,
    Stdlib = global_data.Stdlib,
    Slanglib_Errors = global_data.Slanglib__Errors,
    Slanglib_Option = global_data.Slanglib__Option,
    Slanglib_Free_vars = global_data.Slanglib__Free_vars,
    Stdlib_list = global_data.Stdlib__list,
    Stdlib_array = global_data.Stdlib__array,
    Slanglib_Ast = global_data.Slanglib__Ast,
    cst_halted = "halted",
    cst_running = "running",
    cst_code_index_out_of_bound = "code index out-of-bound",
    cst_stack_index_out_of_bound = "stack index out-of-bound",
    cst_heap_index_out_of_bound = "heap index out-of-bound",
    cst_stack_underflow = "stack underflow",
    cst_STACK_UNIT = "STACK_UNIT",
    cst_STACK_INT = "STACK_INT ",
    cst_STACK_BOOL_true = "STACK_BOOL true",
    cst_STACK_BOOL_false = "STACK_BOOL false",
    cst_STACK_HI = "STACK_HI ",
    cst_STACK_RA = "STACK_RA ",
    cst_STACK_FP = "STACK_FP ",
    cst_HT_PAIR = "HT_PAIR",
    cst_HT_INL = "HT_INL",
    cst_HT_INR = "HT_INR",
    cst_HT_CLOSURE = "HT_CLOSURE",
    cst_HEAP_UNIT = "HEAP_UNIT",
    cst_HEAP_INT = "HEAP_INT ",
    cst_HEAP_BOOL_true = "HEAP_BOOL true",
    cst_HEAP_BOOL_false = "HEAP_BOOL false",
    cst_HEAP_HI = "HEAP_HI ",
    cst_HEAP_CI = "HEAP_CI ",
    cst_HEAP_HEADER = "HEAP_HEADER(",
    cst_STACK_LOCATION = "STACK_LOCATION ",
    cst_HEAP_LOCATION = "HEAP_LOCATION ",
    cst_ASSIGN = "ASSIGN",
    cst_SWAP = "SWAP",
    cst_POP = "POP",
    cst_FST = "FST",
    cst_SND = "SND",
    cst_DEREF = "DEREF",
    cst_APPLY = "APPLY",
    cst_RETURN = "RETURN",
    cst_MK_PAIR = "MK_PAIR",
    cst_MK_INL = "MK_INL",
    cst_MK_INR = "MK_INR",
    cst_MK_REF = "MK_REF",
    cst_HALT = "HALT",
    cst_PUSH = "PUSH ",
    cst_LOOKUP = "LOOKUP ",
    cst_UNARY = "UNARY ",
    cst_OPER = "OPER ",
    cst_MK_CLOSURE = "MK_CLOSURE(",
    cst_TEST = "TEST ",
    cst_CASE = "CASE ",
    cst_GOTO = "GOTO ",
    cst_LABEL = "LABEL ",
    cst_Heap = "\nHeap = \n",
    cst_Stack = "Stack = \n",
    cst_fp = "fp = ",
    cst_cp = "cp = ",
    cst_true = cst_true$1,
    cst_false = cst_false$1,
    cst_string_of_heap_value_expec =
      "string_of_heap_value: expecting value in heap, found code index",
    cst_inl = "inl(",
    cst_inr = "inr(",
    cst_CLOSURE = "CLOSURE",
    cst_true$0 = cst_true$1,
    cst_false$0 = cst_false$1,
    cst_string_of_value_expecting_ =
      "string_of_value: expecting value on stack top, found code index",
    cst_string_of_value_expecting_$0 =
      "string_of_value: expecting value on stack top, found frame pointer",
    cst_input = "input> ",
    cst_stack_to_heap_item_no_fram =
      "stack_to_heap_item: no frame pointer allowed on heap",
    cst_heap_to_stack_item_heap_he =
      "heap_to_stack_item : heap header not allowed on stack",
    cst_do_unary_malformed_unary_o = "do_unary: malformed unary operator: ",
    cst_do_oper_malformed_binary_o = "do_oper: malformed binary operator: ",
    cst_allocate_heap_exhausted = "allocate : heap exhausted",
    cst_do_fst_expecting_heap_poin =
      "do_fst : expecting heap pointer on stack",
    cst_do_fst_unexpectd_heap_item = "do_fst : unexpectd heap item",
    cst_do_snd_expecting_heap_poin =
      "do_snd : expecting heap pointer on stack",
    cst_do_snd_unexpectd_heap_item = "do_snd : unexpectd heap item",
    cst_case_runtime_error_expecti =
      "case: runtime error, expecting heap index on top of stack",
    cst_case_runtime_error_expecti$0 =
      "case: runtime error, expecting union header in heap",
    cst_deref = "deref",
    cst_assing_runtime_error_expec =
      "assing: runtime error, expecting heap index on stack",
    _a_ = [1, 1],
    cst_return_malformed_stack_fra = "return : malformed stack frame",
    cst_search_expecting_closure_p = "search : expecting closure pointer",
    cst_mk_closure_internal_error_ =
      "mk_closure : internal error, no address in closure!",
    cst_apply_runtime_error_expect =
      "apply: runtime error, expecting heap index on top of stack",
    cst_apply_runtime_error_expect$0 =
      "apply: runtime error, expecting code index in heap",
    cst_step_bad_state = "step : bad state = ",
    cst_state = "========== state ",
    cst_is_not_found = " is not found",
    cst_Compile_find = "Compile.find : ",
    cst_Installed_Code = "\nInstalled Code = \n",
    _b_ = [0, 0],
    _c_ = [0, 0],
    cst_run_stopped_wth_status = "run : stopped wth status ";
   function get_instruction(vm){
    var _cn_ = vm[9];
    return caml_check_bound(vm[6], _cn_)[1 + _cn_];
   }
   function stack_top(vm){
    var _cm_ = vm[7] - 1 | 0;
    return caml_check_bound(vm[4], _cm_)[1 + _cm_];
   }
   function string_of_status(param){
    switch(param){
      case 0:
       return cst_halted;
      case 1:
       return cst_running;
      case 2:
       return cst_code_index_out_of_bound;
      case 3:
       return cst_stack_index_out_of_bound;
      case 4:
       return cst_heap_index_out_of_bound;
      default: return cst_stack_underflow;
    }
   }
   function string_of_stack_item(param){
    if(typeof param === "number") return cst_STACK_UNIT;
    switch(param[0]){
      case 0:
       var i = param[1], _ci_ = caml_call1(Stdlib[33], i);
       return caml_call2(Stdlib[28], cst_STACK_INT, _ci_);
      case 1:
       return param[1] ? cst_STACK_BOOL_true : cst_STACK_BOOL_false;
      case 2:
       var i$0 = param[1], _cj_ = caml_call1(Stdlib[33], i$0);
       return caml_call2(Stdlib[28], cst_STACK_HI, _cj_);
      case 3:
       var i$1 = param[1], _ck_ = caml_call1(Stdlib[33], i$1);
       return caml_call2(Stdlib[28], cst_STACK_RA, _ck_);
      default:
       var i$2 = param[1], _cl_ = caml_call1(Stdlib[33], i$2);
       return caml_call2(Stdlib[28], cst_STACK_FP, _cl_);
    }
   }
   function string_of_heap_type(param){
    switch(param){
      case 0:
       return cst_HT_PAIR;
      case 1:
       return cst_HT_INL;
      case 2:
       return cst_HT_INR;
      default: return cst_HT_CLOSURE;
    }
   }
   function string_of_heap_item(param){
    if(typeof param === "number") return cst_HEAP_UNIT;
    switch(param[0]){
      case 0:
       var i = param[1], _ca_ = caml_call1(Stdlib[33], i);
       return caml_call2(Stdlib[28], cst_HEAP_INT, _ca_);
      case 1:
       return param[1] ? cst_HEAP_BOOL_true : cst_HEAP_BOOL_false;
      case 2:
       var i$0 = param[1], _cb_ = caml_call1(Stdlib[33], i$0);
       return caml_call2(Stdlib[28], cst_HEAP_HI, _cb_);
      case 3:
       var i$1 = param[1], _cc_ = caml_call1(Stdlib[33], i$1);
       return caml_call2(Stdlib[28], cst_HEAP_CI, _cc_);
      default:
       var
        t = param[2],
        i$2 = param[1],
        _cd_ = string_of_heap_type(t),
        _ce_ = caml_call2(Stdlib[28], _cd_, cst),
        _cf_ = caml_call2(Stdlib[28], cst$0, _ce_),
        _cg_ = caml_call1(Stdlib[33], i$2),
        _ch_ = caml_call2(Stdlib[28], _cg_, _cf_);
       return caml_call2(Stdlib[28], cst_HEAP_HEADER, _ch_);
    }
   }
   function string_of_value_path(param){
    if(0 === param[0]){
     var offset = param[1], _b__ = caml_call1(Stdlib[33], offset);
     return caml_call2(Stdlib[28], cst_STACK_LOCATION, _b__);
    }
    var offset$0 = param[1], _b$_ = caml_call1(Stdlib[33], offset$0);
    return caml_call2(Stdlib[28], cst_HEAP_LOCATION, _b$_);
   }
   function string_of_location(param){
    var match = param[2], l = param[1];
    if(! match) return l;
    var
     i = match[1],
     _b8_ = caml_call1(Stdlib[33], i),
     _b9_ = caml_call2(Stdlib[28], cst$1, _b8_);
    return caml_call2(Stdlib[28], l, _b9_);
   }
   function string_of_instruction(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cst_ASSIGN;
       case 1:
        return cst_SWAP;
       case 2:
        return cst_POP;
       case 3:
        return cst_FST;
       case 4:
        return cst_SND;
       case 5:
        return cst_DEREF;
       case 6:
        return cst_APPLY;
       case 7:
        return cst_RETURN;
       case 8:
        return cst_MK_PAIR;
       case 9:
        return cst_MK_INL;
       case 10:
        return cst_MK_INR;
       case 11:
        return cst_MK_REF;
       default: return cst_HALT;
     }
    switch(param[0]){
      case 0:
       var v = param[1], _bW_ = string_of_stack_item(v);
       return caml_call2(Stdlib[28], cst_PUSH, _bW_);
      case 1:
       var p = param[1], _bX_ = string_of_value_path(p);
       return caml_call2(Stdlib[28], cst_LOOKUP, _bX_);
      case 2:
       var op = param[1], _bY_ = caml_call1(Slanglib_Ast[3], op);
       return caml_call2(Stdlib[28], cst_UNARY, _bY_);
      case 3:
       var op$0 = param[1], _bZ_ = caml_call1(Slanglib_Ast[4], op$0);
       return caml_call2(Stdlib[28], cst_OPER, _bZ_);
      case 4:
       var
        n = param[2],
        loc = param[1],
        _b0_ = caml_call1(Stdlib[33], n),
        _b1_ = caml_call2(Stdlib[28], _b0_, cst$2),
        _b2_ = caml_call2(Stdlib[28], cst$3, _b1_),
        _b3_ = string_of_location(loc),
        _b4_ = caml_call2(Stdlib[28], _b3_, _b2_);
       return caml_call2(Stdlib[28], cst_MK_CLOSURE, _b4_);
      case 5:
       var l = param[1], _b5_ = string_of_location(l);
       return caml_call2(Stdlib[28], cst_TEST, _b5_);
      case 6:
       var l$0 = param[1], _b6_ = string_of_location(l$0);
       return caml_call2(Stdlib[28], cst_CASE, _b6_);
      case 7:
       var l$1 = param[1], _b7_ = string_of_location(l$1);
       return caml_call2(Stdlib[28], cst_GOTO, _b7_);
      default:
       var l$2 = param[1]; return caml_call2(Stdlib[28], cst_LABEL, l$2);
    }
   }
   function string_of_listing(param){
    if(! param) return cst$7;
    var i = param[1];
    if(typeof i !== "number" && 8 === i[0]){
     var
      rest$0 = param[2],
      l = i[1],
      _bT_ = string_of_listing(rest$0),
      _bU_ = caml_call2(Stdlib[28], cst$5, _bT_),
      _bV_ = caml_call2(Stdlib[28], l, _bU_);
     return caml_call2(Stdlib[28], cst$6, _bV_);
    }
    var
     rest = param[2],
     _bQ_ = string_of_listing(rest),
     _bR_ = string_of_instruction(i),
     _bS_ = caml_call2(Stdlib[28], _bR_, _bQ_);
    return caml_call2(Stdlib[28], cst$4, _bS_);
   }
   function string_of_state(vm){
    if(0 === vm[10])
     var _bx_ = cst$16;
    else
     var
      aux =
        function(k){
         if(vm[10] <= k) return cst$13;
         var
          _bK_ = aux(k + 1 | 0),
          _bL_ = caml_call2(Stdlib[28], cst$14, _bK_),
          _bM_ = string_of_heap_item(caml_check_bound(vm[5], k)[1 + k]),
          _bN_ = caml_call2(Stdlib[28], _bM_, _bL_),
          _bO_ = caml_call2(Stdlib[28], cst$15, _bN_),
          _bP_ = caml_call1(Stdlib[33], k);
         return caml_call2(Stdlib[28], _bP_, _bO_);
        },
      _bw_ = aux(0),
      _bx_ = caml_call2(Stdlib[28], cst_Heap, _bw_);
    var stack = vm[4], sp = vm[7], carry$0 = carry, j = 0;
    for(;;){
     if(j === sp) break;
     var
      j$0 = j + 1 | 0,
      _br_ = caml_call2(Stdlib[28], cst$11, carry$0),
      _bs_ = string_of_stack_item(caml_check_bound(stack, j)[1 + j]),
      _bt_ = caml_call2(Stdlib[28], _bs_, _br_),
      _bu_ = caml_call2(Stdlib[28], cst$12, _bt_),
      _bv_ = caml_call1(Stdlib[33], j),
      carry$1 = caml_call2(Stdlib[28], _bv_, _bu_);
     carry$0 = carry$1;
     j = j$0;
    }
    var
     _by_ = caml_call2(Stdlib[28], carry$0, _bx_),
     _bz_ = caml_call2(Stdlib[28], cst_Stack, _by_),
     _bA_ = caml_call2(Stdlib[28], cst$17, _bz_),
     _bB_ = caml_call1(Stdlib[33], vm[8]),
     _bC_ = caml_call2(Stdlib[28], _bB_, _bA_),
     _bD_ = caml_call2(Stdlib[28], cst_fp, _bC_),
     _bE_ = caml_call2(Stdlib[28], cst$18, _bD_),
     _bF_ = string_of_instruction(get_instruction(vm)),
     _bG_ = caml_call2(Stdlib[28], _bF_, _bE_),
     _bH_ = caml_call2(Stdlib[28], cst$19, _bG_),
     _bI_ = caml_call1(Stdlib[33], vm[9]),
     _bJ_ = caml_call2(Stdlib[28], _bI_, _bH_);
    return caml_call2(Stdlib[28], cst_cp, _bJ_);
   }
   function string_of_heap_value(a, vm){
    var a$0 = a;
    for(;;){
     var match = caml_check_bound(vm[5], a$0)[1 + a$0];
     if(typeof match === "number") return cst$20;
     switch(match[0]){
       case 0:
        var i = match[1]; return caml_call1(Stdlib[33], i);
       case 1:
        return match[1] ? cst_true : cst_false;
       case 2:
        var i$0 = match[1]; a$0 = i$0; break;
       case 3:
        return caml_call1(Slanglib_Errors[2], cst_string_of_heap_value_expec);
       default:
        var ht = match[2];
        switch(ht){
          case 0:
           var
            _bi_ = string_of_heap_value(a$0 + 2 | 0, vm),
            _bj_ = caml_call2(Stdlib[28], _bi_, cst$21),
            _bk_ = caml_call2(Stdlib[28], cst$22, _bj_),
            _bl_ = string_of_heap_value(a$0 + 1 | 0, vm),
            _bm_ = caml_call2(Stdlib[28], _bl_, _bk_);
           return caml_call2(Stdlib[28], cst$23, _bm_);
          case 1:
           var
            _bn_ = string_of_heap_value(a$0 + 1 | 0, vm),
            _bo_ = caml_call2(Stdlib[28], _bn_, cst$24);
           return caml_call2(Stdlib[28], cst_inl, _bo_);
          case 2:
           var
            _bp_ = string_of_heap_value(a$0 + 1 | 0, vm),
            _bq_ = caml_call2(Stdlib[28], _bp_, cst$25);
           return caml_call2(Stdlib[28], cst_inr, _bq_);
          default: return cst_CLOSURE;
        }
     }
    }
   }
   function string_of_value(vm){
    var match = stack_top(vm);
    if(typeof match === "number") return cst$26;
    switch(match[0]){
      case 0:
       var i = match[1]; return caml_call1(Stdlib[33], i);
      case 1:
       return match[1] ? cst_true$0 : cst_false$0;
      case 2:
       var a = match[1]; return string_of_heap_value(a, vm);
      case 3:
       return caml_call1(Slanglib_Errors[2], cst_string_of_value_expecting_);
      default:
       return caml_call1(Slanglib_Errors[2], cst_string_of_value_expecting_$0);
    }
   }
   function stack_to_heap_item(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var i = param[1]; return [0, i];
      case 1:
       var b = param[1]; return [1, b];
      case 2:
       var i$0 = param[1]; return [2, i$0];
      case 3:
       var i$1 = param[1]; return [3, i$1];
      default:
       return caml_call1(Slanglib_Errors[2], cst_stack_to_heap_item_no_fram);
    }
   }
   function heap_to_stack_item(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var i = param[1]; return [0, i];
      case 1:
       var b = param[1]; return [1, b];
      case 2:
       var i$0 = param[1]; return [2, i$0];
      case 3:
       var i$1 = param[1]; return [3, i$1];
      default:
       return caml_call1(Slanglib_Errors[2], cst_heap_to_stack_item_heap_he);
    }
   }
   function advance_cp(vm){
    return vm[9] < vm[2]
            ? [0,
              vm[1],
              vm[2],
              vm[3],
              vm[4],
              vm[5],
              vm[6],
              vm[7],
              vm[8],
              vm[9] + 1 | 0,
              vm[10],
              vm[11]]
            : [0,
              vm[1],
              vm[2],
              vm[3],
              vm[4],
              vm[5],
              vm[6],
              vm[7],
              vm[8],
              vm[9],
              vm[10],
              2];
   }
   function goto$0(param){
    var vm = param[2], i = param[1];
    return [0,
            vm[1],
            vm[2],
            vm[3],
            vm[4],
            vm[5],
            vm[6],
            vm[7],
            vm[8],
            i,
            vm[10],
            vm[11]];
   }
   function pop(param){
    var vm = param[2], n = param[1];
    return 0 <= (vm[7] - n | 0)
            ? [0,
              vm[1],
              vm[2],
              vm[3],
              vm[4],
              vm[5],
              vm[6],
              vm[7] - n | 0,
              vm[8],
              vm[9],
              vm[10],
              vm[11]]
            : [0,
              vm[1],
              vm[2],
              vm[3],
              vm[4],
              vm[5],
              vm[6],
              vm[7],
              vm[8],
              vm[9],
              vm[10],
              5];
   }
   function pop_top(vm){
    var c = stack_top(vm);
    return [0, c, pop([0, 1, vm])];
   }
   function push(param){
    var vm = param[2], c = param[1];
    if(vm[7] >= vm[1])
     return [0,
             vm[1],
             vm[2],
             vm[3],
             vm[4],
             vm[5],
             vm[6],
             vm[7],
             vm[8],
             vm[9],
             vm[10],
             3];
    var _bh_ = vm[7];
    caml_check_bound(vm[4], _bh_)[1 + _bh_] = c;
    return [0,
            vm[1],
            vm[2],
            vm[3],
            vm[4],
            vm[5],
            vm[6],
            vm[7] + 1 | 0,
            vm[8],
            vm[9],
            vm[10],
            vm[11]];
   }
   function do_oper(param){
    var op = param[1];
    switch(op){
      case 0:
       var _a8_ = param[2];
       if(typeof _a8_ !== "number" && 0 === _a8_[0]){
        var match = param[3];
        if(typeof match !== "number" && 0 === match[0]){
         var n = match[1], m = _a8_[1];
         return [0, m + n | 0];
        }
        break;
       }
       break;
      case 1:
       var _a$_ = param[2];
       if(typeof _a$_ !== "number" && 0 === _a$_[0]){
        var match$0 = param[3];
        if(typeof match$0 !== "number" && 0 === match$0[0]){
         var n$0 = match$0[1], m$0 = _a$_[1];
         return [0, runtime.caml_mul(m$0, n$0)];
        }
        break;
       }
       break;
      case 2:
       var _ba_ = param[2];
       if(typeof _ba_ !== "number" && 0 === _ba_[0]){
        var match$1 = param[3];
        if(typeof match$1 !== "number" && 0 === match$1[0]){
         var n$1 = match$1[1], m$1 = _ba_[1];
         return [0, runtime.caml_div(m$1, n$1)];
        }
        break;
       }
       break;
      case 3:
       var _bb_ = param[2];
       if(typeof _bb_ !== "number" && 0 === _bb_[0]){
        var match$2 = param[3];
        if(typeof match$2 !== "number" && 0 === match$2[0]){
         var n$2 = match$2[1], m$2 = _bb_[1];
         return [0, m$2 - n$2 | 0];
        }
        break;
       }
       break;
      case 4:
       var _bc_ = param[2];
       if(typeof _bc_ !== "number" && 0 === _bc_[0]){
        var match$3 = param[3];
        if(typeof match$3 !== "number" && 0 === match$3[0]){
         var n$3 = match$3[1], m$3 = _bc_[1];
         return [1, m$3 < n$3 ? 1 : 0];
        }
        break;
       }
       break;
      case 5:
       var _bd_ = param[2];
       if(typeof _bd_ !== "number" && 1 === _bd_[0]){
        var match$4 = param[3];
        if(typeof match$4 !== "number" && 1 === match$4[0]){
         var n$4 = match$4[1], m$4 = _bd_[1], n$5 = m$4 ? n$4 : m$4;
         return [1, n$5];
        }
        break;
       }
       break;
      case 6:
       var _be_ = param[2];
       if(typeof _be_ !== "number" && 1 === _be_[0]){
        var match$5 = param[3];
        if(typeof match$5 !== "number" && 1 === match$5[0]){
         var n$6 = match$5[1], m$5 = _be_[1], m$6 = m$5 || n$6;
         return [1, m$6];
        }
        break;
       }
       break;
      case 7:
       var _bf_ = param[2];
       if(typeof _bf_ !== "number" && 1 === _bf_[0]){
        var match$6 = param[3];
        if(typeof match$6 !== "number" && 1 === match$6[0]){
         var n$7 = match$6[1], m$7 = _bf_[1];
         return [1, m$7 === n$7 ? 1 : 0];
        }
        break;
       }
       break;
      default:
       var _bg_ = param[2];
       if(typeof _bg_ !== "number" && 0 === _bg_[0]){
        var match$7 = param[3];
        if(typeof match$7 !== "number" && 0 === match$7[0]){
         var n$8 = match$7[1], m$8 = _bg_[1];
         return [1, m$8 === n$8 ? 1 : 0];
        }
        break;
       }
    }
    var
     _a9_ = caml_call1(Slanglib_Ast[2], op),
     _a__ = caml_call2(Stdlib[28], cst_do_oper_malformed_binary_o, _a9_);
    return caml_call1(Slanglib_Errors[2], _a__);
   }
   function allocate(param){
    var vm = param[2], n = param[1], hp1 = vm[10];
    return (hp1 + n | 0) < vm[3]
            ? [0,
              hp1,
              [0,
               vm[1],
               vm[2],
               vm[3],
               vm[4],
               vm[5],
               vm[6],
               vm[7],
               vm[8],
               vm[9],
               vm[10] + n | 0,
               vm[11]]]
            : caml_call1(Slanglib_Errors[2], cst_allocate_heap_exhausted);
   }
   function step(vm){
    var match$28 = get_instruction(vm);
    if(typeof match$28 === "number")
     switch(match$28){
       case 0:
        var
         match$20 = pop_top(vm),
         vm1$10 = match$20[2],
         c1$0 = match$20[1],
         c2$0 = pop_top(vm1$10)[1];
        a:
        {
         if(typeof c2$0 !== "number" && 2 === c2$0[0]){
          var a$7 = c2$0[1];
          if(vm[7] < vm[3]){
           var _aP_ = stack_to_heap_item(c1$0);
           caml_check_bound(vm[5], a$7)[1 + a$7] = _aP_;
           var _a0_ = push([0, 0, vm]);
           break a;
          }
          var
           _a0_ =
             [0,
              vm[1],
              vm[2],
              vm[3],
              vm[4],
              vm[5],
              vm[6],
              vm[7],
              vm[8],
              vm[9],
              vm[10],
              4];
          break a;
         }
         var
          _a0_ =
            caml_call1(Slanglib_Errors[2], cst_assing_runtime_error_expec);
        }
        return advance_cp(_a0_);
       case 1:
        var
         match = pop_top(vm),
         vm1 = match[2],
         c1 = match[1],
         match$0 = pop_top(vm1),
         vm2 = match$0[2],
         c2 = match$0[1];
        return advance_cp(push([0, c2, push([0, c1, vm2])]));
       case 2:
        return advance_cp(pop([0, 1, vm]));
       case 3:
        var match$7 = pop_top(vm), vm1$3 = match$7[2], v$0 = match$7[1];
        a:
        {
         if(typeof v$0 !== "number" && 2 === v$0[0]){
          var
           a$0 = v$0[1],
           match$8 = caml_check_bound(vm1$3[5], a$0)[1 + a$0];
          if(typeof match$8 !== "number" && 4 === match$8[0] && ! match$8[2]){
           var
            _aG_ = a$0 + 1 | 0,
            _a1_ =
              push
               ([0,
                 heap_to_stack_item(caml_check_bound(vm[5], _aG_)[1 + _aG_]),
                 vm1$3]);
           break a;
          }
          var
           _a1_ =
             caml_call1(Slanglib_Errors[2], cst_do_fst_unexpectd_heap_item);
          break a;
         }
         var
          _a1_ =
            caml_call1(Slanglib_Errors[2], cst_do_fst_expecting_heap_poin);
        }
        return advance_cp(_a1_);
       case 4:
        var match$9 = pop_top(vm), vm1$4 = match$9[2], v$1 = match$9[1];
        a:
        {
         if(typeof v$1 !== "number" && 2 === v$1[0]){
          var
           a$1 = v$1[1],
           match$10 = caml_check_bound(vm1$4[5], a$1)[1 + a$1];
          if
           (typeof match$10 !== "number" && 4 === match$10[0] && ! match$10[2]){
           var
            _aH_ = a$1 + 2 | 0,
            _a2_ =
              push
               ([0,
                 heap_to_stack_item(caml_check_bound(vm[5], _aH_)[1 + _aH_]),
                 vm1$4]);
           break a;
          }
          var
           _a2_ =
             caml_call1(Slanglib_Errors[2], cst_do_snd_unexpectd_heap_item);
          break a;
         }
         var
          _a2_ =
            caml_call1(Slanglib_Errors[2], cst_do_snd_expecting_heap_poin);
        }
        return advance_cp(_a2_);
       case 5:
        var match$19 = pop_top(vm), vm1$9 = match$19[2], v$5 = match$19[1];
        a:
        {
         if(typeof v$5 !== "number" && 2 === v$5[0]){
          var
           a$6 = v$5[1],
           _a3_ =
             push
              ([0,
                heap_to_stack_item(caml_check_bound(vm1$9[5], a$6)[1 + a$6]),
                vm1$9]);
          break a;
         }
         var _a3_ = caml_call1(Slanglib_Errors[2], cst_deref);
        }
        return advance_cp(_a3_);
       case 6:
        var match$26 = stack_top(vm);
        if(typeof match$26 !== "number" && 2 === match$26[0]){
         var
          a$10 = match$26[1],
          _aZ_ = a$10 + 1 | 0,
          match$27 = caml_check_bound(vm[5], _aZ_)[1 + _aZ_];
         if(typeof match$27 !== "number" && 3 === match$27[0]){
          var
           i$0 = match$27[1],
           new_fp = vm[7],
           saved_fp$0 = [4, vm[8]],
           return_index = [3, vm[9] + 1 | 0],
           new_vm =
             [0,
              vm[1],
              vm[2],
              vm[3],
              vm[4],
              vm[5],
              vm[6],
              vm[7],
              new_fp,
              i$0,
              vm[10],
              vm[11]];
          return push([0, return_index, push([0, saved_fp$0, new_vm])]);
         }
         return caml_call1
                 (Slanglib_Errors[2], cst_apply_runtime_error_expect$0);
        }
        return caml_call1(Slanglib_Errors[2], cst_apply_runtime_error_expect);
       case 7:
        var
         current_fp = vm[8],
         match$21 = caml_check_bound(vm[4], current_fp)[1 + current_fp],
         _aR_ = vm[8] + 1 | 0,
         match$22 = caml_check_bound(vm[4], _aR_)[1 + _aR_];
        if
         (typeof match$21 !== "number"
          &&
           4 === match$21[0]
           && typeof match$22 !== "number" && 3 === match$22[0]){
         var
          k = match$22[1],
          saved_fp = match$21[1],
          return_value = stack_top(vm);
         return push
                 ([0,
                   return_value,
                   [0,
                    vm[1],
                    vm[2],
                    vm[3],
                    vm[4],
                    vm[5],
                    vm[6],
                    current_fp - 2 | 0,
                    saved_fp,
                    k,
                    vm[10],
                    vm[11]]]);
        }
        return caml_call1(Slanglib_Errors[2], cst_return_malformed_stack_fra);
       case 8:
        var
         match$4 = pop_top(vm),
         vm1$2 = match$4[2],
         v_right$0 = match$4[1],
         match$5 = pop_top(vm1$2),
         vm2$1 = match$5[2],
         v_left$0 = match$5[1],
         match$6 = allocate([0, 3, vm2$1]),
         vm3 = match$6[2],
         a = match$6[1];
        caml_check_bound(vm[5], a)[1 + a] = header;
        var _aD_ = a + 1 | 0, _aC_ = stack_to_heap_item(v_left$0);
        caml_check_bound(vm[5], _aD_)[1 + _aD_] = _aC_;
        var _aF_ = a + 2 | 0, _aE_ = stack_to_heap_item(v_right$0);
        caml_check_bound(vm[5], _aF_)[1 + _aF_] = _aE_;
        return advance_cp(push([0, [2, a], vm3]));
       case 9:
        var
         match$11 = pop_top(vm),
         vm1$5 = match$11[2],
         v$2 = match$11[1],
         match$12 = allocate([0, 2, vm1$5]),
         vm2$2 = match$12[2],
         a$2 = match$12[1];
        caml_check_bound(vm2$2[5], a$2)[1 + a$2] = header$0;
        var _aJ_ = a$2 + 1 | 0, _aI_ = stack_to_heap_item(v$2);
        caml_check_bound(vm2$2[5], _aJ_)[1 + _aJ_] = _aI_;
        return advance_cp(push([0, [2, a$2], vm2$2]));
       case 10:
        var
         match$13 = pop_top(vm),
         vm1$6 = match$13[2],
         v$3 = match$13[1],
         match$14 = allocate([0, 2, vm1$6]),
         vm2$3 = match$14[2],
         a$3 = match$14[1];
        caml_check_bound(vm2$3[5], a$3)[1 + a$3] = header$1;
        var _aL_ = a$3 + 1 | 0, _aK_ = stack_to_heap_item(v$3);
        caml_check_bound(vm2$3[5], _aL_)[1 + _aL_] = _aK_;
        return advance_cp(push([0, [2, a$3], vm2$3]));
       case 11:
        var
         match$17 = pop_top(vm),
         vm1$8 = match$17[2],
         v$4 = match$17[1],
         match$18 = allocate([0, 1, vm1$8]),
         vm2$5 = match$18[2],
         a$5 = match$18[1],
         _aO_ = stack_to_heap_item(v$4);
        caml_check_bound(vm2$5[5], a$5)[1 + a$5] = _aO_;
        return advance_cp(push([0, [2, a$5], vm2$5]));
       default:
        return [0,
                vm[1],
                vm[2],
                vm[3],
                vm[4],
                vm[5],
                vm[6],
                vm[7],
                vm[8],
                vm[9],
                vm[10],
                0];
     }
    switch(match$28[0]){
      case 0:
       var c$0 = match$28[1]; return advance_cp(push([0, c$0, vm]));
      case 1:
       var vlp = match$28[1], fp = vm[8];
       a:
       if(0 === vlp[0])
        var
         offset = vlp[1],
         _aS_ = fp + offset | 0,
         _aV_ = caml_check_bound(vm[4], _aS_)[1 + _aS_];
       else{
        var
         offset$0 = vlp[1],
         _aT_ = fp - 1 | 0,
         match$23 = caml_check_bound(vm[4], _aT_)[1 + _aT_];
        if(typeof match$23 !== "number" && 2 === match$23[0]){
         var
          a$8 = match$23[1],
          _aU_ = (a$8 + offset$0 | 0) + 1 | 0,
          _aV_ = heap_to_stack_item(caml_check_bound(vm[5], _aU_)[1 + _aU_]);
         break a;
        }
        var
         _aV_ = caml_call1(Slanglib_Errors[2], cst_search_expecting_closure_p);
       }
       return advance_cp(push([0, _aV_, vm]));
      case 2:
       var
        op = match$28[1],
        match$3 = pop_top(vm),
        vm1$1 = match$3[2],
        v = match$3[1];
       a:
       {
        switch(op){
          case 0:
           if(typeof v !== "number" && 0 === v[0]){
            var m = v[1], _aB_ = [0, - m | 0];
            break a;
           }
           break;
          case 1:
           if(typeof v !== "number" && 1 === v[0]){
            var m$0 = v[1], _aB_ = [1, 1 - m$0];
            break a;
           }
           break;
          default:
           if(typeof v === "number"){
            caml_call1(Stdlib[42], cst_input);
            var _aB_ = [0, caml_call1(Stdlib[57], 0)];
            break a;
           }
        }
        var
         _az_ = caml_call1(Slanglib_Ast[1], op),
         _aA_ = caml_call2(Stdlib[28], cst_do_unary_malformed_unary_o, _az_),
         _aB_ = caml_call1(Slanglib_Errors[2], _aA_);
       }
       return advance_cp(push([0, _aB_, vm1$1]));
      case 3:
       var
        op$0 = match$28[1],
        match$1 = pop_top(vm),
        vm1$0 = match$1[2],
        v_right = match$1[1],
        match$2 = pop_top(vm1$0),
        vm2$0 = match$2[2],
        v_left = match$2[1];
       return advance_cp
               (push([0, do_oper([0, op$0, v_left, v_right]), vm2$0]));
      case 4:
       var n = match$28[2], l = match$28[1], match$24 = l[2];
       if(match$24){
        var
         i = match$24[1],
         match$25 = allocate([0, 2 + n | 0, vm]),
         vm1$11 = match$25[2],
         a$9 = match$25[1],
         header$2 = [4, 2 + n | 0, 3],
         code_address = [3, i];
        caml_check_bound(vm1$11[5], a$9)[1 + a$9] = header$2;
        var _aW_ = a$9 + 1 | 0;
        caml_check_bound(vm1$11[5], _aW_)[1 + _aW_] = code_address;
        var m$1 = 0;
        for(;;){
         if(m$1 === n){
          var vm2$6 = pop([0, n, vm1$11]), _a4_ = push([0, [2, a$9], vm2$6]);
          break;
         }
         var
          _aX_ = vm[7] - (m$1 + 1 | 0) | 0,
          v$6 =
            stack_to_heap_item(caml_check_bound(vm1$11[4], _aX_)[1 + _aX_]),
          _aY_ = (a$9 + m$1 | 0) + 2 | 0;
         caml_check_bound(vm1$11[5], _aY_)[1 + _aY_] = v$6;
         var m$2 = m$1 + 1 | 0;
         m$1 = m$2;
        }
       }
       else
        var
         _a4_ = caml_call1(Slanglib_Errors[2], cst_mk_closure_internal_error_);
       return advance_cp(_a4_);
      case 5:
       var match$29 = match$28[1][2];
       if(match$29){
        var
         i$1 = match$29[1],
         _aQ_ =
           runtime.caml_equal(stack_top(vm), _a_)
            ? advance_cp(vm)
            : [0,
              vm[1],
              vm[2],
              vm[3],
              vm[4],
              vm[5],
              vm[6],
              vm[7],
              vm[8],
              i$1,
              vm[10],
              vm[11]];
        return pop([0, 1, _aQ_]);
       }
       break;
      case 6:
       var match$30 = match$28[1][2];
       if(match$30){
        var
         i$2 = match$30[1],
         match$15 = pop_top(vm),
         vm1$7 = match$15[2],
         c = match$15[1];
        if(typeof c !== "number" && 2 === c[0]){
         var
          a$4 = c[1],
          _aM_ = a$4 + 1 | 0,
          vm2$4 =
            push
             ([0,
               heap_to_stack_item(caml_check_bound(vm[5], _aM_)[1 + _aM_]),
               vm1$7]),
          match$16 = caml_check_bound(vm1$7[5], a$4)[1 + a$4];
         if(typeof match$16 !== "number" && 4 === match$16[0]){
          var _aN_ = match$16[2];
          if(_aN_)
           switch(_aN_ - 1 | 0){
             case 0:
              return advance_cp(vm2$4);
             case 1:
              return goto$0([0, i$2, vm2$4]);
           }
         }
         return caml_call1
                 (Slanglib_Errors[2], cst_case_runtime_error_expecti$0);
        }
        return caml_call1(Slanglib_Errors[2], cst_case_runtime_error_expecti);
       }
       break;
      case 7:
       var match$31 = match$28[1][2];
       if(match$31){var i$3 = match$31[1]; return goto$0([0, i$3, vm]);}
       break;
      default: return advance_cp(vm);
    }
    var
     _a5_ = string_of_state(vm),
     _a6_ = caml_call2(Stdlib[28], _a5_, cst$27),
     _a7_ = caml_call2(Stdlib[28], cst_step_bad_state, _a6_);
    return caml_call1(Slanglib_Errors[2], _a7_);
   }
   function driver(n, vm){
    var n$0 = n, vm$0 = vm;
    for(;;){
     if(Slanglib_Option[2]){
      var
       _at_ = string_of_state(vm$0),
       _au_ = caml_call2(Stdlib[28], _at_, cst$28),
       _av_ = caml_call2(Stdlib[28], cst$29, _au_),
       _aw_ = caml_call1(Stdlib[33], n$0),
       _ax_ = caml_call2(Stdlib[28], _aw_, _av_),
       _ay_ = caml_call2(Stdlib[28], cst_state, _ax_);
      caml_call1(Stdlib[42], _ay_);
     }
     if(1 !== vm$0[11]) return vm$0;
     var vm$1 = step(vm$0), n$1 = n$0 + 1 | 0;
     n$0 = n$1;
     vm$0 = vm$1;
    }
   }
   function find(l, y){
    var l$0 = l;
    for(;;){
     if(! l$0){
      var
       _ar_ = caml_call2(Stdlib[28], y, cst_is_not_found),
       _as_ = caml_call2(Stdlib[28], cst_Compile_find, _ar_);
      return caml_call1(Slanglib_Errors[2], _as_);
     }
     var rest = l$0[2], match = l$0[1], v = match[2], x = match[1];
     if(x === y) return v;
     l$0 = rest;
    }
   }
   function initial_state(instr_list){
    var label_to_address = 0, k = 0, param = instr_list;
    for(;;){
     if(! param) break;
     var match = param[1];
     if(typeof match !== "number" && 8 === match[0]){
      var
       rest$0 = param[2],
       lab = match[1],
       k$1 = k + 1 | 0,
       carry = [0, [0, lab, k], label_to_address];
      label_to_address = carry;
      k = k$1;
      param = rest$0;
      continue;
     }
     var rest = param[2], k$0 = k + 1 | 0;
     k = k$0;
     param = rest;
    }
    function locate_instr(inst){
     if(typeof inst !== "number")
      switch(inst[0]){
        case 4:
         var n = inst[2], lab = inst[1][1];
         return [4, [0, lab, [0, find(label_to_address, lab)]], n];
        case 5:
         var lab$0 = inst[1][1];
         return [5, [0, lab$0, [0, find(label_to_address, lab$0)]]];
        case 6:
         var lab$1 = inst[1][1];
         return [6, [0, lab$1, [0, find(label_to_address, lab$1)]]];
        case 7:
         var lab$2 = inst[1][1];
         return [7, [0, lab$2, [0, find(label_to_address, lab$2)]]];
      }
     return inst;
    }
    var
     located_instr_list =
       caml_call2(Stdlib_list[19], locate_instr, instr_list),
     code_array = caml_call1(Stdlib_array[12], located_instr_list),
     c_bound = code_array.length - 1;
    if(Slanglib_Option[2]){
     var
      aux =
        function(k){
         if(c_bound === k) return cst$8;
         var
          _al_ = aux(k + 1 | 0),
          _am_ = caml_call2(Stdlib[28], cst$9, _al_),
          _an_ = string_of_instruction(caml_check_bound(code_array, k)[1 + k]),
          _ao_ = caml_call2(Stdlib[28], _an_, _am_),
          _ap_ = caml_call2(Stdlib[28], cst$10, _ao_),
          _aq_ = caml_call1(Stdlib[33], k);
         return caml_call2(Stdlib[28], _aq_, _ap_);
        },
      _aj_ = aux(0),
      _ak_ = caml_call2(Stdlib[28], cst_Installed_Code, _aj_);
     caml_call1(Stdlib[42], _ak_);
    }
    return [0,
            Slanglib_Option[13],
            c_bound,
            Slanglib_Option[14],
            caml_make_vect(Slanglib_Option[13], _c_),
            caml_make_vect(Slanglib_Option[14], _b_),
            code_array,
            0,
            0,
            0,
            0,
            1];
   }
   function first_frame(vm){
    return push([0, return_index, push([0, saved_fp, vm])]);
   }
   function run(l){
    var vm = driver(1, first_frame(initial_state(l))), status = vm[11];
    if(! status) return vm;
    var
     _ah_ = string_of_status(status),
     _ai_ = caml_call2(Stdlib[28], cst_run_stopped_wth_status, _ah_);
    return caml_call1(Slanglib_Errors[2], _ai_);
   }
   var
    label_ref = [0, 0],
    cst_L = "L",
    _d_ = [0, 0, [0, [0, 0], 0]],
    _e_ = [0, 8, 0],
    _f_ = [0, 3, 0],
    _g_ = [0, 4, 0],
    _h_ = [0, 9, 0],
    _i_ = [0, 10, 0],
    _j_ = [0, [0, 0], 0],
    _k_ = [0, 2, 0],
    _l_ = [0, 0, 0],
    _m_ = [0, 11, 0],
    _n_ = [0, 5, 0],
    _o_ = [0, 0, 0],
    _p_ = [0, 6, 0],
    _q_ = [0, 6, 0],
    _r_ = [0, -1],
    _s_ = [0, -2],
    _t_ = [0, 7, 0],
    _u_ = [0, 12, 0],
    cst_Compiled_Code = "\nCompiled Code = \n";
   function new_label(param){
    var v = label_ref[1];
    label_ref[1] = label_ref[1] + 1 | 0;
    var _ag_ = caml_call1(Stdlib[33], v);
    return caml_call2(Stdlib[28], cst_L, _ag_);
   }
   function comp(vmap, param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return _d_;
     switch(param$0[0]){
       case 0:
        var x = param$0[1]; return [0, 0, [0, [1, find(vmap, x)], 0]];
       case 1:
        var n = param$0[1]; return [0, 0, [0, [0, [0, n]], 0]];
       case 2:
        var b = param$0[1]; return [0, 0, [0, [0, [1, b]], 0]];
       case 3:
        var
         e = param$0[2],
         op = param$0[1],
         match = comp(vmap, e),
         c = match[2],
         defs = match[1];
        return [0, defs, caml_call2(Stdlib[37], c, [0, [2, op], 0])];
       case 4:
        var
         e2 = param$0[3],
         op$0 = param$0[2],
         e1 = param$0[1],
         match$0 = comp(vmap, e1),
         c1 = match$0[2],
         defs1 = match$0[1],
         match$1 = comp(vmap, e2),
         c2 = match$1[2],
         defs2 = match$1[1],
         _E_ = caml_call2(Stdlib[37], c2, [0, [3, op$0], 0]),
         _F_ = caml_call2(Stdlib[37], c1, _E_);
        return [0, caml_call2(Stdlib[37], defs1, defs2), _F_];
       case 5:
        var
         e3 = param$0[3],
         e2$0 = param$0[2],
         e1$0 = param$0[1],
         else_label = new_label(0),
         after_else_label = new_label(0),
         match$2 = comp(vmap, e1$0),
         c1$0 = match$2[2],
         defs1$0 = match$2[1],
         match$3 = comp(vmap, e2$0),
         c2$0 = match$3[2],
         defs2$0 = match$3[1],
         match$4 = comp(vmap, e3),
         c3 = match$4[2],
         defs3 = match$4[1],
         _G_ = caml_call2(Stdlib[37], c3, [0, [8, after_else_label], 0]),
         _H_ =
           caml_call2
            (Stdlib[37],
             [0, [7, [0, after_else_label, 0]], [0, [8, else_label], 0]],
             _G_),
         _I_ = caml_call2(Stdlib[37], c2$0, _H_),
         _J_ = caml_call2(Stdlib[37], [0, [5, [0, else_label, 0]], 0], _I_),
         _K_ = caml_call2(Stdlib[37], c1$0, _J_),
         _L_ = caml_call2(Stdlib[37], defs2$0, defs3);
        return [0, caml_call2(Stdlib[37], defs1$0, _L_), _K_];
       case 6:
        var
         e2$1 = param$0[2],
         e1$1 = param$0[1],
         match$5 = comp(vmap, e1$1),
         c1$1 = match$5[2],
         defs1$1 = match$5[1],
         match$6 = comp(vmap, e2$1),
         c2$1 = match$6[2],
         defs2$1 = match$6[1],
         _M_ = caml_call2(Stdlib[37], c2$1, _e_),
         _N_ = caml_call2(Stdlib[37], c1$1, _M_);
        return [0, caml_call2(Stdlib[37], defs1$1, defs2$1), _N_];
       case 7:
        var
         e$0 = param$0[1],
         match$7 = comp(vmap, e$0),
         c$0 = match$7[2],
         defs$0 = match$7[1];
        return [0, defs$0, caml_call2(Stdlib[37], c$0, _f_)];
       case 8:
        var
         e$1 = param$0[1],
         match$8 = comp(vmap, e$1),
         c$1 = match$8[2],
         defs$1 = match$8[1];
        return [0, defs$1, caml_call2(Stdlib[37], c$1, _g_)];
       case 9:
        var
         e$2 = param$0[1],
         match$9 = comp(vmap, e$2),
         c$2 = match$9[2],
         defs$2 = match$9[1];
        return [0, defs$2, caml_call2(Stdlib[37], c$2, _h_)];
       case 10:
        var
         e$3 = param$0[1],
         match$10 = comp(vmap, e$3),
         c$3 = match$10[2],
         defs$3 = match$10[1];
        return [0, defs$3, caml_call2(Stdlib[37], c$3, _i_)];
       case 11:
        var
         _O_ = param$0[3],
         e3$0 = _O_[2],
         x2 = _O_[1],
         match$11 = param$0[2],
         e2$2 = match$11[2],
         x1 = match$11[1],
         e1$2 = param$0[1],
         inr_label = new_label(0),
         after_inr_label = new_label(0),
         match$12 = comp(vmap, e1$2),
         c1$2 = match$12[2],
         defs1$2 = match$12[1],
         match$13 = comp(vmap, [17, [0, x1, e2$2]]),
         c2$2 = match$13[2],
         defs2$2 = match$13[1],
         match$14 = comp(vmap, [17, [0, x2, e3$0]]),
         c3$0 = match$14[2],
         defs3$0 = match$14[1],
         _P_ =
           caml_call2(Stdlib[37], c3$0, [0, 6, [0, [8, after_inr_label], 0]]),
         _Q_ =
           caml_call2
            (Stdlib[37],
             [0, 6, [0, [7, [0, after_inr_label, 0]], [0, [8, inr_label], 0]]],
             _P_),
         _R_ = caml_call2(Stdlib[37], c2$2, _Q_),
         _S_ = caml_call2(Stdlib[37], [0, [6, [0, inr_label, 0]], 0], _R_),
         _T_ = caml_call2(Stdlib[37], c1$2, _S_),
         _U_ = caml_call2(Stdlib[37], defs2$2, defs3$0);
        return [0, caml_call2(Stdlib[37], defs1$2, _U_), _T_];
       case 12:
        var
         e2$3 = param$0[2],
         e1$3 = param$0[1],
         test_label = new_label(0),
         end_label = new_label(0),
         match$15 = comp(vmap, e1$3),
         c1$3 = match$15[2],
         defs1$3 = match$15[1],
         match$16 = comp(vmap, e2$3),
         c2$3 = match$16[2],
         defs2$3 = match$16[1],
         _V_ =
           caml_call2
            (Stdlib[37],
             c2$3,
             [0, 2, [0, [7, [0, test_label, 0]], [0, [8, end_label], _j_]]]),
         _W_ = caml_call2(Stdlib[37], [0, [5, [0, end_label, 0]], 0], _V_),
         _X_ = caml_call2(Stdlib[37], c1$3, _W_),
         _Y_ = caml_call2(Stdlib[37], [0, [8, test_label], 0], _X_);
        return [0, caml_call2(Stdlib[37], defs1$3, defs2$3), _Y_];
       case 13:
        var _Z_ = param$0[1];
        if(! _Z_) return _l_;
        var e$4 = _Z_[1];
        if(_Z_[2]){
         var
          rest = _Z_[2],
          match$17 = comp(vmap, e$4),
          c1$4 = match$17[2],
          defs1$4 = match$17[1],
          match$18 = comp(vmap, [13, rest]),
          c2$4 = match$18[2],
          defs2$4 = match$18[1],
          ___ = caml_call2(Stdlib[37], _k_, c2$4),
          _$_ = caml_call2(Stdlib[37], c1$4, ___);
         return [0, caml_call2(Stdlib[37], defs1$4, defs2$4), _$_];
        }
        param$0 = e$4;
        break;
       case 14:
        var
         e$5 = param$0[1],
         match$19 = comp(vmap, e$5),
         c$4 = match$19[2],
         defs$4 = match$19[1];
        return [0, defs$4, caml_call2(Stdlib[37], c$4, _m_)];
       case 15:
        var
         e$6 = param$0[1],
         match$20 = comp(vmap, e$6),
         c$5 = match$20[2],
         defs$5 = match$20[1];
        return [0, defs$5, caml_call2(Stdlib[37], c$5, _n_)];
       case 16:
        var
         e2$4 = param$0[2],
         e1$4 = param$0[1],
         match$21 = comp(vmap, e1$4),
         c1$5 = match$21[2],
         defs1$5 = match$21[1],
         match$22 = comp(vmap, e2$4),
         c2$5 = match$22[2],
         defs2$5 = match$22[1],
         _aa_ = caml_call2(Stdlib[37], c2$5, _o_),
         _ab_ = caml_call2(Stdlib[37], c1$5, _aa_);
        return [0, caml_call2(Stdlib[37], defs1$5, defs2$5), _ab_];
       case 17:
        var match$23 = param$0[1], e$7 = match$23[2], x$0 = match$23[1];
        return comp_lambda(vmap, [0, 0, x$0, e$7]);
       case 18:
        var
         e2$5 = param$0[2],
         e1$5 = param$0[1],
         match$24 = comp(vmap, e1$5),
         c1$6 = match$24[2],
         defs1$6 = match$24[1],
         match$25 = comp(vmap, e2$5),
         c2$6 = match$25[2],
         defs2$6 = match$25[1],
         _ac_ = caml_call2(Stdlib[37], c1$6, _p_),
         _ad_ = caml_call2(Stdlib[37], c2$6, _ac_);
        return [0, caml_call2(Stdlib[37], defs1$6, defs2$6), _ad_];
       case 19:
        var
         e2$6 = param$0[3],
         match$26 = param$0[2],
         e1$6 = match$26[2],
         x$1 = match$26[1],
         f = param$0[1];
        param$0 = [18, [17, [0, f, e2$6]], [17, [0, x$1, e1$6]]];
        break;
       default:
        var
         e2$7 = param$0[3],
         match$27 = param$0[2],
         e1$7 = match$27[2],
         x$2 = match$27[1],
         f$0 = param$0[1],
         match$28 = comp(vmap, [17, [0, f$0, e2$7]]),
         c1$7 = match$28[2],
         defs1$7 = match$28[1],
         match$29 = comp_lambda(vmap, [0, [0, f$0], x$2, e1$7]),
         c2$7 = match$29[2],
         defs2$7 = match$29[1],
         _ae_ = caml_call2(Stdlib[37], c1$7, _q_),
         _af_ = caml_call2(Stdlib[37], c2$7, _ae_);
        return [0, caml_call2(Stdlib[37], defs1$7, defs2$7), _af_];
     }
    }
   }
   function comp_lambda(vmap, param){
    var e = param[3], x = param[2], f_opt = param[1];
    if(f_opt)
     var f = f_opt[1], bound_vars = [0, x, [0, f, 0]];
    else
     var bound_vars = [0, x, 0];
    var f$0 = new_label(0);
    if(f_opt)
     var f$1 = f_opt[1], f_bind = [0, [0, f$1, _r_], 0];
    else
     var f_bind = 0;
    var
     x_bind = [0, x, _s_],
     fvars = caml_call1(Slanglib_Free_vars[1], [0, bound_vars, e]),
     fetch_fvars =
       caml_call2
        (Stdlib_list[19], function(y){return [1, find(vmap, y)];}, fvars);
    function fvar_bind(param){
     var p = param[2], y = param[1];
     return [0, y, [1, p]];
    }
    function aux(k, param){
     if(! param) return 0;
     var rest = param[2], a = param[1];
     return [0, [0, a, k], aux(k + 1 | 0, rest)];
    }
    var
     _y_ = aux(1, fvars),
     env_bind = caml_call2(Stdlib_list[19], fvar_bind, _y_),
     _z_ = caml_call2(Stdlib[37], env_bind, vmap),
     new_vmap = [0, x_bind, caml_call2(Stdlib[37], f_bind, _z_)],
     match = comp(new_vmap, e),
     c = match[2],
     defs = match[1],
     _A_ = caml_call2(Stdlib[37], c, _t_),
     def = caml_call2(Stdlib[37], [0, [8, f$0], 0], _A_),
     _B_ = [0, [4, [0, f$0, 0], caml_call1(Stdlib_list[1], fvars)], 0],
     _C_ = caml_call1(Stdlib_list[9], fetch_fvars),
     _D_ = caml_call2(Stdlib[37], _C_, _B_);
    return [0, caml_call2(Stdlib[37], def, defs), _D_];
   }
   function compile(e){
    var
     match = comp(0, e),
     c = match[2],
     defs = match[1],
     _v_ = caml_call2(Stdlib[37], _u_, defs),
     result = caml_call2(Stdlib[37], c, _v_);
    if(Slanglib_Option[2]){
     var
      _w_ = string_of_listing(result),
      _x_ = caml_call2(Stdlib[28], cst_Compiled_Code, _w_);
     caml_call1(Stdlib[42], _x_);
    }
    return result;
   }
   function interpret(e){return run(compile(e));}
   function reset(param){label_ref[1] = 0; return 0;}
   var
    Slanglib_Jargon =
      [0,
       new_label,
       step,
       driver,
       comp,
       compile,
       run,
       interpret,
       string_of_listing,
       string_of_stack_item,
       string_of_status,
       string_of_heap_item,
       string_of_heap_type,
       string_of_instruction,
       string_of_value,
       string_of_location,
       string_of_value_path,
       reset,
       first_frame,
       initial_state];
   runtime.caml_register_global(155, Slanglib_Jargon, "Slanglib__Jargon");
   return;
  }
  (globalThis));

//# 5860 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "",
    cst_APPLY = "  APPLY",
    cst_ASSIGN = "  ASSIGN",
    cst_DEREF = "  DEREF",
    cst_FST = "  FST",
    cst_HALT = "  HALT",
    cst_MK_INL = "  MK_INL",
    cst_MK_INR = "  MK_INR",
    cst_MK_PAIR = "  MK_PAIR",
    cst_MK_REF = "  MK_REF",
    cst_POP = "  POP",
    cst_RETURN = "  RETURN",
    cst_SND = "  SND",
    cst_SWAP = "  SWAP",
    cst$5 = " -> ",
    cst_a = "%a",
    cst$4 = ", ",
    cst_UNIT = "UNIT",
    caml_check_bound = runtime.caml_check_bound;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$3,
    cst = cst$3,
    cst$0 = "\n",
    cst$1 = cst$5,
    Slanglib_Errors = global_data.Slanglib__Errors,
    Stdlib = global_data.Stdlib,
    Slanglib_Ast = global_data.Slanglib__Ast,
    Stdlib_list = global_data.Stdlib__list,
    Slanglib_Option = global_data.Slanglib__Option,
    Stdlib_format = global_data.Stdlib__format,
    Stdlib_array = global_data.Stdlib__array;
   function evs_to_env(param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var match = param$0[1];
     switch(match[0]){
       case 0:
        var rest = param$0[2], env = match[1], _b7_ = evs_to_env(rest);
        return caml_call2(Stdlib[37], env, _b7_);
       case 1:
        var rest$0 = param$0[2]; param$0 = rest$0; break;
       default: var rest$1 = param$0[2]; param$0 = rest$1;
     }
    }
   }
   var
    pr = Stdlib_format[126],
    _b_ = [0, [15, [14, 0, 0, [15, 0]]], "%a%(%)%a"],
    _c_ =
      [0,
       [18, [1, [0, 0, cst$3]], [12, 91, [15, [12, 93, [17, 0, 0]]]]],
       "@[[%a]@]"],
    _d_ = [0, [11, cst_UNIT, 0], cst_UNIT],
    _e_ = [0, [11, "REF(", [4, 0, 0, 0, [12, 41, 0]]], "REF(%d)"],
    _f_ = [0, [4, 0, 0, 0, 0], "%d"],
    _g_ = [0, [9, 0, 0], "%b"],
    _h_ =
      [0,
       [12,
        40,
        [18,
         [1, [0, 0, cst$3]],
         [15, [12, 44, [17, [0, "@ ", 1, 0], [15, [12, 41, [17, 0, 0]]]]]]]],
       "(@[%a,@ %a)@]"],
    _i_ = [0, [11, "inl(", [15, [12, 41, 0]]], "inl(%a)"],
    _j_ = [0, [11, "inr(", [15, [12, 41, 0]]], "inr(%a)"],
    _k_ = [0, [11, "CLOSURE(", [15, [12, 41, 0]]], "CLOSURE(%a)"],
    _l_ = [0, [11, "REC_CLOSURE(", [15, [12, 41, 0]]], "REC_CLOSURE(%a)"],
    _m_ = [0, [12, 40, [15, [11, cst$4, [15, [12, 41, 0]]]]], "(%a, %a)"],
    _n_ = [0, [12, 44, [17, 3, [12, 32, 0]]], ",@\n "],
    _o_ = [0, [12, 40, [2, 0, [11, cst$4, [15, [12, 41, 0]]]]], "(%s, %a)"],
    _p_ = [0, [2, 0, [11, " = ", [4, 0, 0, 0, 0]]], "%s = %d"],
    _q_ = [0, [2, 0, 0], "%s"],
    _r_ = [0, [11, cst_ASSIGN, 0], cst_ASSIGN],
    _s_ = [0, [11, cst_SWAP, 0], cst_SWAP],
    _t_ = [0, [11, cst_POP, 0], cst_POP],
    _u_ = [0, [11, cst_FST, 0], cst_FST],
    _v_ = [0, [11, cst_SND, 0], cst_SND],
    _w_ = [0, [11, cst_DEREF, 0], cst_DEREF],
    _x_ = [0, [11, cst_APPLY, 0], cst_APPLY],
    _y_ = [0, [11, cst_RETURN, 0], cst_RETURN],
    _z_ = [0, [11, cst_MK_PAIR, 0], cst_MK_PAIR],
    _A_ = [0, [11, cst_MK_INL, 0], cst_MK_INL],
    _B_ = [0, [11, cst_MK_INR, 0], cst_MK_INR],
    _C_ = [0, [11, cst_MK_REF, 0], cst_MK_REF],
    _D_ = [0, [11, cst_HALT, 0], cst_HALT],
    _E_ = [0, [11, "  PUSH ", [15, 0]], "  PUSH %a"],
    _F_ = [0, [11, "  LOOKUP ", [2, 0, 0]], "  LOOKUP %s"],
    _G_ = [0, [11, "  UNARY ", [2, 0, 0]], "  UNARY %s"],
    _H_ = [0, [11, "  OPER ", [2, 0, 0]], "  OPER %s"],
    _I_ = [0, [11, "  BIND ", [2, 0, 0]], "  BIND %s"],
    _J_ = [0, [11, "  MK_CLOSURE(", [15, [12, 41, 0]]], "  MK_CLOSURE(%a)"],
    _K_ =
      [0,
       [11,
        "  MK_REC(",
        [18,
         [1, [0, 0, cst$3]],
         [2, 0, [11, cst$4, [15, [12, 41, [17, 0, 0]]]]]]],
       "  MK_REC(@[%s, %a)@]"],
    _L_ = [0, [11, "  TEST ", [15, 0]], "  TEST %a"],
    _M_ = [0, [11, "  CASE ", [15, 0]], "  CASE %a"],
    _N_ = [0, [11, "  GOTO ", [15, 0]], "  GOTO %a"],
    _O_ = [0, [11, "LABEL ", [2, 0, [12, 58, 0]]], "LABEL %s:"],
    _P_ = [0, [15, [17, 3, 0]], "%a@\n"],
    _Q_ = [0, [11, "EV ", [15, 0]], "EV %a"],
    _R_ = [0, [11, "V ", [15, 0]], "V %a"],
    _S_ = [0, [11, "RA ", [4, 0, 0, 0, 0]], "RA %d"],
    _T_ = [0, [12, 59, [17, 3, [12, 32, 0]]], ";@\n "];
   function pp_list(fmt, sep, f, l){
    function aux(f, fmt, param){
     if(! param) return 0;
     var t = param[1];
     if(! param[2]) return caml_call2(f, fmt, t);
     var rest = param[2];
     return caml_call7
             (pr,
              fmt,
              _b_,
              f,
              t,
              sep,
              function(_b5_, _b6_){return aux(f, _b5_, _b6_);},
              rest);
    }
    return caml_call4
            (pr,
             fmt,
             _c_,
             function(_b3_, _b4_){return aux(f, _b3_, _b4_);},
             l);
   }
   function pp_value(fmt, param){
    if(typeof param === "number") return caml_call2(pr, fmt, _d_);
    switch(param[0]){
      case 0:
       var a = param[1]; return caml_call3(pr, fmt, _e_, a);
      case 1:
       var n = param[1]; return caml_call3(pr, fmt, _f_, n);
      case 2:
       var b = param[1]; return caml_call3(pr, fmt, _g_, b);
      case 3:
       var v2 = param[2], v1 = param[1];
       return caml_call6(pr, fmt, _h_, pp_value, v1, pp_value, v2);
      case 4:
       var v = param[1]; return caml_call4(pr, fmt, _i_, pp_value, v);
      case 5:
       var v$0 = param[1]; return caml_call4(pr, fmt, _j_, pp_value, v$0);
      case 6:
       var c = param[2], loc = param[1];
       return caml_call4(pr, fmt, _k_, pp_closure, [0, loc, c]);
      default:
       var loc$0 = param[1];
       return caml_call4(pr, fmt, _l_, pp_location, loc$0);
    }
   }
   function pp_closure(fmt, param){
    var env = param[2], loc = param[1];
    return caml_call6(pr, fmt, _m_, pp_location, loc, pp_env, env);
   }
   function pp_env(fmt, env){return pp_list(fmt, _n_, pp_binding, env);}
   function pp_binding(fmt, param){
    var v = param[2], x = param[1];
    return caml_call5(pr, fmt, _o_, x, pp_value, v);
   }
   function pp_location(fmt, param){
    var match = param[2], l = param[1];
    if(! match) return caml_call3(pr, fmt, _q_, l);
    var i = match[1];
    return caml_call4(pr, fmt, _p_, l, i);
   }
   function pp_instruction(fmt, param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return caml_call2(pr, fmt, _r_);
       case 1:
        return caml_call2(pr, fmt, _s_);
       case 2:
        return caml_call2(pr, fmt, _t_);
       case 3:
        return caml_call2(pr, fmt, _u_);
       case 4:
        return caml_call2(pr, fmt, _v_);
       case 5:
        return caml_call2(pr, fmt, _w_);
       case 6:
        return caml_call2(pr, fmt, _x_);
       case 7:
        return caml_call2(pr, fmt, _y_);
       case 8:
        return caml_call2(pr, fmt, _z_);
       case 9:
        return caml_call2(pr, fmt, _A_);
       case 10:
        return caml_call2(pr, fmt, _B_);
       case 11:
        return caml_call2(pr, fmt, _C_);
       default: return caml_call2(pr, fmt, _D_);
     }
    switch(param[0]){
      case 0:
       var v = param[1]; return caml_call4(pr, fmt, _E_, pp_value, v);
      case 1:
       var x = param[1]; return caml_call3(pr, fmt, _F_, x);
      case 2:
       var op = param[1];
       return caml_call3(pr, fmt, _G_, caml_call1(Slanglib_Ast[3], op));
      case 3:
       var op$0 = param[1];
       return caml_call3(pr, fmt, _H_, caml_call1(Slanglib_Ast[4], op$0));
      case 4:
       var x$0 = param[1]; return caml_call3(pr, fmt, _I_, x$0);
      case 5:
       var loc = param[1]; return caml_call4(pr, fmt, _J_, pp_location, loc);
      case 6:
       var loc$0 = param[2], v$0 = param[1];
       return caml_call5(pr, fmt, _K_, v$0, pp_location, loc$0);
      case 7:
       var label = param[1];
       return caml_call4(pr, fmt, _L_, pp_location, label);
      case 8:
       var label$0 = param[1];
       return caml_call4(pr, fmt, _M_, pp_location, label$0);
      case 9:
       var label$1 = param[1];
       return caml_call4(pr, fmt, _N_, pp_location, label$1);
      default:
       var label$2 = param[1]; return caml_call3(pr, fmt, _O_, label$2);
    }
   }
   function pp_code(fmt, c){
    var _b2_ = caml_call3(pr, fmt, _P_, pp_instruction);
    return caml_call2(Stdlib_list[17], _b2_, c);
   }
   function pp_env_or_value(fmt, param){
    switch(param[0]){
      case 0:
       var env = param[1]; return caml_call4(pr, fmt, _Q_, pp_env, env);
      case 1:
       var v = param[1]; return caml_call4(pr, fmt, _R_, pp_value, v);
      default: var i = param[1]; return caml_call3(pr, fmt, _S_, i);
    }
   }
   function pp_env_value_stack(fmt){
    return function(_b1_){return pp_list(fmt, _T_, pp_env_or_value, _b1_);};
   }
   var
    string_of_value =
      caml_call2(Stdlib_format[130], [0, [15, 0], cst_a], pp_value),
    string_of_location =
      caml_call2(Stdlib_format[130], [0, [15, 0], cst_a], pp_location),
    string_of_code =
      caml_call2(Stdlib_format[130], [0, [15, 0], cst_a], pp_code),
    string_of_env_or_value =
      caml_call2(Stdlib_format[130], [0, [15, 0], cst_a], pp_env_or_value),
    installed = [0, caml_call1(Stdlib_array[12], [0, 12, 0])],
    _U_ = [0, [4, 0, 0, 0, [11, ": ", [15, [17, 3, [15, 0]]]]], "%d: %a@\n%a"],
    _V_ = [0, [15, 0], cst_a];
   function pp_installed_code(fmt){
    var size = installed[1].length - 1;
    function aux(fmt, k){
     var _b0_ = size !== k ? 1 : 0;
     return _b0_
             ? caml_call7
               (pr,
                fmt,
                _U_,
                k,
                pp_instruction,
                caml_check_bound(installed[1], k)[1 + k],
                aux,
                k + 1 | 0)
             : _b0_;
    }
    return aux(fmt, 0);
   }
   function string_of_installed_code(param){
    return caml_call3
            (Stdlib_format[130],
             _V_,
             function(f, param){return pp_installed_code(f);},
             0);
   }
   function get_instruction(cp){
    return caml_check_bound(installed[1], cp)[1 + cp];
   }
   var
    heap = runtime.caml_make_vect(Slanglib_Option[14], [1, 0]),
    next_address = [0, 0],
    _a_ =
      [0,
       [2, 0, [11, " is not defined!", [17, 3, 0]]],
       "%s is not defined!@\n"],
    cst_Heap = "\nHeap = \n",
    _W_ =
      [0,
       [17,
        3,
        [11,
         "Code Pointer = ",
         [4,
          0,
          0,
          0,
          [11,
           cst$5,
           [15, [17, 3, [11, "Stack = ", [15, [2, 0, [17, 3, 0]]]]]]]]]],
       "@\nCode Pointer = %d -> %a@\nStack = %a%s@\n"],
    cst_input = "input> ",
    _X_ =
      [0,
       [11, "malformed unary operator: ", [2, 0, 0]],
       "malformed unary operator: %s"],
    _Y_ =
      [0,
       [11, "malformed binary operator: ", [2, 0, 0]],
       "malformed binary operator: %s"],
    _Z_ =
      [0,
       [11, "step : bad state = ", [15, [12, 10, 0]]],
       "step : bad state = %a\n"],
    ___ = [1, 0];
   function pp_state(fmt, param){
    var evs = param[2], cp = param[1];
    if(0 === next_address[1])
     var _bT_ = cst$2;
    else
     var
      aux =
        function(k){
         if(next_address[1] < k) return cst;
         var
          _bU_ = aux(k + 1 | 0),
          _bV_ = caml_call2(Stdlib[28], cst$0, _bU_),
          _bW_ = caml_call1(string_of_value, caml_check_bound(heap, k)[1 + k]),
          _bX_ = caml_call2(Stdlib[28], _bW_, _bV_),
          _bY_ = caml_call2(Stdlib[28], cst$1, _bX_),
          _bZ_ = caml_call1(Stdlib[33], k);
         return caml_call2(Stdlib[28], _bZ_, _bY_);
        },
      _bS_ = aux(0),
      _bT_ = caml_call2(Stdlib[28], cst_Heap, _bS_);
    return caml_call8
            (pr,
             fmt,
             _W_,
             cp,
             pp_instruction,
             get_instruction(cp),
             pp_env_value_stack,
             evs,
             _bT_);
   }
   function do_oper(param){
    var op = param[1];
    switch(op){
      case 0:
       var _bI_ = param[2];
       if(typeof _bI_ !== "number" && 1 === _bI_[0]){
        var match = param[3];
        if(typeof match !== "number" && 1 === match[0]){
         var n = match[1], m = _bI_[1];
         return [1, m + n | 0];
        }
        break;
       }
       break;
      case 1:
       var _bK_ = param[2];
       if(typeof _bK_ !== "number" && 1 === _bK_[0]){
        var match$0 = param[3];
        if(typeof match$0 !== "number" && 1 === match$0[0]){
         var n$0 = match$0[1], m$0 = _bK_[1];
         return [1, runtime.caml_mul(m$0, n$0)];
        }
        break;
       }
       break;
      case 2:
       var _bL_ = param[2];
       if(typeof _bL_ !== "number" && 1 === _bL_[0]){
        var match$1 = param[3];
        if(typeof match$1 !== "number" && 1 === match$1[0]){
         var n$1 = match$1[1], m$1 = _bL_[1];
         return [1, runtime.caml_div(m$1, n$1)];
        }
        break;
       }
       break;
      case 3:
       var _bM_ = param[2];
       if(typeof _bM_ !== "number" && 1 === _bM_[0]){
        var match$2 = param[3];
        if(typeof match$2 !== "number" && 1 === match$2[0]){
         var n$2 = match$2[1], m$2 = _bM_[1];
         return [1, m$2 - n$2 | 0];
        }
        break;
       }
       break;
      case 4:
       var _bN_ = param[2];
       if(typeof _bN_ !== "number" && 1 === _bN_[0]){
        var match$3 = param[3];
        if(typeof match$3 !== "number" && 1 === match$3[0]){
         var n$3 = match$3[1], m$3 = _bN_[1];
         return [2, m$3 < n$3 ? 1 : 0];
        }
        break;
       }
       break;
      case 5:
       var _bO_ = param[2];
       if(typeof _bO_ !== "number" && 2 === _bO_[0]){
        var match$4 = param[3];
        if(typeof match$4 !== "number" && 2 === match$4[0]){
         var n$4 = match$4[1], m$4 = _bO_[1], n$5 = m$4 ? n$4 : m$4;
         return [2, n$5];
        }
        break;
       }
       break;
      case 6:
       var _bP_ = param[2];
       if(typeof _bP_ !== "number" && 2 === _bP_[0]){
        var match$5 = param[3];
        if(typeof match$5 !== "number" && 2 === match$5[0]){
         var n$6 = match$5[1], m$5 = _bP_[1], m$6 = m$5 || n$6;
         return [2, m$6];
        }
        break;
       }
       break;
      case 7:
       var _bQ_ = param[2];
       if(typeof _bQ_ !== "number" && 2 === _bQ_[0]){
        var match$6 = param[3];
        if(typeof match$6 !== "number" && 2 === match$6[0]){
         var n$7 = match$6[1], m$7 = _bQ_[1];
         return [2, m$7 === n$7 ? 1 : 0];
        }
        break;
       }
       break;
      default:
       var _bR_ = param[2];
       if(typeof _bR_ !== "number" && 1 === _bR_[0]){
        var match$7 = param[3];
        if(typeof match$7 !== "number" && 1 === match$7[0]){
         var n$8 = match$7[1], m$8 = _bR_[1];
         return [2, m$8 === n$8 ? 1 : 0];
        }
        break;
       }
    }
    var _bJ_ = caml_call1(Slanglib_Ast[2], op);
    return caml_call2(Slanglib_Errors[3], _Y_, _bJ_);
   }
   function step(param$1){
    var evs$0 = param$1[2], cp = param$1[1], _bj_ = get_instruction(cp);
    if(typeof _bj_ === "number")
     switch(_bj_){
       case 0:
        if(evs$0){
         var _bk_ = evs$0[1];
         if(1 === _bk_[0]){
          var _bl_ = evs$0[2];
          if(_bl_){
           var _bm_ = _bl_[1], v$2 = _bk_[1];
           if(1 === _bm_[0]){
            var match$2 = _bm_[1];
            if(typeof match$2 !== "number" && 0 === match$2[0]){
             var evs$1 = _bl_[2], a$0 = match$2[1];
             caml_check_bound(heap, a$0)[1 + a$0] = v$2;
             return [0, cp + 1 | 0, [0, ___, evs$1]];
            }
           }
          }
         }
        }
        break;
       case 1:
        if(evs$0){
         var match$3 = evs$0[2];
         if(match$3){
          var evs$2 = match$3[2], s2 = match$3[1], s1 = evs$0[1];
          return [0, cp + 1 | 0, [0, s2, [0, s1, evs$2]]];
         }
        }
        break;
       case 2:
        if(evs$0){var evs$3 = evs$0[2]; return [0, cp + 1 | 0, evs$3];} break;
       case 3:
        if(evs$0){
         var _bn_ = evs$0[1];
         if(1 === _bn_[0]){
          var match$4 = _bn_[1];
          if(typeof match$4 !== "number" && 3 === match$4[0]){
           var evs$4 = evs$0[2], v$3 = match$4[1];
           return [0, cp + 1 | 0, [0, [1, v$3], evs$4]];
          }
         }
        }
        break;
       case 4:
        if(evs$0){
         var _bo_ = evs$0[1];
         if(1 === _bo_[0]){
          var match$5 = _bo_[1];
          if(typeof match$5 !== "number" && 3 === match$5[0]){
           var evs$5 = evs$0[2], v$4 = match$5[2];
           return [0, cp + 1 | 0, [0, [1, v$4], evs$5]];
          }
         }
        }
        break;
       case 5:
        if(evs$0){
         var _bp_ = evs$0[1];
         if(1 === _bp_[0]){
          var match$6 = _bp_[1];
          if(typeof match$6 !== "number" && 0 === match$6[0]){
           var evs$6 = evs$0[2], a$1 = match$6[1];
           return [0,
                   cp + 1 | 0,
                   [0, [1, caml_check_bound(heap, a$1)[1 + a$1]], evs$6]];
          }
         }
        }
        break;
       case 6:
        if(evs$0){
         var _bq_ = evs$0[1];
         if(1 === _bq_[0]){
          var _br_ = _bq_[1];
          if(typeof _br_ !== "number" && 6 === _br_[0]){
           var _bs_ = _br_[1][2];
           if(! _bs_) break;
           var _bt_ = evs$0[2];
           if(! _bt_) break;
           var match$7 = _bt_[1], env$1 = _br_[2], i = _bs_[1];
           if(1 !== match$7[0]) break;
           var evs$7 = _bt_[2], v$5 = match$7[1];
           return [0,
                   i,
                   [0, [1, v$5], [0, [0, env$1], [0, [2, cp + 1 | 0], evs$7]]]];
          }
         }
        }
        break;
       case 7:
        if(evs$0){
         var _bu_ = evs$0[1];
         if(1 === _bu_[0]){
          var _bv_ = evs$0[2];
          if(_bv_){
           var _bw_ = _bv_[2];
           if(_bw_){
            var match$8 = _bw_[1], v$6 = _bu_[1];
            if(2 === match$8[0]){
             var evs$8 = _bw_[2], i$0 = match$8[1];
             return [0, i$0, [0, [1, v$6], evs$8]];
            }
           }
          }
         }
        }
        break;
       case 8:
        if(evs$0){
         var _bx_ = evs$0[1];
         if(1 === _bx_[0]){
          var _by_ = evs$0[2];
          if(_by_){
           var match$9 = _by_[1], v2 = _bx_[1];
           if(1 === match$9[0]){
            var evs$9 = _by_[2], v1 = match$9[1];
            return [0, cp + 1 | 0, [0, [1, [3, v1, v2]], evs$9]];
           }
          }
         }
        }
        break;
       case 9:
        if(evs$0){
         var match$10 = evs$0[1];
         if(1 === match$10[0]){
          var evs$10 = evs$0[2], v$7 = match$10[1];
          return [0, cp + 1 | 0, [0, [1, [4, v$7]], evs$10]];
         }
        }
        break;
       case 10:
        if(evs$0){
         var match$11 = evs$0[1];
         if(1 === match$11[0]){
          var evs$11 = evs$0[2], v$8 = match$11[1];
          return [0, cp + 1 | 0, [0, [1, [5, v$8]], evs$11]];
         }
        }
        break;
       case 11:
        if(evs$0){
         var match$12 = evs$0[1];
         if(1 === match$12[0]){
          var evs$12 = evs$0[2], v$9 = match$12[1], a = next_address[1];
          next_address[1] = a + 1 | 0;
          caml_check_bound(heap, a)[1 + a] = v$9;
          return [0, cp + 1 | 0, [0, [1, [0, a]], evs$12]];
         }
        }
        break;
       default: return [0, cp, evs$0];
     }
    else
     switch(_bj_[0]){
       case 0:
        var v$10 = _bj_[1]; return [0, cp + 1 | 0, [0, [1, v$10], evs$0]];
       case 1:
        var x$1 = _bj_[1], param$0 = [0, evs$0, x$1];
        for(;;){
         var x$0 = param$0[2], evs = param$0[1];
         if(evs){
          var match$0 = evs[1];
          switch(match$0[0]){
            case 0:
             var rest$0 = evs[2], env$0 = match$0[1];
             a:
             {
              b:
              {
               var param = [0, env$0, x$0];
               for(;;){
                var x = param[2], env = param[1];
                if(! env) break;
                var rest = env[2], match = env[1], v = match[2], y = match[1];
                if(x === y) break b;
                param = [0, rest, x];
               }
               var match$1 = 0;
               break a;
              }
              b:
              {
               if(typeof v !== "number" && 7 === v[0]){
                var loc = v[1], v$0 = [6, loc, [0, [0, y, [7, loc]], rest]];
                break b;
               }
               var v$0 = v;
              }
              var match$1 = [0, v$0];
             }
             if(! match$1){param$0 = [0, rest$0, x$0]; continue;}
             var v$1 = match$1[1], _bz_ = v$1;
             break;
            case 1:
             var rest$1 = evs[2]; param$0 = [0, rest$1, x$0]; continue;
            default:
             var rest$2 = evs[2]; param$0 = [0, rest$2, x$0]; continue;
          }
         }
         else
          var _bz_ = caml_call2(Slanglib_Errors[3], _a_, x$0);
         return [0, cp + 1 | 0, [0, [1, _bz_], evs$0]];
        }
       case 2:
        if(evs$0){
         var match$13 = evs$0[1], op = _bj_[1];
         if(1 === match$13[0]){
          var evs$13 = evs$0[2], v$11 = match$13[1];
          a:
          {
           switch(op){
             case 0:
              if(typeof v$11 !== "number" && 1 === v$11[0]){
               var m = v$11[1], _bA_ = [1, - m | 0];
               break a;
              }
              break;
             case 1:
              if(typeof v$11 !== "number" && 2 === v$11[0]){
               var m$0 = v$11[1], _bA_ = [2, 1 - m$0];
               break a;
              }
              break;
             default:
              if(typeof v$11 === "number"){
               caml_call1(Stdlib[42], cst_input);
               var _bA_ = [1, caml_call1(Stdlib[57], 0)];
               break a;
              }
           }
           var
            _bi_ = caml_call1(Slanglib_Ast[1], op),
            _bA_ = caml_call2(Slanglib_Errors[3], _X_, _bi_);
          }
          return [0, cp + 1 | 0, [0, [1, _bA_], evs$13]];
         }
        }
        break;
       case 3:
        if(evs$0){
         var _bB_ = evs$0[1], op$0 = _bj_[1];
         if(1 === _bB_[0]){
          var _bC_ = evs$0[2];
          if(_bC_){
           var match$14 = _bC_[1], v2$0 = _bB_[1];
           if(1 === match$14[0]){
            var evs$14 = _bC_[2], v1$0 = match$14[1];
            return [0,
                    cp + 1 | 0,
                    [0, [1, do_oper([0, op$0, v1$0, v2$0])], evs$14]];
           }
          }
         }
        }
        break;
       case 4:
        if(evs$0){
         var match$15 = evs$0[1], x$2 = _bj_[1];
         if(1 === match$15[0]){
          var evs$15 = evs$0[2], v$12 = match$15[1];
          return [0, cp + 1 | 0, [0, [0, [0, [0, x$2, v$12], 0]], evs$15]];
         }
        }
        break;
       case 5:
        var loc$0 = _bj_[1];
        return [0, cp + 1 | 0, [0, [1, [6, loc$0, evs_to_env(evs$0)]], evs$0]];
       case 6:
        var loc$1 = _bj_[2], f = _bj_[1];
        return [0,
                cp + 1 | 0,
                [0,
                 [1, [6, loc$1, [0, [0, f, [7, loc$1]], evs_to_env(evs$0)]]],
                 evs$0]];
       case 7:
        var _bD_ = _bj_[1][2];
        if(_bD_ && evs$0){
         var _bE_ = evs$0[1], i$1 = _bD_[1];
         if(1 === _bE_[0]){
          var _bF_ = _bE_[1];
          if(typeof _bF_ !== "number" && 2 === _bF_[0]){
           if(_bF_[1]){var evs$16 = evs$0[2]; return [0, cp + 1 | 0, evs$16];}
           var evs$17 = evs$0[2];
           return [0, i$1, evs$17];
          }
         }
        }
        break;
       case 8:
        var _bG_ = _bj_[1][2];
        if(_bG_ && evs$0){
         var _bH_ = evs$0[1], i$2 = _bG_[1];
         if(1 === _bH_[0]){
          var match$16 = _bH_[1];
          if(typeof match$16 !== "number")
           switch(match$16[0]){
             case 4:
              var evs$18 = evs$0[2], v$13 = match$16[1];
              return [0, cp + 1 | 0, [0, [1, v$13], evs$18]];
             case 5:
              var evs$19 = evs$0[2], v$14 = match$16[1];
              return [0, i$2, [0, [1, v$14], evs$19]];
           }
         }
        }
        break;
       case 9:
        var match$17 = _bj_[1][2];
        if(match$17){var i$3 = match$17[1]; return [0, i$3, evs$0];}
        break;
       default: return [0, cp + 1 | 0, evs$0];
     }
    return caml_call3(Slanglib_Errors[3], _Z_, pp_state, [0, cp, evs$0]);
   }
   var
    label_ref = [0, 0],
    cst_L = "L",
    _$_ = [0, 0, [0, [0, 0], 0]],
    _aa_ = [0, 8, 0],
    _ab_ = [0, 3, 0],
    _ac_ = [0, 4, 0],
    _ad_ = [0, 9, 0],
    _ae_ = [0, 10, 0],
    _af_ = [0, 1, [0, 2, 0]],
    _ag_ = [0, 1, [0, 2, 0]],
    _ah_ = [0, [0, 0], 0],
    _ai_ = [0, 2, 0],
    _aj_ = [0, 0, 0],
    _ak_ = [0, 11, 0],
    _al_ = [0, 5, 0],
    _am_ = [0, 0, 0],
    _an_ = [0, 1, [0, 2, [0, 7, 0]]],
    _ao_ = [0, 6, 0],
    _ap_ = [0, 1, [0, 2, [0, 7, 0]]],
    _aq_ = [0, 1, [0, 2, 0]],
    _ar_ = [0, 1, [0, 2, [0, 7, 0]]],
    _as_ = [0, 1, [0, 2, 0]],
    _at_ = [0, 12, 0],
    _au_ =
      [0,
       [17, 3, [11, "Compiled Code = ", [17, 3, [15, 0]]]],
       "@\nCompiled Code = @\n%a"],
    _av_ =
      [0,
       [11, "\nstate ", [4, 0, 0, 0, [12, 58, [15, [12, 10, 0]]]]],
       "\nstate %d:%a\n"],
    _aw_ =
      [0,
       [11, "driver : bad halted state = ", [15, [12, 10, 0]]],
       "driver : bad halted state = %a\n"],
    _ax_ =
      [0,
       [11, "find : ", [2, 0, [11, " is not found", 0]]],
       "find : %s is not found"],
    _ay_ =
      [0, [11, "\nInstalled Code = \n", [2, 0, 0]], "\nInstalled Code = \n%s"],
    _az_ = [0, 0, 0],
    _aA_ = [1, 0];
   function new_label(param){
    var v = label_ref[1];
    label_ref[1] = label_ref[1] + 1 | 0;
    var _bh_ = caml_call1(Stdlib[33], v);
    return caml_call2(Stdlib[28], cst_L, _bh_);
   }
   function comp(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return _$_;
     switch(param$0[0]){
       case 0:
        var x = param$0[1]; return [0, 0, [0, [1, x], 0]];
       case 1:
        var n = param$0[1]; return [0, 0, [0, [0, [1, n]], 0]];
       case 2:
        var b = param$0[1]; return [0, 0, [0, [0, [2, b]], 0]];
       case 3:
        var
         e = param$0[2],
         op = param$0[1],
         match = comp(e),
         c = match[2],
         defs = match[1];
        return [0, defs, caml_call2(Stdlib[37], c, [0, [2, op], 0])];
       case 4:
        var
         e2 = param$0[3],
         op$0 = param$0[2],
         e1 = param$0[1],
         match$0 = comp(e1),
         c1 = match$0[2],
         defs1 = match$0[1],
         match$1 = comp(e2),
         c2 = match$1[2],
         defs2 = match$1[1],
         _aG_ = caml_call2(Stdlib[37], c2, [0, [3, op$0], 0]),
         _aH_ = caml_call2(Stdlib[37], c1, _aG_);
        return [0, caml_call2(Stdlib[37], defs1, defs2), _aH_];
       case 5:
        var
         e3 = param$0[3],
         e2$0 = param$0[2],
         e1$0 = param$0[1],
         else_label = new_label(0),
         after_else_label = new_label(0),
         match$2 = comp(e1$0),
         c1$0 = match$2[2],
         defs1$0 = match$2[1],
         match$3 = comp(e2$0),
         c2$0 = match$3[2],
         defs2$0 = match$3[1],
         match$4 = comp(e3),
         c3 = match$4[2],
         defs3 = match$4[1],
         _aI_ = caml_call2(Stdlib[37], c3, [0, [10, after_else_label], 0]),
         _aJ_ =
           caml_call2
            (Stdlib[37],
             [0, [9, [0, after_else_label, 0]], [0, [10, else_label], 0]],
             _aI_),
         _aK_ = caml_call2(Stdlib[37], c2$0, _aJ_),
         _aL_ = caml_call2(Stdlib[37], [0, [7, [0, else_label, 0]], 0], _aK_),
         _aM_ = caml_call2(Stdlib[37], c1$0, _aL_),
         _aN_ = caml_call2(Stdlib[37], defs2$0, defs3);
        return [0, caml_call2(Stdlib[37], defs1$0, _aN_), _aM_];
       case 6:
        var
         e2$1 = param$0[2],
         e1$1 = param$0[1],
         match$5 = comp(e1$1),
         c1$1 = match$5[2],
         defs1$1 = match$5[1],
         match$6 = comp(e2$1),
         c2$1 = match$6[2],
         defs2$1 = match$6[1],
         _aO_ = caml_call2(Stdlib[37], c2$1, _aa_),
         _aP_ = caml_call2(Stdlib[37], c1$1, _aO_);
        return [0, caml_call2(Stdlib[37], defs1$1, defs2$1), _aP_];
       case 7:
        var
         e$0 = param$0[1],
         match$7 = comp(e$0),
         c$0 = match$7[2],
         defs$0 = match$7[1];
        return [0, defs$0, caml_call2(Stdlib[37], c$0, _ab_)];
       case 8:
        var
         e$1 = param$0[1],
         match$8 = comp(e$1),
         c$1 = match$8[2],
         defs$1 = match$8[1];
        return [0, defs$1, caml_call2(Stdlib[37], c$1, _ac_)];
       case 9:
        var
         e$2 = param$0[1],
         match$9 = comp(e$2),
         c$2 = match$9[2],
         defs$2 = match$9[1];
        return [0, defs$2, caml_call2(Stdlib[37], c$2, _ad_)];
       case 10:
        var
         e$3 = param$0[1],
         match$10 = comp(e$3),
         c$3 = match$10[2],
         defs$3 = match$10[1];
        return [0, defs$3, caml_call2(Stdlib[37], c$3, _ae_)];
       case 11:
        var
         _aQ_ = param$0[3],
         e3$0 = _aQ_[2],
         x2 = _aQ_[1],
         match$11 = param$0[2],
         e2$2 = match$11[2],
         x1 = match$11[1],
         e1$2 = param$0[1],
         inr_label = new_label(0),
         after_inr_label = new_label(0),
         match$12 = comp(e1$2),
         c1$2 = match$12[2],
         defs1$2 = match$12[1],
         match$13 = comp(e2$2),
         c2$2 = match$13[2],
         defs2$2 = match$13[1],
         match$14 = comp(e3$0),
         c3$0 = match$14[2],
         defs3$0 = match$14[1],
         _aR_ = caml_call2(Stdlib[37], [0, [4, x2], c3$0], _af_),
         _aS_ = caml_call2(Stdlib[37], _aR_, [0, [10, after_inr_label], 0]),
         _aT_ =
           caml_call2
            (Stdlib[37],
             [0, [9, [0, after_inr_label, 0]], [0, [10, inr_label], 0]],
             _aS_),
         _aU_ = caml_call2(Stdlib[37], [0, [4, x1], c2$2], _ag_),
         _aV_ = caml_call2(Stdlib[37], _aU_, _aT_),
         _aW_ = caml_call2(Stdlib[37], [0, [8, [0, inr_label, 0]], 0], _aV_),
         _aX_ = caml_call2(Stdlib[37], c1$2, _aW_),
         _aY_ = caml_call2(Stdlib[37], defs2$2, defs3$0);
        return [0, caml_call2(Stdlib[37], defs1$2, _aY_), _aX_];
       case 12:
        var
         e2$3 = param$0[2],
         e1$3 = param$0[1],
         test_label = new_label(0),
         end_label = new_label(0),
         match$15 = comp(e1$3),
         c1$3 = match$15[2],
         defs1$3 = match$15[1],
         match$16 = comp(e2$3),
         c2$3 = match$16[2],
         defs2$3 = match$16[1],
         _aZ_ =
           caml_call2
            (Stdlib[37],
             c2$3,
             [0, 2, [0, [9, [0, test_label, 0]], [0, [10, end_label], _ah_]]]),
         _a0_ = caml_call2(Stdlib[37], [0, [7, [0, end_label, 0]], 0], _aZ_),
         _a1_ = caml_call2(Stdlib[37], c1$3, _a0_),
         _a2_ = caml_call2(Stdlib[37], [0, [10, test_label], 0], _a1_);
        return [0, caml_call2(Stdlib[37], defs1$3, defs2$3), _a2_];
       case 13:
        var _a3_ = param$0[1];
        if(! _a3_) return _aj_;
        var e$4 = _a3_[1];
        if(_a3_[2]){
         var
          rest = _a3_[2],
          match$17 = comp(e$4),
          c1$4 = match$17[2],
          defs1$4 = match$17[1],
          match$18 = comp([13, rest]),
          c2$4 = match$18[2],
          defs2$4 = match$18[1],
          _a4_ = caml_call2(Stdlib[37], _ai_, c2$4),
          _a5_ = caml_call2(Stdlib[37], c1$4, _a4_);
         return [0, caml_call2(Stdlib[37], defs1$4, defs2$4), _a5_];
        }
        param$0 = e$4;
        break;
       case 14:
        var
         e$5 = param$0[1],
         match$19 = comp(e$5),
         c$4 = match$19[2],
         defs$4 = match$19[1];
        return [0, defs$4, caml_call2(Stdlib[37], c$4, _ak_)];
       case 15:
        var
         e$6 = param$0[1],
         match$20 = comp(e$6),
         c$5 = match$20[2],
         defs$5 = match$20[1];
        return [0, defs$5, caml_call2(Stdlib[37], c$5, _al_)];
       case 16:
        var
         e2$4 = param$0[2],
         e1$4 = param$0[1],
         match$21 = comp(e1$4),
         c1$5 = match$21[2],
         defs1$5 = match$21[1],
         match$22 = comp(e2$4),
         c2$5 = match$22[2],
         defs2$5 = match$22[1],
         _a6_ = caml_call2(Stdlib[37], c2$5, _am_),
         _a7_ = caml_call2(Stdlib[37], c1$5, _a6_);
        return [0, caml_call2(Stdlib[37], defs1$5, defs2$5), _a7_];
       case 17:
        var
         match$23 = param$0[1],
         e$7 = match$23[2],
         x$0 = match$23[1],
         match$24 = comp(e$7),
         c$6 = match$24[2],
         defs$6 = match$24[1],
         f = new_label(0),
         _a8_ = caml_call2(Stdlib[37], c$6, _an_),
         def = caml_call2(Stdlib[37], [0, [10, f], [0, [4, x$0], 0]], _a8_);
        return [0,
                caml_call2(Stdlib[37], def, defs$6),
                [0, [5, [0, f, 0]], 0]];
       case 18:
        var
         e2$5 = param$0[2],
         e1$5 = param$0[1],
         match$25 = comp(e1$5),
         c1$6 = match$25[2],
         defs1$6 = match$25[1],
         match$26 = comp(e2$5),
         c2$6 = match$26[2],
         defs2$6 = match$26[1],
         _a9_ = caml_call2(Stdlib[37], c1$6, _ao_),
         _a__ = caml_call2(Stdlib[37], c2$6, _a9_);
        return [0, caml_call2(Stdlib[37], defs1$6, defs2$6), _a__];
       case 19:
        var
         e2$6 = param$0[3],
         match$27 = param$0[2],
         e1$6 = match$27[2],
         x$1 = match$27[1],
         f$0 = param$0[1],
         match$28 = comp(e1$6),
         c1$7 = match$28[2],
         defs1$7 = match$28[1],
         match$29 = comp(e2$6),
         c2$7 = match$29[2],
         defs2$7 = match$29[1],
         lab = new_label(0),
         _a$_ = caml_call2(Stdlib[37], c1$7, _ap_),
         def$0 =
           caml_call2(Stdlib[37], [0, [10, lab], [0, [4, x$1], 0]], _a$_),
         _ba_ = caml_call2(Stdlib[37], c2$7, _aq_),
         _bb_ =
           caml_call2
            (Stdlib[37], [0, [5, [0, lab, 0]], [0, [4, f$0], 0]], _ba_),
         _bc_ = caml_call2(Stdlib[37], defs1$7, defs2$7);
        return [0, caml_call2(Stdlib[37], def$0, _bc_), _bb_];
       default:
        var
         e2$7 = param$0[3],
         match$30 = param$0[2],
         e1$7 = match$30[2],
         x$2 = match$30[1],
         f$1 = param$0[1],
         match$31 = comp(e1$7),
         c1$8 = match$31[2],
         defs1$8 = match$31[1],
         match$32 = comp(e2$7),
         c2$8 = match$32[2],
         defs2$8 = match$32[1],
         lab$0 = new_label(0),
         _bd_ = caml_call2(Stdlib[37], c1$8, _ar_),
         def$1 =
           caml_call2(Stdlib[37], [0, [10, lab$0], [0, [4, x$2], 0]], _bd_),
         _be_ = caml_call2(Stdlib[37], c2$8, _as_),
         _bf_ =
           caml_call2
            (Stdlib[37], [0, [6, f$1, [0, lab$0, 0]], [0, [4, f$1], 0]], _be_),
         _bg_ = caml_call2(Stdlib[37], defs1$8, defs2$8);
        return [0, caml_call2(Stdlib[37], def$1, _bg_), _bf_];
     }
    }
   }
   function compile(e){
    var
     match = comp(e),
     c = match[2],
     defs = match[1],
     _aF_ = caml_call2(Stdlib[37], _at_, defs),
     result = caml_call2(Stdlib[37], c, _aF_);
    if(Slanglib_Option[2])
     caml_call3(Stdlib_format[127], _au_, pp_code, result);
    return result;
   }
   function driver(n, state){
    var n$0 = n, state$0 = state;
    for(;;){
     var evs = state$0[2], cp = state$0[1];
     if(Slanglib_Option[2])
      caml_call4(Stdlib_format[127], _av_, n$0, pp_state, state$0);
     var _aD_ = get_instruction(cp);
     if(typeof _aD_ === "number" && 12 <= _aD_){
      if(evs){
       var _aE_ = evs[1];
       if(1 === _aE_[0] && ! evs[2]){var v = _aE_[1]; return v;}
      }
      return caml_call3(Slanglib_Errors[3], _aw_, pp_state, state$0);
     }
     var state$1 = step(state$0), n$1 = n$0 + 1 | 0;
     n$0 = n$1;
     state$0 = state$1;
    }
   }
   function load(l){
    function find(lab, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return caml_call2(Slanglib_Errors[3], _ax_, lab);
      var rest = param$0[2], match = param$0[1], v = match[2], x = match[1];
      if(x === lab) return v;
      param$0 = rest;
     }
    }
    var carry = 0, k = 0, param = l;
    for(;;){
     if(! param) break;
     var match = param[1];
     if(typeof match !== "number" && 10 === match[0]){
      var
       rest$0 = param[2],
       lab = match[1],
       k$1 = k + 1 | 0,
       carry$0 = [0, [0, lab, k], carry];
      carry = carry$0;
      k = k$1;
      param = rest$0;
      continue;
     }
     var rest = param[2], k$0 = k + 1 | 0;
     k = k$0;
     param = rest;
    }
    var
     _aC_ =
       caml_call2
        (Stdlib_list[19],
         function(inst){
          if(typeof inst !== "number")
           switch(inst[0]){
             case 5:
              var lab = inst[1][1];
              return [5, [0, lab, [0, find(lab, carry)]]];
             case 6:
              var lab$0 = inst[2][1], f = inst[1];
              return [6, f, [0, lab$0, [0, find(lab$0, carry)]]];
             case 7:
              var lab$1 = inst[1][1];
              return [7, [0, lab$1, [0, find(lab$1, carry)]]];
             case 8:
              var lab$2 = inst[1][1];
              return [8, [0, lab$2, [0, find(lab$2, carry)]]];
             case 9:
              var lab$3 = inst[1][1];
              return [9, [0, lab$3, [0, find(lab$3, carry)]]];
           }
          return inst;
         },
         l);
    return caml_call1(Stdlib_array[12], _aC_);
   }
   function interpret(e){
    var c = compile(e);
    installed[1] = load(c);
    if(Slanglib_Option[2]){
     var _aB_ = string_of_installed_code(0);
     caml_call2(Stdlib_format[127], _ay_, _aB_);
    }
    return driver(1, _az_);
   }
   function reset(param){
    next_address[1] = 0;
    label_ref[1] = 0;
    return caml_call4(Stdlib_array[9], heap, 0, heap.length - 1, _aA_);
   }
   var
    Slanglib_Interp_3 =
      [0,
       installed,
       load,
       step,
       compile,
       heap,
       next_address,
       driver,
       get_instruction,
       interpret,
       pp_code,
       pp_value,
       pp_env_or_value,
       pp_installed_code,
       pp_location,
       string_of_code,
       string_of_value,
       string_of_env_or_value,
       string_of_installed_code,
       string_of_location,
       reset];
   runtime.caml_register_global(101, Slanglib_Interp_3, "Slanglib__Interp_3");
   return;
  }
  (globalThis));

//# 7142 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_a = "%a",
    cst_a_a = "(%a, %a)",
    cst = ", ",
    cst$2 = ";@\n ",
    cst$1 = "@ ",
    cst_APPLY = "APPLY",
    cst_ASSIGN = "ASSIGN",
    cst_DEREF = "DEREF",
    cst_FST = "FST",
    cst_MK_INL = "MK_INL",
    cst_MK_INR = "MK_INR",
    cst_MK_PAIR = "MK_PAIR",
    cst_MK_REF = "MK_REF",
    cst_POP = "POP",
    cst_SND = "SND",
    cst_SWAP = "SWAP",
    cst_UNIT = "UNIT";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    leave_scope = [0, 1, [0, 2, 0]],
    Slanglib_Ast = global_data.Slanglib__Ast,
    Slanglib_Errors = global_data.Slanglib__Errors,
    Stdlib = global_data.Stdlib,
    Slanglib_Option = global_data.Slanglib__Option,
    Stdlib_format = global_data.Stdlib__format,
    Stdlib_map = global_data.Stdlib__map,
    compare = runtime.caml_compare,
    IntMap = caml_call1(Stdlib_map[1], [0, compare]),
    pr = Stdlib_format[126],
    _a_ = [0, [15, [14, 0, 0, [15, 0]]], "%a%(%)%a"],
    _b_ =
      [0,
       [18, [1, [0, 0, cst$0]], [12, 91, [15, [12, 93, [17, 0, 0]]]]],
       "@[[%a]@]"],
    _c_ = [0, [11, cst_UNIT, 0], cst_UNIT],
    _d_ = [0, [11, "REF(", [4, 0, 0, 0, [12, 41, 0]]], "REF(%d)"],
    _e_ = [0, [4, 0, 0, 0, 0], "%d"],
    _f_ = [0, [9, 0, 0], "%b"],
    _g_ = [0, [12, 40, [15, [11, cst, [15, [12, 41, 0]]]]], cst_a_a],
    _h_ = [0, [11, "inl(", [15, [12, 41, 0]]], "inl(%a)"],
    _i_ = [0, [11, "inr(", [15, [12, 41, 0]]], "inr(%a)"],
    _j_ = [0, [11, "CLOSURE(", [15, [12, 41, 0]]], "CLOSURE(%a)"],
    _k_ = [0, [11, "REC_CLOSURE(", [15, [12, 41, 0]]], "REC_CLOSURE(%a)"],
    _l_ = [0, [12, 40, [15, [11, cst, [15, [12, 41, 0]]]]], cst_a_a],
    _m_ = [0, [12, 44, [17, 3, [12, 32, 0]]], ",@\n "],
    _n_ = [0, [12, 40, [2, 0, [11, cst, [15, [12, 41, 0]]]]], "(%s, %a)"],
    _o_ = [0, [11, cst_ASSIGN, 0], cst_ASSIGN],
    _p_ = [0, [11, cst_SWAP, 0], cst_SWAP],
    _q_ = [0, [11, cst_POP, 0], cst_POP],
    _r_ = [0, [11, cst_FST, 0], cst_FST],
    _s_ = [0, [11, cst_SND, 0], cst_SND],
    _t_ = [0, [11, cst_DEREF, 0], cst_DEREF],
    _u_ = [0, [11, cst_APPLY, 0], cst_APPLY],
    _v_ = [0, [11, cst_MK_PAIR, 0], cst_MK_PAIR],
    _w_ = [0, [11, cst_MK_INL, 0], cst_MK_INL],
    _x_ = [0, [11, cst_MK_INR, 0], cst_MK_INR],
    _y_ = [0, [11, cst_MK_REF, 0], cst_MK_REF],
    _z_ = [0, [11, "PUSH ", [15, 0]], "PUSH %a"],
    _A_ = [0, [11, "LOOKUP ", [2, 0, 0]], "LOOKUP %s"],
    _B_ =
      [0,
       [18, [1, [0, 0, cst$0]], [11, "UNARY ", [2, 0, [17, 0, 0]]]],
       "@[UNARY %s@]"],
    _C_ =
      [0,
       [18, [1, [0, 0, cst$0]], [11, "OPER ", [2, 0, [17, 0, 0]]]],
       "@[OPER %s@]"],
    _D_ = [0, [11, "BIND ", [2, 0, 0]], "BIND %s"],
    _E_ = [0, [11, "MK_CLOSURE(", [15, [12, 41, 0]]], "MK_CLOSURE(%a)"],
    _F_ =
      [0,
       [11,
        "MK_REC(",
        [18,
         [1, [0, 0, cst$0]],
         [2, 0, [11, cst, [15, [12, 41, [17, 0, 0]]]]]]],
       "MK_REC(@[%s, %a)@]"],
    _G_ =
      [0,
       [11,
        "TEST(",
        [18,
         [1, [0, 0, cst$0]],
         [15, [12, 44, [17, [0, cst$1, 1, 0], [15, [12, 41, [17, 0, 0]]]]]]]],
       "TEST(@[%a,@ %a)@]"],
    _H_ =
      [0,
       [11,
        "CASE(",
        [18,
         [1, [0, 0, cst$0]],
         [15, [12, 44, [17, [0, cst$1, 1, 0], [15, [12, 41, [17, 0, 0]]]]]]]],
       "CASE(@[%a,@ %a)@]"],
    _I_ =
      [0,
       [11,
        "WHILE(",
        [18,
         [1, [0, 0, cst$0]],
         [15, [12, 44, [17, [0, cst$1, 1, 0], [15, [12, 41, [17, 0, 0]]]]]]]],
       "WHILE(@[%a,@ %a)@]"],
    _J_ = [0, [12, 59, [17, 3, [12, 32, 0]]], cst$2],
    _K_ = [0, [11, "EV ", [15, 0]], "EV %a"],
    _L_ = [0, [11, "V ", [15, 0]], "V %a"],
    _M_ = [0, [12, 59, [17, 3, [12, 32, 0]]], cst$2],
    _N_ =
      [0, [4, 0, 0, 0, [11, " -> ", [15, [17, 3, [15, 0]]]]], "%d -> %a@\n%a"],
    _O_ = [0, [17, 3, [11, "Heap = ", [17, 3, [15, 0]]]], "@\nHeap = @\n%a"],
    _P_ =
      [0,
       [17,
        3,
        [11,
         "Code Stack = ",
         [17,
          3,
          [15, [17, 3, [11, "Env/Value Stack = ", [17, 3, [15, [15, 0]]]]]]]]],
       "@\nCode Stack = @\n%a@\nEnv/Value Stack = @\n%a%a"];
   function pp_list(fmt, sep, f, l){
    function aux(f, fmt, param){
     if(! param) return 0;
     var t = param[1];
     if(! param[2]) return caml_call2(f, fmt, t);
     var rest = param[2];
     return caml_call7
             (pr,
              fmt,
              _a_,
              f,
              t,
              sep,
              function(_bU_, _bV_){return aux(f, _bU_, _bV_);},
              rest);
    }
    return caml_call4
            (pr,
             fmt,
             _b_,
             function(_bS_, _bT_){return aux(f, _bS_, _bT_);},
             l);
   }
   function pp_value(fmt, param){
    if(typeof param === "number") return caml_call2(pr, fmt, _c_);
    switch(param[0]){
      case 0:
       var a = param[1]; return caml_call3(pr, fmt, _d_, a);
      case 1:
       var n = param[1]; return caml_call3(pr, fmt, _e_, n);
      case 2:
       var b = param[1]; return caml_call3(pr, fmt, _f_, b);
      case 3:
       var v2 = param[2], v1 = param[1];
       return caml_call6(pr, fmt, _g_, pp_value, v1, pp_value, v2);
      case 4:
       var v = param[1]; return caml_call4(pr, fmt, _h_, pp_value, v);
      case 5:
       var v$0 = param[1]; return caml_call4(pr, fmt, _i_, pp_value, v$0);
      case 6:
       var cl = param[1]; return caml_call4(pr, fmt, _j_, pp_closure, cl);
      default: var c = param[1]; return caml_call4(pr, fmt, _k_, pp_code, c);
    }
   }
   function pp_closure(fmt, param){
    var env = param[2], c = param[1];
    return caml_call6(pr, fmt, _l_, pp_code, c, pp_env, env);
   }
   function pp_env(fmt, env){return pp_list(fmt, _m_, pp_binding, env);}
   function pp_binding(fmt, param){
    var v = param[2], x = param[1];
    return caml_call5(pr, fmt, _n_, x, pp_value, v);
   }
   function pp_instruction(fmt, param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return caml_call2(pr, fmt, _o_);
       case 1:
        return caml_call2(pr, fmt, _p_);
       case 2:
        return caml_call2(pr, fmt, _q_);
       case 3:
        return caml_call2(pr, fmt, _r_);
       case 4:
        return caml_call2(pr, fmt, _s_);
       case 5:
        return caml_call2(pr, fmt, _t_);
       case 6:
        return caml_call2(pr, fmt, _u_);
       case 7:
        return caml_call2(pr, fmt, _v_);
       case 8:
        return caml_call2(pr, fmt, _w_);
       case 9:
        return caml_call2(pr, fmt, _x_);
       default: return caml_call2(pr, fmt, _y_);
     }
    switch(param[0]){
      case 0:
       var v = param[1]; return caml_call4(pr, fmt, _z_, pp_value, v);
      case 1:
       var x = param[1]; return caml_call3(pr, fmt, _A_, x);
      case 2:
       var op = param[1];
       return caml_call3(pr, fmt, _B_, caml_call1(Slanglib_Ast[3], op));
      case 3:
       var op$0 = param[1];
       return caml_call3(pr, fmt, _C_, caml_call1(Slanglib_Ast[4], op$0));
      case 4:
       var x$0 = param[1]; return caml_call3(pr, fmt, _D_, x$0);
      case 5:
       var c = param[1]; return caml_call4(pr, fmt, _E_, pp_code, c);
      case 6:
       var c$0 = param[2], f = param[1];
       return caml_call5(pr, fmt, _F_, f, pp_code, c$0);
      case 7:
       var c2 = param[2], c1 = param[1];
       return caml_call6(pr, fmt, _G_, pp_code, c1, pp_code, c2);
      case 8:
       var c2$0 = param[2], c1$0 = param[1];
       return caml_call6(pr, fmt, _H_, pp_code, c1$0, pp_code, c2$0);
      default:
       var c2$1 = param[2], c1$1 = param[1];
       return caml_call6(pr, fmt, _I_, pp_code, c1$1, pp_code, c2$1);
    }
   }
   function pp_code(fmt, c){return pp_list(fmt, _J_, pp_instruction, c);}
   function pp_env_or_value(fmt, param){
    if(0 === param[0]){
     var env = param[1];
     return caml_call4(pr, fmt, _K_, pp_env, env);
    }
    var v = param[1];
    return caml_call4(pr, fmt, _L_, pp_value, v);
   }
   function pp_env_value_stack(fmt, n){
    return pp_list(fmt, _M_, pp_env_or_value, n);
   }
   function pp_state(fmt, param){
    var i = param[2], heap = param[1];
    function aux(fmt, k){
     var _bR_ = k < i ? 1 : 0;
     return _bR_
             ? caml_call7
               (pr,
                fmt,
                _N_,
                k,
                pp_value,
                caml_call2(IntMap[28], k, heap),
                aux,
                k + 1 | 0)
             : _bR_;
    }
    var _bQ_ = 0 !== i ? 1 : 0;
    return _bQ_ ? caml_call4(pr, fmt, _O_, aux, 0) : _bQ_;
   }
   function pp_interp_state(fmt, param){
    var s = param[3], evs = param[2], c = param[1];
    return caml_call8
            (pr, fmt, _P_, pp_code, c, pp_env_value_stack, evs, pp_state, s);
   }
   var
    string_of_instruction =
      caml_call2(Stdlib_format[130], [0, [15, 0], cst_a], pp_instruction),
    string_of_value =
      caml_call2(Stdlib_format[130], [0, [15, 0], cst_a], pp_value),
    string_of_env_or_value =
      caml_call2(Stdlib_format[130], [0, [15, 0], cst_a], pp_env_or_value),
    string_of_code =
      caml_call2(Stdlib_format[130], [0, [15, 0], cst_a], pp_code),
    cst_runtime_error_heap_kaput = "runtime error: heap kaput",
    _Q_ = [0, [2, 0, [11, " is not defined!\n", 0]], "%s is not defined!\n"],
    cst_input = "input> ",
    _R_ =
      [0,
       [11, "malformed unary operator: ", [2, 0, 0]],
       "malformed unary operator: %s"],
    _S_ =
      [0,
       [11, "malformed binary operator: ", [2, 0, 0]],
       "malformed binary operator: %s"],
    _T_ =
      [0,
       [11, "step : bad state = ", [15, [12, 10, 0]]],
       "step : bad state = %a\n"],
    _U_ = [1, 0],
    _V_ = [0, 2, 0],
    _W_ = [1, 0],
    _X_ =
      [0,
       [11, "\nState ", [4, 0, 0, 0, [11, " : ", [15, [17, 4, 0]]]]],
       "\nState %d : %a@."],
    _Y_ = [0, [0, 0], 0],
    _Z_ = [0, 7, 0],
    ___ = [0, 3, 0],
    _$_ = [0, 4, 0],
    _aa_ = [0, 8, 0],
    _ab_ = [0, 9, 0],
    _ac_ = [0, 2, 0],
    _ad_ = [0, 10, 0],
    _ae_ = [0, 5, 0],
    _af_ = [0, 0, 0],
    _ag_ = [0, 6, [0, 1, [0, 2, 0]]];
   function mk_rec(param){
    var env = param[3], c = param[2], f = param[1];
    return [6, [0, c, [0, [0, f, [7, c]], env]]];
   }
   function evs_to_env(param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var match = param$0[1];
     if(0 === match[0]){
      var rest = param$0[2], env = match[1], _bP_ = evs_to_env(rest);
      return caml_call2(Stdlib[37], env, _bP_);
     }
     var rest$0 = param$0[2];
     param$0 = rest$0;
    }
   }
   function do_oper(param){
    var op = param[1];
    switch(op){
      case 0:
       var _bF_ = param[2];
       if(typeof _bF_ !== "number" && 1 === _bF_[0]){
        var match = param[3];
        if(typeof match !== "number" && 1 === match[0]){
         var n = match[1], m = _bF_[1];
         return [1, m + n | 0];
        }
        break;
       }
       break;
      case 1:
       var _bH_ = param[2];
       if(typeof _bH_ !== "number" && 1 === _bH_[0]){
        var match$0 = param[3];
        if(typeof match$0 !== "number" && 1 === match$0[0]){
         var n$0 = match$0[1], m$0 = _bH_[1];
         return [1, runtime.caml_mul(m$0, n$0)];
        }
        break;
       }
       break;
      case 2:
       var _bI_ = param[2];
       if(typeof _bI_ !== "number" && 1 === _bI_[0]){
        var match$1 = param[3];
        if(typeof match$1 !== "number" && 1 === match$1[0]){
         var n$1 = match$1[1], m$1 = _bI_[1];
         return [1, runtime.caml_div(m$1, n$1)];
        }
        break;
       }
       break;
      case 3:
       var _bJ_ = param[2];
       if(typeof _bJ_ !== "number" && 1 === _bJ_[0]){
        var match$2 = param[3];
        if(typeof match$2 !== "number" && 1 === match$2[0]){
         var n$2 = match$2[1], m$2 = _bJ_[1];
         return [1, m$2 - n$2 | 0];
        }
        break;
       }
       break;
      case 4:
       var _bK_ = param[2];
       if(typeof _bK_ !== "number" && 1 === _bK_[0]){
        var match$3 = param[3];
        if(typeof match$3 !== "number" && 1 === match$3[0]){
         var n$3 = match$3[1], m$3 = _bK_[1];
         return [2, m$3 < n$3 ? 1 : 0];
        }
        break;
       }
       break;
      case 5:
       var _bL_ = param[2];
       if(typeof _bL_ !== "number" && 2 === _bL_[0]){
        var match$4 = param[3];
        if(typeof match$4 !== "number" && 2 === match$4[0]){
         var n$4 = match$4[1], m$4 = _bL_[1], n$5 = m$4 ? n$4 : m$4;
         return [2, n$5];
        }
        break;
       }
       break;
      case 6:
       var _bM_ = param[2];
       if(typeof _bM_ !== "number" && 2 === _bM_[0]){
        var match$5 = param[3];
        if(typeof match$5 !== "number" && 2 === match$5[0]){
         var n$6 = match$5[1], m$5 = _bM_[1], m$6 = m$5 || n$6;
         return [2, m$6];
        }
        break;
       }
       break;
      case 7:
       var _bN_ = param[2];
       if(typeof _bN_ !== "number" && 2 === _bN_[0]){
        var match$6 = param[3];
        if(typeof match$6 !== "number" && 2 === match$6[0]){
         var n$7 = match$6[1], m$7 = _bN_[1];
         return [2, m$7 === n$7 ? 1 : 0];
        }
        break;
       }
       break;
      default:
       var _bO_ = param[2];
       if(typeof _bO_ !== "number" && 1 === _bO_[0]){
        var match$7 = param[3];
        if(typeof match$7 !== "number" && 1 === match$7[0]){
         var n$8 = match$7[1], m$8 = _bO_[1];
         return [2, m$8 === n$8 ? 1 : 0];
        }
        break;
       }
    }
    var _bG_ = caml_call1(Slanglib_Ast[2], op);
    return caml_call2(Slanglib_Errors[3], _S_, _bG_);
   }
   function step(state){
    var _a1_ = state[1];
    if(_a1_){
     var match$1 = _a1_[1];
     if(typeof match$1 === "number")
      switch(match$1){
        case 0:
         var _a2_ = state[2];
         if(_a2_){
          var _a3_ = _a2_[1], ds = _a1_[2];
          if(0 !== _a3_[0]){
           var _a4_ = _a2_[2];
           if(_a4_){
            var _a5_ = _a4_[1], v$1 = _a3_[1];
            if(0 !== _a5_[0]){
             var match$2 = _a5_[1];
             if(typeof match$2 !== "number" && 0 === match$2[0]){
              var
               s = state[3],
               evs$0 = _a4_[2],
               a = match$2[1],
               i$0 = s[2],
               heap$2 = s[1],
               heap$3 = caml_call3(IntMap[4], a, v$1, heap$2);
              return [0, ds, [0, _U_, evs$0], [0, heap$3, i$0]];
             }
            }
           }
          }
         }
         break;
        case 1:
         var _a6_ = state[2];
         if(_a6_){
          var match$3 = _a6_[2];
          if(match$3){
           var
            s$0 = state[3],
            evs$1 = match$3[2],
            e2 = match$3[1],
            e1 = _a6_[1],
            ds$0 = _a1_[2];
           return [0, ds$0, [0, e2, [0, e1, evs$1]], s$0];
          }
         }
         break;
        case 2:
         var match$4 = state[2];
         if(match$4){
          var s$1 = state[3], evs$2 = match$4[2], ds$1 = _a1_[2];
          return [0, ds$1, evs$2, s$1];
         }
         break;
        case 3:
         var _a7_ = state[2];
         if(_a7_){
          var _a8_ = _a7_[1], ds$2 = _a1_[2];
          if(0 !== _a8_[0]){
           var match$5 = _a8_[1];
           if(typeof match$5 !== "number" && 3 === match$5[0]){
            var s$2 = state[3], evs$3 = _a7_[2], v$2 = match$5[1];
            return [0, ds$2, [0, [1, v$2], evs$3], s$2];
           }
          }
         }
         break;
        case 4:
         var _a9_ = state[2];
         if(_a9_){
          var _a__ = _a9_[1], ds$3 = _a1_[2];
          if(0 !== _a__[0]){
           var match$6 = _a__[1];
           if(typeof match$6 !== "number" && 3 === match$6[0]){
            var s$3 = state[3], evs$4 = _a9_[2], v$3 = match$6[2];
            return [0, ds$3, [0, [1, v$3], evs$4], s$3];
           }
          }
         }
         break;
        case 5:
         var _a$_ = state[2];
         if(_a$_){
          var _ba_ = _a$_[1], ds$4 = _a1_[2];
          if(0 !== _ba_[0]){
           var match$7 = _ba_[1];
           if(typeof match$7 !== "number" && 0 === match$7[0]){
            var
             s$4 = state[3],
             evs$5 = _a$_[2],
             a$0 = match$7[1],
             heap$1 = s$4[1];
            return [0,
                    ds$4,
                    [0, [1, caml_call2(IntMap[28], a$0, heap$1)], evs$5],
                    s$4];
           }
          }
         }
         break;
        case 6:
         var _bb_ = state[2];
         if(_bb_){
          var _bc_ = _bb_[1], ds$5 = _a1_[2];
          if(0 !== _bc_[0]){
           var _bd_ = _bc_[1];
           if(typeof _bd_ !== "number" && 6 === _bd_[0]){
            var _be_ = _bb_[2];
            if(! _be_) break;
            var _bf_ = _be_[1], _bg_ = _bd_[1], env$0 = _bg_[2], c = _bg_[1];
            if(0 === _bf_[0]) break;
            var s$5 = state[3], evs$6 = _be_[2], v$4 = _bf_[1];
            return [0,
                    caml_call2(Stdlib[37], c, ds$5),
                    [0, [1, v$4], [0, [0, env$0], evs$6]],
                    s$5];
           }
          }
         }
         break;
        case 7:
         var _bh_ = state[2];
         if(_bh_){
          var _bi_ = _bh_[1], ds$6 = _a1_[2];
          if(0 !== _bi_[0]){
           var _bj_ = _bh_[2];
           if(_bj_){
            var match$8 = _bj_[1], v2 = _bi_[1];
            if(0 !== match$8[0]){
             var s$6 = state[3], evs$7 = _bj_[2], v1 = match$8[1];
             return [0, ds$6, [0, [1, [3, v1, v2]], evs$7], s$6];
            }
           }
          }
         }
         break;
        case 8:
         var _bk_ = state[2];
         if(_bk_){
          var match$9 = _bk_[1], ds$7 = _a1_[2];
          if(0 !== match$9[0]){
           var s$7 = state[3], evs$8 = _bk_[2], v$5 = match$9[1];
           return [0, ds$7, [0, [1, [4, v$5]], evs$8], s$7];
          }
         }
         break;
        case 9:
         var _bl_ = state[2];
         if(_bl_){
          var match$10 = _bl_[1], ds$8 = _a1_[2];
          if(0 !== match$10[0]){
           var s$8 = state[3], evs$9 = _bl_[2], v$6 = match$10[1];
           return [0, ds$8, [0, [1, [5, v$6]], evs$9], s$8];
          }
         }
         break;
        default:
         var _bm_ = state[2];
         if(_bm_){
          var match$11 = _bm_[1], ds$9 = _a1_[2];
          if(0 !== match$11[0]){
           var
            s$9 = state[3],
            evs$10 = _bm_[2],
            v$7 = match$11[1],
            i = s$9[2],
            heap = s$9[1];
           if(i < Slanglib_Option[14])
            var
             heap$0 = caml_call3(IntMap[4], i, v$7, heap),
             match$12 = [0, i, [0, heap$0, i + 1 | 0]];
           else
            var
             match$12 =
               caml_call1(Slanglib_Errors[2], cst_runtime_error_heap_kaput);
           var s$10 = match$12[2], a$1 = match$12[1];
           return [0, ds$9, [0, [1, [0, a$1]], evs$10], s$10];
          }
         }
      }
     else
      switch(match$1[0]){
        case 0:
         var
          s$11 = state[3],
          evs$11 = state[2],
          ds$10 = _a1_[2],
          v$8 = match$1[1];
         return [0, ds$10, [0, [1, v$8], evs$11], s$11];
        case 1:
         var
          s$12 = state[3],
          evs$12 = state[2],
          ds$11 = _a1_[2],
          x$3 = match$1[1],
          param$0 = [0, evs$12, x$3];
         for(;;){
          var x$2 = param$0[2], evs = param$0[1];
          if(evs){
           var match = evs[1];
           if(0 !== match[0]){
            var rest$2 = evs[2];
            param$0 = [0, rest$2, x$2];
            continue;
           }
           var rest$1 = evs[2], env = match[1];
           a:
           {
            b:
            {
             c:
             {
              var param = [0, env, x$2];
              for(;;){
               var _aY_ = param[1];
               if(! _aY_) break;
               var _aZ_ = _aY_[1], y = _aZ_[1], v = _aZ_[2];
               if(typeof v !== "number" && 7 === v[0]){
                var x$1 = param[2], rest$0 = _aY_[2], body = v[1];
                if(x$1 === y) break c;
               }
               var x = param[2];
               if(x === y) break b;
               var x$0 = param[2], rest = _aY_[2];
               param = [0, rest, x$0];
              }
              var match$0 = 0;
              break a;
             }
             var match$0 = [0, mk_rec([0, x$1, body, rest$0])];
             break a;
            }
            var match$0 = [0, v];
           }
           if(! match$0){param$0 = [0, rest$1, x$2]; continue;}
           var v$0 = match$0[1], _bn_ = v$0;
          }
          else
           var _bn_ = caml_call2(Slanglib_Errors[3], _Q_, x$2);
          return [0, ds$11, [0, [1, _bn_], evs$12], s$12];
         }
        case 2:
         var _bo_ = state[2];
         if(_bo_){
          var match$13 = _bo_[1], ds$12 = _a1_[2], op = match$1[1];
          if(0 !== match$13[0]){
           var s$13 = state[3], evs$13 = _bo_[2], v$9 = match$13[1];
           a:
           {
            switch(op){
              case 0:
               if(typeof v$9 !== "number" && 1 === v$9[0]){
                var m = v$9[1], _bp_ = [1, - m | 0];
                break a;
               }
               break;
              case 1:
               if(typeof v$9 !== "number" && 2 === v$9[0]){
                var m$0 = v$9[1], _bp_ = [2, 1 - m$0];
                break a;
               }
               break;
              default:
               if(typeof v$9 === "number"){
                caml_call1(Stdlib[42], cst_input);
                var _bp_ = [1, caml_call1(Stdlib[57], 0)];
                break a;
               }
            }
            var
             _a0_ = caml_call1(Slanglib_Ast[1], op),
             _bp_ = caml_call2(Slanglib_Errors[3], _R_, _a0_);
           }
           return [0, ds$12, [0, [1, _bp_], evs$13], s$13];
          }
         }
         break;
        case 3:
         var _bq_ = state[2];
         if(_bq_){
          var _br_ = _bq_[1], ds$13 = _a1_[2], op$0 = match$1[1];
          if(0 !== _br_[0]){
           var _bs_ = _bq_[2];
           if(_bs_){
            var match$14 = _bs_[1], v2$0 = _br_[1];
            if(0 !== match$14[0]){
             var s$14 = state[3], evs$14 = _bs_[2], v1$0 = match$14[1];
             return [0,
                     ds$13,
                     [0, [1, do_oper([0, op$0, v1$0, v2$0])], evs$14],
                     s$14];
            }
           }
          }
         }
         break;
        case 4:
         var _bt_ = state[2];
         if(_bt_){
          var match$15 = _bt_[1], ds$14 = _a1_[2], x$4 = match$1[1];
          if(0 !== match$15[0]){
           var s$15 = state[3], evs$15 = _bt_[2], v$10 = match$15[1];
           return [0, ds$14, [0, [0, [0, [0, x$4, v$10], 0]], evs$15], s$15];
          }
         }
         break;
        case 5:
         var
          s$16 = state[3],
          evs$16 = state[2],
          ds$15 = _a1_[2],
          c$0 = match$1[1],
          env$1 = evs_to_env(evs$16);
         return [0, ds$15, [0, [1, [6, [0, c$0, env$1]]], evs$16], s$16];
        case 6:
         var
          s$17 = state[3],
          evs$17 = state[2],
          ds$16 = _a1_[2],
          c$1 = match$1[2],
          f = match$1[1];
         return [0,
                 ds$16,
                 [0, [1, mk_rec([0, f, c$1, evs_to_env(evs$17)])], evs$17],
                 s$17];
        case 7:
         var _bu_ = state[2];
         if(_bu_){
          var
           _bv_ = _bu_[1],
           ds$17 = _a1_[2],
           c2 = match$1[2],
           c1 = match$1[1];
          if(0 !== _bv_[0]){
           var _bw_ = _bv_[1];
           if(typeof _bw_ !== "number" && 2 === _bw_[0]){
            if(_bw_[1]){
             var s$18 = state[3], evs$18 = _bu_[2];
             return [0, caml_call2(Stdlib[37], c1, ds$17), evs$18, s$18];
            }
            var s$19 = state[3], evs$19 = _bu_[2];
            return [0, caml_call2(Stdlib[37], c2, ds$17), evs$19, s$19];
           }
          }
         }
         break;
        case 8:
         var _bx_ = state[2];
         if(_bx_){
          var
           _by_ = _bx_[1],
           ds$18 = _a1_[2],
           c2$0 = match$1[2],
           c1$0 = match$1[1];
          if(0 !== _by_[0]){
           var match$16 = _by_[1];
           if(typeof match$16 !== "number")
            switch(match$16[0]){
              case 4:
               var s$20 = state[3], evs$20 = _bx_[2], v$11 = match$16[1];
               return [0,
                       caml_call2(Stdlib[37], c1$0, ds$18),
                       [0, [1, v$11], evs$20],
                       s$20];
              case 5:
               var s$21 = state[3], evs$21 = _bx_[2], v$12 = match$16[1];
               return [0,
                       caml_call2(Stdlib[37], c2$0, ds$18),
                       [0, [1, v$12], evs$21],
                       s$21];
            }
          }
         }
         break;
        default:
         var _bz_ = state[2];
         if(_bz_){
          var
           _bA_ = _bz_[1],
           ds$19 = _a1_[2],
           c2$1 = match$1[2],
           c1$1 = match$1[1];
          if(0 !== _bA_[0]){
           var _bB_ = _bA_[1];
           if(typeof _bB_ !== "number" && 2 === _bB_[0]){
            if(_bB_[1]){
             var
              s$22 = state[3],
              evs$22 = _bz_[2],
              _bC_ = caml_call2(Stdlib[37], [0, [9, c1$1, c2$1], 0], ds$19),
              _bD_ = caml_call2(Stdlib[37], c1$1, _bC_),
              _bE_ = caml_call2(Stdlib[37], _V_, _bD_);
             return [0, caml_call2(Stdlib[37], c2$1, _bE_), evs$22, s$22];
            }
            var s$23 = state[3], evs$23 = _bz_[2];
            return [0, ds$19, [0, _W_, evs$23], s$23];
           }
          }
         }
      }
    }
    return caml_call3(Slanglib_Errors[3], _T_, pp_interp_state, state);
   }
   function driver(n, state){
    var n$0 = n, state$0 = state;
    for(;;){
     if(Slanglib_Option[2])
      caml_call4(Stdlib_format[127], _X_, n$0, pp_interp_state, state$0);
     if(! state$0[1]){
      var _aW_ = state$0[2];
      if(_aW_){
       var _aX_ = _aW_[1];
       if(0 !== _aX_[0] && ! _aW_[2]){
        var s = state$0[3], v = _aX_[1];
        return [0, v, s];
       }
      }
     }
     var state$1 = step(state$0), n$1 = n$0 + 1 | 0;
     n$0 = n$1;
     state$0 = state$1;
    }
   }
   function compile(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return _Y_;
     switch(param$0[0]){
       case 0:
        var x = param$0[1]; return [0, [1, x], 0];
       case 1:
        var n = param$0[1]; return [0, [0, [1, n]], 0];
       case 2:
        var b = param$0[1]; return [0, [0, [2, b]], 0];
       case 3:
        var e = param$0[2], op = param$0[1], _ai_ = compile(e);
        return caml_call2(Stdlib[37], _ai_, [0, [2, op], 0]);
       case 4:
        var
         e2 = param$0[3],
         op$0 = param$0[2],
         e1 = param$0[1],
         _aj_ = compile(e2),
         _ak_ = caml_call2(Stdlib[37], _aj_, [0, [3, op$0], 0]),
         _al_ = compile(e1);
        return caml_call2(Stdlib[37], _al_, _ak_);
       case 5:
        var
         e3 = param$0[3],
         e2$0 = param$0[2],
         e1$0 = param$0[1],
         _am_ = compile(e3),
         _an_ = [0, [7, compile(e2$0), _am_], 0],
         _ao_ = compile(e1$0);
        return caml_call2(Stdlib[37], _ao_, _an_);
       case 6:
        var
         e2$1 = param$0[2],
         e1$1 = param$0[1],
         _ap_ = compile(e2$1),
         _aq_ = caml_call2(Stdlib[37], _ap_, _Z_),
         _ar_ = compile(e1$1);
        return caml_call2(Stdlib[37], _ar_, _aq_);
       case 7:
        var e$0 = param$0[1], _as_ = compile(e$0);
        return caml_call2(Stdlib[37], _as_, ___);
       case 8:
        var e$1 = param$0[1], _at_ = compile(e$1);
        return caml_call2(Stdlib[37], _at_, _$_);
       case 9:
        var e$2 = param$0[1], _au_ = compile(e$2);
        return caml_call2(Stdlib[37], _au_, _aa_);
       case 10:
        var e$3 = param$0[1], _av_ = compile(e$3);
        return caml_call2(Stdlib[37], _av_, _ab_);
       case 11:
        var
         _aw_ = param$0[3],
         e2$2 = _aw_[2],
         x2 = _aw_[1],
         match = param$0[2],
         e1$2 = match[2],
         x1 = match[1],
         e$4 = param$0[1],
         _ax_ = [0, [4, x2], compile(e2$2)],
         _ay_ = caml_call2(Stdlib[37], _ax_, leave_scope),
         _az_ = [0, [4, x1], compile(e1$2)],
         _aA_ = [0, [8, caml_call2(Stdlib[37], _az_, leave_scope), _ay_], 0],
         _aB_ = compile(e$4);
        return caml_call2(Stdlib[37], _aB_, _aA_);
       case 12:
        var
         e2$3 = param$0[2],
         e1$3 = param$0[1],
         cl = compile(e1$3),
         _aC_ = [0, [9, cl, compile(e2$3)], 0];
        return caml_call2(Stdlib[37], cl, _aC_);
       case 13:
        var _aD_ = param$0[1];
        if(! _aD_) return 0;
        var e$5 = _aD_[1];
        if(_aD_[2]){
         var
          rest = _aD_[2],
          _aE_ = compile([13, rest]),
          _aF_ = caml_call2(Stdlib[37], _ac_, _aE_),
          _aG_ = compile(e$5);
         return caml_call2(Stdlib[37], _aG_, _aF_);
        }
        param$0 = e$5;
        break;
       case 14:
        var e$6 = param$0[1], _aH_ = compile(e$6);
        return caml_call2(Stdlib[37], _aH_, _ad_);
       case 15:
        var e$7 = param$0[1], _aI_ = compile(e$7);
        return caml_call2(Stdlib[37], _aI_, _ae_);
       case 16:
        var
         e2$4 = param$0[2],
         e1$4 = param$0[1],
         _aJ_ = compile(e2$4),
         _aK_ = caml_call2(Stdlib[37], _aJ_, _af_),
         _aL_ = compile(e1$4);
        return caml_call2(Stdlib[37], _aL_, _aK_);
       case 17:
        var
         match$0 = param$0[1],
         e$8 = match$0[2],
         x$0 = match$0[1],
         _aM_ = [0, [4, x$0], compile(e$8)];
        return [0, [5, caml_call2(Stdlib[37], _aM_, leave_scope)], 0];
       case 18:
        var
         e2$5 = param$0[2],
         e1$5 = param$0[1],
         _aN_ = compile(e1$5),
         _aO_ = caml_call2(Stdlib[37], _aN_, _ag_),
         _aP_ = compile(e2$5);
        return caml_call2(Stdlib[37], _aP_, _aO_);
       case 19:
        var
         e$9 = param$0[3],
         match$1 = param$0[2],
         body = match$1[2],
         x$1 = match$1[1],
         f = param$0[1],
         _aQ_ = [0, [4, f], compile(e$9)],
         _aR_ = [0, [4, x$1], compile(body)],
         _aS_ = [0, [5, caml_call2(Stdlib[37], _aR_, leave_scope)], _aQ_];
        return caml_call2(Stdlib[37], _aS_, leave_scope);
       default:
        var
         e$10 = param$0[3],
         match$2 = param$0[2],
         body$0 = match$2[2],
         x$2 = match$2[1],
         f$0 = param$0[1],
         _aT_ = [0, [4, f$0], compile(e$10)],
         _aU_ = [0, [4, x$2], compile(body$0)],
         _aV_ = [0, [6, f$0, caml_call2(Stdlib[37], _aU_, leave_scope)], _aT_];
        return caml_call2(Stdlib[37], _aV_, leave_scope);
     }
    }
   }
   var
    initial_state = [0, IntMap[1], 0],
    initial_env = 0,
    _ah_ =
      [0,
       [11, "Compile code =", [17, 3, [15, [17, 4, 0]]]],
       "Compile code =@\n%a@."];
   function interpret(e){
    var c = compile(e);
    if(Slanglib_Option[2]) caml_call3(Stdlib_format[127], _ah_, pp_code, c);
    return driver(1, [0, c, initial_env, initial_state]);
   }
   var
    Slanglib_Interp_2 =
      [0,
       IntMap,
       initial_state,
       initial_env,
       step,
       compile,
       driver,
       interpret,
       string_of_instruction,
       string_of_value,
       string_of_env_or_value,
       string_of_code];
   runtime.caml_register_global(75, Slanglib_Interp_2, "Slanglib__Interp_2");
   return;
  }
  (globalThis));

//# 9121 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = ")",
    cst_runtime_error_Expecting_a_$4 = "runtime error.  Expecting a boolean!",
    cst_runtime_error_Expecting_a_$5 = "runtime error.  Expecting a pair!";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "()",
    cst$0 = cst$6,
    cst$1 = cst$6,
    cst$2 = ", ",
    cst$3 = "(",
    cst$4 = cst$6,
    cst$5 = cst$6,
    Stdlib = global_data.Stdlib,
    Slanglib_Ast = global_data.Slanglib__Ast,
    Slanglib_Errors = global_data.Slanglib__Errors,
    complain = Slanglib_Errors[2],
    cst_address = "address(",
    cst_inl = "inl(",
    cst_inr = "inr(",
    cst_FUNCTION = "FUNCTION( ... )",
    cst_malformed_binary_operator = "malformed binary operator: ";
   function string_of_value(param){
    if(typeof param === "number") return cst;
    switch(param[0]){
      case 0:
       var
        a = param[1],
        _F_ = caml_call1(Stdlib[33], a),
        _G_ = caml_call2(Stdlib[28], _F_, cst$0);
       return caml_call2(Stdlib[28], cst_address, _G_);
      case 1:
       var n = param[1]; return caml_call1(Stdlib[33], n);
      case 2:
       var b = param[1]; return caml_call1(Stdlib[30], b);
      case 3:
       var
        v2 = param[2],
        v1 = param[1],
        _H_ = string_of_value(v2),
        _I_ = caml_call2(Stdlib[28], _H_, cst$1),
        _J_ = caml_call2(Stdlib[28], cst$2, _I_),
        _K_ = string_of_value(v1),
        _L_ = caml_call2(Stdlib[28], _K_, _J_);
       return caml_call2(Stdlib[28], cst$3, _L_);
      case 4:
       var
        v = param[1],
        _M_ = string_of_value(v),
        _N_ = caml_call2(Stdlib[28], _M_, cst$4);
       return caml_call2(Stdlib[28], cst_inl, _N_);
      case 5:
       var
        v$0 = param[1],
        _O_ = string_of_value(v$0),
        _P_ = caml_call2(Stdlib[28], _O_, cst$5);
       return caml_call2(Stdlib[28], cst_inr, _P_);
      default: return cst_FUNCTION;
    }
   }
   function update(param, y){
    var match = param[2], v = match[2], x = match[1], env = param[1];
    return runtime.caml_equal(x, y) ? v : caml_call1(env, y);
   }
   function do_oper(param){
    var op = param[1];
    switch(op){
      case 0:
       var _v_ = param[2];
       if(typeof _v_ !== "number" && 1 === _v_[0]){
        var match = param[3];
        if(typeof match !== "number" && 1 === match[0]){
         var n = match[1], m = _v_[1];
         return [1, m + n | 0];
        }
        break;
       }
       break;
      case 1:
       var _x_ = param[2];
       if(typeof _x_ !== "number" && 1 === _x_[0]){
        var match$0 = param[3];
        if(typeof match$0 !== "number" && 1 === match$0[0]){
         var n$0 = match$0[1], m$0 = _x_[1];
         return [1, runtime.caml_mul(m$0, n$0)];
        }
        break;
       }
       break;
      case 2:
       var _y_ = param[2];
       if(typeof _y_ !== "number" && 1 === _y_[0]){
        var match$1 = param[3];
        if(typeof match$1 !== "number" && 1 === match$1[0]){
         var n$1 = match$1[1], m$1 = _y_[1];
         return [1, runtime.caml_div(m$1, n$1)];
        }
        break;
       }
       break;
      case 3:
       var _z_ = param[2];
       if(typeof _z_ !== "number" && 1 === _z_[0]){
        var match$2 = param[3];
        if(typeof match$2 !== "number" && 1 === match$2[0]){
         var n$2 = match$2[1], m$2 = _z_[1];
         return [1, m$2 - n$2 | 0];
        }
        break;
       }
       break;
      case 4:
       var _A_ = param[2];
       if(typeof _A_ !== "number" && 1 === _A_[0]){
        var match$3 = param[3];
        if(typeof match$3 !== "number" && 1 === match$3[0]){
         var n$3 = match$3[1], m$3 = _A_[1];
         return [2, m$3 < n$3 ? 1 : 0];
        }
        break;
       }
       break;
      case 5:
       var _B_ = param[2];
       if(typeof _B_ !== "number" && 2 === _B_[0]){
        var match$4 = param[3];
        if(typeof match$4 !== "number" && 2 === match$4[0]){
         var n$4 = match$4[1], m$4 = _B_[1], n$5 = m$4 ? n$4 : m$4;
         return [2, n$5];
        }
        break;
       }
       break;
      case 6:
       var _C_ = param[2];
       if(typeof _C_ !== "number" && 2 === _C_[0]){
        var match$5 = param[3];
        if(typeof match$5 !== "number" && 2 === match$5[0]){
         var n$6 = match$5[1], m$5 = _C_[1], m$6 = m$5 || n$6;
         return [2, m$6];
        }
        break;
       }
       break;
      case 7:
       var _D_ = param[2];
       if(typeof _D_ !== "number" && 2 === _D_[0]){
        var match$6 = param[3];
        if(typeof match$6 !== "number" && 2 === match$6[0]){
         var n$7 = match$6[1], m$7 = _D_[1];
         return [2, m$7 === n$7 ? 1 : 0];
        }
        break;
       }
       break;
      default:
       var _E_ = param[2];
       if(typeof _E_ !== "number" && 1 === _E_[0]){
        var match$7 = param[3];
        if(typeof match$7 !== "number" && 1 === match$7[0]){
         var n$8 = match$7[1], m$8 = _E_[1];
         return [2, m$8 === n$8 ? 1 : 0];
        }
        break;
       }
    }
    var _w_ = caml_call1(Slanglib_Ast[2], op);
    return caml_call1
            (complain,
             caml_call2(Stdlib[28], cst_malformed_binary_operator, _w_));
   }
   var
    next_address = [0, 0],
    cst_input = "input> ",
    cst_malformed_unary_operator = "malformed unary operator: ",
    cst_deref_expecting_address = "deref expecting address",
    cst_runtime_error_Expecting_a_ = cst_runtime_error_Expecting_a_$4,
    cst_runtime_error_Expecting_a_$0 = cst_runtime_error_Expecting_a_$5,
    cst_runtime_error_Expecting_a_$1 = cst_runtime_error_Expecting_a_$5,
    cst_runtime_error_Expecting_in = "runtime error.  Expecting inl or inr!",
    cst_runtime_error_Expecting_a_$2 = cst_runtime_error_Expecting_a_$4,
    cst_runtime_error_expecting_an =
      "runtime error : expecting an address on left side of assignment",
    cst_runtime_error_Expecting_a_$3 = "runtime error.  Expecting a function!",
    cst_is_not_defined = " is not defined!\n",
    cst_is_not_allocated = " is not allocated!\n";
   function interpret(param){
    var param$0 = param;
    for(;;){
     var store$2 = param$0[3], env = param$0[2], e = param$0[1];
     if(typeof e === "number") return [0, 0, store$2];
     a:
     switch(e[0]){
       case 0:
        var x = e[1]; return [0, caml_call1(env, x), store$2];
       case 1:
        var n = e[1]; return [0, [1, n], store$2];
       case 2:
        var b = e[1]; return [0, [2, b], store$2];
       case 3:
        var
         e$0 = e[2],
         op = e[1],
         match$0 = interpret([0, e$0, env, store$2]),
         store$3 = match$0[2],
         v$1 = match$0[1];
        b:
        {
         switch(op){
           case 0:
            if(typeof v$1 !== "number" && 1 === v$1[0]){
             var m = v$1[1], _e_ = [1, - m | 0];
             break b;
            }
            break;
           case 1:
            if(typeof v$1 !== "number" && 2 === v$1[0]){
             var m$0 = v$1[1], _e_ = [2, 1 - m$0];
             break b;
            }
            break;
           default:
            if(typeof v$1 === "number"){
             caml_call1(Stdlib[42], cst_input);
             var _e_ = [1, caml_call1(Stdlib[57], 0)];
             break b;
            }
         }
         var
          _b_ = caml_call1(Slanglib_Ast[1], op),
          _e_ =
            caml_call1
             (complain,
              caml_call2(Stdlib[28], cst_malformed_unary_operator, _b_));
        }
        return [0, _e_, store$3];
       case 4:
        var
         e2 = e[3],
         op$0 = e[2],
         e1 = e[1],
         match$1 = interpret([0, e1, env, store$2]),
         store1 = match$1[2],
         v1 = match$1[1],
         match$2 = interpret([0, e2, env, store1]),
         store2 = match$2[2],
         v2 = match$2[1];
        return [0, do_oper([0, op$0, v1, v2]), store2];
       case 5:
        var
         e3 = e[3],
         e2$0 = e[2],
         e1$0 = e[1],
         match$3 = interpret([0, e1$0, env, store$2]),
         store$4 = match$3[2],
         v$2 = match$3[1];
        if(typeof v$2 !== "number" && 2 === v$2[0]){
         if(v$2[1]){param$0 = [0, e2$0, env, store$4]; break;}
         param$0 = [0, e3, env, store$4];
         break;
        }
        return caml_call1(complain, cst_runtime_error_Expecting_a_);
       case 6:
        var
         e2$1 = e[2],
         e1$1 = e[1],
         match$4 = interpret([0, e1$1, env, store$2]),
         store1$0 = match$4[2],
         v1$0 = match$4[1],
         match$5 = interpret([0, e2$1, env, store1$0]),
         store2$0 = match$5[2],
         v2$0 = match$5[1];
        return [0, [3, v1$0, v2$0], store2$0];
       case 7:
        var
         e$1 = e[1],
         match$6 = interpret([0, e$1, env, store$2]),
         match$7 = match$6[1];
        if(typeof match$7 !== "number" && 3 === match$7[0]){
         var store$5 = match$6[2], v1$1 = match$7[1];
         return [0, v1$1, store$5];
        }
        return caml_call1(complain, cst_runtime_error_Expecting_a_$0);
       case 8:
        var
         e$2 = e[1],
         match$8 = interpret([0, e$2, env, store$2]),
         match$9 = match$8[1];
        if(typeof match$9 !== "number" && 3 === match$9[0]){
         var store$6 = match$8[2], v2$1 = match$9[2];
         return [0, v2$1, store$6];
        }
        return caml_call1(complain, cst_runtime_error_Expecting_a_$1);
       case 9:
        var
         e$3 = e[1],
         match$10 = interpret([0, e$3, env, store$2]),
         store$7 = match$10[2],
         v$3 = match$10[1];
        return [0, [4, v$3], store$7];
       case 10:
        var
         e$4 = e[1],
         match$11 = interpret([0, e$4, env, store$2]),
         store$8 = match$11[2],
         v$4 = match$11[1];
        return [0, [5, v$4], store$8];
       case 11:
        var
         _f_ = e[3],
         e2$2 = _f_[2],
         x2 = _f_[1],
         match$12 = e[2],
         e1$2 = match$12[2],
         x1 = match$12[1],
         e$5 = e[1],
         match$13 = interpret([0, e$5, env, store$2]),
         store$9 = match$13[2],
         v$5 = match$13[1];
        if(typeof v$5 !== "number")
         switch(v$5[0]){
           case 4:
            var v$6 = v$5[1];
            let _s_ = [0, env, [0, x1, v$6]];
            param$0 =
             [0, e1$2, function(_u_){return update(_s_, _u_);}, store$9];
            break a;
           case 5:
            var v$7 = v$5[1];
            let _r_ = [0, env, [0, x2, v$7]];
            param$0 =
             [0, e2$2, function(_t_){return update(_r_, _t_);}, store$9];
            break a;
         }
        return caml_call1(complain, cst_runtime_error_Expecting_in);
       case 12:
        var
         e2$3 = e[2],
         e1$3 = e[1],
         match$14 = interpret([0, e1$3, env, store$2]),
         store$10 = match$14[2],
         v$8 = match$14[1];
        if(typeof v$8 !== "number" && 2 === v$8[0]){
         if(! v$8[1]) return [0, 0, store$10];
         param$0 = [0, [13, [0, e2$3, [0, e, 0]]], env, store$10];
         break;
        }
        return caml_call1(complain, cst_runtime_error_Expecting_a_$2);
       case 13:
        var _g_ = e[1];
        if(! _g_) return [0, 0, store$2];
        var e$6 = _g_[1];
        if(_g_[2]){
         var rest = _g_[2], store1$1 = interpret([0, e$6, env, store$2])[2];
         param$0 = [0, [13, rest], env, store1$1];
        }
        else
         param$0 = [0, e$6, env, store$2];
        break;
       case 14:
        var
         e$7 = e[1],
         param$1 = interpret([0, e$7, env, store$2]),
         store$0 = param$1[2],
         v = param$1[1],
         a$0 = next_address[1];
        next_address[1] = a$0 + 1 | 0;
        var _c_ = [0, store$0, [0, a$0, v]];
        return [0, [0, a$0], function(_q_){return update(_c_, _q_);}];
       case 15:
        var
         e$8 = e[1],
         param$2 = interpret([0, e$8, env, store$2]),
         match = param$2[1];
        if(typeof match !== "number" && 0 === match[0]){
         var store = param$2[2], a = match[1];
         return [0, caml_call1(store, a), store];
        }
        return caml_call1(complain, cst_deref_expecting_address);
       case 16:
        var
         e2$4 = e[2],
         e1$4 = e[1],
         match$15 = interpret([0, e1$4, env, store$2]),
         match$16 = match$15[1];
        if(typeof match$16 !== "number" && 0 === match$16[0]){
         var
          store$11 = match$15[2],
          a$1 = match$16[1],
          param$3 = interpret([0, e2$4, env, store$11]),
          store$1 = param$3[2],
          v$0 = param$3[1],
          _d_ = [0, store$1, [0, a$1, v$0]];
         return [0, 0, function(_p_){return update(_d_, _p_);}];
        }
        return caml_call1(complain, cst_runtime_error_expecting_an);
       case 17:
        var match$17 = e[1], e$9 = match$17[2], x$0 = match$17[1];
        return [0,
                [6,
                 function(param){
                  var s = param[2], v = param[1], _n_ = [0, env, [0, x$0, v]];
                  return interpret
                          ([0, e$9, function(_o_){return update(_n_, _o_);}, s]);
                 }],
                store$2];
       case 18:
        var
         e2$5 = e[2],
         e1$5 = e[1],
         match$18 = interpret([0, e2$5, env, store$2]),
         store1$2 = match$18[2],
         v2$2 = match$18[1],
         match$19 = interpret([0, e1$5, env, store1$2]),
         store2$1 = match$19[2],
         v1$2 = match$19[1];
        if(typeof v1$2 !== "number" && 6 === v1$2[0]){
         var f = v1$2[1];
         return caml_call1(f, [0, v2$2, store2$1]);
        }
        return caml_call1(complain, cst_runtime_error_Expecting_a_$3);
       case 19:
        var
         e$10 = e[3],
         match$20 = e[2],
         body = match$20[2],
         x$1 = match$20[1],
         f$0 = e[1];
        let
         env$1 = env,
         body$2 = body,
         x$4 = x$1,
         _h_ =
           [0,
            env,
            [0,
             f$0,
             [6,
              function(param){
               var s = param[2], v = param[1], _l_ = [0, env$1, [0, x$4, v]];
               return interpret
                       ([0, body$2, function(_m_){return update(_l_, _m_);}, s]);
              }]]];
        var new_env = function(_k_){return update(_h_, _k_);};
        param$0 = [0, e$10, new_env, store$2];
        break;
       default:
        var
         e$11 = e[3],
         match$21 = e[2],
         body$0 = match$21[2],
         x$2 = match$21[1],
         f$1 = e[1];
        let env$0 = env, body$1 = body$0, x$3 = x$2, f$2 = f$1;
        var
         new_env$0 =
           function(g){
            return g === f$2
                    ? [6,
                      function(param){
                       var
                        s = param[2],
                        v = param[1],
                        _i_ = [0, new_env$1, [0, x$3, v]];
                       return interpret
                               ([0, body$1, function(_j_){return update(_i_, _j_);}, s]);
                      }]
                    : caml_call1(env$0, g);
           };
        let new_env$1 = new_env$0;
        param$0 = [0, e$11, new_env$0, store$2];
     }
    }
   }
   function empty_env(x){
    return caml_call1(complain, caml_call2(Stdlib[28], x, cst_is_not_defined));
   }
   function empty_store(x){
    var _a_ = caml_call1(Stdlib[33], x);
    return caml_call1
            (complain, caml_call2(Stdlib[28], _a_, cst_is_not_allocated));
   }
   function interpret_top_level(e){
    var v = interpret([0, e, empty_env, empty_store])[1];
    return v;
   }
   var
    Slanglib_Interp_0 = [0, string_of_value, interpret, interpret_top_level];
   runtime.caml_register_global(27, Slanglib_Interp_0, "Slanglib__Interp_0");
   return;
  }
  (globalThis));

//# 9630 "../slang/.slanglib.objs/jsoo/default/slanglib.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "\n",
    cst_input$0 = "input",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$3,
    cst$2 = ":\n",
    cst = cst$3,
    cst$0 = " : ",
    Stdlib_lexing = global_data.Stdlib__lexing,
    Slanglib_Past_to_ast = global_data.Slanglib__Past_to_ast,
    Slanglib_Ast = global_data.Slanglib__Ast,
    Slanglib_Static = global_data.Slanglib__Static,
    Slanglib_Errors = global_data.Slanglib__Errors,
    Slanglib_Past = global_data.Slanglib__Past,
    Slanglib_Lexer = global_data.Slanglib__Lexer,
    Slanglib_Parser = global_data.Slanglib__Parser,
    Stdlib_parsing = global_data.Stdlib__parsing,
    Stdlib = global_data.Stdlib,
    Slanglib_Option = global_data.Slanglib__Option,
    Slanglib_Pptree = global_data.Slanglib__Pptree,
    cst_with = " with ",
    cst_ERROR_in = "\nERROR in ",
    cst_position = " position ",
    cst_at_line = "at line ",
    cst_parsing = "parsing",
    cst_can_t_open_file = "can't open file ",
    cst_initialize_lexer = "initialize lexer",
    cst_Parsed_result = "Parsed result",
    cst_static_check = "static check",
    cst_After_static_checks = "After static checks",
    cst_After_translation = "After translation",
    _a_ = [0, cst_input$0, 1, 0, 0],
    cst_input = cst_input$0,
    dummy = 0;
   function error(file, action, s){
    var
     _p_ = caml_call2(Stdlib[28], s, cst),
     _q_ = caml_call2(Stdlib[28], cst$0, _p_),
     _r_ = caml_call2(Stdlib[28], action, _q_),
     _s_ = caml_call2(Stdlib[28], cst_with, _r_),
     _t_ = caml_call2(Stdlib[28], file, _s_),
     _u_ = caml_call2(Stdlib[28], cst_ERROR_in, _t_);
    return caml_call1(Slanglib_Errors[2], _u_);
   }
   function peek(m, e, pp){
    if(! Slanglib_Option[3]) return;
    var
     _j_ = caml_call1(pp, e),
     _k_ = Slanglib_Option[4] ? Slanglib_Pptree[1] : function(x){return x;},
     _l_ = caml_call1(_k_, _j_),
     _m_ = caml_call2(Stdlib[28], _l_, cst$1),
     _n_ = caml_call2(Stdlib[28], cst$2, _m_),
     _o_ = caml_call2(Stdlib[28], m, _n_);
    return caml_call1(Stdlib[42], _o_);
   }
   function parse(param){
    var lexbuf = param[2], file = param[1];
    try{
     var
      _h_ = caml_call2(Slanglib_Parser[1], Slanglib_Lexer[3], lexbuf),
      e = _h_;
    }
    catch(_i_){
     var _g_ = caml_wrap_exception(_i_);
     if(_g_ !== Stdlib_parsing[10]) throw caml_maybe_attach_backtrace(_g_, 0);
     var
      pos = lexbuf[12],
      line = caml_call1(Stdlib[33], pos[2]),
      pos$0 = caml_call1(Stdlib[33], (pos[4] - pos[3] | 0) + 1 | 0),
      _e_ = caml_call2(Stdlib[28], cst_position, pos$0),
      _f_ = caml_call2(Stdlib[28], line, _e_),
      e = error(file, cst_parsing, caml_call2(Stdlib[28], cst_at_line, _f_));
    }
    peek(cst_Parsed_result, e, Slanglib_Past[6]);
    return [0, file, e];
   }
   function check(param){
    var e = param[2], file = param[1];
    try{var _d_ = caml_call2(Slanglib_Static[1], 0, e), match = _d_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Slanglib_Errors[1])
      throw caml_maybe_attach_backtrace(exn, 0);
     var s = exn[2], match = error(file, cst_static_check, s);
    }
    var e$0 = match[1];
    peek(cst_After_static_checks, e$0, Slanglib_Past[6]);
    return e$0;
   }
   function translate(e){
    var e$0 = caml_call1(Slanglib_Past_to_ast[1], e);
    peek(cst_After_translation, e$0, Slanglib_Ast[7]);
    return e$0;
   }
   function front_end(file){
    try{var _b_ = caml_call1(Stdlib[79], file), in_chan = _b_;}
    catch(_c_){
     var
      in_chan =
        error
         (file,
          cst_initialize_lexer,
          caml_call2(Stdlib[28], cst_can_t_open_file, file));
    }
    var lexbuf = caml_call2(Stdlib_lexing[2], 0, in_chan);
    lexbuf[12] = [0, file, 1, 0, 0];
    return translate(check(parse([0, file, lexbuf])));
   }
   function front_end_from_string(str){
    var lexbuf = caml_call2(Stdlib_lexing[3], 0, str);
    lexbuf[12] = _a_;
    return translate(check(parse([0, cst_input, lexbuf])));
   }
   var Slanglib_Front_end = [0, front_end, front_end_from_string];
   runtime.caml_register_global(29, Slanglib_Front_end, "Slanglib__Front_end");
   return;
  }
  (globalThis));

//# 17 "../.js/default/js_of_ocaml-compiler.runtime/jsoo_runtime.cma.js"
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_6_0_1 = "6.0.1",
    s = cst_6_0_1,
    git_version = cst_6_0_1,
    Jsoo_runtime_Runtime_version = [0, s, git_version];
   runtime.caml_register_global
    (2, Jsoo_runtime_Runtime_version, "Jsoo_runtime__Runtime_version");
   return;
  }
  (globalThis));

//# 33 "../.js/default/js_of_ocaml-compiler.runtime/jsoo_runtime.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Jsoo_runtime_Runtime_version = global_data.Jsoo_runtime__Runtime_version,
    Stdlib_callback = global_data.Stdlib__callback,
    Js = [0],
    _a_ = [0, "lib/runtime/jsoo_runtime.ml", 143, 13];
   function effects(param){
    var match = runtime.caml_jsoo_flags_effects(0);
    if(match === "cps") return 3356934;
    if(match === "disabled") return -709493348;
    if(match !== "double-translation")
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    return -766114909;
   }
   var
    Config = [0, effects],
    version = Jsoo_runtime_Runtime_version[1],
    git_version = Jsoo_runtime_Runtime_version[2],
    Sys = [0, Config, version, git_version],
    Exn = [248, "Jsoo_runtime.Error.Exn", runtime.caml_fresh_oo_id(0)];
   caml_call2(Stdlib_callback[2], "jsError", [0, Exn, [0]]);
   function raise(exn){throw exn;}
   var
    Error =
      [0,
       raise,
       runtime.caml_exn_with_js_backtrace,
       runtime.caml_js_error_option_of_exception,
       Exn],
    For_compatibility_only = [0],
    Bigstring = [0],
    Typed_array = [0, Bigstring],
    Int64 = [0],
    Effect = [0],
    Jsoo_runtime =
      [0, Js, Sys, Error, For_compatibility_only, Typed_array, Int64, Effect];
   runtime.caml_register_global(10, Jsoo_runtime, "Jsoo_runtime");
   return;
  }
  (globalThis));

//# 18 "../.js/default/js_of_ocaml/js_of_ocaml.cma.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_string = global_data.Stdlib__string,
    Stdlib_char = global_data.Stdlib__char,
    Poly = [0];
   function max(x, y){return y <= x ? x : y;}
   function min(x, y){return x <= y ? x : y;}
   var
    Int_replace_polymorphic_compar = [0, max, min],
    make = Stdlib_string[1],
    init = Stdlib_string[2],
    concat = Stdlib_string[3],
    compare = Stdlib_string[5],
    contains_from = Stdlib_string[6],
    rcontains_from = Stdlib_string[7],
    contains = Stdlib_string[8],
    sub = Stdlib_string[9],
    split_on_char = Stdlib_string[10],
    map = Stdlib_string[11],
    mapi = Stdlib_string[12],
    trim = Stdlib_string[13],
    escaped = Stdlib_string[14],
    uppercase_ascii = Stdlib_string[15],
    lowercase_ascii = Stdlib_string[16],
    capitalize_ascii = Stdlib_string[17],
    uncapitalize_ascii = Stdlib_string[18],
    iter = Stdlib_string[19],
    iteri = Stdlib_string[20],
    index_from = Stdlib_string[21],
    index_from_opt = Stdlib_string[22],
    rindex_from = Stdlib_string[23],
    rindex_from_opt = Stdlib_string[24],
    index = Stdlib_string[25],
    index_opt = Stdlib_string[26],
    rindex = Stdlib_string[27],
    rindex_opt = Stdlib_string[28],
    to_seq = Stdlib_string[29],
    to_seqi = Stdlib_string[30],
    of_seq = Stdlib_string[31],
    blit = Stdlib_string[32],
    copy = Stdlib_string[33],
    fill = Stdlib_string[34],
    uppercase = Stdlib_string[35],
    lowercase = Stdlib_string[36],
    capitalize = Stdlib_string[37],
    uncapitalize = Stdlib_string[38],
    equal = runtime.caml_string_equal,
    String =
      [0,
       make,
       init,
       concat,
       compare,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       blit,
       copy,
       fill,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       equal],
    chr = Stdlib_char[1],
    escaped$0 = Stdlib_char[2],
    lowercase$0 = Stdlib_char[3],
    uppercase$0 = Stdlib_char[4],
    lowercase_ascii$0 = Stdlib_char[5],
    uppercase_ascii$0 = Stdlib_char[6],
    compare$0 = Stdlib_char[7];
   function equal$0(x, y){return x === y ? 1 : 0;}
   var
    Char =
      [0,
       chr,
       escaped$0,
       lowercase$0,
       uppercase$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$0,
       equal$0],
    max$0 = Int_replace_polymorphic_compar[1],
    min$0 = Int_replace_polymorphic_compar[2],
    Js_of_ocaml_Import =
      [0, Poly, Int_replace_polymorphic_compar, String, Char, max$0, min$0];
   runtime.caml_register_global(2, Js_of_ocaml_Import, "Js_of_ocaml__Import");
   return;
  }
  (globalThis));

//# 139 "../.js/default/js_of_ocaml/js_of_ocaml.cma.js"
(function
  (globalThis){
   "use strict";
   var
    jsoo_exports = typeof module === "object" && module.exports || globalThis,
    runtime = globalThis.jsoo_runtime,
    cst_parseFloat$0 = "parseFloat",
    cst_parseInt$0 = "parseInt",
    caml_js_get = runtime.caml_js_get,
    caml_js_set = runtime.caml_js_set,
    caml_js_wrap_callback = runtime.caml_js_wrap_callback,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Import = global_data.Js_of_ocaml__Import,
    Stdlib = global_data.Stdlib,
    Jsoo_runtime = global_data.Jsoo_runtime,
    Stdlib_printexc = global_data.Stdlib__printexc,
    global = globalThis,
    Unsafe = [0, global],
    null$0 = null,
    undefined$0 = undefined;
   function return$0(_p_){return _p_;}
   function map(x, f){return x == null$0 ? null$0 : caml_call1(f, x);}
   function bind(x, f){return x == null$0 ? null$0 : caml_call1(f, x);}
   function test(x){return 1 - (x == null$0 ? 1 : 0);}
   function iter(x, f){
    var _o_ = 1 - (x == null$0 ? 1 : 0);
    return _o_ ? caml_call1(f, x) : _o_;
   }
   function case$0(x, f, g){
    return x == null$0 ? caml_call1(f, 0) : caml_call1(g, x);
   }
   function get(x, f){return x == null$0 ? caml_call1(f, 0) : x;}
   function option(x){if(! x) return null$0; var x$0 = x[1]; return x$0;}
   function to_option(x){return x == null$0 ? 0 : [0, x];}
   var
    Opt =
      [0,
       null$0,
       return$0,
       map,
       bind,
       test,
       iter,
       case$0,
       get,
       option,
       to_option];
   function return$1(_n_){return _n_;}
   function map$0(x, f){
    return x === undefined$0 ? undefined$0 : caml_call1(f, x);
   }
   function bind$0(x, f){
    return x === undefined$0 ? undefined$0 : caml_call1(f, x);
   }
   function test$0(x){return 1 - (x === undefined$0 ? 1 : 0);}
   function iter$0(x, f){
    var _m_ = 1 - (x === undefined$0 ? 1 : 0);
    return _m_ ? caml_call1(f, x) : _m_;
   }
   function case$1(x, f, g){
    return x === undefined$0 ? caml_call1(f, 0) : caml_call1(g, x);
   }
   function get$0(x, f){return x === undefined$0 ? caml_call1(f, 0) : x;}
   function option$0(x){
    if(! x) return undefined$0;
    var x$0 = x[1];
    return x$0;
   }
   function to_option$0(x){return x === undefined$0 ? 0 : [0, x];}
   var
    Optdef =
      [0,
       undefined$0,
       return$1,
       map$0,
       bind$0,
       test$0,
       iter$0,
       case$1,
       get$0,
       option$0,
       to_option$0];
   function coerce(x, f, g){
    var _l_ = caml_call1(f, x);
    return caml_call2(Opt[8], _l_, function(param){return caml_call1(g, x);});
   }
   function coerce_opt(x, f, g){
    var _k_ = caml_call2(Opt[4], x, f);
    return caml_call2(Opt[8], _k_, function(param){return caml_call1(g, x);});
   }
   var
    true$0 = true,
    false$0 = false,
    nfc = "NFC",
    nfd = "NFD",
    nfkc = "NFKC",
    nfkd = "NFKD",
    t0 = Unsafe[1],
    string_constr = t0.String,
    t1 = Unsafe[1],
    regExp = t1.RegExp,
    t2 = Unsafe[1],
    object_constructor = t2.Object;
   function object_keys(t3){return object_constructor.keys(t3);}
   var
    t5 = Unsafe[1],
    array_constructor = t5.Array,
    array_get = caml_js_get,
    array_set = caml_js_set;
   function array_map(f, t7){
    var
     cb =
       caml_js_wrap_callback
        (function(x, idx, param){return caml_call1(f, x);});
    return t7.map(cb);
   }
   function array_mapi(f, t7){
    var
     cb =
       caml_js_wrap_callback
        (function(x, idx, param){return caml_call2(f, idx, x);});
    return t7.map(cb);
   }
   function str_array(_j_){return _j_;}
   function match_result(_i_){return _i_;}
   var
    t8 = Unsafe[1],
    date_constr = t8.Date,
    t9 = Unsafe[1],
    math = t9.Math,
    t10 = Unsafe[1],
    error_constr = t10.Error,
    include = Jsoo_runtime[3],
    raise = include[1],
    exn_with_js_backtrace = include[2],
    of_exn = include[3],
    Error = include[4];
   function name(t11){return caml_string_of_jsstring(t11.name);}
   function message(t12){return caml_string_of_jsstring(t12.message);}
   function stack(t13){
    var _h_ = caml_call2(Opt[3], t13.stack, caml_string_of_jsstring);
    return caml_call1(Opt[10], _h_);
   }
   function to_string(t14){return caml_string_of_jsstring(t14.toString());}
   function raise_js_error(e){return caml_call1(raise, e);}
   function string_of_error(e){return to_string(e);}
   var
    t15 = Unsafe[1],
    JSON = t15.JSON,
    cst_parseInt = cst_parseInt$0,
    cst_parseFloat = cst_parseFloat$0;
   function decodeURI(s){var t16 = Unsafe[1]; return t16.decodeURI(s);}
   function decodeURIComponent(s){
    var t17 = Unsafe[1];
    return t17.decodeURIComponent(s);
   }
   function encodeURI(s){var t18 = Unsafe[1]; return t18.encodeURI(s);}
   function encodeURIComponent(s){
    var t19 = Unsafe[1];
    return t19.encodeURIComponent(s);
   }
   function escape(s){var t20 = Unsafe[1]; return t20.escape(s);}
   function unescape(s){var t21 = Unsafe[1]; return t21.unescape(s);}
   function isNaN(i){var t22 = Unsafe[1]; return t22.isNaN(i) | 0;}
   function parseInt(s){
    var t23 = Unsafe[1], s$0 = t23.parseInt(s);
    return isNaN(s$0) ? caml_call1(Stdlib[2], cst_parseInt) : s$0;
   }
   function parseFloat(s){
    var t24 = Unsafe[1], s$0 = t24.parseFloat(s);
    return isNaN(s$0) ? caml_call1(Stdlib[2], cst_parseFloat) : s$0;
   }
   caml_call1
    (Stdlib_printexc[9],
     function(e){
      if(e instanceof error_constr) return [0, to_string(e)];
      if(e[1] !== Error) return 0;
      var e$0 = e[2];
      return [0, to_string(e$0)];
     });
   var cst_function = "function";
   function export_js(field, x){
    var _f_ = caml_string_of_jsstring(typeof x);
    a:
    {
     if
      (caml_call2(Js_of_ocaml_Import[3][38], _f_, cst_function)
       && 0 < x.length){
      var _g_ = caml_js_wrap_callback(x);
      break a;
     }
     var _g_ = x;
    }
    return jsoo_exports[field] = _g_;
   }
   function export$0(field, x){
    return export_js(runtime.caml_jsstring_of_string(field), x);
   }
   function export_all(obj){
    var
     keys = object_constructor.keys(obj),
     t25 =
       caml_js_wrap_callback
        (function(key, param, _e_){return export_js(key, obj[key]);});
    return keys.forEach(t25);
   }
   var
    Js_of_ocaml_Js =
      [0,
       null$0,
       function(_d_){return _d_;},
       undefined$0,
       function(_c_){return _c_;},
       Opt,
       Optdef,
       true$0,
       false$0,
       nfd,
       nfc,
       nfkd,
       nfkc,
       string_constr,
       regExp,
       regExp,
       regExp,
       object_keys,
       array_constructor,
       array_constructor,
       array_get,
       array_set,
       array_map,
       array_mapi,
       str_array,
       match_result,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       math,
       error_constr,
       [0,
        to_string,
        name,
        message,
        stack,
        raise,
        exn_with_js_backtrace,
        of_exn,
        Error,
        function(_b_){return _b_;},
        function(_a_){return _a_;}],
       JSON,
       decodeURI,
       decodeURIComponent,
       encodeURI,
       encodeURIComponent,
       escape,
       unescape,
       isNaN,
       parseInt,
       parseFloat,
       coerce,
       coerce_opt,
       export$0,
       export_all,
       Unsafe,
       string_of_error,
       raise_js_error,
       exn_with_js_backtrace,
       runtime.caml_js_error_of_exception,
       Error];
   runtime.caml_register_global(42, Js_of_ocaml_Js, "Js_of_ocaml__Js");
   return;
  }
  (globalThis));

//# 4 ".export.eobjs/jsoo/dune__exe.cmo.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dune_exe = [0];
   runtime.caml_register_global(0, Dune_exe, "Dune__exe");
   return;
  }
  (globalThis));

//# 5 ".export.eobjs/jsoo/dune__exe__Interp2.cmo.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = ")",
    cst$6 = "[",
    cst$5 = "]";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$5,
    cst$0 = cst$6,
    cst$1 = cst$5,
    cst$2 = cst$6,
    cst$3 = ", ",
    cst$4 = "\t",
    Slanglib_Interp_2 = global_data.Slanglib__Interp_2,
    Stdlib = global_data.Stdlib,
    Stdlib_list = global_data.Stdlib__list,
    Slanglib_Ast = global_data.Slanglib__Ast,
    Stdlib_seq = global_data.Stdlib__seq,
    _a_ = [0, "[]", 0],
    _b_ = [0, "ASSIGN", 0],
    _c_ = [0, "SWAP", 0],
    _d_ = [0, "POP", 0],
    _e_ = [0, "FST", 0],
    _f_ = [0, "SND", 0],
    _g_ = [0, "DEREF", 0],
    _h_ = [0, "APPLY", 0],
    _i_ = [0, "MK_PAIR", 0],
    _j_ = [0, "MK_INL", 0],
    _k_ = [0, "MK_INR", 0],
    _l_ = [0, "MK_REF", 0],
    cst_PUSH = "PUSH ",
    cst_LOOKUP = "LOOKUP ",
    cst_UNARY = "UNARY ",
    cst_OPER = "OPER ",
    cst_BIND = "BIND ",
    _m_ = [0, cst$7, 0],
    cst_MK_CLOSURE = "MK_CLOSURE(",
    _n_ = [0, cst$7, 0],
    cst_MK_REC = "MK_REC(",
    _o_ = [0, cst$7, 0],
    cst_TEST = "TEST(",
    _p_ = [0, cst$7, 0],
    cst_CASE = "CASE(",
    _q_ = [0, cst$7, 0],
    cst_WHILE = "WHILE(";
   function driver(state){
    return state[1]
            ? [0, state, driver(caml_call1(Slanglib_Interp_2[4], state))]
            : [0, state, 0];
   }
   function steps(e){
    var c = caml_call1(Slanglib_Interp_2[5], e);
    return driver([0, c, Slanglib_Interp_2[3], Slanglib_Interp_2[2]]);
   }
   function string_list_of_heap(param){
    var
     heap = param[1],
     _M_ = caml_call1(Slanglib_Interp_2[1][36], heap),
     _N_ =
       caml_call2
        (Stdlib_seq[5], function(param){var v = param[2]; return v;}, _M_),
     _O_ = caml_call1(Stdlib_list[62], _N_);
    return caml_call2(Stdlib_list[19], Slanglib_Interp_2[9], _O_);
   }
   function string_lists_of_steps(steps){
    return caml_call2
            (Stdlib_list[19],
             function(param){
              var
               s = param[3],
               env = param[2],
               code = param[1],
               _L_ = string_list_of_heap(s),
               _K_ = caml_call2(Stdlib_list[19], Slanglib_Interp_2[10], env);
              return [0,
                      caml_call2(Stdlib_list[19], Slanglib_Interp_2[8], code),
                      _K_,
                      _L_];
             },
             steps);
   }
   function string_list_of_code(c){
    var
     _I_ = caml_call2(Stdlib_list[19], string_list_of_instruction, c),
     match = caml_call1(Stdlib_list[14], _I_);
    if(! match) return _a_;
    var s = match[1];
    if(match[2]){
     var
      t = match[2],
      length = caml_call1(Stdlib_list[1], t) - 1 | 0,
      _H_ =
        caml_call2
         (Stdlib_list[20],
          function(i, x){
           return length === i ? caml_call2(Stdlib[28], x, cst) : x;
          },
          t);
     return [0, caml_call2(Stdlib[28], cst$0, s), _H_];
    }
    var _J_ = caml_call2(Stdlib[28], s, cst$1);
    return [0, caml_call2(Stdlib[28], cst$2, _J_), 0];
   }
   function string_list_of_instruction(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _b_;
       case 1:
        return _c_;
       case 2:
        return _d_;
       case 3:
        return _e_;
       case 4:
        return _f_;
       case 5:
        return _g_;
       case 6:
        return _h_;
       case 7:
        return _i_;
       case 8:
        return _j_;
       case 9:
        return _k_;
       default: return _l_;
     }
    switch(param[0]){
      case 0:
       var v = param[1], _r_ = caml_call1(Slanglib_Interp_2[9], v);
       return [0, caml_call2(Stdlib[28], cst_PUSH, _r_), 0];
      case 1:
       var x = param[1]; return [0, caml_call2(Stdlib[28], cst_LOOKUP, x), 0];
      case 2:
       var op = param[1], _s_ = caml_call1(Slanglib_Ast[3], op);
       return [0, caml_call2(Stdlib[28], cst_UNARY, _s_), 0];
      case 3:
       var op$0 = param[1], _t_ = caml_call1(Slanglib_Ast[4], op$0);
       return [0, caml_call2(Stdlib[28], cst_OPER, _t_), 0];
      case 4:
       var x$0 = param[1];
       return [0, caml_call2(Stdlib[28], cst_BIND, x$0), 0];
      case 5:
       var
        c = param[1],
        _u_ = [0, cst_MK_CLOSURE, tab(string_list_of_code(c))];
       return caml_call2(Stdlib[37], _u_, _m_);
      case 6:
       var
        c$0 = param[2],
        f = param[1],
        _v_ = tab(string_list_of_code(c$0)),
        _w_ = caml_call2(Stdlib[28], f, cst$3),
        _x_ = [0, caml_call2(Stdlib[28], cst_MK_REC, _w_), _v_];
       return caml_call2(Stdlib[37], _x_, _n_);
      case 7:
       var
        c2 = param[2],
        c1 = param[1],
        _y_ = tab(string_list_of_code(c2)),
        _z_ = caml_call2(Stdlib[37], _y_, _o_),
        _A_ = [0, cst_TEST, tab(string_list_of_code(c1))];
       return caml_call2(Stdlib[37], _A_, _z_);
      case 8:
       var
        c2$0 = param[2],
        c1$0 = param[1],
        _B_ = tab(string_list_of_code(c2$0)),
        _C_ = caml_call2(Stdlib[37], _B_, _p_),
        _D_ = [0, cst_CASE, tab(string_list_of_code(c1$0))];
       return caml_call2(Stdlib[37], _D_, _C_);
      default:
       var
        c2$1 = param[2],
        c1$1 = param[1],
        _E_ = tab(string_list_of_code(c2$1)),
        _F_ = caml_call2(Stdlib[37], _E_, _q_),
        _G_ = [0, cst_WHILE, tab(string_list_of_code(c1$1))];
       return caml_call2(Stdlib[37], _G_, _F_);
    }
   }
   function tab(ss){
    return caml_call2
            (Stdlib_list[19],
             function(s){return caml_call2(Stdlib[28], cst$4, s);},
             ss);
   }
   var
    Dune_exe_Interp2 =
      [0,
       steps,
       string_list_of_heap,
       string_lists_of_steps,
       string_list_of_instruction,
       string_list_of_code];
   runtime.caml_register_global(38, Dune_exe_Interp2, "Dune__exe__Interp2");
   return;
  }
  (globalThis));

//# 5 ".export.eobjs/jsoo/dune__exe__Interp3.cmo.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$2 = ")";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$2,
    cst$0 = cst$2,
    cst$1 = ", ",
    Slanglib_Interp_3 = global_data.Slanglib__Interp_3,
    Stdlib_list = global_data.Stdlib__list,
    Stdlib = global_data.Stdlib,
    Slanglib_Ast = global_data.Slanglib__Ast,
    Stdlib_array = global_data.Stdlib__array,
    _a_ = [0, 0, 0],
    _b_ = [0, "ASSIGN", 0],
    _c_ = [0, "SWAP", 0],
    _d_ = [0, "POP", 0],
    _e_ = [0, "FST", 0],
    _f_ = [0, "SND", 0],
    _g_ = [0, "DEREF", 0],
    _h_ = [0, "APPLY", 0],
    _i_ = [0, "RETURN", 0],
    _j_ = [0, "MK_PAIR", 0],
    _k_ = [0, "MK_INL", 0],
    _l_ = [0, "MK_INR", 0],
    _m_ = [0, "MK_REF", 0],
    _n_ = [0, "HALT", 0],
    cst_PUSH = "PUSH ",
    cst_LOOKUP = "LOOKUP ",
    cst_UNARY = "UNARY ",
    cst_OPER = "OPER ",
    cst_BIND = "BIND ",
    cst_MK_CLOSURE = "MK_CLOSURE(",
    cst_MK_REC = "MK_REC(",
    cst_TEST = "TEST ",
    cst_CASE = "CASE ",
    cst_GOTO = "GOTO ",
    cst_LABEL = "LABEL ";
   function string_state(param){
    var
     heap_list = param[3],
     evs = param[2],
     cp = param[1],
     _F_ = caml_call2(Stdlib_list[19], Slanglib_Interp_3[16], heap_list);
    return [0,
            cp,
            caml_call2(Stdlib_list[19], Slanglib_Interp_3[17], evs),
            _F_];
   }
   function list_of_heap(param){
    var
     _E_ =
       caml_call3
        (Stdlib_array[7], Slanglib_Interp_3[5], 0, Slanglib_Interp_3[6][1]);
    return caml_call1(Stdlib_array[11], _E_);
   }
   function driver(n, param){
    var
     env = param[2],
     cp = param[1],
     heapl = list_of_heap(0),
     _D_ =
       12 === caml_call1(Slanglib_Interp_3[8], cp)
        ? 0
        : driver(n + 1 | 0, caml_call1(Slanglib_Interp_3[3], [0, cp, env]));
    return [0, [0, cp, env, heapl], _D_];
   }
   function stacks(e){
    var
     c = caml_call1(Slanglib_Interp_3[4], e),
     _B_ = caml_call1(Slanglib_Interp_3[2], c);
    Slanglib_Interp_3[1][1] = _B_;
    var
     installed_code = caml_call1(Slanglib_Interp_3[18], 0),
     _C_ = driver(1, _a_);
    return [0, installed_code, caml_call2(Stdlib_list[19], string_state, _C_)];
   }
   function string_list_of_instruction(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _b_;
       case 1:
        return _c_;
       case 2:
        return _d_;
       case 3:
        return _e_;
       case 4:
        return _f_;
       case 5:
        return _g_;
       case 6:
        return _h_;
       case 7:
        return _i_;
       case 8:
        return _j_;
       case 9:
        return _k_;
       case 10:
        return _l_;
       case 11:
        return _m_;
       default: return _n_;
     }
    switch(param[0]){
      case 0:
       var v = param[1], _p_ = caml_call1(Slanglib_Interp_3[16], v);
       return [0, caml_call2(Stdlib[28], cst_PUSH, _p_), 0];
      case 1:
       var x = param[1]; return [0, caml_call2(Stdlib[28], cst_LOOKUP, x), 0];
      case 2:
       var op = param[1], _q_ = caml_call1(Slanglib_Ast[3], op);
       return [0, caml_call2(Stdlib[28], cst_UNARY, _q_), 0];
      case 3:
       var op$0 = param[1], _r_ = caml_call1(Slanglib_Ast[4], op$0);
       return [0, caml_call2(Stdlib[28], cst_OPER, _r_), 0];
      case 4:
       var x$0 = param[1];
       return [0, caml_call2(Stdlib[28], cst_BIND, x$0), 0];
      case 5:
       var
        loc = param[1],
        _s_ = caml_call1(Slanglib_Interp_3[19], loc),
        _t_ = caml_call2(Stdlib[28], _s_, cst);
       return [0, caml_call2(Stdlib[28], cst_MK_CLOSURE, _t_), 0];
      case 6:
       var
        loc$0 = param[2],
        v$0 = param[1],
        _u_ = caml_call1(Slanglib_Interp_3[19], loc$0),
        _v_ = caml_call2(Stdlib[28], _u_, cst$0),
        _w_ = caml_call2(Stdlib[28], cst$1, _v_),
        _x_ = caml_call2(Stdlib[28], v$0, _w_);
       return [0, caml_call2(Stdlib[28], cst_MK_REC, _x_), 0];
      case 7:
       var label = param[1], _y_ = caml_call1(Slanglib_Interp_3[19], label);
       return [0, caml_call2(Stdlib[28], cst_TEST, _y_), 0];
      case 8:
       var
        label$0 = param[1],
        _z_ = caml_call1(Slanglib_Interp_3[19], label$0);
       return [0, caml_call2(Stdlib[28], cst_CASE, _z_), 0];
      case 9:
       var
        label$1 = param[1],
        _A_ = caml_call1(Slanglib_Interp_3[19], label$1);
       return [0, caml_call2(Stdlib[28], cst_GOTO, _A_), 0];
      default:
       var label$2 = param[1];
       return [0, caml_call2(Stdlib[28], cst_LABEL, label$2), 0];
    }
   }
   function string_list_of_code(c){
    var _o_ = caml_call2(Stdlib_list[19], string_list_of_instruction, c);
    return caml_call1(Stdlib_list[14], _o_);
   }
   var
    Dune_exe_Interp3 =
      [0,
       string_state,
       list_of_heap,
       driver,
       stacks,
       string_list_of_instruction,
       string_list_of_code];
   runtime.caml_register_global(33, Dune_exe_Interp3, "Dune__exe__Interp3");
   return;
  }
  (globalThis));

//# 5 ".export.eobjs/jsoo/dune__exe__JargonSteps.cmo.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst_BLOCK = "BLOCK",
    cst_H_BOOL = "H_BOOL",
    cst_H_CI = "H_CI",
    cst_H_HEADER = "H_HEADER",
    cst_H_HI = "H_HI",
    cst_H_INT = "H_INT",
    cst_H_UNIT = "H_UNIT",
    cst_JargonSteps_edge = "JargonSteps.edge",
    cst_JargonSteps_edge_label = "JargonSteps.edge.label",
    cst_JargonSteps_edge_source = "JargonSteps.edge.source",
    cst_JargonSteps_edge_target = "JargonSteps.edge.target",
    cst_JargonSteps_graph = "JargonSteps.graph",
    cst_JargonSteps_node = "JargonSteps.node",
    cst_JargonSteps_node_id = "JargonSteps.node.id",
    cst_JargonSteps_node_label = "JargonSteps.node.label",
    cst_JargonSteps_node_parent = "JargonSteps.node.parent",
    cst_JargonSteps_node_pointer = "JargonSteps.node.pointer",
    cst_JargonSteps_ret = "JargonSteps.ret",
    cst_JargonSteps_ret_cp = "JargonSteps.ret.cp",
    cst_JargonSteps_ret_fp = "JargonSteps.ret.fp",
    cst_JargonSteps_ret_heap = "JargonSteps.ret.heap",
    cst_JargonSteps_ret_hp = "JargonSteps.ret.hp",
    cst_JargonSteps_ret_sp = "JargonSteps.ret.sp",
    cst_JargonSteps_ret_stack = "JargonSteps.ret.stack",
    cst_JargonSteps_ret_status = "JargonSteps.ret.status",
    cst_POINTER = "POINTER",
    cst_cp$0 = "cp",
    cst_fp$0 = "fp",
    cst_heap$0 = "heap",
    cst_heap_graph$0 = "heap_graph",
    cst_hp$0 = "hp",
    cst_id$0 = "id",
    cst_label$1 = "label",
    cst_parent$0 = "parent",
    cst_pointer$0 = "pointer",
    cst_source$0 = "source",
    cst_sp$0 = "sp",
    cst_stack$0 = "stack",
    cst_status$0 = "status",
    cst_target$0 = "target",
    cst_tp$1 = "tp",
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$4 = cst$7,
    cst$3 = cst$7,
    cst$5 = ")",
    cst$6 = ", ",
    state$1 =
      [0,
       [1, cst_JargonSteps_ret_stack],
       [1, cst_JargonSteps_ret_heap],
       [1, "JargonSteps.ret.heap_graph"],
       [1, cst_JargonSteps_ret_sp],
       [1, cst_JargonSteps_ret_fp],
       [1, cst_JargonSteps_ret_cp],
       [1, cst_JargonSteps_ret_hp],
       [1, cst_JargonSteps_ret_status]],
    cst$2 = "()",
    cst$0 = " ]",
    cst$1 = "[ ",
    cst = cst$7,
    state$0 =
      [0,
       [1, cst_JargonSteps_edge_source],
       [1, cst_JargonSteps_edge_target],
       [1, cst_JargonSteps_edge_label],
       [1, "JargonSteps.edge.tp"]],
    state =
      [0,
       [1, cst_JargonSteps_node_id],
       [1, cst_JargonSteps_node_label],
       [1, cst_JargonSteps_node_parent],
       [1, "JargonSteps.node.tp"],
       [1, cst_JargonSteps_node_pointer]],
    Stdlib = global_data.Stdlib,
    Slanglib_Jargon = global_data.Slanglib__Jargon,
    Slanglib_Ast = global_data.Slanglib__Ast,
    Stdlib_array = global_data.Stdlib__array,
    Stdlib_list = global_data.Stdlib__list,
    Ppx_deriving_yojson_runtime = global_data.Ppx_deriving_yojson_runtime,
    _a_ = [0, 848054398, [0, [0, -976970511, cst_H_INT], 0]],
    _b_ = [0, 848054398, [0, [0, -976970511, cst_H_BOOL], 0]],
    _c_ = [0, 848054398, [0, [0, -976970511, cst_H_UNIT], 0]],
    _d_ = [0, 848054398, [0, [0, -976970511, cst_H_CI], 0]],
    _e_ = [0, 848054398, [0, [0, -976970511, cst_H_HI], 0]],
    _f_ = [0, 848054398, [0, [0, -976970511, cst_H_HEADER], 0]],
    _g_ = [1, "JargonSteps.node_tp"],
    _h_ = [0, 2],
    _i_ = [0, 0],
    _j_ = [0, 4],
    _k_ = [0, 5],
    _l_ = [0, 3],
    _m_ = [0, 1],
    _n_ = [0, 848054398, [0, [0, -976970511, cst_POINTER], 0]],
    _o_ = [0, 848054398, [0, [0, -976970511, cst_BLOCK], 0]],
    _p_ = [1, "JargonSteps.arrow_tp"],
    _q_ = [0, 1],
    _r_ = [0, 0];
   function node_tp_to_yojson(param){
    switch(param){
      case 0:
       return _a_;
      case 1:
       return _b_;
      case 2:
       return _c_;
      case 3:
       return _d_;
      case 4:
       return _e_;
      default: return _f_;
    }
   }
   function node_tp_of_yojson(param){
    if(typeof param !== "number" && 848054398 === param[1]){
     var _bo_ = param[2];
     if(_bo_){
      var _bp_ = _bo_[1];
      if(typeof _bp_ !== "number" && -976970511 === _bp_[1]){
       var _bq_ = _bp_[2];
       if(_bq_ !== cst_H_BOOL){
        if(_bq_ !== cst_H_CI){
         if(_bq_ !== cst_H_HEADER){
          if(_bq_ !== cst_H_HI){
           if(_bq_ !== cst_H_INT){
            if(_bq_ === cst_H_UNIT && ! _bo_[2]) return _h_;
           }
           else if(! _bo_[2]) return _i_;
          }
          else if(! _bo_[2]) return _j_;
         }
         else if(! _bo_[2]) return _k_;
        }
        else if(! _bo_[2]) return _l_;
       }
       else if(! _bo_[2]) return _m_;
      }
     }
    }
    return _g_;
   }
   function arrow_tp_to_yojson(param){return param ? _n_ : _o_;}
   function arrow_tp_of_yojson(param){
    if(typeof param !== "number" && 848054398 === param[1]){
     var _bl_ = param[2];
     if(_bl_){
      var _bm_ = _bl_[1];
      if(typeof _bm_ !== "number" && -976970511 === _bm_[1]){
       var _bn_ = _bm_[2];
       if(_bn_ !== cst_BLOCK){
        if(_bn_ === cst_POINTER && ! _bl_[2]) return _q_;
       }
       else if(! _bl_[2]) return _r_;
      }
     }
    }
    return _p_;
   }
   var
    node_to_yojson = function _bk_(_bj_){return _bk_.fun(_bj_);},
    node_of_yojson = function _bi_(_bh_){return _bi_.fun(_bh_);},
    cst_pointer = cst_pointer$0,
    cst_tp = cst_tp$1,
    cst_parent = cst_parent$0,
    cst_label = cst_label$1,
    cst_id = cst_id$0;
   caml_update_dummy
    (node_to_yojson,
     function(x){
      var param = x[5], fields = 0;
      if(param)
       var x$0 = param[1], _bg_ = [0, 3654863, x$0];
      else
       var _bg_ = 870828711;
      var
       fields$0 = [0, [0, cst_pointer, _bg_], fields],
       x$1 = x[4],
       fields$1 = [0, [0, cst_tp, node_tp_to_yojson(x$1)], fields$0],
       x$2 = x[3],
       fields$2 = [0, [0, cst_parent, [0, -976970511, x$2]], fields$1],
       x$3 = x[2],
       fields$3 = [0, [0, cst_label, [0, -976970511, x$3]], fields$2],
       x$4 = x[1],
       fields$4 = [0, [0, cst_id, [0, -976970511, x$4]], fields$3];
      return [0, 963043957, fields$4];
     });
   var
    _s_ = [1, cst_JargonSteps_node],
    _t_ = [1, cst_JargonSteps_node],
    _u_ = [0, 0],
    _v_ = [1, cst_JargonSteps_node_pointer],
    _w_ = [1, cst_JargonSteps_node_parent],
    _x_ = [1, cst_JargonSteps_node_label],
    _y_ = [1, cst_JargonSteps_node_id];
   caml_update_dummy
    (node_of_yojson,
     function(param){
      if(typeof param !== "number" && 963043957 === param[1]){
       var xs = param[2], xs$0 = xs, state$0 = state;
       for(;;){
        var
         arg4 = state$0[5],
         arg3 = state$0[4],
         arg2 = state$0[3],
         arg1 = state$0[2],
         arg0 = state$0[1];
        if(! xs$0) break;
        var _a__ = xs$0[1], _a$_ = _a__[1];
        if(_a$_ !== cst_id$0)
         if(_a$_ !== cst_label$1)
          if(_a$_ !== cst_parent$0)
           if(_a$_ !== cst_pointer$0){
            if(_a$_ !== cst_tp$1) return _t_;
            var
             xs$1 = xs$0[2],
             x = _a__[2],
             state$1 = [0, arg0, arg1, arg2, node_tp_of_yojson(x), arg4];
            xs$0 = xs$1;
            state$0 = state$1;
           }
           else{
            var xs$2 = xs$0[2], x$0 = _a__[2];
            if(870828711 === x$0)
             var _bc_ = _u_;
            else{
             a:
             {
              var _ba_ = function(x){return [0, [0, x]];};
              if(typeof x$0 !== "number" && 3654863 === x$0[1]){var x$1 = x$0[2], _bb_ = [0, x$1]; break a;}
              var _bb_ = _v_;
             }
             var
              _bc_ = caml_call2(Ppx_deriving_yojson_runtime[1], _bb_, _ba_);
            }
            var state$2 = [0, arg0, arg1, arg2, arg3, _bc_];
            xs$0 = xs$2;
            state$0 = state$2;
           }
          else{
           var xs$3 = xs$0[2], x$2 = _a__[2];
           a:
           {
            if(typeof x$2 !== "number" && -976970511 === x$2[1]){var x$3 = x$2[2], _bd_ = [0, x$3]; break a;}
            var _bd_ = _w_;
           }
           var state$3 = [0, arg0, arg1, _bd_, arg3, arg4];
           xs$0 = xs$3;
           state$0 = state$3;
          }
         else{
          var xs$4 = xs$0[2], x$4 = _a__[2];
          a:
          {
           if(typeof x$4 !== "number" && -976970511 === x$4[1]){var x$5 = x$4[2], _be_ = [0, x$5]; break a;}
           var _be_ = _x_;
          }
          var state$4 = [0, arg0, _be_, arg2, arg3, arg4];
          xs$0 = xs$4;
          state$0 = state$4;
         }
        else{
         var xs$5 = xs$0[2], x$6 = _a__[2];
         a:
         {
          if(typeof x$6 !== "number" && -976970511 === x$6[1]){var x$7 = x$6[2], _bf_ = [0, x$7]; break a;}
          var _bf_ = _y_;
         }
         var state$5 = [0, _bf_, arg1, arg2, arg3, arg4];
         xs$0 = xs$5;
         state$0 = state$5;
        }
       }
       return caml_call2
               (Ppx_deriving_yojson_runtime[1],
                arg4,
                function(arg4){
                 return caml_call2
                         (Ppx_deriving_yojson_runtime[1],
                          arg3,
                          function(arg3){
                           return caml_call2
                                   (Ppx_deriving_yojson_runtime[1],
                                    arg2,
                                    function(arg2){
                                     return caml_call2
                                             (Ppx_deriving_yojson_runtime[1],
                                              arg1,
                                              function(arg1){
                                               return caml_call2
                                                       (Ppx_deriving_yojson_runtime[1],
                                                        arg0,
                                                        function(arg0){
                                                         return [0, [0, arg0, arg1, arg2, arg3, arg4]];
                                                        });
                                              });
                                    });
                          });
                });
      }
      return _s_;
     });
   var
    edge_to_yojson = function _a9_(_a8_){return _a9_.fun(_a8_);},
    edge_of_yojson = function _a7_(_a6_){return _a7_.fun(_a6_);},
    cst_tp$0 = cst_tp$1,
    cst_label$0 = cst_label$1,
    cst_target = cst_target$0,
    cst_source = cst_source$0;
   caml_update_dummy
    (edge_to_yojson,
     function(x){
      var
       x$0 = x[4],
       fields = [0, [0, cst_tp$0, arrow_tp_to_yojson(x$0)], 0],
       x$1 = x[3],
       fields$0 = [0, [0, cst_label$0, [0, -976970511, x$1]], fields],
       x$2 = x[2],
       fields$1 = [0, [0, cst_target, [0, -976970511, x$2]], fields$0],
       x$3 = x[1],
       fields$2 = [0, [0, cst_source, [0, -976970511, x$3]], fields$1];
      return [0, 963043957, fields$2];
     });
   var
    _z_ = [1, cst_JargonSteps_edge],
    _A_ = [1, cst_JargonSteps_edge],
    _B_ = [1, cst_JargonSteps_edge_target],
    _C_ = [1, cst_JargonSteps_edge_source],
    _D_ = [1, cst_JargonSteps_edge_label];
   caml_update_dummy
    (edge_of_yojson,
     function(param){
      if(typeof param !== "number" && 963043957 === param[1]){
       var xs = param[2], xs$0 = xs, state = state$0;
       for(;;){
        var
         arg3 = state[4],
         arg2 = state[3],
         arg1 = state[2],
         arg0 = state[1];
        if(! xs$0) break;
        var _a1_ = xs$0[1], _a2_ = _a1_[1];
        if(_a2_ !== cst_label$1)
         if(_a2_ !== cst_source$0)
          if(_a2_ !== cst_target$0){
           if(_a2_ !== cst_tp$1) return _A_;
           var
            xs$1 = xs$0[2],
            x = _a1_[2],
            state$1 = [0, arg0, arg1, arg2, arrow_tp_of_yojson(x)];
           xs$0 = xs$1;
           state = state$1;
          }
          else{
           var xs$2 = xs$0[2], x$0 = _a1_[2];
           a:
           {
            if(typeof x$0 !== "number" && -976970511 === x$0[1]){var x$1 = x$0[2], _a3_ = [0, x$1]; break a;}
            var _a3_ = _B_;
           }
           var state$2 = [0, arg0, _a3_, arg2, arg3];
           xs$0 = xs$2;
           state = state$2;
          }
         else{
          var xs$3 = xs$0[2], x$2 = _a1_[2];
          a:
          {
           if(typeof x$2 !== "number" && -976970511 === x$2[1]){var x$3 = x$2[2], _a4_ = [0, x$3]; break a;}
           var _a4_ = _C_;
          }
          var state$3 = [0, _a4_, arg1, arg2, arg3];
          xs$0 = xs$3;
          state = state$3;
         }
        else{
         var xs$4 = xs$0[2], x$4 = _a1_[2];
         a:
         {
          if(typeof x$4 !== "number" && -976970511 === x$4[1]){var x$5 = x$4[2], _a5_ = [0, x$5]; break a;}
          var _a5_ = _D_;
         }
         var state$4 = [0, arg0, arg1, _a5_, arg3];
         xs$0 = xs$4;
         state = state$4;
        }
       }
       return caml_call2
               (Ppx_deriving_yojson_runtime[1],
                arg3,
                function(arg3){
                 return caml_call2
                         (Ppx_deriving_yojson_runtime[1],
                          arg2,
                          function(arg2){
                           return caml_call2
                                   (Ppx_deriving_yojson_runtime[1],
                                    arg1,
                                    function(arg1){
                                     return caml_call2
                                             (Ppx_deriving_yojson_runtime[1],
                                              arg0,
                                              function(arg0){return [0, [0, arg0, arg1, arg2, arg3]];});
                                    });
                          });
                });
      }
      return _z_;
     });
   var
    graph_to_yojson = function _a0_(_aZ_){return _a0_.fun(_aZ_);},
    graph_of_yojson = function _aY_(_aX_){return _aY_.fun(_aX_);};
   caml_update_dummy
    (graph_to_yojson,
     function(param){
      var
       arg1 = param[2],
       arg0 = param[1],
       _aW_ =
         [0,
          [0,
           848054398,
           caml_call2
            (Ppx_deriving_yojson_runtime[4],
             function(x){return caml_call1(edge_to_yojson, x);},
             arg1)],
          0];
      return [0,
              848054398,
              [0,
               [0,
                848054398,
                caml_call2
                 (Ppx_deriving_yojson_runtime[4],
                  function(x){return caml_call1(node_to_yojson, x);},
                  arg0)],
               _aW_]];
     });
   var
    _E_ = [1, cst_JargonSteps_graph],
    _F_ = [1, cst_JargonSteps_graph],
    _G_ = [1, cst_JargonSteps_graph];
   caml_update_dummy
    (graph_of_yojson,
     function(param){
      if(typeof param !== "number" && 848054398 === param[1]){
       var _aQ_ = param[2];
       if(_aQ_){
        var _aR_ = _aQ_[2];
        if(_aR_ && ! _aR_[2]){
         var arg1 = _aR_[1], arg0 = _aQ_[1];
         a:
         {
          var
           _aS_ =
             function(arg1){
              a:
              {
               var _aU_ = function(arg0){return [0, [0, arg0, arg1]];};
               if(typeof arg0 !== "number" && 848054398 === arg0[1]){
                var
                 xs = arg0[2],
                 _aV_ =
                   caml_call3
                    (Ppx_deriving_yojson_runtime[3],
                     function(x){return caml_call1(node_of_yojson, x);},
                     0,
                     xs);
                break a;
               }
               var _aV_ = _F_;
              }
              return caml_call2(Ppx_deriving_yojson_runtime[1], _aV_, _aU_);
             };
          if(typeof arg1 !== "number" && 848054398 === arg1[1]){
           var
            xs = arg1[2],
            _aT_ =
              caml_call3
               (Ppx_deriving_yojson_runtime[3],
                function(x){return caml_call1(edge_of_yojson, x);},
                0,
                xs);
           break a;
          }
          var _aT_ = _G_;
         }
         return caml_call2(Ppx_deriving_yojson_runtime[1], _aT_, _aS_);
        }
       }
      }
      return _E_;
     });
   var
    cst_Pair = "Pair",
    cst_InL = "InL",
    cst_InR = "InR",
    cst_Closure = "Closure",
    cst_Int = " Int: ",
    cst_Bool = " Bool: ",
    cst_Heap_Index = " Heap Index: ",
    cst_Code_Index = " Code Index: ",
    cst_Heap_Header = " Heap Header: ",
    cst_0 = "0";
   function string_of_heap_type(tp){
    switch(tp){
      case 0:
       return cst_Pair;
      case 1:
       return cst_InL;
      case 2:
       return cst_InR;
      default: return cst_Closure;
    }
   }
   function edges_of_heap(index, hi){
    if(typeof hi === "number") return 0;
    switch(hi[0]){
      case 0:
       return 0;
      case 1:
       return 0;
      case 2:
       var hi$0 = hi[1], _aP_ = caml_call1(Stdlib[33], hi$0);
       return [0, [0, caml_call1(Stdlib[33], index), _aP_, cst, 1], 0];
      case 3:
       return 0;
      default: return 0;
    }
   }
   function index_box(index){
    var _aO_ = caml_call2(Stdlib[28], index, cst$0);
    return caml_call2(Stdlib[28], cst$1, _aO_);
   }
   function node_of_heap_item(index, parent, heap_item){
    var s_index = caml_call1(Stdlib[33], index), index_b = index_box(s_index);
    if(typeof heap_item === "number")
     return [0, s_index, caml_call2(Stdlib[28], index_b, cst$2), parent, 2, 0];
    switch(heap_item[0]){
      case 0:
       var
        i = heap_item[1],
        _aE_ = caml_call1(Stdlib[33], i),
        _aF_ = caml_call2(Stdlib[28], cst_Int, _aE_);
       return [0,
               s_index,
               caml_call2(Stdlib[28], index_b, _aF_),
               parent,
               0,
               0];
      case 1:
       var
        b = heap_item[1],
        _aG_ = caml_call1(Stdlib[30], b),
        _aH_ = caml_call2(Stdlib[28], cst_Bool, _aG_);
       return [0,
               s_index,
               caml_call2(Stdlib[28], index_b, _aH_),
               parent,
               1,
               0];
      case 2:
       var
        i$0 = heap_item[1],
        _aI_ = caml_call1(Stdlib[33], i$0),
        _aJ_ = caml_call2(Stdlib[28], cst_Heap_Index, _aI_);
       return [0,
               s_index,
               caml_call2(Stdlib[28], index_b, _aJ_),
               parent,
               4,
               [0, i$0]];
      case 3:
       var
        i$1 = heap_item[1],
        _aK_ = caml_call1(Stdlib[33], i$1),
        _aL_ = caml_call2(Stdlib[28], cst_Code_Index, _aK_);
       return [0,
               s_index,
               caml_call2(Stdlib[28], index_b, _aL_),
               parent,
               3,
               [0, i$1]];
      default:
       var
        ht = heap_item[2],
        _aM_ = string_of_heap_type(ht),
        _aN_ = caml_call2(Stdlib[28], cst_Heap_Header, _aM_);
       return [0,
               s_index,
               caml_call2(Stdlib[28], index_b, _aN_),
               parent,
               5,
               0];
    }
   }
   function node_list_of_heap_item_list(index, header, n, param){
    if(! param) return 0;
    var heap_item = param[1];
    if(typeof heap_item !== "number" && 4 === heap_item[0]){
     var
      heap_item_list$0 = param[2],
      t = heap_item[2],
      i = heap_item[1],
      _aC_ =
        node_list_of_heap_item_list
         (index + 1 | 0,
          caml_call1(Stdlib[33], index),
          i - 1 | 0,
          heap_item_list$0),
      _aD_ = [4, i, t],
      header$1 = 0 < n ? header : cst$4;
     return [0, node_of_heap_item(index, header$1, _aD_), _aC_];
    }
    var
     heap_item_list = param[2],
     _aB_ =
       node_list_of_heap_item_list
        (index + 1 | 0, header, n - 1 | 0, heap_item_list),
     header$0 = 0 < n ? header : cst$3;
    return [0, node_of_heap_item(index, header$0, heap_item), _aB_];
   }
   function node_list_of_heap_item_list$0(heap_item_list){
    return node_list_of_heap_item_list(0, cst_0, 0, heap_item_list);
   }
   function graph_of_heap(heap){
    var
     _az_ = caml_call2(Stdlib_list[20], edges_of_heap, heap),
     _aA_ = caml_call1(Stdlib_list[14], _az_);
    return [0, node_list_of_heap_item_list$0(heap), _aA_];
   }
   var
    ret_to_yojson = function _ay_(_ax_){return _ay_.fun(_ax_);},
    ret_of_yojson = function _aw_(_av_){return _aw_.fun(_av_);},
    cst_status = cst_status$0,
    cst_hp = cst_hp$0,
    cst_cp = cst_cp$0,
    cst_fp = cst_fp$0,
    cst_sp = cst_sp$0,
    cst_heap_graph = cst_heap_graph$0,
    cst_heap = cst_heap$0,
    cst_stack = cst_stack$0;
   caml_update_dummy
    (ret_to_yojson,
     function(x){
      var
       x$0 = x[8],
       fields = [0, [0, cst_status, [0, -976970511, x$0]], 0],
       x$1 = x[7],
       fields$0 = [0, [0, cst_hp, [0, 3654863, x$1]], fields],
       x$2 = x[6],
       fields$1 = [0, [0, cst_cp, [0, 3654863, x$2]], fields$0],
       x$3 = x[5],
       fields$2 = [0, [0, cst_fp, [0, 3654863, x$3]], fields$1],
       x$4 = x[4],
       fields$3 = [0, [0, cst_sp, [0, 3654863, x$4]], fields$2],
       x$5 = x[3],
       fields$4 =
         [0, [0, cst_heap_graph, caml_call1(graph_to_yojson, x$5)], fields$3],
       x$6 = x[2],
       fields$5 =
         [0,
          [0,
           cst_heap,
           [0,
            848054398,
            caml_call2
             (Ppx_deriving_yojson_runtime[4],
              function(x){return [0, -976970511, x];},
              x$6)]],
          fields$4],
       x$7 = x[1],
       fields$6 =
         [0,
          [0,
           cst_stack,
           [0,
            848054398,
            caml_call2
             (Ppx_deriving_yojson_runtime[4],
              function(x){return [0, -976970511, x];},
              x$7)]],
          fields$5];
      return [0, 963043957, fields$6];
     });
   var
    _H_ = [1, cst_JargonSteps_ret],
    _I_ = [1, cst_JargonSteps_ret],
    _J_ = [1, cst_JargonSteps_ret_status],
    _K_ = [1, cst_JargonSteps_ret_stack],
    _L_ = [1, cst_JargonSteps_ret_stack],
    _M_ = [1, cst_JargonSteps_ret_sp],
    _N_ = [1, cst_JargonSteps_ret_hp],
    _O_ = [1, cst_JargonSteps_ret_heap],
    _P_ = [1, cst_JargonSteps_ret_heap],
    _Q_ = [1, cst_JargonSteps_ret_fp],
    _R_ = [1, cst_JargonSteps_ret_cp];
   caml_update_dummy
    (ret_of_yojson,
     function(param){
      if(typeof param !== "number" && 963043957 === param[1]){
       var xs = param[2], xs$0 = xs, state = state$1;
       for(;;){
        var
         arg7 = state[8],
         arg6 = state[7],
         arg5 = state[6],
         arg4 = state[5],
         arg3 = state[4],
         arg2 = state[3],
         arg1 = state[2],
         arg0 = state[1];
        if(! xs$0) break;
        var _am_ = xs$0[1], _an_ = _am_[1];
        if(_an_ !== cst_cp$0)
         if(_an_ !== cst_fp$0)
          if(_an_ !== cst_heap$0)
           if(_an_ !== cst_heap_graph$0)
            if(_an_ !== cst_hp$0)
             if(_an_ !== cst_sp$0)
              if(_an_ !== cst_stack$0){
               if(_an_ !== cst_status$0) return _I_;
               var xs$1 = xs$0[2], x = _am_[2];
               a:
               {
                if(typeof x !== "number" && -976970511 === x[1]){var x$0 = x[2], _ao_ = [0, x$0]; break a;}
                var _ao_ = _J_;
               }
               var
                state$0 = [0, arg0, arg1, arg2, arg3, arg4, arg5, arg6, _ao_];
               xs$0 = xs$1;
               state = state$0;
              }
              else{
               var xs$2 = xs$0[2], x$1 = _am_[2];
               a:
               {
                if(typeof x$1 !== "number" && 848054398 === x$1[1]){
                 var
                  xs$3 = x$1[2],
                  _ap_ =
                    caml_call3
                     (Ppx_deriving_yojson_runtime[3],
                      function(param){
                       if(typeof param !== "number" && -976970511 === param[1]){var x = param[2]; return [0, x];}
                       return _L_;
                      },
                      0,
                      xs$3);
                 break a;
                }
                var _ap_ = _K_;
               }
               var
                state$2 = [0, _ap_, arg1, arg2, arg3, arg4, arg5, arg6, arg7];
               xs$0 = xs$2;
               state = state$2;
              }
             else{
              var xs$4 = xs$0[2], x$2 = _am_[2];
              a:
              {
               if(typeof x$2 !== "number" && 3654863 === x$2[1]){var x$3 = x$2[2], _aq_ = [0, x$3]; break a;}
               var _aq_ = _M_;
              }
              var
               state$3 = [0, arg0, arg1, arg2, _aq_, arg4, arg5, arg6, arg7];
              xs$0 = xs$4;
              state = state$3;
             }
            else{
             var xs$5 = xs$0[2], x$4 = _am_[2];
             a:
             {
              if(typeof x$4 !== "number" && 3654863 === x$4[1]){var x$5 = x$4[2], _ar_ = [0, x$5]; break a;}
              var _ar_ = _N_;
             }
             var
              state$4 = [0, arg0, arg1, arg2, arg3, arg4, arg5, _ar_, arg7];
             xs$0 = xs$5;
             state = state$4;
            }
           else{
            var
             xs$6 = xs$0[2],
             x$6 = _am_[2],
             state$5 =
               [0,
                arg0,
                arg1,
                caml_call1(graph_of_yojson, x$6),
                arg3,
                arg4,
                arg5,
                arg6,
                arg7];
            xs$0 = xs$6;
            state = state$5;
           }
          else{
           var xs$7 = xs$0[2], x$7 = _am_[2];
           a:
           {
            if(typeof x$7 !== "number" && 848054398 === x$7[1]){
             var
              xs$8 = x$7[2],
              _as_ =
                caml_call3
                 (Ppx_deriving_yojson_runtime[3],
                  function(param){
                   if(typeof param !== "number" && -976970511 === param[1]){var x = param[2]; return [0, x];}
                   return _P_;
                  },
                  0,
                  xs$8);
             break a;
            }
            var _as_ = _O_;
           }
           var state$6 = [0, arg0, _as_, arg2, arg3, arg4, arg5, arg6, arg7];
           xs$0 = xs$7;
           state = state$6;
          }
         else{
          var xs$9 = xs$0[2], x$8 = _am_[2];
          a:
          {
           if(typeof x$8 !== "number" && 3654863 === x$8[1]){var x$9 = x$8[2], _at_ = [0, x$9]; break a;}
           var _at_ = _Q_;
          }
          var state$7 = [0, arg0, arg1, arg2, arg3, _at_, arg5, arg6, arg7];
          xs$0 = xs$9;
          state = state$7;
         }
        else{
         var xs$10 = xs$0[2], x$10 = _am_[2];
         a:
         {
          if(typeof x$10 !== "number" && 3654863 === x$10[1]){var x$11 = x$10[2], _au_ = [0, x$11]; break a;}
          var _au_ = _R_;
         }
         var state$8 = [0, arg0, arg1, arg2, arg3, arg4, _au_, arg6, arg7];
         xs$0 = xs$10;
         state = state$8;
        }
       }
       return caml_call2
               (Ppx_deriving_yojson_runtime[1],
                arg7,
                function(arg7){
                 return caml_call2
                         (Ppx_deriving_yojson_runtime[1],
                          arg6,
                          function(arg6){
                           return caml_call2
                                   (Ppx_deriving_yojson_runtime[1],
                                    arg5,
                                    function(arg5){
                                     return caml_call2
                                             (Ppx_deriving_yojson_runtime[1],
                                              arg4,
                                              function(arg4){
                                               return caml_call2
                                                       (Ppx_deriving_yojson_runtime[1],
                                                        arg3,
                                                        function(arg3){
                                                         return caml_call2
                                                                 (Ppx_deriving_yojson_runtime[1],
                                                                  arg2,
                                                                  function(arg2){
                                                                   return caml_call2
                                                                           (Ppx_deriving_yojson_runtime[1],
                                                                            arg1,
                                                                            function(arg1){
                                                                             return caml_call2
                                                                                     (Ppx_deriving_yojson_runtime[1],
                                                                                      arg0,
                                                                                      function(arg0){
                                                                                       return [0,
                                                                                               [0, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7]];
                                                                                      });
                                                                            });
                                                                  });
                                                        });
                                              });
                                    });
                          });
                });
      }
      return _H_;
     });
   var
    cst_ASSIGN = "\tASSIGN",
    cst_SWAP = "\tSWAP",
    cst_POP = "\tPOP",
    cst_FST = "\tFST",
    cst_SND = "\tSND",
    cst_DEREF = "\tDEREF",
    cst_APPLY = "\tAPPLY",
    cst_RETURN = "\tRETURN",
    cst_MK_PAIR = "\tMK_PAIR",
    cst_MK_INL = "\tMK_INL",
    cst_MK_INR = "\tMK_INR",
    cst_MK_REF = "\tMK_REF",
    cst_HALT = "\tHALT",
    cst_PUSH = "\tPUSH ",
    cst_LOOKUP = "\tLOOKUP ",
    cst_UNARY = "\tUNARY ",
    cst_OPER = "\tOPER ",
    cst_MK_CLOSURE = "MK_CLOSURE(",
    cst_TEST = "\tTEST ",
    cst_CASE = "\tCASE ",
    cst_GOTO = "\tGOTO ",
    cst_LABEL = "LABEL ";
   function string_lists_of_vm_state(vm_state){
    var
     heap = vm_state[5],
     stack = vm_state[4],
     sp = vm_state[7],
     fp = vm_state[8],
     cp = vm_state[9],
     hp = vm_state[10],
     status = vm_state[11],
     _ag_ = caml_call3(Stdlib_array[7], heap, 0, hp),
     heap_list = caml_call1(Stdlib_array[11], _ag_),
     _ah_ = caml_call1(Slanglib_Jargon[10], status),
     _ai_ = graph_of_heap(heap_list),
     _aj_ = caml_call2(Stdlib_list[19], Slanglib_Jargon[11], heap_list),
     _ak_ = caml_call3(Stdlib_array[7], stack, 0, sp),
     _al_ = caml_call1(Stdlib_array[11], _ak_);
    return [0,
            caml_call2(Stdlib_list[19], Slanglib_Jargon[9], _al_),
            _aj_,
            _ai_,
            sp,
            fp,
            cp,
            hp,
            _ah_];
   }
   function driver(n, vm){
    var
     state = string_lists_of_vm_state(vm),
     _af_ =
       1 === vm[11]
        ? driver(n + 1 | 0, caml_call1(Slanglib_Jargon[2], vm))
        : 0;
    return [0, state, _af_];
   }
   function steps(exp){
    var
     c = caml_call1(Slanglib_Jargon[5], exp),
     _ad_ = caml_call1(Slanglib_Jargon[19], c),
     vm_state = caml_call1(Slanglib_Jargon[18], _ad_),
     _ae_ = driver(1, vm_state),
     _ac_ = caml_call1(Stdlib_array[11], vm_state[6]);
    return [0, caml_call2(Stdlib_list[19], Slanglib_Jargon[13], _ac_), _ae_];
   }
   function string_list_of_instruction(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cst_ASSIGN;
       case 1:
        return cst_SWAP;
       case 2:
        return cst_POP;
       case 3:
        return cst_FST;
       case 4:
        return cst_SND;
       case 5:
        return cst_DEREF;
       case 6:
        return cst_APPLY;
       case 7:
        return cst_RETURN;
       case 8:
        return cst_MK_PAIR;
       case 9:
        return cst_MK_INL;
       case 10:
        return cst_MK_INR;
       case 11:
        return cst_MK_REF;
       default: return cst_HALT;
     }
    switch(param[0]){
      case 0:
       var v = param[1], _S_ = caml_call1(Slanglib_Jargon[9], v);
       return caml_call2(Stdlib[28], cst_PUSH, _S_);
      case 1:
       var p = param[1], _T_ = caml_call1(Slanglib_Jargon[16], p);
       return caml_call2(Stdlib[28], cst_LOOKUP, _T_);
      case 2:
       var op = param[1], _U_ = caml_call1(Slanglib_Ast[3], op);
       return caml_call2(Stdlib[28], cst_UNARY, _U_);
      case 3:
       var op$0 = param[1], _V_ = caml_call1(Slanglib_Ast[4], op$0);
       return caml_call2(Stdlib[28], cst_OPER, _V_);
      case 4:
       var
        n = param[2],
        loc = param[1],
        _W_ = caml_call1(Stdlib[33], n),
        _X_ = caml_call2(Stdlib[28], _W_, cst$5),
        _Y_ = caml_call2(Stdlib[28], cst$6, _X_),
        _Z_ = caml_call1(Slanglib_Jargon[15], loc),
        ___ = caml_call2(Stdlib[28], _Z_, _Y_);
       return caml_call2(Stdlib[28], cst_MK_CLOSURE, ___);
      case 5:
       var l = param[1], _$_ = caml_call1(Slanglib_Jargon[15], l);
       return caml_call2(Stdlib[28], cst_TEST, _$_);
      case 6:
       var l$0 = param[1], _aa_ = caml_call1(Slanglib_Jargon[15], l$0);
       return caml_call2(Stdlib[28], cst_CASE, _aa_);
      case 7:
       var l$1 = param[1], _ab_ = caml_call1(Slanglib_Jargon[15], l$1);
       return caml_call2(Stdlib[28], cst_GOTO, _ab_);
      default:
       var l$2 = param[1]; return caml_call2(Stdlib[28], cst_LABEL, l$2);
    }
   }
   var
    string_list_of_code =
      caml_call1(Stdlib_list[19], string_list_of_instruction),
    Dune_exe_JargonSteps =
      [0,
       node_tp_to_yojson,
       node_tp_of_yojson,
       arrow_tp_to_yojson,
       arrow_tp_of_yojson,
       node_to_yojson,
       node_of_yojson,
       edge_to_yojson,
       edge_of_yojson,
       graph_to_yojson,
       graph_of_yojson,
       string_of_heap_type,
       edges_of_heap,
       index_box,
       node_of_heap_item,
       node_list_of_heap_item_list,
       node_list_of_heap_item_list$0,
       graph_of_heap,
       ret_to_yojson,
       ret_of_yojson,
       ret_of_yojson,
       string_lists_of_vm_state,
       driver,
       steps,
       string_list_of_instruction,
       string_list_of_code];
   runtime.caml_register_global
    (135, Dune_exe_JargonSteps, "Dune__exe__JargonSteps");
   return;
  }
  (globalThis));

//# 5 ".export.eobjs/jsoo/dune__exe__Export.cmo.js"
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_EGG = "EGG",
    caml_js_wrap_meth_callback = runtime.caml_js_wrap_meth_callback,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Slanglib_Interp_0 = global_data.Slanglib__Interp_0,
    Ppx_deriving_yojson_runtime = global_data.Ppx_deriving_yojson_runtime,
    Dune_exe_Interp2 = global_data.Dune__exe__Interp2,
    Slanglib_Interp_3 = global_data.Slanglib__Interp_3,
    Dune_exe_Interp3 = global_data.Dune__exe__Interp3,
    Slanglib_Jargon = global_data.Slanglib__Jargon,
    Dune_exe_JargonSteps = global_data.Dune__exe__JargonSteps,
    Slanglib_Interp_2 = global_data.Slanglib__Interp_2;
   global_data.CamlinternalOO;
   var
    Slanglib_Front_end = global_data.Slanglib__Front_end,
    Yojson_Safe = global_data.Yojson__Safe,
    Slanglib_Errors = global_data.Slanglib__Errors,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    cst_Error = '"Error"',
    _a_ = [0, 848054398, [0, [0, -976970511, cst_EGG], 0]],
    _b_ = [1, "Export.egg"],
    _c_ = [0, 0];
   function wrap(interp, str){
    try{var _A_ = caml_call1(interp, str); return _A_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Slanglib_Errors[1])
      throw caml_maybe_attach_backtrace(exn, 0);
     var s = exn[2];
     return s;
    }
   }
   function wrap_yojson_string(f){
    try{
     var
      _x_ = caml_call1(f, 0),
      _y_ = caml_call5(Yojson_Safe[5], 0, 0, 0, 0, _x_),
      _w_ = _y_;
    }
    catch(_z_){
     var _v_ = caml_wrap_exception(_z_);
     if(_v_[1] !== Slanglib_Errors[1])
      throw caml_maybe_attach_backtrace(_v_, 0);
     var _w_ = cst_Error;
    }
    return caml_jsstring_of_string(_w_);
   }
   function yojson_of_instructions(x){
    var
     eta =
       [0,
        848054398,
        caml_call2
         (Ppx_deriving_yojson_runtime[4],
          function(x){return [0, -976970511, x];},
          x)],
     arg = Yojson_Safe[5];
    return caml_call5(arg, 0, 0, 0, 0, eta);
   }
   function egg_to_yojson(param){return _a_;}
   function egg_of_yojson(param){
    if(typeof param !== "number" && 848054398 === param[1]){
     var _t_ = param[2];
     if(_t_){
      var _u_ = _t_[1];
      if
       (typeof _u_ !== "number"
        && -976970511 === _u_[1] && _u_[2] === cst_EGG && ! _t_[2])
       return _c_;
     }
    }
    return _b_;
   }
   function frontend(str){
    return caml_call1
            (Slanglib_Front_end[2], runtime.caml_string_of_jsstring(str));
   }
   function t13(param, str){
    return caml_jsstring_of_string
            (wrap
              (function(x){
                caml_call1(Slanglib_Jargon[17], 0);
                var
                 _r_ = frontend(x),
                 _s_ = caml_call1(Slanglib_Jargon[5], _r_);
                return yojson_of_instructions
                        (caml_call1(Dune_exe_JargonSteps[25], _s_));
               },
               str));
   }
   function t12(param, str){
    return caml_jsstring_of_string
            (wrap
              (function(x){
                caml_call1(Slanglib_Interp_3[20], 0);
                var
                 _p_ = frontend(x),
                 _q_ = caml_call1(Slanglib_Interp_3[4], _p_);
                return yojson_of_instructions
                        (caml_call1(Dune_exe_Interp3[6], _q_));
               },
               str));
   }
   function t11(param, str){
    return caml_jsstring_of_string
            (wrap
              (function(x){
                var
                 _n_ = frontend(x),
                 _o_ = caml_call1(Slanglib_Interp_2[5], _n_);
                return yojson_of_instructions
                        (caml_call1(Dune_exe_Interp2[5], _o_));
               },
               str));
   }
   function t10(param, str){
    return wrap_yojson_string
            (function(param){
              caml_call1(Slanglib_Jargon[17], 0);
              var
               _l_ = frontend(str),
               param$0 = caml_call1(Dune_exe_JargonSteps[23], _l_),
               _0 = Dune_exe_JargonSteps[18],
               arg1 = param$0[2],
               arg0 = param$0[1],
               _m_ =
                 [0,
                  [0,
                   848054398,
                   caml_call2
                    (Ppx_deriving_yojson_runtime[4],
                     function(x){return caml_call1(_0, x);},
                     arg1)],
                  0];
              return [0,
                      848054398,
                      [0,
                       [0,
                        848054398,
                        caml_call2
                         (Ppx_deriving_yojson_runtime[4],
                          function(x){return [0, -976970511, x];},
                          arg0)],
                       _m_]];
             });
   }
   function t9(param, str){
    return wrap_yojson_string
            (function(param){
              caml_call1(Slanglib_Interp_3[20], 0);
              var
               _j_ = frontend(str),
               param$0 = caml_call1(Dune_exe_Interp3[4], _j_),
               arg1 = param$0[2],
               arg0 = param$0[1];
              return [0,
                      848054398,
                      [0,
                       [0, -976970511, arg0],
                       [0,
                        [0,
                         848054398,
                         caml_call2
                          (Ppx_deriving_yojson_runtime[4],
                           function(param){
                            var
                             arg2 = param[3],
                             arg1 = param[2],
                             arg0 = param[1],
                             _k_ =
                               [0,
                                [0,
                                 848054398,
                                 caml_call2
                                  (Ppx_deriving_yojson_runtime[4],
                                   function(x){return [0, -976970511, x];},
                                   arg2)],
                                0];
                            return [0,
                                    848054398,
                                    [0,
                                     [0, 3654863, arg0],
                                     [0,
                                      [0,
                                       848054398,
                                       caml_call2
                                        (Ppx_deriving_yojson_runtime[4],
                                         function(x){return [0, -976970511, x];},
                                         arg1)],
                                      _k_]]];
                           },
                           arg1)],
                        0]]];
             });
   }
   function t8(param, str){
    return wrap_yojson_string
            (function(param){
              var
               _f_ = frontend(str),
               _g_ = caml_call1(Dune_exe_Interp2[1], _f_),
               x = caml_call1(Dune_exe_Interp2[3], _g_);
              return [0,
                      848054398,
                      caml_call2
                       (Ppx_deriving_yojson_runtime[4],
                        function(param){
                         var
                          arg2 = param[3],
                          arg1 = param[2],
                          arg0 = param[1],
                          _h_ =
                            [0,
                             [0,
                              848054398,
                              caml_call2
                               (Ppx_deriving_yojson_runtime[4],
                                function(x){return [0, -976970511, x];},
                                arg2)],
                             0],
                          _i_ =
                            [0,
                             [0,
                              848054398,
                              caml_call2
                               (Ppx_deriving_yojson_runtime[4],
                                function(x){return [0, -976970511, x];},
                                arg1)],
                             _h_];
                         return [0,
                                 848054398,
                                 [0,
                                  [0,
                                   848054398,
                                   caml_call2
                                    (Ppx_deriving_yojson_runtime[4],
                                     function(x){return [0, -976970511, x];},
                                     arg0)],
                                  _i_]];
                        },
                        x)];
             });
   }
   function t7(param, str){
    return caml_jsstring_of_string
            (wrap
              (function(x){
                var
                 _d_ = frontend(x),
                 _e_ = caml_call1(Slanglib_Interp_0[3], _d_);
                return caml_call1(Slanglib_Interp_0[1], _e_);
               },
               str));
   }
   caml_call2
    (Js_of_ocaml_Js[50],
     "slang",
     {interp0: caml_js_wrap_meth_callback(t7),
      interp2: caml_js_wrap_meth_callback(t8),
      interp3: caml_js_wrap_meth_callback(t9),
      jargon: caml_js_wrap_meth_callback(t10),
      interp2Code: caml_js_wrap_meth_callback(t11),
      interp3Code: caml_js_wrap_meth_callback(t12),
      jargonCode: caml_js_wrap_meth_callback(t13)});
   var
    Dune_exe_Export =
      [0,
       wrap,
       wrap_yojson_string,
       yojson_of_instructions,
       egg_to_yojson,
       egg_of_yojson,
       egg_of_yojson,
       frontend];
   runtime.caml_register_global(29, Dune_exe_Export, "Dune__exe__Export");
   return;
  }
  (globalThis));

//# 5 "../.js/default/stdlib/std_exit.cmo.js"
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib;
   caml_call1(Stdlib[103], 0);
   var Std_exit = [0];
   runtime.caml_register_global(1, Std_exit, "Std_exit");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
